repo,file,commit,change_type,diff,change_count,condition_type,commit_subject,commit_body,linked_issues,linked_issues_count,issue_titles,issue_bodies,issue_states,issue_comments_count,issue_comments,MAN_ANNOTATED,COMMIT_DESC_ENOUGH,MAN_LINKED_ISSUES,DESC_ISSUE,ISSUE_NAME_CHNG_AFTER_CODE_IMP
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java,030bc224e30699a91e33e27a6d9782803afbd0d4,Condition_Change,"-			if (!this.inputStream.isFinished() && this.inputStream.isReady()) {
+			if (this.inputStream.isReady() && !this.inputStream.isFinished()) {",2,condition,Invert the check for ServletInputStream.isReady(),"When checking whether there is still request body the first method
that should be checked is ServletInputStream.isReady() and then
ServletInputStream.isFinished(). ServletInputStream.isReady() is the active
method whereas the ServletInputStream.isFinished() is not.
It is important to call ServletInputStream.isReady() because if it returns
false it will schedule a dispatch and if the request body is already read it will
send onAllDataRead event.

Issue: SPR-16521
",[],0,[],[],[],[],[],1,1,21064,0,0
spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java,0f70ac74cd07228bcf67db925b1c01c6b17fc092,Condition_Change,"-				if (constructor.getParameterCount() == 9) {
+				if (constructor.getParameterTypes().length == 9) {",2,condition,Polish,"Constructor.getParameterCount is JDK8+ only!
",[],0,[],[],[],[],[],1,1,n/a,n/a,n/a
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java,1b1682eacd9c8aabbb86f24dc9c54070f3dd18b4,Condition_Change,"-		if (!c1.isInterface() && c1 != Object.class) {
+		if (!c1.isInterface() && c1 != Object.class && !Factory.class.isAssignableFrom(c2)) {",2,condition,Narrow early initialization of CGLIB method proxies (for AOT processing),"Do not trigger early initialization on Factory classes (e.g. AOP proxies)

See gh-29107
",['https://api.github.com/repos/spring-projects/spring-framework/issues/29107'],1,['CGLIB proxies are not used at runtime on `@Configuration` classes in AOT mode'],"['Consider the following configuration class:\r\n\r\n```java\r\n@Configuration\r\npublic class MyConfiguration {\r\n\t@Bean\r\n\tA a() { return new A(); }\r\n\r\n\t@Bean\r\n\tB b() { return new B(this.a()); }\r\n\t\r\n\tstatic class A {\r\n\t\tpublic A() { System.out.println(""A constructor""); }\r\n\t}\r\n\r\n\tstatic class B {\r\n\t\tpublic B(A a) { System.out.println(""B constructor""); }\r\n\t}\r\n}\r\n```\r\n\r\nOn JVM in regular mode, it prints:\r\n\r\n```\r\nA constructor\r\nB constructor\r\n```\r\n\r\nOn JVM in AOT mode or native, while it seems CGLIB proxies are generated correctly at build time,  but they seems not used since it prints:\r\n\r\n```\r\nA constructor\r\nA constructor\r\nB constructor\r\n```\r\n\r\nThe code generated AOT maybe needs to be updated to leverage those CGLIB proxies.']",['closed'],[2],"[""We need to swap the creation of the raw class to the cglib proxy. I was hoping I could avoid having to change code generation for this but it turns out that there isn't a way to achieve this using an instance supplier. \r\n\r\nI've a proposal in [3b8bcdf](https://github.com/snicoll/spring-framework/commit/3b8bcdfe281b606a1ce8ee354b0cef56913ccfcd).\r\n\r\nThis is blocked by https://github.com/spring-projects/spring-boot/issues/32304 and, to some extent, https://github.com/spring-projects/spring-framework/issues/29141"", 'I have it working but I think it needs a bit more work to test it correctly. ']",1,1,29107,0,0
spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java,03b409f891f8ae3e2e22fc347695d07211cf5b8e,Remove_Condition,"-		for (Advisor advisor : advisors) {
-			proxyFactory.addAdvisor(advisor);
-		}
-
+		
+		proxyFactory.addAdvisors(advisors);
+",7,iteration,Use dedicated addAdvisors,"See gh-1469
",['https://api.github.com/repos/spring-projects/spring-framework/issues/1469'],1,['replace for  with addAdvisors method'],['replace the code \r\nfor (Advisor advisor : advisors) {\r\n\t\t\tproxyFactory.addAdvisor(advisor);\r\n\t\t}\r\nwith\r\nproxyFactory.addAdvisors(advisors)'],['closed'],[2],"['@IAMTJW Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1469)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1469) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@IAMTJW Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1469)!']",,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java,03d6350e4b3c7e23e3cc84bf3f261f2c53b5b1e9,Condition_Change,"-		if (providedArgs == null || parameter.hasParameterAnnotations()) {
+		if (providedArgs == null) {",2,condition,Fix issue with resolution of WebDataBinder argument,"There is usually not need to put annotations on a WebDataBinder
argument in an `@InitBinder` method. However, the presence of any
annotation prevented the successful resolution of the argument.
This fix addresses the issue.

Issue: SPR-8946
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java,050e79e45ed0cdab1a4e3f522e2e9b601a13d94d,Add_Condition,"+		try {
+			int status = response.getServletResponse().getStatus();
+			if (status < 200 || status > 299) {
+				return;
+			}
+		}
+		catch (Throwable ex) {
+		}
+",9,condition,Skip Content-Disposition header if status != 2xx,"Issue: SPR-13588
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java,1eed71bb1d848935d47f8b71538a165aed48981d,Add_Condition,"-			Assert.state(compilablePropertyAccessor != null, ""No cached read accessor"");
+			Assert.state(compilablePropertyAccessor != null, ""No cached PropertyAccessor for reading"");",2,iteration,Polishing,,[],0,[],[],[],[],[],1,1,n/a,n/a,n/a
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,052bbcc53031bd48dc76d070ba862f5293618600,Condition_Change,"+		Class<?>[] parameterTypes = null;
-			Class<?>[] ifcs = current.getInterfaces();
-			for (Class<?> ifc : ifcs) {
+			if (parameterTypes == null) {
+				parameterTypes = method.getParameterTypes();
+			}
+			for (Class<?> ifc : current.getInterfaces()) {
-					return ifc.getMethod(method.getName(), method.getParameterTypes());
+					return ifc.getMethod(method.getName(), parameterTypes);",9,iteration,Cache parameter types array in ClassUtils.findInterfaceMethodIfPossible(),,[],0,[],[],[],[],[],0,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,05683fed7a3f9b51c4a251363504b0aef12826d3,Condition_Change,"-		if (beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {
+		if (!IN_NATIVE_IMAGE && beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {",2,condition,Skip LoadTimeWeaverAwareProcessor with native images,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java,05b15812bbffc86cd3ee4c664e2eccfb4ec0092b,Condition_Change,"-		if (attribute instanceof Constructor<?>[]) {
-			return (Constructor<?>[]) attribute;
+		if (attribute instanceof Constructor<?>[] constructors) {
+			return constructors;",4,condition,Apply instanceof pattern matching in RootBeanDefinition,"Closes gh-32520
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32520'],1,['Apply instanceof pattern matching in `RootBeanDefinition`'],['This pull request applies the instanceof pattern matching in the RootBeanDefinition class. This enhancement will improve code readability.'],['closed'],[3],"['Hi @FelixDes,\r\n\r\nIn the future, please do your best to collect multiple related changes in a PR, since we generally do not like to merge PRs that effectively change a single line of code for style-related reasons.', 'This has been merged into `main`.\r\n\r\nThanks', ""Thanks a lot for your advice. I'm very glad to see that my PR has been accepted.""]",,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java,05d616240ad08f69926368f5549b6472c27a0d5c,Add_Condition,"+		else if (contentType != null && contentType.isCompatibleWith(MediaType.APPLICATION_JSON)) {
+			return StandardCharsets.UTF_8;
+		}",3,condition,StringHttpMessageConverter defaults to UTF-8 for JSON,"Issue: SPR-17568
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,19a1477228b8ed75926a15358e3253eb7ffa492e,Condition_Change,"-					else if (nonSyntheticConstructors == 2 && primaryConstructor != null && defaultConstructor != null) {
+					else if (nonSyntheticConstructors == 2 && primaryConstructor != null
+							&& defaultConstructor != null && !primaryConstructor.equals(defaultConstructor)) {",3,condition,Fix Kotlin bean w/ default + secondary ctors handling,"This commit polishes SPR-16022 fix in order to handle correctly
the case when primary and default constructors are the same when
a secondary constructor is defined.

Issue: SPR-16289
",[],0,[],[],[],[],[],1,1,"20571, 20836",0,0
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,2624b909060e0967e16771de7a35261decd5a4a9,Add_Condition,"+			if (method == null) {
+				return true;
+			}",3,condition,Avoid NPE in AutowiredAnnotationBeanPostProcessor,"Prior to this change, AABPP#determineRequiredStatus never checked the
return value of ReflectionUtils#findMethod when searching for a
'#required' attribute. This call returns null for annotations such as
@Inject, @Value and @Resource, and subsequently causes a
NullPointerException to be thrown when ReflectionUtils#invokeMethod is
called. The NPE is caught immediately and #determineRequiredStatus
returns defaulting to true, but this this approach is inefficient. It
is also problematic for users who have set breakpoints on NPE -- they
end up debugging into Spring internals, which is a false positive.

This commit checks the return value of of ReflectionUtils#findMethod,
and in the case of null, eagerly returns true.  There is no change to
external behavior, simply a more efficient and debugging-friendly
implementation.

Existing test cases already cover this change, given that it is purely
a refactoring.

Issue: SPR-9316
",[],0,[],[],[],[],[],1,0,"14001, 13954",1,0
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,07a1aea9c73ef9859b7405c7c7d8e1905427e229,Condition_Change,"-			if (result instanceof Object[] array) {
+			if (result instanceof Object[] array && array.length > 1) {",2,condition,Skip array sort when the length of array not greater than 1,"Closes gh-30934
",['https://api.github.com/repos/spring-projects/spring-framework/issues/30934'],1,['Skip array sort when the length of array not greater than 1'],"[""Performance optimization(`org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveMultipleBeans`):\r\n\r\nFor the sorting condition of `Collection`  is  `result instanceof List<?> list && list.size() > 1`, when the size of collection isn't greater than 1, it will skip sorting.\r\n\r\nSimilarly, skip array sort when the length of array not greater than 1.\r\n""]",['closed'],[1],['This has been merged into `6.0.x` and `main`.\r\n\r\nThanks'],,,,,
spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java,085565a771270f7a124186e7691381534018dd03,Add_Condition,"+import org.hibernate.bytecode.enhance.spi.EnhancementContext;
+
+					@Override
+					public void pushClassTransformer(EnhancementContext enhancementContext) {
+						if (!NativeDetector.inNativeImage()) {
+							super.pushClassTransformer(enhancementContext);
+						}
+					}",8,condition,Skip class transformer in PersistenceUnitInfoDescriptor for native images,"In order to restore native support with Hibernate 6.2, this
change updates the PersistenceUnitInfoDescriptor instance
created by SpringHibernateJpaPersistenceProvider in order to
skip the class transformer for native images.

Closes gh-30492
",['https://api.github.com/repos/spring-projects/spring-framework/issues/30492'],1,['Skip class transformer in `PersistenceUnitInfoDescriptor` for native images'],"['Due to [this change](https://github.com/hibernate/hibernate-orm/commit/800873c43d44bc954cef8f4abb11bfe4719570a8) in Hibernate 6.2, Bytebuddy class enhancement is now invoked via `SpringHibernateJpaPersistenceProvider` -> `PersistenceUnitInfoDescriptor` - > `EnhancingClassTransformerImpl` -> `BytecodeProviderInitiator.buildDefaultBytecodeProvider()`, breaking Hibernate integration when compiling to native images.\r\n\r\nThis change updates the `PersistenceUnitInfoDescriptor` instance created by `SpringHibernateJpaPersistenceProvider` in order to skip the class transformer with native.\r\n\r\nFootprint optimization will require completing #29549 is is outside of the scope of this change.']",['closed'],[8],"['See also related issues:\r\n- https://github.com/oracle/graalvm-reachability-metadata/pull/286\r\n- https://github.com/spring-projects/spring-boot/issues/35423', 'Hi @sdeleuze if I use Spring Framework 6.0.10-SNAPSHOT should this issue be resolved? Or is there more to it?', ""I opened oracle/graalvm-reachability-metadata#297 a little while ago, as this fix on its own doesn't seem to fix the issue."", '@edeandrea using Spring Framework 6.0.10-SNAPSHOT should be enough, provided the maven-native-plugin uses the latest available reachability metadata version (0.3.1 at the time of writing).\r\n\r\nSee my comment https://github.com/spring-projects/spring-boot/issues/35659#issuecomment-1566804157 for more details.', ""Thank you @davidbilge but that unfortunately didn't work."", ""> Thank you @davidbilge but that unfortunately didn't work.\r\n\r\nDid you try to use a specific version (0.3.1) of the reachability metadata in your pom.xml?\r\n\r\n"", 'Yes I did. I opened https://github.com/oracle/graalvm-reachability-metadata/issues/297 for it.', 'We are going to release GraalVM metadata `0.3.2` and Native Build Tools `0.9.23` that contains all Hibernate 6.2 fixes.']",,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java,09da10cc6c585995f4623793aa2b2f6a38b5284d,Add_Condition,"+		@Nullable
+		private Subscription subscription;
+
+			this.subscription = subscription;
+			Subscription subscription = this.subscription;
+			if (subscription != null) {
+				subscription.cancel();
+			}",8,condition,Propagate the cancel signal to the downstream,"Issue: SPR-17609
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/client/RestTemplate.java,0baa1a56c2f200d0cbd21a1318346670a4fa14d6,Add_Condition,"-			throw new ResourceAccessException(""I/O error: "" + ex.getMessage(), ex);
+			throw new ResourceAccessException(""I/O error on "" + method.name() +
+					"" request for \"""" + url + ""\"":"" + ex.getMessage(), ex);",3,iteration,Add URI and method name on ResourceAccess,"Issue: SPR-9325
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/config/DeprecatedBeanWarner.java,0d4ef4eafe7031781707f296af755387f30bcf88,Condition_Change,"-		if (StringUtils.hasLength(resourceDescription)) {
+		if (StringUtils.hasText(resourceDescription)) {",2,condition,Omit empty resource description in DeprecatedBeanWarner's log message,"Closes gh-32647
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32647'],1,"[""Omit empty resource description in `DeprecatedBeanWarner`'s log message""]","['In this context, the hasText() method seems more appropriate. This is because considering cases where the resourceDescription string contains only whitespace ensures clearer logging, as it accounts for scenarios where the string is not empty but consists solely of whitespace characters.']",['closed'],[2],"['This has been merged into `main`.\r\n\r\nThanks', '> This has been merged into `main`.\r\n> \r\n> Thanks\r\n\r\nThanks! @sbrannen ']",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java,279777b2f3a43ed96eb8151f07b76f38672cc78f,Condition_Change,"-					if (lastValue != null &&
-							!ObjectUtils.nullSafeEquals(lastValue, value)) {
+					if (lastValue != null && !ObjectUtils.nullSafeEquals(lastValue, value)) {",3,condition,Polishing,,[],0,[],[],[],[],[],1,1,n/a,n/a,n/a
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java,1278459ad536126a7c707e4b69a0a359f54bb556,Add_Condition,"-public class ReactorHttpHandlerAdapter
-		implements BiFunction<HttpServerRequest, HttpServerResponse, Mono<Void>> {
+public class ReactorHttpHandlerAdapter implements BiFunction<HttpServerRequest, HttpServerResponse, Mono<Void>> {
-
-			logger.error(""Invalid URL "" + ex.getMessage(), ex);
+			if (logger.isWarnEnabled()) {
+				logger.warn(""Invalid URL for incoming request: "" + ex.getMessage());
+			}",8,iteration,ReactorHttpHandlerAdapter logs bad request at warn level only,"Issue: SPR-16524
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java,1278459ad536126a7c707e4b69a0a359f54bb556,Add_Condition,"-public class ReactorHttpHandlerAdapter
-		implements BiFunction<HttpServerRequest, HttpServerResponse, Mono<Void>> {
+public class ReactorHttpHandlerAdapter implements BiFunction<HttpServerRequest, HttpServerResponse, Mono<Void>> {
-
-			logger.error(""Invalid URL "" + ex.getMessage(), ex);
+			if (logger.isWarnEnabled()) {
+				logger.warn(""Invalid URL for incoming request: "" + ex.getMessage());
+			}",8,condition,ReactorHttpHandlerAdapter logs bad request at warn level only,"Issue: SPR-16524
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,14bc0d6469d8fa887f6829c7ef827fc227349ead,Condition_Change,"-			if (rootDirResources == null & StringUtils.hasLength(commonPrefix)) {
+			if (rootDirResources == null && StringUtils.hasLength(commonPrefix)) {",2,condition,Fix typo in condition check,"See gh-21190
",['https://api.github.com/repos/spring-projects/spring-framework/issues/21190'],1,['Reduce the effect of different base package configuration on component scanning performance and make the effect more intuitive [SPR-16649]'],"[""**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16649](https://jira.spring.io/browse/SPR-16649?redirect=false)** and commented\n\nThe base package configuration that's used for component scanning can have a significant impact on the time that the scan can take. In some cases the impact of narrowing the scan can be counter-intuitive as it actually takes longer to scan fewer packages. I've attached a small sample that reproduces the behaviour that I'll describe below.\n\nIn a large application (200 packages, each with 50 classes) scanning all 200 packages takes 601ms when those packages are available directly on the filesystem:\n\n```\n$ ./gradlew run -Ppackages=single\n\n> Task :run\nScanning single took 601ms\n\n\nBUILD SUCCESSFUL in 10s\n2 actionable tasks: 2 executed\n```\n\nIf the scanning is narrowed to the 100 packages that are of interest, the time taken decreases to 403ms:\n\n```\n./gradlew run -Ppackages=multi\n\n> Task :run\nScanning multi took 403ms\n\n\nBUILD SUCCESSFUL in 1s\n2 actionable tasks: 1 executed, 1 up-to-date\n```\n\nHalving the number of packages that are scanned has reduced the time taken by roughly a third.\n\nIf the application is packaged as a jar file, the time taken to scan all 200 packages increases slightly to 657ms:\n\n```\n$ ./gradlew distZip && unzip build/distributions/component-scanning-performance.zip -d build/distributions && build/distributions/component-scanning-performance/bin/component-scanning-performance single\n\nBUILD SUCCESSFUL in 2s\n4 actionable tasks: 3 executed, 1 up-to-date\nArchive:  build/distributions/component-scanning-performance.zip\n   creating: build/distributions/component-scanning-performance/\n   creating: build/distributions/component-scanning-performance/lib/\n  inflating: build/distributions/component-scanning-performance/lib/component-scanning-performance.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-context-5.0.4.RELEASE.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-aop-5.0.4.RELEASE.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-beans-5.0.4.RELEASE.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-expression-5.0.4.RELEASE.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-core-5.0.4.RELEASE.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-jcl-5.0.4.RELEASE.jar\n   creating: build/distributions/component-scanning-performance/bin/\n  inflating: build/distributions/component-scanning-performance/bin/component-scanning-performance\n  inflating: build/distributions/component-scanning-performance/bin/component-scanning-performance.bat\nScanning single took 657ms\n```\n\nIf we then narrow the scan to focus on the 100 packages of interest, the time taken for the scan increases significantly to 1084ms:\n\n```\n$ build/distributions/component-scanning-performance/bin/component-scanning-performance multi\nScanning multi took 1084ms\n```\n\nOn the surface, I find it unintuitive that narrowing the packages that need to be scanned takes longer when the packages are in a jar file. This problem is exacerbated by the fact that the scan is faster when the scan is narrowed when the packages are on the file system. This means that, for optimal scanning performance, you may need one configuration during development and test and another in production.\n\nThe scan's slower in the jar file case as, when a package exists in a jar file, the whole jar is scanned. This means that when the scan is narrowed by providing 100 sub-packages rather than a single parent package, the whole jar is scanned 100 times rather than once. Would it be possible to provide an entry point to scanning that takes multiple base packages? Then, if multiple base packages resolve to the same jar, the jar could be scanned once to find matches across all the base packages.\n\n\n---\n\n**Affects:** 4.3.14, 5.0.4\n\n**Attachments:**\n- [component-scanning-performance.zip](https://jira.spring.io/secure/attachment/25436/component-scanning-performance.zip) (_4.67 MB_)\n\n0 votes, 5 watchers\n""]",['closed'],[1],"[""I've introduced custom root directory and jar caching in `PathMatchingResourcePatternResolver` now, bringing scanning performance for all individual subpackages to the same level as a single scan for the root package. No new API necessary (aside from a `clearCache()` method for the application context to call on refresh completion), and the caching applies to any individual scanning attempts against the same `PathMatchingResourcePatternResolver` instance (usually the shared one in the context).""]",,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java,153fd82946c350a0c42be2dbd13774d5ee9ffc0c,Condition_Change,"+import org.apache.commons.logging.Log;
-				if (ex.getMessage().startsWith(event.getClass().getName())) {
+				String msg = ex.getMessage();
+				if (msg != null && msg.startsWith(event.getClass().getName())) {
-					LogFactory.getLog(getClass()).debug(""Non-matching event type for listener: "" + listener, ex);
+					Log logger = LogFactory.getLog(getClass());
+					if (logger.isDebugEnabled()) {
+						logger.debug(""Non-matching event type for listener: "" + listener, ex);
+					}",9,iteration,SimpleApplicationEventMulticaster defensively handles ClassCastException without message,"Issue: SPR-15145
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java,1694691b791d9f86e735a9d31fc6820bd8f3c55c,Add_Condition,"+import org.springframework.http.client.reactive.JdkClientHttpConnector;
-		throw new IllegalStateException(""No suitable default ClientHttpConnector found"");
+		else {
+			return new JdkClientHttpConnector();
+		}",5,condition,Default to JDK HttpClient if no others present,"Closes gh-23432
",['https://api.github.com/repos/spring-projects/spring-framework/issues/23432'],1,['JDK 11 HttpClient integration with WebClient'],['This a simple implementation of ClientHttpResponse that levrage\r\nJDK 11 HttpClient.\r\n\r\nCloses gh-21014'],['closed'],[15],"['@Julien-Eyraud Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23432)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23432) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@Julien-Eyraud Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23432)!', 'Cross-linking to #17778 that this depends on.', '@Julien-Eyraud amazing feature :) would be awesome to resolve conflicts and see this merged...', ""@rdsubhas I won't fix merge until https://github.com/spring-projects/spring-framework/issues/17778 is fixed"", ""I've created a Spring Boot starter using the code from this PR: https://github.com/candrews/java-httpclient-webclient-spring-boot-starter.\r\n\r\nIt provides a really simple way to configure WebClient to use Java 11's HttpClient; just add the dependency (which I've published to [Maven Central](https://search.maven.org/artifact/com.integralblue/java-httpclient-webclient-spring-boot-starter)) to your project and you're done.\r\n\r\nHopefully, it helps those of us who really would like this feature hold out until it lands in Spring itself :)"", 'So, is this still happening?', ""I don't know I can update the PR to fix conflict and change the target branch. It's up to the maintainer now."", 'The `main` branch is on JDK 17 now, so we can move forward with this.', ""I've rebase my branch on main. I've updated the JdkClientHttpResponse#getCookies with a duplicate from JettyClientHttpResponse#parseSameSite. I didn't know where to but it to use a common code. I also updated the documentation."", 'I just saw your JdkClientHttpConnector pullrequest. \r\nPlease add it here as default if no other is on the classpath org.springframework.web.reactive.function.client.DefaultWebClientBuilder.initConnector()\r\ninstead of throwing an Exception\r\n throw new IllegalStateException(""No suitable default ClientHttpConnector found"");\r\n\r\nA problem is that child classes of AbstractWebClientReactiveOAuth2AccessTokenResponseClient\r\nAlways creates a new Webclient with: \r\nprivate WebClient webClient = WebClient.builder().build(); \r\nwhich invokes the DefaultWebClientBuilder.initConnector() leading to the IllegalStateException. \r\n\r\nOr at least add a Constructor to AbstractWebClientReactiveOAuth2AccessTokenResponseClient which takes a preinitialized WebClient instead of creating a new one.\r\n\r\nSincerely\r\nRolf\r\n\r\n\r\n\r\n', ""It's an interesting point @rk99d339. I'll wait for maintainer feedback. I hope I'll be able to merge soon."", ""Hi @rstoyanchev do you think I can have a review soon ? Or this will be discard ? What do you think about rk99d339's comment ?"", ""Yes, I'm reviewing this and should have an update soon."", ""This is now in `main`. I've also made sure the JDK client is used by default when no others are present.""]",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/xml/XmlValidationModeDetector.java,1763bfbad04704f4a38290f371119a3544f7546b,Condition_Change,"-		return (content.indexOf(DOCTYPE) > -1);
+		return content.contains(DOCTYPE);
-		return (openTagIndex > -1 && content.length() > openTagIndex && Character.isLetter(content.charAt(openTagIndex + 1)));
+		return (openTagIndex > -1 && (content.length() > openTagIndex + 1) &&
+				Character.isLetter(content.charAt(openTagIndex + 1)));
-		if (line.indexOf(START_COMMENT) == -1 && line.indexOf(END_COMMENT) == -1) {
+		if (!line.contains(START_COMMENT) && !line.contains(END_COMMENT)) {",7,condition,Fixed content length check in XmlValidationModeDetector,"Issue: SPR-11477
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,1815a6a7ebafb184b1f08de6245898b19de19c6a,Add_Condition,"-	private static final boolean completionStagePresent = ClassUtils.isPresent(""java.util.concurrent.CompletionStage"",
-			RequestMappingHandlerAdapter.class.getClassLoader());
+	private static final boolean completionStagePresent = ClassUtils.isPresent(
+			""java.util.concurrent.CompletionStage"", RequestMappingHandlerAdapter.class.getClassLoader());
-
-		mav = invokeHandlerMethod(request, response, handlerMethod);
+		else {
+			mav = invokeHandlerMethod(request, response, handlerMethod);
+		}",9,condition,RequestMappingHandlerAdapter properly invokes handler method in synchronizeOnSession mode again,"Issue: SPR-13999
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/filter/UrlHandlerFilter.java,194b4cedfbf9f947797d97af851c8e718c2aa91e,Condition_Change,"+import org.springframework.http.server.PathContainer;
-				if (!entry.getKey().canHandle(request)) {
+				if (!entry.getKey().canHandle(request, path)) {
-		boolean canHandle(HttpServletRequest request);
+		boolean canHandle(HttpServletRequest request, RequestPath path);
-		public boolean canHandle(HttpServletRequest request) {
-			return request.getRequestURI().endsWith(""/"");
+		public boolean canHandle(HttpServletRequest request, RequestPath path) {
+			List<PathContainer.Element> elements = path.elements();
+			return (!elements.isEmpty() && elements.get(elements.size() - 1).value().equals(""/""));",10,condition,Use parsed path for checks in UrlHandlerFilter,"See gh-32830
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32830'],1,['Create WebFlux equivalent filter to handle URLs with trailing slashes '],"['The `UrHandlerFilter` under #31366 is for use with Spring MVC and the Servlet API. This issue is to create the same for use with WebFlux, which will have the same functionality but for the WebFlux API. ']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java,3b1d46b3bac74802d264cd57c4a7e685f377c91e,Condition_Change,"+	private static final ResolvableType VOID_TYPE = ResolvableType.forClass(Void.class);
-		if (elementType.equals(ResolvableType.forClass(Void.class))) {
+		if (VOID_TYPE.equals(elementType)) {",3,condition,Polishing,,[],0,[],[],[],[],[],1,1,n/a,n/a,n/a
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/BeanUtils.java,2e5d0470dc0c9766d98d144d5b6bd56248112e46,Condition_Change,"-		Set<String> ignoreSet = (ignoreProperties != null ? new HashSet<>(Arrays.asList(ignoreProperties)) : null);
+		Set<String> ignoredProps = (ignoreProperties != null ? new HashSet<>(Arrays.asList(ignoreProperties)) : null);
-			if (writeMethod != null && (ignoreSet == null || !ignoreSet.contains(targetPd.getName()))) {
+			if (writeMethod != null && (ignoredProps == null || !ignoredProps.contains(targetPd.getName()))) {",4,condition,Polishing,,[],0,[],[],[],[],[],1,1,n/a,n/a,n/a
spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,947255e3774fe6248c59d2cdd6a1b06b9f6b5d9b,Condition_Change,"+import org.springframework.core.KotlinDetector;
-				if (ReflectionUtils.declaresException(getMethod(), ex.getClass())) {
+				if (ReflectionUtils.declaresException(getMethod(), ex.getClass()) ||
+						KotlinDetector.isKotlinType(getMethod().getDeclaringClass())) {",4,condition,Always propagate checked exceptions from Kotlin code behind CGLIB proxies,"Closes gh-23844
",['https://api.github.com/repos/spring-projects/spring-framework/issues/23844'],1,['Spring AOP should not apply UndeclaredThrowableException to checked exceptions from Kotlin methods'],"['Currently, when using Spring AOP with Kotlin, `UndeclaredThrowableException` is thrown when a method with advice throws a checked exception. There is a **_workaround_** in Kotlin in that you can add `@Throws` annotations to methods, but this is not really feasible as it would require annotating every method of every project, and methods in other libraries might not be under your control.\r\n\r\nWhat would solve this problem would be to have an option in Spring to disable the throwing of `UndeclaredThrowableException` and simply throw the original exception.']",['closed'],[12],"['Looks like the relevant code is here:\r\nhttps://github.com/spring-projects/spring-framework/blob/9bd3a535cd524cf771423e67feeea523ac985f87/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java#L752-L759\r\n', 'This issue is also impacting me when using resilience4j circuit breaker. The AOP is encapsulating the real exception so the circuit breaker is never switched to OPEN.', ""The reason for that custom `UndeclaredThrowableException` throwing logic in `CglibAopProxy` is that interface-based proxies unavoidably get such a `UndeclaredThrowableException` out of the JDK implementation, so for consistency with `JdkDynamicAopProxy`, we manually enforce it in the CGLIB variant.\r\n\r\nSo whatever we do about it, we can only do it for CGLIB proxies. @sdeleuze what's your take on this? Is CGLIB+Kotlin a common enough case to be handled specifically - or on the inverse, are JDK proxies with Kotlin uncommon enough? Are checked exceptions without explicit declaration common enough in Kotlin?\r\n\r\nGenerally speaking for the scenarios above, why the need for checked exceptions coming out of an interceptor to begin with? From my perspective, this is bad practice with Java-based AOP, even more so with Kotlin-based AOP, and it's also a general Java interoperability issue when used in Kotlin-based arrangements."", '@jhoeller \r\n\r\n> why the need for checked exceptions coming out of an interceptor to begin with?\r\n\r\nIn our case, we wanted to add logging around `@Service` methods with AOP. And in this scenario, the logging code should not change the behavior of the methods being logged.\r\n\r\nAdditionally, this method of logging would allow us to:\r\n\r\n- Avoid manual modification of dozens of methods with identical boilerplate code to add logging\r\n- Avoid modification of each of these again later if we want to change how the logging works\r\n- Have cleaner code by not mixing the logging aspect with the business logic', '@jhoeller \r\n> Are checked exceptions without explicit declaration common enough in Kotlin?\r\n\r\nThis is what happens the majority of the time as Kotlin does not require declaration of checked exceptions.', ""I've just realized that - within Spring AOP - we'd even turn a checked exception thrown from a Kotlin *target method* into an `UndeclaredThrowableException`, not just a checked exception thrown from an *interceptor* (which is the primary purpose of that check). While this works fine with Java code that explicitly declares those exceptions on the target method (so undeclared exceptions can only really come out of the interceptor), it's really not appropriate for Kotlin code since it enforces a non-idiomatic `@Throws` declaration there. Thanks for raising this, and I'm sorry that we missed it the first time around.\r\n\r\nFor 5.3.3, I'll add a bypass that we'll always propagate the original exception for methods declared on Kotlin types."", 'This is committed now, as default behavior for Kotlin code behind CGLIB proxies.\r\n\r\nPlease give the upcoming 5.3.3 snapshot a try and let me know whether it works for your scenario:\r\nhttps://repo.spring.io/snapshot/org/springframework/spring-framework-bom/5.3.3-SNAPSHOT/', 'Thanks @jhoeller for those changes.', '@jhoeller Thanks for the change!', '@jhoeller Would it be possible to also get this fix in 5.2.15?', ""It's proven itself in 5.3.x for several months already, without any backlash, so let's schedule a backport for 5.2.15 indeed."", ""Great. Thanks!\n\n> On 21 Apr 2021, at 11:13, Juergen Hoeller ***@***.***> wrote:\n> \n> \n> It's proven itself in 5.3.x for several months already, without any backlash, so let's schedule a backport for 5.2.15 indeed.\n> \n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub <https://github.com/spring-projects/spring-framework/issues/23844#issuecomment-823910448>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAQ4FIDM465VIRUXSFGLAWLTJ2JNNANCNFSM4JDJFPUQ>.\n> \n\n""]",1,0,23844,1,1
spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java,1b1ba479125ecd1051d14742d89f492376176130,Condition_Change,"-		for (char ch: name.toCharArray()) {
-			if (!Character.isJavaIdentifierPart(ch)) {
+		for (int i = 1; i < name.length(); i++) {
+			if (!Character.isJavaIdentifierPart(name.charAt(i))) {",4,condition,Avoid char array creation in AbstractAspectJAdvice.isVariableName(),"See gh-26100
",['https://api.github.com/repos/spring-projects/spring-framework/issues/26100'],1,['Avoid char array creation in AbstractAspectJAdvice.isVariableName()'],['This PR changes to avoid `char` array creation in `AbstractAspectJAdvice.isVariableName()`.'],['closed'],[1],"['Well spotted, thanks again @izeye.']",,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,1db9faf24838b5df83238e36312e9f721f11fa80,Add_Condition,"+				if (bean instanceof SmartLifecycle) {
+					latch.countDown();
+				}",3,condition,Avoid shutdown timeout in case of exception on stop,"Closes gh-33442
",['https://api.github.com/repos/spring-projects/spring-framework/issues/33442'],1,['Errors thrown from SmartLifeycle#stop results in (unnecessary) waiting for the shutdown timeout'],"['When the stop method of a SmartLifecycle bean throws an error, the DefaultLifecycleProcessor always waits until the timeout is hit. Which is unnecessary as no cleanup is performed and delays the shutdown.\r\n\r\nImho when [calling the stop()](https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java#L384) method the DefaultLifecycleProcessor should also do a `latch.countDown` in case an exception is thrown.\r\n\r\n(In our case we had a stop method which was interacting with the database. When we did some DB failover testing, this method has thrown some exception and the shutdown got delayed) ']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java,0728e32e7f3b93e49dfc8c7af20b489b12b3e663,Add_Condition,"-					this.columnLabelMap.put(rsmd.getColumnLabel(i), i);
+					String key = rsmd.getColumnLabel(i);
+					if (!this.columnLabelMap.containsKey(key)) {
+						this.columnLabelMap.put(key, i);
+					}",5,condition,ResultSetWrappingSqlRowSet preserves first matching column per name (as defined in ResultSet's javadoc),"Issue: SPR-11786
",[],0,[],[],[],[],[],1,1,16408,1,0
spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,1f13516528a5884a1182649566a33f6dd0cc4e68,Condition_Change,"-			if (Mono.class.isAssignableFrom(method.getReturnType())) {
+			if (Mono.class.isAssignableFrom(method.getReturnType()) || (KotlinDetector.isSuspendingFunction(method) && !COROUTINES_FLOW_CLASS_NAME.equals(new MethodParameter(method, -1).getParameterType().getName()))) {",2,condition,Fix @Transactional support on suspending function,"With this commit, @Transactional on suspending functions
returning a value now commits the transaction properly.

Closes gh-25998
",['https://api.github.com/repos/spring-projects/spring-framework/issues/25998'],1,['@Transactional on suspending function returning a value always rollbacks'],['**Affects:** 5.3.0'],['closed'],[5],"['Could you please provide a repro project ?', 'The Repro:https://github.com/lujijiang/app-demo.git \r\nMaster branch is ok with use transactionalOperator, you can checkout issue code from branch  @TransactionalTest', 'You can test with post to http://localhost:8080/savePerson ,and the data is \r\n```json\r\n{\r\n    ""name"":""lily"",\r\n    ""age"":100\r\n}\r\n```', 'I have been able to reproduce it, it only happens when the suspending function returns a value. In that case the reactive transaction is always rollbacked because of a concellation. See https://github.com/sdeleuze/demo-coroutines-tx for a detailed repro.', 'Great, waiting to be fixed.']",,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java,204a50ee6c9c77ec1f6be479af2e979991130da1,Remove_Condition,"-		MediaType mediaType = getMediaType(resource);
-		if (mediaType != null) {
-			return mediaType;
-		}",4,condition,Fix compile issue,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java,21267e56b7b4645e145422ee918eb75fab250f56,Add_Condition,"+	/**
+	/**
+	private Object resolvedBean;
+
+			this.resolvedBean = bean;
-		return (this.bean instanceof String ? obtainBeanFactory().getBean((String) this.bean) : this.bean);
+		if (this.resolvedBean == null) {
+			this.resolvedBean = obtainBeanFactory().getBean((String) this.bean);
+		}
+		return this.resolvedBean;",10,condition,Cache resolved bean instance in ControllerAdviceBean,"Prior to this commit, the resolveBean() method in ControllerAdviceBean
looked up the @ControllerAdvice bean instance in the ApplicationContext
by name for every web request that involved lookups for global methods
annotated with @ExceptionHandler, @InitBinder, and @ModelAttribute.

This commit avoids the need for such repeated lookups in the
ApplicationContext by caching the resolved @ControllerAdvice bean
instance within ControllerAdviceBean once it has been resolved.
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core-test/src/main/java/org/springframework/aot/agent/InstrumentedBridgeMethods.java,289d378aebd4782f422b880702fbd098122a389c,Condition_Change,"-					!Modifier.isPublic(constructor.getDeclaringClass().getModifiers()) || !constructor.canAccess(null)) {
+					!Modifier.isPublic(constructor.getDeclaringClass().getModifiers())) {
-			if (!Modifier.isPublic(method.getModifiers())) {
+			if (!Modifier.isPublic(method.getModifiers())
+				|| !Modifier.isPublic(method.getDeclaringClass().getModifiers())) {",5,condition,Polish,"This fixes an additional case where invoked methods are public but the
declaring class is package private.

Fixes gh-29046
",['https://api.github.com/repos/spring-projects/spring-framework/issues/29046'],1,['IllegalAccessException while instrumenting invocation of non-public method with RuntimeHintsAgent'],"['The `RuntimeHintsAgent` agent fails at instrumenting the following case:\r\n\r\n```java\r\n@EnabledIfRuntimeHintsAgent\r\nclass RuntimeHintsAgentTests {\r\n\r\n\t@Test\r\n\tvoid invokePrivateMethod() {\r\n\t\tMethod greet = ReflectionUtils.findMethod(PrivateClass.class, ""greet"");\r\n\t\tRuntimeHintsInvocations invocations = RuntimeHintsRecorder.record(() -> {\r\n\t\t\tgreet.invoke(new PrivateClass());\r\n\t\t});\r\n\t}\r\n\r\n\tclass MyClass {\r\n\r\n\t\tprivate String greet() {\r\n\t\t\treturn ""hello"";\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n``` \r\n\r\nWith this code snippet, the agent fails during the method invocation with an exception like:\r\n\r\n```\r\njava.lang.IllegalAccessException: class org.springframework.aot.agent.InstrumentedBridgeMethods cannot access a member of class org.springframework.sample.RuntimeHintsAgentTests$MyClass with modifiers ""private""\r\n```']",['closed'],[1],['Reopening for cases where methods are public but declaring class is not.'],1,1,29046,0,0
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java,0634555424a8742bbe95333c49975437af6eacf8,Condition_Change,"+	@Override
+	@Override
-		boolean endsWithSlash = pattern.endsWith(""/"");
-			if (!endsWithSlash && this.pathMatcher.match(pattern + ""/"", lookupPath)) {
+			if (!pattern.endsWith(""/"") && this.pathMatcher.match(pattern + ""/"", lookupPath)) {
+	@Override",6,condition,Delay check if pattern ends with slash,"This is a minor fix with no actual impact.

Issue: SPR-10504
",[],0,[],[],[],[],[],1,0.5,14998,1,0
spring-projects/spring-framework,spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletRequest.java,23a60aeb277b1b513633f9b12ef01bd6dddaba07,Condition_Change,"-	private static final ServletInputStream EMPTY_SERVLET_INPUT_STREAM =
-			new DelegatingServletInputStream(InputStream.nullInputStream());
-
-					""Cannot call getInputStream() after getReader() has already been called for the current request"")			;
+					""Cannot call getInputStream() after getReader() has already been called for the current request"");
-				EMPTY_SERVLET_INPUT_STREAM);
+				new DelegatingServletInputStream(InputStream.nullInputStream()));",7,iteration,Sync MockHttpServletRequest implementations,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java,010e8a303b1caf3b80e244fc5e4aebc23d854118,Condition_Change,"-                if (!cookies.isEmpty()) {
-                        this.builder.header(HttpHeaders.COOKIE, cookies.values().stream()
-                                        .flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining("";"")));
+                if (cookies.isEmpty()) {
+                        return;
+                this.builder.header(HttpHeaders.COOKIE, cookies.values().stream()
+                                .flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining("";"")));",7,condition,Polishing contribution,"Closes gh-32799
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32799'],1,['Do not send Cookie header in reactive JdkClientHttpRequest if no cookies added'],['Prevent cookies to be set to empty in the HTTP request if no cookie is present.\r\nThe `Cookie` header should not be sent if no cookie is set in the HTTP message.'],['closed'],[0],[],1,1,32799,0,0
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java,262c702da4588e5f467fd24774357113379666b2,Add_Condition,"+		else if (this.metadataReaderCache != null) {
+			setCacheLimit(DEFAULT_CACHE_LIMIT);
+		}
+			this.cacheLimit = cacheLimit;",4,condition,CachingMetadataReaderFactory releases shared cache Map on clearCache(),"LocalResourceCache properly initializes cacheLimit on construction.

Issue: SPR-17527
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java,19a9bc4747028e68d0fc9ce71c302488cfbfa978,Remove_Condition,"-
-			if (InMemoryWebSessionStore.this.sessions.remove(currentId) == null) {
-				return Mono.error(new IllegalStateException(
-						""Failed to change session id: "" + currentId +
-								"" because the Session is no longer present in the store.""));
-			}
+			InMemoryWebSessionStore.this.sessions.remove(currentId);",7,condition,Remove unnecessary assertion,"Issue: SPR-16201
",[],0,[],[],[],[],[],1,0,20749,1,0
spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java,27e9db8c8c30a941bbbc4ceae6a18bd2124ea527,Condition_Change,"+				boolean isJdk7 = (org.springframework.core.JdkVersion.getMajorJavaVersion() >= org.springframework.core.JdkVersion.JAVA_17);
-					if (isJdk6 && classArgument.isArray()) {
-						return (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) ||
-								supportsInternal(classArgument, false));
+					if (isJdk7 && classArgument.isArray()) {
+						return (classArgument.getComponentType() == Byte.TYPE);
-						return (classArgument.getComponentType() == Byte.TYPE);
+						return (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) ||
+								supportsInternal(classArgument, false));",9,condition,Fix regression in Jaxb2Marshaller regarding JdkVersion,"Issue: SPR-13312
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java,02b539c5f50b59d9f5605c21e42d53f0c8e23ae1,Add_Condition,"+import org.springframework.core.SpringProperties;
+	/**
+	private static final boolean shouldIgnoreXml = SpringProperties.getFlag(""spring.xml.ignore"");
+	
+
+				else if (shouldIgnoreXml) {
+					throw new UnsupportedOperationException(""XML support disabled"");
+				}",8,condition,Leverage spring.ignore.xml flag to avoid XmlBeanDefinitionReader,"Closes gh-25338
",['https://api.github.com/repos/spring-projects/spring-framework/issues/25338'],1,['Leverage spring.ignore.xml flag to avoid XmlBeanDefinitionReader'],"['This issue is a follow up of #25151, it avoids using `XmlBeanDefinitionReader` in `ConfigurationClassBeanDefinitionReader` when `spring.xml.ignore` is `true` in order to avoid triggering XML usage in GraalVM native images.']",['closed'],[0],[],1,1,25338,1,0
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java,28e206a9469b603c40bb023c69592570374bc8bb,Add_Condition,"-		return (isStreamingMediaType(contentType) ?
-				message.writeAndFlushWith(body.map(Flux::just)) : message.writeWith(body));
+		if (isStreamingMediaType(contentType)) {
+			return message.writeAndFlushWith(body.map(buffer ->
+					Mono.fromCallable(() -> buffer)
+							.doOnDiscard(PooledDataBuffer.class, PooledDataBuffer::release)));
+		}
+
+		return message.writeWith(body);",9,condition,Apply doOnDiscard for streaming mode,"Use of Flux.just is problematic in that if the Flux is cancelled before
demand, the item may never be read, nor freed. Flux#just does not
even delegate cancellation signals.

Closes gh-22731
",['https://api.github.com/repos/spring-projects/spring-framework/issues/22731'],1,['ProtobufEncoder and ProtobufDecoder buffer leaks'],"['**Affects:** Spring Framework 5.1.5\r\n---\r\n## Issue\r\nAfter upgrading from **2.0.6.RELEASE** version to **2.1.3.RELEASE** I started seeing a lot of memory leaks related to `org.springframework.http.codec.protobuf.ProtobufEncoder#encodeMessage` in logs (see below).\r\n\r\n### Technical details:\r\n* OS: \r\n```\r\nLinux version 2.6.32-573.7.1.el6.x86_64 (mockbuild@c6b8.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-16) (GCC) ) #1 SMP Tue Sep 22 22:00:00 UTC 2015\r\n```\r\n* Java:\r\n```\r\njava version ""1.8.0_181""\r\nJava(TM) SE Runtime Environment (build 1.8.0_181-b13)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)\r\n```\r\n* Protobuf: 3.4.0\r\n* Java system properties:\r\n```\r\n-Dspring.profiles.active=default\r\n-XX:+UseG1GC\r\n-Xmx6G\r\n-Xms6G\r\n-XX:MaxGCPauseMillis=15\r\n-XX:MaxTenuringThreshold=1\r\n-XX:+UnlockExperimentalVMOptions\r\n-XX:G1NewSizePercent=60\r\n-XX:G1MaxNewSizePercent=70\r\n-XX:+UseGCLogFileRotation\r\n-XX:NumberOfGCLogFiles=5\r\n-XX:GCLogFileSize=100M\r\n-XX:+PrintGCApplicationStoppedTime\r\n-XX:+PrintTenuringDistribution\r\n-XX:+PrintGCCause\r\n-XX:+PrintGCDetails\r\n-XX:+PrintGCTimeStamps\r\n-XX:+PrintGC\r\n-XX:+PrintGCDateStamps\r\n-XX:+PrintAdaptiveSizePolicy\r\n```\r\n\r\n### Log example [own classes are hidden with ...]\r\n```\r\n2019-04-03 07:23:43.445 ERROR [reactor-http-epoll-1] ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it\'s garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for mo\r\nre information.\r\nRecent access records: \r\n#1:\r\n        io.netty.buffer.AdvancedLeakAwareByteBuf.writeBytes(AdvancedLeakAwareByteBuf.java:616)\r\n        io.netty.buffer.ByteBufOutputStream.write(ByteBufOutputStream.java:68)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.doFlush(CodedOutputStream.java:2985)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.flush(CodedOutputStream.java:2896)\r\n        com.google.protobuf.AbstractMessageLite.writeTo(AbstractMessageLite.java:87)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.encodeMessage(ProtobufEncoder.java:89)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.lambda$encode$1(ProtobufEncoder.java:78)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:107)\r\n        reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:99)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:102)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1878)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1752)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:64)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)\r\n        reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)\r\n        reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)\r\n        reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)\r\n        reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:185)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:123)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2070)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\r\n        reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoReduceSeed$ReduceSeedSubscriber.onComplete(MonoReduceSeed.java:156)\r\n        reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:794)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:560)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:863)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:957)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onComplete(FluxPeekFuseable.java:578)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription.run(FluxSubscribeOnCallable.java:251)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)\r\n        java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\n        java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n        java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n        java.lang.Thread.run(Thread.java:748)\r\n#2:\r\n        io.netty.buffer.AdvancedLeakAwareByteBuf.writeBytes(AdvancedLeakAwareByteBuf.java:616)\r\n        io.netty.buffer.ByteBufOutputStream.write(ByteBufOutputStream.java:68)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.doFlush(CodedOutputStream.java:2985)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.flushIfNotAvailable(CodedOutputStream.java:2980)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.writeInt32(CodedOutputStream.java:2659)\r\n        com.google.protobuf.CodedOutputStream.writeEnum(CodedOutputStream.java:301)\r\n        com....Result.writeTo(...Result.java:312)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.writeMessageNoTag(CodedOutputStream.java:2783)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.writeMessage(CodedOutputStream.java:2759)\r\n        com....Response.writeTo(...Response.java:134)\r\n        com.google.protobuf.AbstractMessageLite.writeTo(AbstractMessageLite.java:86)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.encodeMessage(ProtobufEncoder.java:89)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.lambda$encode$1(ProtobufEncoder.java:78)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:107)\r\n        reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:99)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:102)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1878)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1752)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:64)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)\r\n        reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)\r\n        reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)\r\n        reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)\r\n        reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:185)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:123)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2070)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\r\n        reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoReduceSeed$ReduceSeedSubscriber.onComplete(MonoReduceSeed.java:156)\r\n        reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:794)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:560)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:863)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:957)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onComplete(FluxPeekFuseable.java:578)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription.run(FluxSubscribeOnCallable.java:251)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)\r\n        java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\n        java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n        java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n        java.lang.Thread.run(Thread.java:748)\r\nCreated at:\r\n        io.netty.buffer.PooledByteBufAllocator.newDirectBuffer(PooledByteBufAllocator.java:339)\r\n        io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:185)\r\n        io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:171)\r\n        io.netty.buffer.AbstractByteBufAllocator.buffer(AbstractByteBufAllocator.java:105)\r\n        org.springframework.core.io.buffer.NettyDataBufferFactory.allocateBuffer(NettyDataBufferFactory.java:65)\r\n        org.springframework.core.io.buffer.NettyDataBufferFactory.allocateBuffer(NettyDataBufferFactory.java:39)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.encodeMessage(ProtobufEncoder.java:82)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.lambda$encode$1(ProtobufEncoder.java:78)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:107)\r\n        reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:99)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:102)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1878)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1752)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:64)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)\r\n        reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)\r\n        reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)\r\n        reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)\r\n        reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:185)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:123)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2070)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\r\n        reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoReduceSeed$ReduceSeedSubscriber.onComplete(MonoReduceSeed.java:156)\r\n        reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:794)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:560)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:863)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:957)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onComplete(FluxPeekFuseable.java:578)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription.run(FluxSubscribeOnCallable.java:251)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)\r\n        java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\n        java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n        java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n        java.lang.Thread.run(Thread.java:748)\r\n```\r\n']",['closed'],[3],"['@rstoyanchev Hi. Why you added this fix only to 5.1.7? Would be great to get it asap', 'Not sure I understand. 5.1.7 is available. What else could we have done?', '@rstoyanchev yeap, thank you. I was confused about the spring boot version(2.1.7).']",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/ClassReader.java,2ac4355ec075fec77a8fbafd635fb4fefba81d4e,Add_Condition,"+    if (bytecodeOffset >= labels.length) {
+      return new Label();
+    }",3,condition,ASM ClassReader leniently handles label offset mismatch (again),"Issue: SPR-17467
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java,2c1afca9c556b63c1645630b1db8d2934d1f2033,Add_Condition,"+import org.springframework.util.CollectionUtils;
-		formData.forEach((name, values) ->
+		formData.forEach((name, values) -> {
+				if (name == null) {
+					Assert.isTrue(CollectionUtils.isEmpty(values), ""Null name in form data: "" + formData);
+					return;
+				}
-				}));
+				});
+		});",10,condition,Reject null form data names,"...or skip if there are no values either.

Closes gh-22372
",['https://api.github.com/repos/spring-projects/spring-framework/issues/22372'],1,['Keys for form data in FormHttpMessageConverter must not be null'],['Fix for java.lang.IllegalArgumentException'],['closed'],[3],"['@GWhiskas Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22372)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22372) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@GWhiskas Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22372)!', ""I've addressed this slightly differently, thanks.""]",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java,2c5a1af236e6c90460b2279fd0a871d0fc6c9d6e,Condition_Change,"-		if (!KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {
+		if (ctor.getDeclaringClass().isEnum() || !KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {",2,condition,Leverage Java reflection for Kotlin enums,"As discussed in KT-25165, from a Kotlin POV enum constructors
have no parameter, this is an ""implementation detail""
required for running on the JVM, so it seems relevant to skip
Kotlin reflection in that case and just delegate to Java
reflection.

Issue: SPR-16931
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java,2c98c1b81a2bfb6d0d13415a2fd222b642106146,Condition_Change,"-			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {
+			Object managedResource, @Nullable ModelMBean modelMBean, @Nullable ObjectName objectName) {
-		if (managedResource instanceof NotificationPublisherAware) {
+		if (managedResource instanceof NotificationPublisherAware && modelMBean != null && objectName != null) {
-			Assert.state(this.modelMBean != null && this.objectName != null, ""Not initialized"");",5,condition,Relaxed assertion in NotificationPublisherAwareLazyTargetSource,"Issue: SPR-17592
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java,2daa0745611f4989a5dc99619dd4aef541288503,Remove_Condition,"-		long count = 0;
-		for (ParamExpression e : expressions) {
-			if (e.getValue() != null && !e.isNegated()) {
-				count++;
-			}
-		}
-		return count;
+		return expressions.stream()
+				.filter(e -> e.getValue() != null && !e.isNegated())
+				.count();",10,condition,Use count in ParamsRequestCondition#getValueMatchCount,"See gh-32088
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32088'],1,['Use count in ParamsRequestCondition#getValueMatchCount'],"['\r\nThe `getValueMatchCount` method was refactored to use a `Stream` instead of a `for-each loop`, eliminating the need for the unnecessary local variable `count`. This change was made to reduce the risk of accidental modifications during future maintenance, as the implementation is possible without using a local variable. Additionally, the refactoring was done for enhanced stability and maintainability, especially since there was no need to interrupt the loop under specific conditions.\r\n\r\n\r\n\r\n- [x]  The test code was executed and passed successfully.']",['closed'],[3],"['@Ryan-Dia congratulations for making your first contribution to Spring Framework.', ""@Ryan-Dia the team has discussed this change today and we've decided to revert it. I had missed that the method you've changed is in a hot code path and we explicitly avoid using the Stream API in such places. "", 'Thank you for reviewing the changes I proposed. I understand the decision to revert them, recognizing that the modified method is in a hot code path. I appreciate the feedback and will ensure my future contributions are more closely aligned with these best practices\r\n\r\n\r\n']",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ReflectionUtils.java,231433f5406453069aa125329be042d5e32ddff0,Condition_Change,"-			throw new IllegalStateException(""Unexpected reflection exception - "" + ex.getClass().getName() + "": ""
-					+ ex.getMessage());
+			throw new IllegalStateException(
+					""Unexpected reflection exception - "" + ex.getClass().getName() + "": "" + ex.getMessage());
-				if (name.equals(method.getName())
-						&& (paramTypes == null || Arrays.equals(paramTypes, method.getParameterTypes()))) {
+				if (name.equals(method.getName()) &&
+						(paramTypes == null || Arrays.equals(paramTypes, method.getParameterTypes()))) {",8,condition,Polishing (cherry picked from commit 6021822),,[],0,[],[],[],[],[],1,1,n/a,n/a,n/a
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java,2e5d752e15164b331ad48bcdcb61c174f880498c,Condition_Change,"-		for (String beanName : candidateBeans.keySet()) {
+		for (Map.Entry<String, T> entry : candidateBeans.entrySet()) {
+			String beanName = entry.getKey();
-				matchingBean = candidateBeans.get(beanName);
+				matchingBean = entry.getValue();",5,iteration,Better use of key iterator,"This commit uses an EntrySet instead of looping over the keys and
retrieving the value in a separate call.

Issue: SPR-12356
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java,2f0970b18401426846b38388927f182b3327bb98,Condition_Change,"-			if (jaxb2Present) {
+			if (jaxb2Present && !jackson2XmlPresent) {",2,condition,Fix an AllEncompassingFormHttpMessageConverter regression,"Restore previous behavior to configure
Jaxb2RootElementHttpMessageConverter when JAXB but not Jackson are present.

Closes gh-25291
",['https://api.github.com/repos/spring-projects/spring-framework/issues/25291'],1,['AllEncompassingFormHttpMessageConverter now uses both JAXB and Jackson by default'],"['**Affects:** 5.3 snapshots\r\n\r\nWhen both JAX-B and Jackson are on the classpath, `AllEncompassingFormHttpMessageConverter` will now configure both `Jaxb2RootElementHttpMessageConverter` and `MappingJackson2XmlHttpMessageConverter`. Previously, the latter was preferred. This change in behaviour was introduced in https://github.com/spring-projects/spring-framework/commit/1e501f2583efd7521fe457453e5f866bcb8c509a as the `jackson2XmlPresent` flag is no longer being checked when deciding if `Jaxb2RootElementHttpMessageConverter` should be configured.']",['closed'],[1],"['Fixed, sorry for the glitch, I missed it. Thanks for your report.']",,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,2ff22510d92986ebabd0f7f4667d7ede3f83e01d,Condition_Change,"+import org.springframework.util.CollectionUtils;
-		if (earlyEventsToProcess != null) {
+		if (!CollectionUtils.isEmpty(earlyEventsToProcess)) {",3,condition,Avoid earlyApplicationEvents iteration in case of empty Set,"Closes gh-25161
",['https://api.github.com/repos/spring-projects/spring-framework/issues/25161'],1,['Suggest making a Set.size() > 0 judgement for AbstractApplicationContext.earlyApplicationEvents'],['https://github.com/spring-projects/spring-framework/blob/7e2b81729eefe31e9e8b2872b0de0adc1bad2162/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java#L839'],['closed'],[1],"[""Well spotted! Since we have such emptiness checks in other places already, in particular in hotspot code paths and for collections that tend to be empty at runtime, I've applied our common `CollectionUtils.isEmpty` check here as well now. While it won't make much difference performance-wise, it does avoid allocation of an `Iterator` which is generally worthwhile in such scenarios.""]",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java,30ebc3b8e2185c56791531507e0f430972f82b51,Remove_Condition,"-	/**
-	@Override
-	public Object putIfAbsent(String key, Object value) {
-		Object obj = get(key);
-		if (obj == null) {
-			obj = put(key, value);
-		}
-		return obj;
-	}
-",10,condition,Remove superfluous AnnotationAttributes#putIfAbsent implementation,"Since Java 8, putIfAbsent() is a standard method in java.util.Map. We
therefore no longer need the custom implementation that overrides the
standard implementation in HashMap.
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java,33af98b6d601057ddc54493ee9301285f61c57f2,Condition_Change,"-			throw new IllegalArgumentException(""Null key returned for cache operation (maybe you are "" +
-					""using named params on classes without debug info?) "" + context.metadata.operation);
+			throw new IllegalArgumentException(""""""
+					Null key returned for cache operation [%s]. If you are using named parameters, \
+					ensure that the compiler uses the '-parameters' flag.""""""
+						.formatted(context.metadata.operation));",6,iteration,Document need for -parameters flag in cache key generation exception messages,"Closes gh-31675
",['https://api.github.com/repos/spring-projects/spring-framework/issues/31675'],1,['Document need for `-parameters` flag in exception messages'],"['## Overview\r\n\r\nSince `-parameters` is required for certain use cases starting with Spring Framework 6.1, we should revise related exception messages to explicitly mention the solution.\r\n\r\nFor example, a Spring MVC `@Controller` handler method with a `@PathVariable String client` parameter declaration may fail with an exception similar to the following.\r\n\r\n```\r\njava.lang.IllegalArgumentException: Name for argument of type [java.lang.String] not specified, and parameter name information not found in class file either.\r\n```\r\n\r\nTo improve diagnostics, we should add something along the lines of `Ensure that the compiler uses the -parameters flag.` to the end of that exception message.\r\n\r\n## Related Issues\r\n\r\n- #29531\r\n- #29559\r\n- #31643\r\n- #31666\r\n- #31671\r\n- #31685\r\n- #31729\r\n- #31743\r\n']",['closed'],[4],"['@sbrannen @bclozel Any thoughts about introducing a dedicated exception type? We could then have a failure analyzer in Spring Boot.', 'Reopening to improve exception message in `CacheAspectSupport.generateKey(CacheOperationContext, Object)`.\r\n\r\n- see #31729', ""> Any thoughts about introducing a dedicated exception type?\r\n\r\nThat's an interesting idea.\r\n\r\nFor some use cases (e.g., mvc controller handler methods, and cache key generation) it would be relatively straightforward; however, for other uses (e.g., SpEL expressions, parameter named used as fallback qualifier for dependency injection by type) it may not be as straightforward to pin down what the trigger would be for such an exception.\r\n\r\nIn any case, we'll discuss it amongst the team."", '### Note to maintainers\r\n\r\nIf we modify the exception message currently used or introduce a new exception type, etc., we must make sure that the exception message contains `""Ensure that the compiler uses the \'-parameters\' flag""`.\r\n\r\nOtherwise, we\'ll render Spring Boot\'s failure analysis useless, since it depends on the exception message containing exactly that sub-string.\r\n\r\nhttps://github.com/spring-projects/spring-boot/blob/b5de38787c6abd4fc6522aa006b3d460ae23ffc5/spring-boot-project/spring-boot/src/main/java/org/springframework/boot/diagnostics/analyzer/MissingParameterNamesFailureAnalyzer.java#L38']",,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,3477738bed64f0cda2952eee787a267e89b0569d,Condition_Change,"-				else if (replace) {
+				else if (replace && replacingClass == null) {",2,condition,Consistently pick lowest superclass level to replace,"See gh-28676
",['https://api.github.com/repos/spring-projects/spring-framework/issues/28676'],1,['A configuration class superclass that is skipped due to register bean phase conditions is ignored when another configuration class that extends it is processed'],"['**Affects:** 6.0.x. I expect 5.3.x to also be affected.\r\n\r\nI think @mbhave and I have found a bug in configuration class processing related to condition evaluation. It\'s hopefully illustrated by the following tests:\r\n\r\n```java\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.ConditionContext;\r\nimport org.springframework.context.annotation.Conditional;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.annotation.ConfigurationCondition;\r\nimport org.springframework.context.annotation.Import;\r\nimport org.springframework.core.type.AnnotatedTypeMetadata;\r\n\r\nimport static org.assertj.core.api.Assertions.assertThat;\r\n\r\nclass ConfigurationPhasesKnownSuperclassesTests {\r\n\r\n\t@Test\r\n\tvoid superclassSkippedInParseConfigurationPhaseShouldNotPreventSubsequentProcessingOfSameSuperclass() {\r\n\t\ttry (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\r\n\t\t\t\tParseConfigurationPhase.class)) {\r\n\t\t\tassertThat(context.getBean(""subclassBean"")).isEqualTo(""bravo"");\r\n\t\t\tassertThat(context.getBean(""superclassBean"")).isEqualTo(""superclass"");\r\n\t\t}\r\n\t}\r\n\r\n\t@Test\r\n\tvoid superclassSkippedInRegisterBeanPhaseShouldNotPreventSubsequentProcessingOfSameSuperclass() {\r\n\t\ttry (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\r\n\t\t\t\tRegisterBeanPhase.class)) {\r\n\t\t\tassertThat(context.getBean(""subclassBean"")).isEqualTo(""bravo"");\r\n\t\t\tassertThat(context.getBean(""superclassBean"")).isEqualTo(""superclass"");\r\n\t\t}\r\n\t}\r\n\r\n\t@Configuration(proxyBeanMethods = false)\r\n\tstatic class Example {\r\n\r\n\t\t@Bean\r\n\t\tString superclassBean() {\r\n\t\t\treturn ""superclass"";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t@Configuration(proxyBeanMethods = false)\r\n\t@Import({ RegisterBeanPhaseExample.class, BravoExample.class })\r\n\tstatic class RegisterBeanPhase {\r\n\r\n\t}\r\n\r\n\t@Conditional(NonMatchingRegisterBeanPhaseCondition.class)\r\n\t@Configuration(proxyBeanMethods = false)\r\n\tstatic class RegisterBeanPhaseExample extends Example {\r\n\r\n\t\t@Bean\r\n\t\tString subclassBean() {\r\n\t\t\treturn ""alpha"";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t@Configuration(proxyBeanMethods = false)\r\n\t@Import({ ParseConfigurationPhaseExample.class, BravoExample.class })\r\n\tstatic class ParseConfigurationPhase {\r\n\r\n\t}\r\n\r\n\t@Conditional(NonMatchingParseConfigurationPhaseCondition.class)\r\n\t@Configuration(proxyBeanMethods = false)\r\n\tstatic class ParseConfigurationPhaseExample extends Example {\r\n\r\n\t\t@Bean\r\n\t\tString subclassBean() {\r\n\t\t\treturn ""alpha"";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t@Configuration(proxyBeanMethods = false)\r\n\tstatic class BravoExample extends Example {\r\n\r\n\t\t@Bean\r\n\t\tString subclassBean() {\r\n\t\t\treturn ""bravo"";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic class NonMatchingRegisterBeanPhaseCondition implements ConfigurationCondition {\r\n\r\n\t\t@Override\r\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic ConfigurationPhase getConfigurationPhase() {\r\n\t\t\treturn ConfigurationPhase.REGISTER_BEAN;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic class NonMatchingParseConfigurationPhaseCondition implements ConfigurationCondition {\r\n\r\n\t\t@Override\r\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic ConfigurationPhase getConfigurationPhase() {\r\n\t\t\treturn ConfigurationPhase.PARSE_CONFIGURATION;\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n```\r\n\r\n`superclassSkippedInParseConfigurationPhaseShouldNotPreventSubsequentProcessingOfSameSuperclass` passes but `superclassSkippedInRegisterBeanPhaseShouldNotPreventSubsequentProcessingOfSameSuperclass` fails.\r\n\r\nThe register bean phase test fails due to the `knownSuperclasses` map in `ConfigurationClassParser` being polluted. Due to the parse configuration phase conditions matching an entry is added to the map for `Example -> RegisterBeanPhaseExample`. Subsequently, the register bean phase condition on `RegisterBeanPhaseExample` does not match, so neither it nor `Example` are processed. When `BravoExample` is then parsed, `ConfigurationClassParser` considers its superclass `Example`. It\'s skipped due to the existing entry in the `knownSuperclasses` map, despite the fact that `Example` was never actually processed due to the conditions on `RegisterBeanPhaseExample`. The end result is that the context is left without a bean named `superclassBean`.']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java,358555929d4ff7d33dc1a5895a324e550cfa993e,Add_Condition,"-		return expressions.stream()
-				.filter(e -> e.getValue() != null && !e.isNegated())
-				.count();
+		long count = 0;
+		for (ParamExpression e : expressions) {
+			if (e.getValue() != null && !e.isNegated()) {
+				count++;
+			}
+		}
+		return count;",10,iteration,"Revert ""Merge pull request #32088 from Ryan-Dia""","This reverts commit 484aee069e7edaf0cf904d0135ab10b6b8162e70, reversing
changes made to 6bd7f0231dcc47e8099000dea301157788fd5b15.

See gh-32088
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32088'],1,['Use count in ParamsRequestCondition#getValueMatchCount'],"['\r\nThe `getValueMatchCount` method was refactored to use a `Stream` instead of a `for-each loop`, eliminating the need for the unnecessary local variable `count`. This change was made to reduce the risk of accidental modifications during future maintenance, as the implementation is possible without using a local variable. Additionally, the refactoring was done for enhanced stability and maintainability, especially since there was no need to interrupt the loop under specific conditions.\r\n\r\n\r\n\r\n- [x]  The test code was executed and passed successfully.']",['closed'],[3],"['@Ryan-Dia congratulations for making your first contribution to Spring Framework.', ""@Ryan-Dia the team has discussed this change today and we've decided to revert it. I had missed that the method you've changed is in a hot code path and we explicitly avoid using the Stream API in such places. "", 'Thank you for reviewing the changes I proposed. I understand the decision to revert them, recognizing that the modified method is in a hot code path. I appreciate the feedback and will ensure my future contributions are more closely aligned with these best practices\r\n\r\n\r\n']",,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java,358555929d4ff7d33dc1a5895a324e550cfa993e,Add_Condition,"-		return expressions.stream()
-				.filter(e -> e.getValue() != null && !e.isNegated())
-				.count();
+		long count = 0;
+		for (ParamExpression e : expressions) {
+			if (e.getValue() != null && !e.isNegated()) {
+				count++;
+			}
+		}
+		return count;",10,condition,"Revert ""Merge pull request #32088 from Ryan-Dia""","This reverts commit 484aee069e7edaf0cf904d0135ab10b6b8162e70, reversing
changes made to 6bd7f0231dcc47e8099000dea301157788fd5b15.

See gh-32088
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32088'],1,['Use count in ParamsRequestCondition#getValueMatchCount'],"['\r\nThe `getValueMatchCount` method was refactored to use a `Stream` instead of a `for-each loop`, eliminating the need for the unnecessary local variable `count`. This change was made to reduce the risk of accidental modifications during future maintenance, as the implementation is possible without using a local variable. Additionally, the refactoring was done for enhanced stability and maintainability, especially since there was no need to interrupt the loop under specific conditions.\r\n\r\n\r\n\r\n- [x]  The test code was executed and passed successfully.']",['closed'],[3],"['@Ryan-Dia congratulations for making your first contribution to Spring Framework.', ""@Ryan-Dia the team has discussed this change today and we've decided to revert it. I had missed that the method you've changed is in a hot code path and we explicitly avoid using the Stream API in such places. "", 'Thank you for reviewing the changes I proposed. I understand the decision to revert them, recognizing that the modified method is in a hot code path. I appreciate the feedback and will ensure my future contributions are more closely aligned with these best practices\r\n\r\n\r\n']",,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java,35bd00beaf25943521b5650ef6e004291b19eff7,Condition_Change,"-		char[] content = script.toCharArray();
-			char c = content[i];
+			char c = script.charAt(i);
-		char[] content = script.toCharArray();
-			if (content[i] == '\'') {
+			if (script.charAt(i) == '\'') {",6,condition,Remove String#toCharArray from ScriptUtils,"ScriptUtils contains two calls to String#toCharArray for the sole
purpose to iterating over all chars in a String. Not only is this
unnecessary and can be replaced with String#charAt it also causes
additional allocator and heap pressure because String#toCharArray
rather than returning the backing array (which is gone in Java 9)
creates a copy.

This commit contains the following changes:

 - remove String#toCharArray from ScriptUtils and replace with
   String#charAt

Issue: SPR-15075
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java,37f9c8675804d4282bed9d2d1fb9da9761aee86a,Condition_Change,"-		if (reactiveType == null) {
+		if (clazz == null) {",2,condition,Fix failing tests due to last commit,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java,38dcd179d5c2ad7630310cba292e80471b000d5f,Add_Condition,"+		for (PropertyAccessor accessor : accessors) {
+			if (accessor.getClass() == ReflectivePropertyAccessor.class) {
+				throw new IllegalArgumentException(""SimpleEvaluationContext is not designed for use with a plain "" +
+						""ReflectivePropertyAccessor. Consider using DataBindingPropertyAccessor or a custom subclass."");
+			}
+		}",6,condition,Guidance of which PropertyAccessors to use with SimpleEvaluationContext,"Issue: SPR-16588
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,052bbcc53031bd48dc76d070ba862f5293618600,Add_Condition,"+		Class<?>[] parameterTypes = null;
-			Class<?>[] ifcs = current.getInterfaces();
-			for (Class<?> ifc : ifcs) {
+			if (parameterTypes == null) {
+				parameterTypes = method.getParameterTypes();
+			}
+			for (Class<?> ifc : current.getInterfaces()) {
-					return ifc.getMethod(method.getName(), method.getParameterTypes());
+					return ifc.getMethod(method.getName(), parameterTypes);",9,condition,Cache parameter types array in ClassUtils.findInterfaceMethodIfPossible(),,[],0,[],[],[],[],[],1,0,n/a,n/a,n/a
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,3baacedfd9c8d908ac95be00ee745d938033cd67,Condition_Change,"-public final class CoroutinesUtils {
-
-	private CoroutinesUtils() {
-	}
+public abstract class CoroutinesUtils {
-		if (classifier.equals(JvmClassMappingKt.getKotlinClass(Flow.class))) {
+		if (classifier != null && classifier.equals(JvmClassMappingKt.getKotlinClass(Flow.class))) {",7,condition,Alignment with other abstract utils classes,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/jmx/support/MBeanRegistrationSupport.java,3dd817585b6258fe51d3279262234dc41f34009b,Condition_Change,"+import java.util.Collections;
-	protected final Set<ObjectName> registeredBeans = new LinkedHashSet<ObjectName>();
+	private final Set<ObjectName> registeredBeans = Collections.synchronizedSet(new LinkedHashSet<ObjectName>());
-		for (ObjectName objectName : this.registeredBeans) {
+		for (ObjectName objectName : new LinkedHashSet<ObjectName>(this.registeredBeans)) {
-		this.registeredBeans.clear();
+		this.registeredBeans.remove(objectName);",7,iteration,MBeanExporter does not log warnings for manually unregistered MBeans,"Issue: SPR-9451
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLStateSQLExceptionTranslator.java,40822746306f5d0e5d553504275046ec4906309b,Add_Condition,"+import org.springframework.dao.QueryTimeoutException;
+
+		if (ex.getClass().getName().contains(""Timeout"")) {
+			return new QueryTimeoutException(buildMessage(task, sql, ex), ex);
+		}
+",6,condition,SQLStateSQLExceptionTranslator checks exception class name for timeout indication before resorting to UncategorizedSQLException,"Issue: SPR-11959
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java,40bf83c9e585bcca99dc321f071f69f4e7cdffa9,Condition_Change,"-						setFunctionReturnName(paramName);
+						this.actualFunctionReturnName = paramName;
-					else if (paramName != null) {
-						setFunctionReturnName(paramName);
+					else {
+						this.actualFunctionReturnName = param.getName();
-							setFunctionReturnName(returnNameToUse);
+							this.actualFunctionReturnName = returnNameToUse;",8,condition,Restore original 4.x behavior for initialization of function return name,"Closes gh-25707
",['https://api.github.com/repos/spring-projects/spring-framework/issues/25707'],1,['CallMetaDataContext.reconcileParameters overwrites cursor name'],"['\r\n**Affects:** \\SB2\r\norg.springframework:spring-jdbc:5.1.9.RELEASE\r\nExplanation. Existing code is using a named cursor.\r\nWhen the Resultset comes back, it is always empty, even though when I debug through the spring-jdbc I see it getting created with correct results. The issue is with the named cursor.\r\n\r\nExample:\r\n\r\n> this.simpleJdbcCall = new SimpleJdbcCall(jdbcTemplate)\r\n>                 .withSchemaName(""schema"")\r\n>                 .withFunctionName(""functionName"")\r\n>                 .returningResultSet(""myCursorName"", mapperInstance);\r\n\r\nif I name the cursor \'returnValue\' then it works. Searching through the code, I saw that it is over writing \'myCursorName\' with \'returnValue\'. \'returnValue\' seems to be the default name used internally.\r\nIn SimpleJdbcCall:\r\n\r\n> \tpublic <T> T executeFunction(Class<T> returnType, SqlParameterSource args) {\r\n> \t\treturn (T) doExecute(args).get(getScalarOutParameterName());\r\n> \t}\r\n\r\n\'getScalarOutParameterName()\' is returning \'returnValue\' even though I named it as \'.returningResultSet(""myCursorName"",\'\r\n\r\nBut I also traced this to `CallMetaDataContext.reconcileParameters` around line 396:\r\n\r\n> \tparam = declaredParams.get(getFunctionReturnName());\r\n> \tif (param == null && !getOutParameterNames().isEmpty()) {\r\n> \t\tparam = declaredParams.get(getOutParameterNames().get(0).toLowerCase());\r\n> \t}\r\n> \tif (param == null) {\r\n> \t\tthrow new InvalidDataAccessApiUsageException(\r\n> \t\t\t\t""Unable to locate declared parameter for function return value - "" +\r\n> \t\t\t\t"" add an SqlOutParameter with name \'"" + getFunctionReturnName() + ""\'"");\r\n> \t}\r\n> \telse if (paramName != null) {\r\n> \t\tsetFunctionReturnName(paramName);\r\n> \t}\r\n\r\nIn older version it used to have (the last 3 lines):\r\n\r\n> \telse {\r\n> \t\tsetFunctionReturnName(param.getName());\r\n> \t}\r\n\r\nparamName is \'returnValue\', but it should be using what I supplied which is \'param.getName()\'.\r\nThen this would return the correct ruleset: return (T) doExecute(args).get(getScalarOutParameterName());\r\n\r\nPlease advise. Thanks.\r\n']",['closed'],[2],"[""This seems to be an accidental regression introduced by our nullability efforts in 5.0. I'll fix this for 5.2.9, with a backport to 5.1.18 and 5.0.19 at the same time (for release on Sep 15)."", 'Thanks for the quick response.']",,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java,4453102e852f4693222d103264c9a62b421f3d2a,Remove_Condition,"-			ExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(handlerType);
-			if (resolver == null) {
-				resolver = new ExceptionHandlerMethodResolver(handlerType);
-				this.exceptionHandlerCache.put(handlerType, resolver);
-			}
+			ExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.computeIfAbsent(handlerType, ExceptionHandlerMethodResolver::new);",6,condition,Polish ExceptionHandlerMethodResolver mapping,"See gh-27801
",['https://api.github.com/repos/spring-projects/spring-framework/issues/27801'],1,[' Polish ExceptionHandlerMethodResolver mapping'],['Refactor exception resolver cache get/null/put opration into single call.'],['closed'],[1],['Thanks for making your first contribution to Spring Framework.'],,,,,
spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java,44c31a6aad26ce2a4e7225e93e6fb26612f07b2c,Add_Condition,"-						subs.add(sessionId, subsId);
-						this.accessCache.put(cachedDestination, subs.deepCopy());
+						if (!subs.containsKey(sessionId) || !subs.get(sessionId).contains(subsId)) {
+							subs.add(sessionId, subsId);
+							this.accessCache.put(cachedDestination, subs.deepCopy());
+						}",6,condition,Fix duplicate STOMP subscription id issue,"Issue: SPR-15543
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/DefaultPathContainer.java,460947651ae4c58d31386a0a14396c273b287119,Condition_Change,"-				String value = input.substring(index + 1);
-				for (String v : StringUtils.commaDelimitedListToStringArray(value)) {
-					name = StringUtils.uriDecode(name, charset);
-					if (StringUtils.hasText(name)) {
+				name = StringUtils.uriDecode(name, charset);
+				if (StringUtils.hasText(name)) {
+					String value = input.substring(index + 1);
+					for (String v : StringUtils.commaDelimitedListToStringArray(value)) {",8,condition,Minor refactoring in DefaultPathContainer,"Closes gh-27204
",['https://api.github.com/repos/spring-projects/spring-framework/issues/27204'],1,['DefaultPathContainer#parsePathParamValues should decode and test name once in outer loop'],"['<!--\r\n!!! For Security Vulnerabilities, please go to https://spring.io/security-policy !!!\r\n-->\r\n**Affects:** 5.3.8\r\n\r\n---\r\n<!--\r\nThanks for taking the time to create an issue. Please read the following:\r\n\r\n- Questions should be asked on Stack Overflow.\r\n- For bugs, specify affected versions and explain what you are trying to do.\r\n- For enhancements, provide context and describe the problem.\r\n\r\nIssue or Pull Request? Create only one, not both. GitHub treats them as the same.\r\nIf unsure, start with an issue, and if you submit a pull request later, the\r\nissue will be closed as superseded.\r\n-->\r\nIn method parsePathParamValues, line 164: should  name be decoded and tested once in outer loop?\r\n```\r\nprivate static void parsePathParamValues(String input, Charset charset, MultiValueMap<String, String> output) {\r\n  if (StringUtils.hasText(input)) {\r\n  \tint index = input.indexOf(\'=\');\r\n  \tif (index != -1) {\r\n  \t  String name = input.substring(0, index);\r\n  \t  String value = input.substring(index + 1);\r\n  \t  for (String v : StringUtils.commaDelimitedListToStringArray(value)) {\r\n  \t  \r\n  \t  \t// should `name` be decoded and tested once in outer loop?\r\n  \t  \tname = StringUtils.uriDecode(name, charset);\r\n  \t  \tif (StringUtils.hasText(name)) {\r\n  \t  \t  output.add(name, StringUtils.uriDecode(v, charset));\r\n  \t  \t}\r\n  \t  }\r\n  \t}\r\n  \telse {\r\n  \t  String name = StringUtils.uriDecode(input, charset);\r\n  \t  if (StringUtils.hasText(name)) {\r\n  \t  \toutput.add(input, """");\r\n  \t  }\r\n  \t}\r\n  }\r\n}\r\n```']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,2270df515b040d8612c691acc0102d1a224bcd82,Add_Condition,"+			String urlString = url.toString();
+			String cleanedPath = StringUtils.cleanPath(urlString);
+			if (!cleanedPath.equals(urlString)) {
+				try {
+					return new UrlResource(ResourceUtils.toURI(cleanedPath));
+				}
+				catch (URISyntaxException | MalformedURLException ex) {
+				}
+			}",9,condition,Enforce cleaned URL for root resource from ClassLoader,"Closes gh-32828
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32828'],1,['Inconsistent use of cleaned URLs in PathMatchingResourcePatternResolver'],"['We have written our own plugin framework for Spring Boot where plugins (additional jar files) are loaded in their own PluginApplicationContext (derived from GenericApplicationContext) with their own PluginClassLoader (derived from URLClassLoader). Our plugin framework supports dynamic loading and unloading of plugins. \r\n\r\nWhen a plugin is loadded, the jar file is copied with a unique temporary name to our work directory before loading the it with our PluginCalssLoader and creating the PluginApplicationContext. \r\n\r\nWhen a plugin is unloaded, the PluginApplicationContext  is closed, the PluginClassLoader is closed and the temporary jar file is deleted.\r\n\r\nEverything works fine with Spring Boot 3.1 up to Spring Boot 3.1.11. But when we switch to Spring Boot 3.2 (even Spring Boot 3.2.5), the unloading does now work properly. The temporary jar file cannot be deleted anymore because the classloader is not freed. \r\n\r\nWhat can be the reason for this issue? What has changed between the releases?\r\n\r\nKind regards\r\nJörg']",['closed'],[10],"[""This may be due to https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.2-Release-Notes#nested-jar-support but that's only a guess. To be more specific, we'd need to know much more about what you're doing, how your running the application, and so on.\r\n\r\nIf you would like us to spend some more time investigating, please spend some time providing a complete yet minimal sample that reproduces the problem. You can share it with us by pushing it to a separate repository on GitHub or by zipping it up and attaching it to this issue. as we don't know enough about what you're doing and how you're running the Spring Boot application.\r\n\r\n"", 'Hi Andy,\r\n\r\nI\'ve put together a small sample which demonstrates the issue (attached zip). I\'ve reduced our plugin framework to only the relevant parts and removed everything else like dependency management, resource loading and everything else. While assembling the demo, I\'ve seen that there must have been something changed in the request mapping stuff of the Spring Framework. As long as I do not add @Controller classes to my plugins, they are unloaded sucessfully in Spring Boot 3.2. If I add @Controller classes to my plugins, they are unloaded successfully in Spring Boot 3.1.11 but not anymore in Spring Boot 3.2.5.\r\n\r\nIf you unzip the enclosed zip, you have 5 projects and a runtime folder:\r\n\r\n1. **demo**:  the main Spring Boot application, containing the plugin framework implementation\r\n2. **demo-layout**: the custom layout we use for packaging plugin jars\r\n3. **demo-plugin**: the parent BOM which is used by all plugin projects\r\n4. **demo-plugin1**: a simple demo plugin with one simple controller\r\n5. **demo-plugin2**: a simple demo plugin with one simple controller\r\n6. **runtime**: the runtime folder which contains everything to start the demo\r\n \r\nAfter you have extracted the zip, please execute the build-all.bat in the root folder. It builds everything and copies the targets to the correct folders. The plugin jars are copied to the plugins folder, everything else to the lib folder. Afterwards please execute the startServer.bat in runtime\\bin. It should start the small web application and you should be able to see that two plugins are activated when you open ""localhost:8081/list-plugins"" in a browser. When you now enter the url ""localhost:8081/deactivate-plugin?pluginId=demo-plugin1"" you should see a line ""Deleted file ..\\work\\demo-plugin1-1.0.0.0-<timestamp>.jar. That means the plugin class loader is completely unloaded and the jar could be deleted (the expected behaviour).\r\n\r\nNow please change the Spring Boot version to 3.2.5 in demo\\pom.xml, demo-layout\\pom.xml and demo-plugin\\pom.xml and recompile and restart everything. If you again deactivate the plugin, you will see that the output is now ""Unable to delete... "" allthough nothing has changed in our code. \r\n\r\nSo the problem must be in the Spring Framework and I need your help if I have to change something in our code.\r\n\r\nKind regards\r\nJörg\r\n[test-project.zip](https://github.com/spring-projects/spring-boot/files/15275106/test-project.zip)\r\n', 'Hi Andy,\r\n\r\nI have attached a demo zip and some instructions to reproduce the issue to the Github thread.\r\nAny help would be great because at some time we have to switch to Spring Boot 3.2.\r\n\r\nKind regards\r\nJörg\r\n', ""Thanks for the sample. I think I've managed to reproduce the behavior that you have described with a file handle being leaked but it is hard to be certain as the sample is Windows-specific and I use macOS for my day-to-day work. macOS (like Linux) also doesn't prevent a file from being deleted when it's open but I can see the leaked file handle using `lsof`.\r\n\r\nThe underlying cause of the problem is two URLs that are different but point to the same resource. They look something like this:\r\n\r\n- `file:/Users/awilkinson/Downloads/test-project/runtime/bin/../work/demo-plugin1-1.0.0.0-3486320809144453673.jar`\r\n- `file:/Users/awilkinson/Downloads/test-project/runtime/work/demo-plugin1-1.0.0.0-3486320809144453673.jar`\r\n\r\nThis difference results in the jar being opened twice but only closed once. As result there are two open file handles for the plugin jar when it is activated and one remains once it has been deactivated.\r\n\r\nI first suspected that this was due to the [new nested jar support](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.2-Release-Notes#nested-jar-support) but switching to the `CLASSIC` loader does not help. In fact, it makes things worse as there are three open file handles once the plugin has been activated and two remain once it has been deactivated. I also tried running `DemoApplication` in my IDE so that a Spring Boot's nested jar supported isn't used and the problem still occurs.\r\n\r\nGiven that the problem occurs without Spring Boot's nested jar support and only occurs when a component is found by classpath scanning of the plugin, I next suspected it was due to a change in Spring Framework and this appears to be the case. With the `demo` project updated to set the `spring-framework.version` property to 6.0.19 and rebuilt, the problem no longer occurs. Note that this downgrade requires running the app with `-Dspring.autoconfigure.exclude=org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration` as the task scheduling auto-configuration requires Spring Framework 6.2.x. We'll transfer this issue to the Framework team so that they can investigate.\r\n\r\nIn the meantime, the problem can be worked around by using a canonical directory for the `workDir` in `PluginLoader`:\r\n\r\n```\r\nFile workDir = new File(PluginConstants.WORK_DIR).getCanonicalFile();\r\n```\r\n\r\nThis removes the `bin/../` from the first URL so it's then matched by the second.\r\n\r\n"", ""Some notes for the Framework team that may help. The TL;DR is that I think that https://github.com/spring-projects/spring-framework/commit/934231729123f57542f9bd974ec39a4222c7af22 is the cause of the regression as it calls `StringUtils.cleanPath` which 6.0 does not do.\r\n\r\nOther observations that led me to this conclusion follow:\r\n\r\nThe two different URLs are used in close proximity to each other within `scanCandidateComponents`. When the first with the `bin/../` is used, the stack is as follows:\r\n\r\n```\r\nUrlJarFiles.getOrCreate(boolean, URL) line: 72\t\r\nJarUrlConnection.connect() line: 289\t\r\nJarUrlConnection.getJarFile() line: 99\t\r\nPathMatchingResourcePatternResolver.doFindPathMatchingJarResources(Resource, URL, String) line: 683\t\r\nPathMatchingResourcePatternResolver.findPathMatchingResources(String) line: 586\t\r\nPathMatchingResourcePatternResolver.getResources(String) line: 334\t\r\nPluginApplicationContext(AbstractApplicationContext).getResources(String) line: 1511\t\r\nPluginApplicationContext(GenericApplicationContext).getResources(String) line: 262\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).scanCandidateComponents(String) line: 457\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).findCandidateComponents(String) line: 351\t\r\nClassPathBeanDefinitionScanner.doScan(String...) line: 277\t\r\nClassPathBeanDefinitionScanner.scan(String...) line: 255\t\r\nPluginApplicationContext.scan(String...) line: 44\t\r\nStandardPluginRegistry.doLoadPlugin(StandardPlugin) line: 243\t\r\nStandardPluginRegistry.loadPlugin(StandardPlugin) line: 229\t\r\nStandardPluginRegistry.loadPlugins() line: 206\t\r\nStandardPluginRegistry.afterSingletonsInstantiated() line: 156\t\r\nDefaultListableBeanFactory.preInstantiateSingletons() line: 986\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 962\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).refresh() line: 624\t\r\nAnnotationConfigServletWebServerApplicationContext(ServletWebServerApplicationContext).refresh() line: 146\t\r\nSpringApplication.refresh(ConfigurableApplicationContext) line: 754\t\r\nSpringApplication.refreshContext(ConfigurableApplicationContext) line: 456\t\r\nSpringApplication.run(String...) line: 334\t\r\nSpringApplication.run(Class<?>[], String[]) line: 1354\t\r\nSpringApplication.run(Class<?>, String...) line: 1343\t\r\nDemoApplication.main(String[]) line: 49\t\r\n```\r\n\r\nWhen the second URL without the `bin/../` is used, the stack is as follows:\r\n\r\n```\r\nUrlJarFiles.getOrCreate(boolean, URL) line: 72\t\r\nJarUrlConnection.connect() line: 289\t\r\nJarUrlConnection.getInputStream() line: 195\t\r\nUrlResource.getInputStream() line: 232\t\t\r\nSimpleMetadataReader.getClassReader(Resource) line: 54\t\r\nSimpleMetadataReader.<init>(Resource, ClassLoader) line: 48\t\r\nCachingMetadataReaderFactory(SimpleMetadataReaderFactory).getMetadataReader(Resource) line: 103\t\r\nCachingMetadataReaderFactory.getMetadataReader(Resource) line: 122\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).scanCandidateComponents(String) line: 470\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).findCandidateComponents(String) line: 351\t\r\nClassPathBeanDefinitionScanner.doScan(String...) line: 277\t\r\nClassPathBeanDefinitionScanner.scan(String...) line: 255\t\r\nPluginApplicationContext.scan(String...) line: 44\t\r\nStandardPluginRegistry.doLoadPlugin(StandardPlugin) line: 243\t\r\nStandardPluginRegistry.loadPlugin(StandardPlugin) line: 229\t\r\nStandardPluginRegistry.loadPlugins() line: 206\t\r\nStandardPluginRegistry.afterSingletonsInstantiated() line: 156\t\r\nDefaultListableBeanFactory.preInstantiateSingletons() line: 986\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 962\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).refresh() line: 624\t\r\nAnnotationConfigServletWebServerApplicationContext(ServletWebServerApplicationContext).refresh() line: 146\t\r\nSpringApplication.refresh(ConfigurableApplicationContext) line: 754\t\r\nSpringApplication.refreshContext(ConfigurableApplicationContext) line: 456\t\r\nSpringApplication.run(String...) line: 334\t\r\nSpringApplication.run(Class<?>[], String[]) line: 1354\t\r\nSpringApplication.run(Class<?>, String...) line: 1343\t\r\nDemoApplication.main(String[]) line: 49\t\r\n```\r\n\r\nA URL in the second form can be seen in trace-level logging from `ClassPathBeanDefinitionScanner`:\r\n\r\n```\r\n2024-05-15T11:16:48.334+01:00 TRACE 33513 --- [           main] o.s.c.a.ClassPathBeanDefinitionScanner   : Scanning URL [jar:file:/Users/awilkinson/Downloads/test-project/runtime/work/demo-plugin1-1.0.0.0-16251652149578762890.jar!/com/example/demo/plugin1/DemoController.class]\r\n```\r\n\r\nUpon downgrading to Framework 6.0.19, this logging changes and the URL's in the first form with the `bin/../`:\r\n\r\n```\r\n2024-05-15T11:18:15.196+01:00 TRACE 33560 --- [           main] o.s.c.a.ClassPathBeanDefinitionScanner   : Scanning URL [jar:file:/Users/awilkinson/Downloads/test-project/runtime/bin/../work/demo-plugin1-1.0.0.0-14759968729258928182.jar!/com/example/demo/plugin1/DemoController.class]\r\n```\r\n\r\n6.1 is cleaning the path when going from a URL for a root dir resource to a URL for a specific resource that matches the sub-pattern. `createRelative` is called on a `UrlResource` with the URL `jar:file:/Users/awilkinson/Downloads/test-project/runtime/bin/../work/demo-plugin1-1.0.0.0-12436866063543419511.jar!/com/example/demo/plugin1/` with a `relativePath` of `DemoController.class`. This results in a `UrlResource` with the URL `jar:file:/Users/awilkinson/Downloads/test-project/runtime/work/demo-plugin1-1.0.0.0-12436866063543419511.jar!/com/example/demo/plugin1/DemoController.class` due to path cleaning that's now performed in `ResourceUtils.toURL(String)`.\r\n"", 'It looks like `ClassLoader.getResources` itself returns a uncleaned path with a `../` segment there, and our `convertClassLoaderURL` method turns it into a `UrlResource(URL)` due to a jar location - whereas it would turn it into a `FileSystemResource` with a clean path in case of a file location. So we should consistently use cleaned URL paths even for the jar location case there, I suppose.', 'This should be resolved based on my understanding above, consistently cleaning URLs from the ClassLoader.\r\n@wilkinsona please give the upcoming 6.1.7 snapshot a try with Boot in such a scenario!', ""Unfortunately, the sample is broken as before when using 6.1.7-SNAPSHOT although the exact behavior has changed. Now, the first URL that's used does not contain `bin/../`. The stack at this point is as follows:\r\n\r\n```\r\nUrlJarFiles.getOrCreate(boolean, URL) line: 72\t\r\nJarUrlConnection.connect() line: 289\t\r\nJarUrlConnection.getJarFile() line: 99\t\r\nPathMatchingResourcePatternResolver.doFindPathMatchingJarResources(Resource, URL, String) line: 694\t\r\nPathMatchingResourcePatternResolver.findPathMatchingResources(String) line: 597\t\r\nPathMatchingResourcePatternResolver.getResources(String) line: 334\t\r\nPluginApplicationContext(AbstractApplicationContext).getResources(String) line: 1511\t\r\nPluginApplicationContext(GenericApplicationContext).getResources(String) line: 263\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).scanCandidateComponents(String) line: 457\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).findCandidateComponents(String) line: 351\t\r\nClassPathBeanDefinitionScanner.doScan(String...) line: 277\t\r\nClassPathBeanDefinitionScanner.scan(String...) line: 255\t\r\nPluginApplicationContext.scan(String...) line: 44\t\r\nStandardPluginRegistry.doLoadPlugin(StandardPlugin) line: 243\t\r\nStandardPluginRegistry.loadPlugin(StandardPlugin) line: 229\t\r\nStandardPluginRegistry.loadPlugins() line: 206\t\r\nStandardPluginRegistry.afterSingletonsInstantiated() line: 156\t\r\nDefaultListableBeanFactory.preInstantiateSingletons() line: 986\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 962\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).refresh() line: 624\t\r\nAnnotationConfigServletWebServerApplicationContext(ServletWebServerApplicationContext).refresh() line: 146\t\r\nSpringApplication.refresh(ConfigurableApplicationContext) line: 754\t\r\nSpringApplication.refreshContext(ConfigurableApplicationContext) line: 456\t\r\nSpringApplication.run(String...) line: 335\t\r\nSpringApplication.run(Class<?>[], String[]) line: 1363\t\r\nSpringApplication.run(Class<?>, String...) line: 1352\t\r\nDemoApplication.main(String[]) line: 49\t\r\n```\r\n\r\nThe second URL that's used now does contain `bin/../`. The stack at this point is as follows:\r\n\r\n```\r\nUrlJarFiles.getOrCreate(boolean, URL) line: 72\t\r\nJarUrlConnection.connect() line: 289\t\r\nJarUrlConnection.getInputStream() line: 195\t\r\nPluginClassLoader(URLClassLoader).getResourceAsStream(String) line: 296\t\r\nClassPathResource.getInputStream() line: 209\t\r\nSimpleMetadataReader.getClassReader(Resource) line: 54\t\r\nSimpleMetadataReader.<init>(Resource, ClassLoader) line: 48\t\r\nCachingMetadataReaderFactory(SimpleMetadataReaderFactory).getMetadataReader(Resource) line: 103\t\r\nCachingMetadataReaderFactory.getMetadataReader(Resource) line: 122\t\r\nCachingMetadataReaderFactory(SimpleMetadataReaderFactory).getMetadataReader(String) line: 81\t\r\nConfigurationClassParser.asSourceClass(String, Predicate<String>) line: 630\t\r\nConfigurationClassParser.asSourceClass(ConfigurationClass, Predicate<String>) line: 579\t\r\nConfigurationClassParser.processConfigurationClass(ConfigurationClass, Predicate<String>) line: 244\t\r\nConfigurationClassParser.parse(AnnotationMetadata, String) line: 197\t\r\nConfigurationClassParser.parse(Set<BeanDefinitionHolder>) line: 165\t\r\nConfigurationClassPostProcessor.processConfigBeanDefinitions(BeanDefinitionRegistry) line: 417\t\r\nConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(BeanDefinitionRegistry) line: 290\t\r\nPostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(Collection<BeanDefinitionRegistryPostProcessor>, BeanDefinitionRegistry, ApplicationStartup) line: 349\t\r\nPostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory, List<BeanFactoryPostProcessor>) line: 118\t\r\nPluginApplicationContext(AbstractApplicationContext).invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory) line: 788\t\r\nPluginApplicationContext(AbstractApplicationContext).refresh() line: 606\t\r\nStandardPluginRegistry.doLoadPlugin(StandardPlugin) line: 246\t\r\nStandardPluginRegistry.loadPlugin(StandardPlugin) line: 229\t\r\nStandardPluginRegistry.loadPlugins() line: 206\t\r\nStandardPluginRegistry.afterSingletonsInstantiated() line: 156\t\r\nDefaultListableBeanFactory.preInstantiateSingletons() line: 986\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 962\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).refresh() line: 624\t\r\nAnnotationConfigServletWebServerApplicationContext(ServletWebServerApplicationContext).refresh() line: 146\t\r\nSpringApplication.refresh(ConfigurableApplicationContext) line: 754\t\r\nSpringApplication.refreshContext(ConfigurableApplicationContext) line: 456\t\r\nSpringApplication.run(String...) line: 335\t\r\nSpringApplication.run(Class<?>[], String[]) line: 1363\t\r\nSpringApplication.run(Class<?>, String...) line: 1352\t\r\nDemoApplication.main(String[]) line: 49\t\r\n```\r\n\r\nAn interesting change here is that, in the second use of the URL, it's now coming from a `ClassPathResource`. With 6.1.6, the second use of the URL was coming from a `UrlResource`.\r\n\r\nI think this explains why the sample continues to be broken as the class loader has the URL `file:/Users/awilkinson/Downloads/test-project/runtime/bin/../work/demo-plugin1-1.0.0.0-12470862329384363385.jar` on its path. The work around that I described above (using the canonical path when working with the files that populate the plugin's classpath) continues to work as both sides are then using the cleaned path. "", ""Thanks for the detailed analysis, @wilkinsona! Unfortunately it gets really involved from here since `ClassPathResource` delegates to `ClassLoader.getResourceAsStream(String)` which *internally* resolves a URL that it then obtains the stream for. We don't control those internal URLs at all unless we change the access path to `ClassLoader.getResource(String)`, cleaning the returned URL and then manually opening a stream for it. Since that might bypass optimizations in custom `ClassLoader` implementations, I'm not inclined to go there.\r\n\r\nSo for the time being, `PathMatchingResourcePatternResolver` exposes a consistent set of URLs in its results which is a sensible measure in general. Any subsequent direct class path access, be it from `ClassPathResource` or through direct `ClassLoader` usage, will still internally use the original URL though. From that perspective, it seems necessary to enforce clean URLs in the `PluginClassLoader` itself if it expects to have the same resource accessed in a uniform way (in order to be able to release each resource in a consistent fashion)."", ""I really appreciate your help on this issue. I've changed our PluginClassLoader to use the getCanonicalFile() method and everything works fine now, even in our full blown plugin framework which supports a lot more than the simple demo project.\r\n\r\nThank you again for your help. We can now finally switch to the latest Spring Boot version and no longer have to worry about the end of the 3.1 version.\r\n\r\nKind regards\r\nJörg""]",1,0,32828,1,1
spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java,47ff92873bc35345a0e0a743be4939527a27f896,Condition_Change,"-		if (!message.contains(parameter.getExecutable().toGenericString())) {
+		if (message != null && !message.contains(parameter.getExecutable().toGenericString())) {",2,condition,Add null check,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java,49356b2c0f498ae6580c1ef7d7ac0787629de7c8,Remove_Condition,"-	private final AtomicLong mostSigBits = new AtomicLong(0);
-
-		long leastSigBits = this.leastSigBits.incrementAndGet();
-		if (leastSigBits == 0) {
-			this.mostSigBits.incrementAndGet();
-		}
-		return new UUID(this.mostSigBits.get(), leastSigBits);
+		return new UUID(0, this.leastSigBits.incrementAndGet());",8,condition,SimpleIdGenerator rolls over at Long.MAX_VALUE,"Closes gh-25485
",['https://api.github.com/repos/spring-projects/spring-framework/issues/25485'],1,"['SimpleIdGenerator is not thread safe, neither it is documented to be']","[""I have a small miss-understanding about `SimpleIdGenerator`, that is a fairly trivial class:\r\n\r\n```\r\npublic class SimpleIdGenerator implements IdGenerator {\r\n\r\n\tprivate final AtomicLong mostSigBits = new AtomicLong(0);\r\n\r\n\tprivate final AtomicLong leastSigBits = new AtomicLong(0);\r\n\r\n\r\n\t@Override\r\n\tpublic UUID generateId() {\r\n\t\tlong leastSigBits = this.leastSigBits.incrementAndGet();\r\n\t\tif (leastSigBits == 0) {\r\n\t\t\tthis.mostSigBits.incrementAndGet();\r\n\t\t}\r\n\t\treturn new UUID(this.mostSigBits.get(), leastSigBits);\r\n\t}\r\n\r\n}\r\n```\r\n\r\nThe presence of `AtomicLong` hints into the fact that this is a thread-safe continuous incremented UUID, but it's not the case:\r\n\r\n```\r\nlong leastSigBits = this.leastSigBits.incrementAndGet();\r\nif (leastSigBits == 0) {\r\n```\r\n\r\nFor the sake of the discussion let's suppose that currently `leastSigBits` holds a `-1` (it has been incremented quite a lot, yes). \r\n\r\n\r\n`ThreadA` does `long leastSigBits = this.leastSigBits.incrementAndGet();`, so it puts the value into `0` (`-1 + 1 = 0`); but _before_ it does the check `if (leastSigBits == 0)`, `ThreadB` did `long leastSigBits = this.leastSigBits.incrementAndGet();` too, now on a value that is `0`, so it put the value in `1`. `ThreadA` does the check and sees a value of `1`, that `if` statement is not entered and a such a duplicate `UUID`.\r\n\r\nThis is very far stretched and I have doubts it has ever impacted any users as for this to happen they would need to generate all the `long` range of IDs, which is highly highly improbable. Still, this code is wrong.\r\n\r\nIf this is suppose to provide _thread-safe_ variant : \r\n\r\n   - document it as such\r\n  - fix the code\r\n\r\nif this isn't supposed to be thread safe, simply dropping the un-necessary `AtomicLong` (with it's `volatile` overhead) is going to be a big performance gain.\r\n\r\nEither way, I would be more than glad to fix this, if someone tells me the path I should be taking. Thank you. ""]",['closed'],[16],"['Can I fix this .', '> ThreadA does the check and sees a value of 1\r\n\r\nWhy would that be? The value of incrementAndGet is saved in a local variable. ', ""@rstoyanchev I should have had my coffee before posting this. you're right and I am wrong.\r\n\r\nEither way there is a race here.\r\n\r\n`ThreadA` does this:\r\n\r\n```\r\nlong leastSigBits = this.leastSigBits.incrementAndGet();\r\n\t\tif (leastSigBits == 0) {\r\n\t\t\tthis.mostSigBits.incrementAndGet();\r\n\t\t}\r\n```\r\n\r\nit sets `long leastSigBits` as `0`, enters the `if` statement, but does not do `this.mostSigBits.incrementAndGet();` just yet. `ThreadB` acts at the same time; it sets its local `long leastSigBits` to `1`, does not enter the `if statement` and does `return new UUID(this.mostSigBits.get(), leastSigBits);`. `this.mostSigBits.get() == 0` and  `leastSigBits == 1`; as such it returns an UUID that was already returned. \r\n\r\n"", '> > ThreadA does the check and sees a value of 1\r\n> \r\n> Why would that be? The value of incrementAndGet is saved in a local variable.\r\n\r\nThe result of `this.mostSigBits.incrementAndGet()` should be saved in a local variable too and instead of `this.mostSigBits.get()` later.', ""> @rstoyanchev I should have had my coffee before posting this. you're right and I am wrong.\r\n> \r\n> Either way there is a race here.\r\n> \r\n> `ThreadA` does this:\r\n> \r\n> ```\r\n> long leastSigBits = this.leastSigBits.incrementAndGet();\r\n> \t\tif (leastSigBits == 0) {\r\n> \t\t\tthis.mostSigBits.incrementAndGet();\r\n> \t\t}\r\n> ```\r\n> \r\n> it sets `long leastSigBits` as `0`, enters the `if` statement, but does not do `this.mostSigBits.incrementAndGet();` just yet. `ThreadB` acts at the same time; it sets its local `long leastSigBits` to `1`, does not enter the `if statement` and does `return new UUID(this.mostSigBits.get(), leastSigBits);`. `this.mostSigBits.get() == 0` and `leastSigBits == 1`; as such it returns an UUID that was already returned.\r\n\r\n@wind57  I agree."", ""> > @rstoyanchev I should have had my coffee before posting this. you're right and I am wrong.\r\n> > Either way there is a race here.\r\n> > `ThreadA` does this:\r\n> > ```\r\n> > long leastSigBits = this.leastSigBits.incrementAndGet();\r\n> > \t\tif (leastSigBits == 0) {\r\n> > \t\t\tthis.mostSigBits.incrementAndGet();\r\n> > \t\t}\r\n> > ```\r\n> > \r\n> > \r\n> > it sets `long leastSigBits` as `0`, enters the `if` statement, but does not do `this.mostSigBits.incrementAndGet();` just yet. `ThreadB` acts at the same time; it sets its local `long leastSigBits` to `1`, does not enter the `if statement` and does `return new UUID(this.mostSigBits.get(), leastSigBits);`. `this.mostSigBits.get() == 0` and `leastSigBits == 1`; as such it returns an UUID that was already returned.\r\n> \r\n> @wind57 I agree.\r\n\r\nI prepared a unit test to show the issue:\r\n\r\n```java\r\nclass SimpleIdGeneratorTest {\r\n\r\n\tprivate final AtomicLong mostSigBits = new AtomicLong(0);\r\n\tprivate final AtomicLong leastSigBits = new AtomicLong(-1);\r\n\r\n\tSet<UUID> ids = new HashSet<>();\r\n\r\n\t@Test\r\n\tvoid generateIdTest() throws InterruptedException {\r\n\r\n\t\tids.add(new UUID(0, 1));\r\n\t\tExecutorService executorService = Executors.newFixedThreadPool(2);\r\n\t\texecutorService.execute(() -> ids.add(generateId()));\r\n\t\texecutorService.execute(() -> ids.add(generateId()));\r\n\r\n\t\tThread.sleep(200);\r\n\t\tassertTrue(ids.contains(new UUID(0, 1)));\r\n\t\tassertTrue(ids.contains(new UUID(1, 0)));\r\n\r\n                 // This UUID is missing, instead UUID(mostSigBits = 0, leastSigBits = 1) got created twice\r\n\t\tassertFalse(ids.contains(new UUID(1, 1)));\r\n\t}\r\n\r\n\tpublic UUID generateId() {\r\n\t\tlong leastSigBits = this.leastSigBits.incrementAndGet();\r\n\t\tif (leastSigBits == 0) {\r\n\t\t\ttry {\r\n\t\t\t\tThread.sleep(100);\r\n\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tthis.mostSigBits.incrementAndGet();\r\n\t\t}\r\n\t\treturn new UUID(this.mostSigBits.get(), leastSigBits);\r\n\t}\r\n}\r\n```\r\n\r\nI guess, to be truly thread safe, we would need to introduce a synchronized block as shown below. Please correct me if I'm wrong.\r\n\r\n\r\n```java\r\nclass SimpleIdGeneratorTest {\r\n\r\n\tprivate final AtomicLong mostSigBits = new AtomicLong(0);\r\n\tprivate final AtomicLong leastSigBits = new AtomicLong(-1);\r\n\r\n\tSet<UUID> ids = new HashSet<>();\r\n\r\n\t@Test\r\n\tvoid generateIdTest() throws InterruptedException {\r\n\r\n\t\tids.add(new UUID(0, 1));\r\n\t\tExecutorService executorService = Executors.newFixedThreadPool(2);\r\n\t\texecutorService.execute(() -> ids.add(generateId()));\r\n\t\texecutorService.execute(() -> ids.add(generateId()));\r\n\r\n\t\tThread.sleep(200);\r\n\t\tassertTrue(ids.contains(new UUID(0, 1)));\r\n\t\tassertTrue(ids.contains(new UUID(1, 0)));\r\n\t\tassertTrue(ids.contains(new UUID(1, 1)));\r\n\t}\r\n\r\n\tpublic UUID generateId() {\r\n\t\tlong leastSigBits = this.leastSigBits.incrementAndGet();\r\n\t\tsynchronized (this) {\r\n\t\t\tif (leastSigBits == 0) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tThread.sleep(100);\r\n\t\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\tthis.mostSigBits.incrementAndGet();\r\n\t\t\t}\r\n\t\t\treturn new UUID(this.mostSigBits.get(), leastSigBits);\r\n\t\t}\r\n\t}\r\n}\r\n``` "", '@puhlerblet usually a unit test proves very little in case of thread safety, though, I admit, in this case it is fairly trivial to prove the point. Otherwise, you could also look into [this](https://openjdk.java.net/projects/code-tools/jcstress/) tool, that I usually use. It does instruction re-ordering that can prove things, see more [here](https://stackoverflow.com/questions/56273136/xxstresslcm-xxstressgcm-options-for-jvm) for example.\r\n\r\nAlso _both_ `synchronized` _and_ `AtomicLong`? Under contention, an intrinsic lock is ""inflated"" and when a GC needs to happen - it needs to deflate that, which is a process that takes time (and easily provable with `JMH`). I would suggest a `ReentrantLock`, instead.\r\n\r\nBut the problem is a bit more subtle, it seems to me. Keep in mind that for this problem to be observed, we need to go through the entire range of positive and negative values of a long. Let\'s take the easy case:\r\n\r\n```\r\n Long.MAX_VALUE == 9223372036854775807\r\n```\r\n\r\nSo there are `9223372036854775807` positive possibilities in a long. We now look of how big is an `UUID`:\r\n\r\n```\r\njava.util.UUID object internals:\r\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\r\n      0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\r\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\r\n      8     4        (object header)                           2c 19 17 00 (00101100 00011001 00010111 00000000) (1513772)\r\n     12     4        (alignment/padding gap)\r\n     16     8   long UUID.mostSigBits                          0\r\n     24     8   long UUID.leastSigBits                          0\r\nInstance size: 32 bytes\r\nSpace losses: 4 bytes internal + 0 bytes external = 4 bytes total\r\n```\r\n\r\ntake `32 bytes` multiply by `9223372036854775807` and you will need that much space, just for the `UUID`, just for positive part of the least significant bits, if you want to cover the entire range.\r\n\r\nAnd if I now look at the documentation of the class itself:\r\n\r\n> A simple IdGenerator that starts at 1 and increments by 1 with each call.\r\n\r\nI could say that there is no need for two `AtomicLong` as, realistically, no one will ever hit so many IDs.', '@wind57 since i am quite inexperienced in dealing with concurrency I really appreciate your input. Your assumption, that no one will ever hit so many IDs sounds reasonable. ', '@rstoyanchev what do you think about this one? ', ""@wind57 indeed every time `leastSigBits` rolls over, some id's may be based on the current rather than on the next `mostSigBits` value which in practice means that some id's may be issued more than once, but that would only happen once in a very long while and the duplicates would have been last issued a very long time ago\r\n\r\nI think it's simply not worth optimizing and we can just update the docs to say that uniqueness is not fully guaranteed and that on occasion, after every `Long.MAX_VALUE` number of id's are issued, there may be repeated ones for a short period. If that's an issue for some reason then don't use this generator.\r\n\r\nThoughts? /cc @garyrussell @artembilan\r\n\r\n"", ""This is by the way one alternative I thought of but again I'm not sure it's necessary:\r\n```java\r\npublic class SimpleIdGenerator implements IdGenerator {\r\n\r\n\tprivate final AtomicLong mostSigBits = new AtomicLong(0);\r\n\r\n\tprivate final AtomicLong leastSigBits = new AtomicLong(0);\r\n\r\n\tprivate final AtomicLong lastMostSigBits = new AtomicLong(-1);\r\n\r\n\r\n\t@Override\r\n\tpublic UUID generateId() {\r\n\t\tlong leastSigBits = this.leastSigBits.incrementAndGet();\r\n\t\tif (leastSigBits == 0) {\r\n\t\t\tthis.mostSigBits.incrementAndGet();\r\n\t\t}\r\n\t\telse if (leastSigBits == Long.MAX_VALUE - 10000) {\r\n\t\t\tthis.lastMostSigBits.incrementAndGet();\r\n\t\t}\r\n\t\telse if (leastSigBits < 10000) {\r\n\t\t\twhile (true) {\r\n\t\t\t\tif (!this.mostSigBits.equals(this.lastMostSigBits)) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new UUID(this.mostSigBits.get(), leastSigBits);\r\n\t}\r\n\r\n}\r\n```"", 'Bear in mind that this generator is pretty much useless in any environment that persists the ID in a DB and/or a multi-instance application.\r\n\r\nNot only does the problem (potentially) occur after `Long.MAX_VALUE` allocations, but those allocations must have occurred in the same JVM.\r\n\r\nThis generator was provided long ago for a very specific use case where the IDs were not persisted and `UUID.randomUUID()` was found to be too expensive for the ID allocation rate.\r\n\r\nSo, I would say documentation should be enough.\r\n\r\nIf performance is really an issue, consider using the `AlternativeJdkIdGenerator` instead.', ""Thanks @garyrussell those will be good clarifications. For same JVM, not persisted, and reasonably close to unique. If those trade-offs are okay you'll probably get better performance than `AlternativeJDkIdGenerator`."", ' - I agree on the part about documentation.\r\n\r\n - I disagree on the implementation prototype, though. Why not simply use a _single_ `AtomicLong` and specify in the documentation that it supports unique values up to `Long.MAX_VALUE` and then it will simply overflow? ', "">  and specify in the documentation that it supports unique values up to Long.MAX_VALUE and then it will simply overflow\r\n\r\nThat's an option I guess, make it more official that after Long.MAX_VALUE it won't be fully unique. If that is an issue to begin with then it's the wrong generator to use one way or another. @garyrussell you agree with that?"", 'Yes, I agree; users are always able to define their own implementation if they are not happy with this one.']",,,,,
spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java,49b872e387cf698de653dffa1b268c0950c0c23f,Remove_Condition,"-
+		set.add(""EOFException""); // Tomcat
-				logger.error(""Failure while closing "" + this, disconnectFailure);",3,iteration,Adjust logging following SockJS client disconnect,"Issue: SPR-11870
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java,4a81f2c904ef72ec80a043cb9f9b1d9ab2a390c5,Remove_Condition,"+
-					if (request.getFile(part.getName()) != null) {
-						part.delete();
-					}
+					part.delete();",5,condition,Remove HTTP parts workaround for Resin,"A workaround was added for the Resin Servlet container in gh-13937.
This avoids attempting to delete parts that are not named, because the
`part.delete()` call would fail for non-file entries. This can be
problematic for files that are unnamed as they might not be removed by
the Framework.

This commit removes this workaround as Resin is not supported anymore.

Fixes gh-33511
","['https://api.github.com/repos/spring-projects/spring-framework/issues/13937', 'https://api.github.com/repos/spring-projects/spring-framework/issues/33511']",2,"['org.springframework.web.multipart.support.StandardServletMultipartResolver.cleanupMultipart causes an IOException on Resin [SPR-9299]', 'parts w/o filename in `Content-Disposition` header are not cleaned from temp folder (skipped by `StandardServletMultipartResolver`)']","['**[Ralph Schaer](https://jira.spring.io/secure/ViewProfile.jspa?name=ralsa)** opened **[SPR-9299](https://jira.spring.io/browse/SPR-9299?redirect=false)** and commented\n\nTesting the StandardServletMultipartResolver on Resin 4.0.27 with this form.\n\n\\<form action=""uploadTest"" method=""post"" enctype=""multipart/form-data"">\n\\<input type=""hidden"" name=""hiddenParameter"" value=""theHiddenValue"" />\n...\n\\</form>\n\nThe resolver tries to cleanup the parts with the cleanupMultipart method\nby calling part.delete();\n\nResin throws this exception\n\n8:08:25.093 [resin-port-8080-19] WARN  o.s.w.m.s.StandardServletMultipartResolver - Failed to perform cleanup of multipart items\nava.io.IOException: Part.delete() is not applicable to part \'hiddenParameter\':\'theHiddenValue\'\nat com.caucho.server.http.AbstractCauchoRequest$PartImpl.delete(AbstractauchoRequest.java:1086) ~[resin.jar:4.0.27]       \nat org.springframework.web.multipart.support.StandardServletMultipartResolver.cleanupMultipart(StandardServletMultipartResolver.java:65) ~[spring-web-3.1.1.RELEASE.jar:3.1.1.RELEASE]\n\nNot sure why Resin not simply ignores the call to delete() for this kind of parts, as all the other servers (Tomcat, Jetty) do.\n\n\n\n---\n\n**Affects:** 3.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9fcb5781873417e3e9ce8f2a932d3de4649a26c4, https://github.com/spring-projects/spring-framework/commit/7ea85a959c810c1689fc04b8d0c2bd17e5fe6e08\n', '<!--\r\n!!! For Security Vulnerabilities, please go to https://spring.io/security-policy !!!\r\n-->\r\n**Affects:** 6.1.12 (but can not say since when exactly, older versions are probably also affected) + Jetty 12.0.12\r\n\r\nParts w/o filename in content disposition header are missing in `AbstractMultipartHttpServletRequest.getMultiFileMap()`. Because of this `part.delete()` is skipped in the resolver. \r\nThe relevant logic to filter out such parts is in https://github.com/spring-projects/spring-framework/blob/eff19ec9721381344f0eeacdebfda9da8d8bef07/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java#L101\r\n\r\nthe logic to ignore parts which are not part of the filemap is here: https://github.com/spring-projects/spring-framework/blob/eff19ec9721381344f0eeacdebfda9da8d8bef07/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java#L123\r\n\r\nShould we cleanup those parts by ourself? Not sure whether there are other dependencies (why it should not be part of filemap e.g.) but our fix is currently to overwrite the `StandardServletMultipartResolver` and delete the part nevertheless its contained or not in the filemap)']","['closed', 'closed']","[0, 2]","['I see all related code parts are VERY old, but I guess temp folder issues are sometimes hard to find, because normally temp folders are cleaned automatically on next boot. We found it because we limited the space for temp folder to a very low size (500M) when we normally have no big uploads or file generations.\r\nTo fix the problem it would be enough to remove one of the mentioned checks/filters ;) But of course I have not all required informations/experiences with other servlet containers/use cases/corner cases etc. to make a decision like that', ""This is due to #13937. In the meantime, I don't think Resin is still supported here (because there is no Jakarta release available), so I guess we can revert this workaround.""]",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/InputStreamResource.java,4e2fb308f6516cc8e2617ecef195dccdbb680ed9,Add_Condition,"-			throw new IllegalStateException(""InputStream has already been read - "" +
-					""do not use InputStreamResource if a stream needs to be read multiple times"");
+			throw new IllegalStateException(""InputStream has already been read (possibly for early content length "" +
+					""determination) - do not use InputStreamResource if a stream needs to be read multiple times"");",4,iteration,Document contentLength() behavior for InputStreamResource and custom subclasses,"Closes gh-33089
",['https://api.github.com/repos/spring-projects/spring-framework/issues/33089'],1,"[""Resource writer doesn't consider subclasses of `InputStreamResource` for content length bypass""]","['# Issue\r\n\r\nCurrently, when returning a subclass of `InputStreamResource` from a controller, `ResourceHttpMessageWriter` from the Spring Web module doesn\'t consider subclasses of `InputStreamResource` when deciding whether or not to call the `contentLength` method on the given `Resource`, it only considers the own `InputStreamResource` class. \r\n\r\nThe result is: subclasses of `InputStreamResource` must provide an override for the given method or risk having the whole input stream read by the [default implementation](https://github.com/spring-projects/spring-framework/blob/9b58e1ff71eeb6e47d3ab8dbedc1f796cf3eb17c/spring-core/src/main/java/org/springframework/core/io/AbstractResource.java#L155) of `Resource#contentLength`, which could be very undesirable and lead to errors such as:\r\n\r\n```\r\njava.lang.IllegalStateException: InputStream has already been read - do not use InputStreamResource if a stream needs to be read multiple times\r\n```\r\n\r\nThis issue doesn\'t happen if you return a `ResponseEntity<Resource>` from your controller and make sure to set the `Content-Length` header because there\'s no need to check for the length of the resource. But that\'s not always the case, there are cases where the final size of the input stream is undetermined, and for these cases, Spring already does handle these cases and properly sets and uses `chunked` as the `transfer-encoding` header, but **only** when returning an actual `InputStreamResource`. This is the point I\'m going to propose a change.\r\n\r\n**Affects:** All versions up to Spring Framework 6.1.10 / Spring Boot 3.3.1 (and possibility newer versions too).\r\n\r\n# Proposed Solution\r\n\r\nTo fix this, I propose a simple, yet significant change in the Spring Web module, changing the check being made in this line:\r\n\r\nhttps://github.com/spring-projects/spring-framework/blob/9b58e1ff71eeb6e47d3ab8dbedc1f796cf3eb17c/spring-web/src/main/java/org/springframework/http/codec/ResourceHttpMessageWriter.java#L191\r\n\r\nto this\r\n\r\n```java\r\nInputStreamResource.class.isAssignableFrom(resource.getClass())\r\n```\r\n\r\nHere\'s a simple test code I ran to double-check that the current check doesn\'t support subclasses of `InputStreamResource`.\r\n\r\n```java\r\npublic class JavaClass {\r\n\r\n    public static void evaluate() {\r\n        InputStreamResource normalInputStream = new InputStreamResource(InputStream.nullInputStream());\r\n        InputStreamResource customInputStream = new MyCustomInputStreamResource();\r\n\r\n        boolean normalInputStreamWithCurrentCheck = InputStreamResource.class == normalInputStream.getClass();\r\n        boolean customInputStreamWithCurrentCheck = InputStreamResource.class == customInputStream.getClass();\r\n\r\n        boolean normalInputStreamWithProposedCheck = InputStreamResource.class.isAssignableFrom(normalInputStream.getClass());\r\n        boolean customInputStreamWithProposedCheck = InputStreamResource.class.isAssignableFrom(customInputStream.getClass());\r\n\r\n        System.out.println(""Normal input stream with current check: "" + normalInputStreamWithCurrentCheck); // prints true\r\n        System.out.println(""Custom input stream with current check: "" + customInputStreamWithCurrentCheck); // prints false\r\n\r\n        System.out.println(""Normal input stream with proposed check: "" + normalInputStreamWithProposedCheck); // prints true\r\n        System.out.println(""Custom input stream with proposed check: "" + customInputStreamWithProposedCheck); // prints true\r\n    }\r\n\r\n    public static class MyCustomInputStreamResource extends InputStreamResource {\r\n        public MyCustomInputStreamResource() {\r\n            super(InputStream.nullInputStream());\r\n        }\r\n    }\r\n}\r\n```']",['closed'],[1],"[""This is by design: We only exclude our well-known `InputStreamResource` implementation itself there - since we know it is never working for that purpose due to the inherited `contentLength()` method which consumes the stream. For custom subclasses of `InputStreamResource`, we effectively expect and highly recommend an overridden `contentLength()` implementation. Point taken that this is not as obvious as it should be, so I'll turn this into a documentation issue.\r\n\r\nFWIW, `InputStreamResource` is generally a last resort and not fully compliant with the `Resource` abstraction. If there is any chance to provide a proper `Resource` implementation that freshly obtains the stream for every `getInputStream()` call, that's very much recommended. In particular if you are providing a custom `Resource` class anyway, you should aim for such on-demand stream retrieval there.\r\n\r\nOverall, there is only really one reason to build a custom subclass of `InputStreamResource`: providing a concrete content length for a given single-use `InputStream` in a custom `contentLength()` implementation. For every other purpose, you are better off extending from `AbstractResource` and encapsulating your resource specifics in an entirely custom resource class with built-in stream retrieval.\r\n\r\nOn a related recent note: https://github.com/spring-projects/spring-framework/issues/32802#issuecomment-2110414842""]",,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java,4edc7196fb172cabe454dfc0377d322678b7ea7f,Add_Condition,"+			if (response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR)) {
+				logger.error(logPrefix + ""500 Server Error for "" + formatRequest(request), ex);
+				return Mono.empty();
+			}",4,condition,Refine disconnected client handling in WebFlux,"If an error looks like a ""disconnected client"" but the response is not
yet committed then it can't be an I/O error from writing to the server
response. It is most likely as a result of a remote call as part of
request handling.

Not setting the response to 500 in this case results in a 200 response
status despite the error. Even if it was an I/O error from the server
response, setting the status won't impact a failed response.

Closes gh-23319
",['https://api.github.com/repos/spring-projects/spring-framework/issues/23319'],1,['Errors.NativeIoException from WebClient on WebFlux server does not set the response status'],"['If `Errors.NativeIoException` is raised from controller while handling service logic it is not properly handled by Spring Framework / WebFlux.\r\n\r\nI\'m observing the issue in one of my services that runs on Linux, it uses `WebClient` to access another web-service and, if idled for a while in connection pool, it generates `Errors.NativeIoException` with error code indication ""Connection reset by peer"" (I have mentioned it here: https://github.com/reactor/reactor-netty/issues/641#issuecomment-512865171).\r\n\r\nDisregarding the fact that this connection is not taken out from the pool automatically the behavior of the Spring WebFlux is odd: the service returns **HTTP 200 with empty content**, where as I have expected at least HTTP 500.\r\n\r\nIt can be easy reproduced by raising this Exception manually using latest versions of Spring-Boot, Netty and Java.\r\nSpring-Boot version (maven):\r\n```xml\r\n<parent>\r\n\t<groupId>org.springframework.boot</groupId>\r\n\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t<version>2.1.6.RELEASE</version>\r\n\t<relativePath/>\r\n</parent>\r\n<dependencies>\r\n\t<dependency>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-webflux</artifactId>\r\n\t</dependency>\r\n\t...\r\n```\r\n\r\nLinux version (in Docker):\r\n```\r\nroot@59a09bf2408a:/demo# uname -a\r\nLinux 59a09bf2408a 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018 x86_64 GNU/Linux\r\n```\r\n\r\nJava version:\r\n```\r\nroot@59a09bf2408a:/demo# mvn -version\r\nApache Maven 3.6.1 (d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555; 2019-04-04T19:00:29Z)\r\nMaven home: /usr/share/maven\r\nJava version: 11.0.4, vendor: Oracle Corporation, runtime: /usr/local/openjdk-11\r\nDefault locale: en, platform encoding: UTF-8\r\nOS name: ""linux"", version: ""4.9.125-linuxkit"", arch: ""amd64"", family: ""unix""\r\n```\r\n\r\nExample of controller to cause the issue:\r\n```java\r\n@RestController\r\n@EnableWebFlux\r\npublic class DemoController {\r\n\t@GetMapping(""/objects/{id}"")\r\n\tpublic Mono<DemoObject> getObjects(final @PathVariable String id) {\r\n\t\tswitch (id) {\r\n\t\t\tcase ""1"":\r\n\t\t\t\treturn Mono.error(new IOException(""Failed to read object: "" + id));\r\n\t\t\tcase ""2"":\r\n\t\t\t\t// -104 Connection reset by peer\r\n\t\t\t\treturn Mono.error(new Errors.NativeIoException(""Failed to read object: "" + id, -104));\r\n\t\t\tdefault:\r\n\t\t\t\tDemoObject data = new DemoObject();\r\n\t\t\t\tdata.id = id;\r\n\t\t\t\treturn Mono.just(data);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static final class DemoObject {\r\n\t\tpublic String id;\r\n\t}\r\n}\r\n```\r\n\r\n`-104` is a [Connection reset by peer](https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/errno.h#L87) code on Linux generated in my service by underlying communication to the external service using `WebClient`\r\n\r\nStandard `IOException` are handled as expected:\r\n```\r\n$ curl -v http://localhost:8080/objects/1\r\n*   Trying ::1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (::1) port 8080 (#0)\r\n> GET /objects/1 HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 500 Internal Server Error\r\n< Content-Type: application/json;charset=UTF-8\r\n< Content-Length: 129\r\n<\r\n* Connection #0 to host localhost left intact\r\n{""timestamp"":1563573616713,""path"":""/objects/1"",""status"":500,""error"":""Internal Server Error"",""message"":""Failed to read object: 1""}\r\n```\r\n\r\nBut the `Errors.NativeIoException` have weird handling:\r\n```\r\n~ $ curl -v http://localhost:8080/objects/2\r\n*   Trying ::1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (::1) port 8080 (#0)\r\n> GET /objects/2 HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 200 OK\r\n< content-length: 0\r\n<\r\n* Connection #0 to host localhost left intact\r\n```\r\n\r\nI believe `Errors.NativeIoException` is misinterpret by Netty as an error of incoming HTTP connection and not the underlying business / service logic. But should not this be a part of WebFlux to take care of any Exception that is raised from inside controllers and deliver them as HTTP 500 to outside clients?\r\n\r\nWorkaround: at the moment I am using `Mono.onErrorMap` to map any `Errors.NativeIoException` into `ResponseStatusException` before it leaves the controller to avoid **HTTP 200** response in case of internal issues. But this feels very wrong to me.\r\n\r\nI\'ll be happy about any guidance and/or explanation about current behavior of WebFlux.\r\nThank you!']",['closed'],[1],"['It looks like the ""Connection reset by peer"" triggers this [error handling](https://github.com/spring-projects/spring-framework/blob/957f0fac7a0dd1f0a7a5742fbeb8c40b7da439f0/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java#L270-L279) where the assumption is that the client is gone and we don\'t event set the response status.\r\n\r\nWe can at least try and set the status to 500, so if the error is a result of request handling, then the response would correctly reflect that.\r\n\r\nWe considered differentiating between IO errors on the server response vs request handling in #21875. However it was determined Reactor Netty already uses different exceptions. @violetagg is this case where the above `Errors.NativeIoException` somehow slips through and isn\'t getting translated to `PrematureCloseException`?']",,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java,4edc7196fb172cabe454dfc0377d322678b7ea7f,Add_Condition,"+			if (response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR)) {
+				logger.error(logPrefix + ""500 Server Error for "" + formatRequest(request), ex);
+				return Mono.empty();
+			}",4,iteration,Refine disconnected client handling in WebFlux,"If an error looks like a ""disconnected client"" but the response is not
yet committed then it can't be an I/O error from writing to the server
response. It is most likely as a result of a remote call as part of
request handling.

Not setting the response to 500 in this case results in a 200 response
status despite the error. Even if it was an I/O error from the server
response, setting the status won't impact a failed response.

Closes gh-23319
",['https://api.github.com/repos/spring-projects/spring-framework/issues/23319'],1,['Errors.NativeIoException from WebClient on WebFlux server does not set the response status'],"['If `Errors.NativeIoException` is raised from controller while handling service logic it is not properly handled by Spring Framework / WebFlux.\r\n\r\nI\'m observing the issue in one of my services that runs on Linux, it uses `WebClient` to access another web-service and, if idled for a while in connection pool, it generates `Errors.NativeIoException` with error code indication ""Connection reset by peer"" (I have mentioned it here: https://github.com/reactor/reactor-netty/issues/641#issuecomment-512865171).\r\n\r\nDisregarding the fact that this connection is not taken out from the pool automatically the behavior of the Spring WebFlux is odd: the service returns **HTTP 200 with empty content**, where as I have expected at least HTTP 500.\r\n\r\nIt can be easy reproduced by raising this Exception manually using latest versions of Spring-Boot, Netty and Java.\r\nSpring-Boot version (maven):\r\n```xml\r\n<parent>\r\n\t<groupId>org.springframework.boot</groupId>\r\n\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t<version>2.1.6.RELEASE</version>\r\n\t<relativePath/>\r\n</parent>\r\n<dependencies>\r\n\t<dependency>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-webflux</artifactId>\r\n\t</dependency>\r\n\t...\r\n```\r\n\r\nLinux version (in Docker):\r\n```\r\nroot@59a09bf2408a:/demo# uname -a\r\nLinux 59a09bf2408a 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018 x86_64 GNU/Linux\r\n```\r\n\r\nJava version:\r\n```\r\nroot@59a09bf2408a:/demo# mvn -version\r\nApache Maven 3.6.1 (d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555; 2019-04-04T19:00:29Z)\r\nMaven home: /usr/share/maven\r\nJava version: 11.0.4, vendor: Oracle Corporation, runtime: /usr/local/openjdk-11\r\nDefault locale: en, platform encoding: UTF-8\r\nOS name: ""linux"", version: ""4.9.125-linuxkit"", arch: ""amd64"", family: ""unix""\r\n```\r\n\r\nExample of controller to cause the issue:\r\n```java\r\n@RestController\r\n@EnableWebFlux\r\npublic class DemoController {\r\n\t@GetMapping(""/objects/{id}"")\r\n\tpublic Mono<DemoObject> getObjects(final @PathVariable String id) {\r\n\t\tswitch (id) {\r\n\t\t\tcase ""1"":\r\n\t\t\t\treturn Mono.error(new IOException(""Failed to read object: "" + id));\r\n\t\t\tcase ""2"":\r\n\t\t\t\t// -104 Connection reset by peer\r\n\t\t\t\treturn Mono.error(new Errors.NativeIoException(""Failed to read object: "" + id, -104));\r\n\t\t\tdefault:\r\n\t\t\t\tDemoObject data = new DemoObject();\r\n\t\t\t\tdata.id = id;\r\n\t\t\t\treturn Mono.just(data);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static final class DemoObject {\r\n\t\tpublic String id;\r\n\t}\r\n}\r\n```\r\n\r\n`-104` is a [Connection reset by peer](https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/errno.h#L87) code on Linux generated in my service by underlying communication to the external service using `WebClient`\r\n\r\nStandard `IOException` are handled as expected:\r\n```\r\n$ curl -v http://localhost:8080/objects/1\r\n*   Trying ::1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (::1) port 8080 (#0)\r\n> GET /objects/1 HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 500 Internal Server Error\r\n< Content-Type: application/json;charset=UTF-8\r\n< Content-Length: 129\r\n<\r\n* Connection #0 to host localhost left intact\r\n{""timestamp"":1563573616713,""path"":""/objects/1"",""status"":500,""error"":""Internal Server Error"",""message"":""Failed to read object: 1""}\r\n```\r\n\r\nBut the `Errors.NativeIoException` have weird handling:\r\n```\r\n~ $ curl -v http://localhost:8080/objects/2\r\n*   Trying ::1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (::1) port 8080 (#0)\r\n> GET /objects/2 HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 200 OK\r\n< content-length: 0\r\n<\r\n* Connection #0 to host localhost left intact\r\n```\r\n\r\nI believe `Errors.NativeIoException` is misinterpret by Netty as an error of incoming HTTP connection and not the underlying business / service logic. But should not this be a part of WebFlux to take care of any Exception that is raised from inside controllers and deliver them as HTTP 500 to outside clients?\r\n\r\nWorkaround: at the moment I am using `Mono.onErrorMap` to map any `Errors.NativeIoException` into `ResponseStatusException` before it leaves the controller to avoid **HTTP 200** response in case of internal issues. But this feels very wrong to me.\r\n\r\nI\'ll be happy about any guidance and/or explanation about current behavior of WebFlux.\r\nThank you!']",['closed'],[1],"['It looks like the ""Connection reset by peer"" triggers this [error handling](https://github.com/spring-projects/spring-framework/blob/957f0fac7a0dd1f0a7a5742fbeb8c40b7da439f0/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java#L270-L279) where the assumption is that the client is gone and we don\'t event set the response status.\r\n\r\nWe can at least try and set the status to 500, so if the error is a result of request handling, then the response would correctly reflect that.\r\n\r\nWe considered differentiating between IO errors on the server response vs request handling in #21875. However it was determined Reactor Netty already uses different exceptions. @violetagg is this case where the above `Errors.NativeIoException` somehow slips through and isn\'t getting translated to `PrematureCloseException`?']",,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,502997d8e986dcfde1f49b2b2f443a32b5488b13,Condition_Change,"-		if (dependentBeans == null) {
+		if (dependentBeans == null || dependentBeans.isEmpty()) {",2,condition,Further simplify DefaultSingletonBeanRegistry.isDependent(),"See gh-30839
",['https://api.github.com/repos/spring-projects/spring-framework/issues/30839'],1,['Simplify `DefaultSingletonBeanRegistry.isDependent()`'],['Move `alreadySeen` out of for-loop.'],['closed'],[3],"['@bnbakp0582 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30839)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30839) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@bnbakp0582 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30839)!', 'Hi @bnbakp0582,\r\n\r\nThis has been merged into `6.0.x` and `main` in fb4ad2f3ba0bf0d968a49a05efd8fd41f3e2509d and revised in 502997d8e986dcfde1f49b2b2f443a32b5488b13.\r\n\r\nThanks']",,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java,51091f2242b06bcbe25cf99bc7ed74b67bd3b0f1,Add_Condition,"+	@SuppressWarnings(""deprecation"")  // for Environment.acceptsProfiles(String...)",1,iteration,Suppress deprecation warning in DefaultBeanDefinitionDocumentReader,"Issue: SPR-12458
",[],0,[],[],[],[],[],0,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java,51875cdf5fa1ee0fafad85876cd14e0ea422f003,Condition_Change,"-		if (!c1.isInterface()) {
-			proxy.init();
+		if (!c1.isInterface() && c1 != Object.class) {
+			try {
+				proxy.init();
+			}
+			catch (CodeGenerationException ex) {
+			}",8,condition,Defensive early initialization of CGLIB method proxies (for AOT processing),"Method proxies might not actually be used later on, so failure is not fatal.

See gh-29107
",['https://api.github.com/repos/spring-projects/spring-framework/issues/29107'],1,['CGLIB proxies are not used at runtime on `@Configuration` classes in AOT mode'],"['Consider the following configuration class:\r\n\r\n```java\r\n@Configuration\r\npublic class MyConfiguration {\r\n\t@Bean\r\n\tA a() { return new A(); }\r\n\r\n\t@Bean\r\n\tB b() { return new B(this.a()); }\r\n\t\r\n\tstatic class A {\r\n\t\tpublic A() { System.out.println(""A constructor""); }\r\n\t}\r\n\r\n\tstatic class B {\r\n\t\tpublic B(A a) { System.out.println(""B constructor""); }\r\n\t}\r\n}\r\n```\r\n\r\nOn JVM in regular mode, it prints:\r\n\r\n```\r\nA constructor\r\nB constructor\r\n```\r\n\r\nOn JVM in AOT mode or native, while it seems CGLIB proxies are generated correctly at build time,  but they seems not used since it prints:\r\n\r\n```\r\nA constructor\r\nA constructor\r\nB constructor\r\n```\r\n\r\nThe code generated AOT maybe needs to be updated to leverage those CGLIB proxies.']",['closed'],[2],"[""We need to swap the creation of the raw class to the cglib proxy. I was hoping I could avoid having to change code generation for this but it turns out that there isn't a way to achieve this using an instance supplier. \r\n\r\nI've a proposal in [3b8bcdf](https://github.com/snicoll/spring-framework/commit/3b8bcdfe281b606a1ce8ee354b0cef56913ccfcd).\r\n\r\nThis is blocked by https://github.com/spring-projects/spring-boot/issues/32304 and, to some extent, https://github.com/spring-projects/spring-framework/issues/29141"", 'I have it working but I think it needs a bit more work to test it correctly. ']",,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java,5405c07d26db564cb680c713dce5abb859635147,Add_Condition,"+		if (!this.setMetadataReaderFactoryCalled) {
+			this.metadataReaderFactory = new CachingMetadataReaderFactory(resourceLoader);
+		}",3,condition,Configuration class processing uses MetadataReaderFactory for current ResourceLoader,"Issue: SPR-14684
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,55faf6e3205d26a4ba693f40c1ea1cef179f31cb,Condition_Change,"+import org.springframework.http.HttpMethod;
-				boolean isGet = ""GET"".equals(method);
-				if (isGet || ""HEAD"".equals(method)) {
+				boolean isGet = HttpMethod.GET.matches(method);
+				if (isGet || HttpMethod.HEAD.matches(method)) {",5,condition,Use HttpMethod enums,"See gh-26855
",['https://api.github.com/repos/spring-projects/spring-framework/issues/26855'],1,['Use HttpMethod enum constants instead of strings in DispatcherServlet'],"['doDispatch method of Dispatcher servlet class uses hard coded strings, such as ""GET"" and ""HEAD"".\r\nso, I replaced it with HttpMethod enum.']",['closed'],[11],"['@BryceYangS Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26855)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26855) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@BryceYangS Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26855)!', ""i think it's not a good idea"", ""> i think it's not a good idea\r\n\r\n@TAKETODAY Could I hear why you think so? Your feedback will be of great help to my study."", ""I just stumbled over this PR - I hope you don't mind me commenting. I wonder if we should use `HttpMethod.GET.name().equals()` rather than `HttpMethod.GET.matches()`. I did a small benchmark (on JDK 11) comparing things, and the former is expectedly a bit faster because it avoids the map access.\r\n\r\n```\r\nMyBenchmark.testMatches                         avgt    6   4,476 ±  1,153   ns/op\r\nMyBenchmark.testNameEquals                      avgt    6   2,462 ±  0,114   ns/op\r\n```\r\nGiven that we deal with `DispatcherServlet` here, I wonder if we should strive for the better performing option even though it's definitely a micro-optimization.\r\n"", '@dreis2211 I suppose we could also fine-tune the `HttpMethod.matches` implementation to `name().equals(method)` then - if known to be faster?', '@jhoeller I was wondering but it actually was like that before - see 3d87718fc6d14a9638682317121f9647e0441cc3. Maybe you remember why that changed?', '@jhoeller @dreis2211 Thank all of your comments. I thought the problem about a performance for a while. If there is a reason why `HttpMethod.matches ` was changed, How about using `name().equals(method)` in DispatcherServlet?', '@BryceYangS Using `name().equals(method)` is not as good as using the original', 'No idea why I changed that back then... maybe a vague suspicion that hashing within the `Map` lookup would be faster than a String equality comparison, or maybe just a stylistic notion? In any case, we can change the current `HttpMethod.resolve` implementation back to a name comparison if that is known to be faster, and then rely on that implementation where appropriate.', ""This has been merged and I've also switched HttpMethod matches to String equals comparison with b76e0c482608c664d5d1d701b995dc4ceb0ed340.""]",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java,5619b005f03d5b4160c3a0bf31991067f58401be,Condition_Change,"-				if ((annotation.annotationType() == annotationType
-						|| annotation.annotationType().getName().equals(annotationName))
-						|| processor.alwaysProcesses()) {
-
+				if (annotation.annotationType() == annotationType ||
+						annotation.annotationType().getName().equals(annotationName) ||
+						processor.alwaysProcesses()) {",7,condition,Polishing,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,5b47816183e4e9a0dc2ad5d2175065ac17539719,Add_Condition,"-				multipartRequestParsed = processedRequest != request;
+				multipartRequestParsed = (processedRequest != request);
+			else if (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) instanceof MultipartException) {
+				logger.debug(""Multipart resolution failed for current request before - "" +
+						""skipping re-resolution for undisturbed error rendering"");
+			}",6,condition,DispatcherServlet skips multipart resolution if error page exception attribute indicates MultipartException as root cause,"Issue: SPR-11716
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java,5b97c47fc4b9a4248db9cd2472f25ae78242baf4,Add_Condition,"+		ZonedDateTime expires = (cookie instanceof MockCookie ? ((MockCookie) cookie).getExpires() : null);
-			ZonedDateTime expires = (cookie instanceof MockCookie ? ((MockCookie) cookie).getExpires() : null);
+		else if (expires != null) {
+			buf.append(""; Expires="");
+			buf.append(expires.format(DateTimeFormatter.RFC_1123_DATE_TIME));
+		}",6,condition,Sync changes in MockHttpServletResponse test fixture,"See gh-26558
",['https://api.github.com/repos/spring-projects/spring-framework/issues/26558'],1,['Support cookies with Expires attribute but no Max-Age attribute in MockHttpServletResponse'],"[""According to the spec it is allowed to have cookies that only use the `Expires` attribute (even though it's really old style).\r\n\r\n`MockHttpServletResponse` didn't previously support that properly.\r\n\r\nSo, added a testcase and made it work.""]",['closed'],[4],"['@koosg Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26558)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26558) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@koosg Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26558)!', 'For reference: [HTTP Cookie Syntax](https://tools.ietf.org/html/rfc6265#section-4.1.1).', 'This has been merged into `master` for 5.3.5 and backported to `5.2.x` for 5.2.14.\r\n\r\nThanks']",,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java,5c77c3739ea2eaf292639a702f721c0b5a73a277,Condition_Change,"-			for (Class<?> beanInterface : beanClass.getInterfaces()) {
+			for (Class<?> beanInterface : ClassUtils.getAllInterfacesForClass(beanClass)) {",2,iteration,Find destroy methods in superclass interfaces,"Related tests will be added in
https://github.com/spring-projects/spring-aot-smoke-tests.

Closes gh-32006
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32006'],1,['Destroy method not found in Native image for `ExecutorService` Bean type'],"[""**Describe the issue**\r\nI have a Spring Boot 3 _(version 3.2.1)_ app with nothing on the classpath except `spring-boot-starter`.\r\n\r\nif I use following code:\r\n```java\r\npackage com.example.demo;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.context.annotation.Bean;\r\n\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ThreadPoolExecutor;\r\n\r\n@SpringBootApplication\r\npublic class DemoApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(DemoApplication.class, args);\r\n    }\r\n\r\n    @Bean\r\n    ExecutorService executorService() {\r\n        return Executors.newFixedThreadPool(10);\r\n    }\r\n}\r\n```\r\n\r\n...and then compile as Native image:\r\n```bash\r\nmvn clean native:compile -Pnative\r\n```\r\n\r\n...and run: \r\n```bash\r\n./target/demo\r\n```\r\n\r\n...then I get the following error:\r\n```bash\r\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'executorService': Invalid destruction signature\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:643) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975) ~[demo:6.1.2]\r\n        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:960) ~[demo:6.1.2]\r\n        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625) ~[demo:6.1.2]\r\n        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762) ~[demo:3.2.1]\r\n        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464) ~[demo:3.2.1]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[demo:3.2.1]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358) ~[demo:3.2.1]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347) ~[demo:3.2.1]\r\n        at com.example.demo.DemoApplication.main(DemoApplication.java:15) ~[demo:na]\r\nCaused by: org.springframework.beans.factory.support.BeanDefinitionValidationException: Could not find a destroy method named 'shutdown' on bean with name 'executorService'\r\n        at org.springframework.beans.factory.support.DisposableBeanAdapter.<init>(DisposableBeanAdapter.java:134) ~[na:na]\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.registerDisposableBeanIfNecessary(AbstractBeanFactory.java:1868) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:639) ~[demo:6.1.2]\r\n```\r\n\r\nAnd if I'll switch bean type to a precise one: _(`ThreadPoolExecutor`)_ instead of _(`ExecutorService`)_, then it works:\r\n```java\r\n    // This works\r\n    @Bean\r\n    ThreadPoolExecutor executorService() {\r\n        return (ThreadPoolExecutor) Executors.newFixedThreadPool(10);\r\n    }\r\n\r\n    // This doesn't work\r\n    @Bean\r\n    ExecutorService executorService() {\r\n        return Executors.newFixedThreadPool(10);\r\n    }\r\n```\r\n\r\nThis issue is almost exactly the same like this one: [#29545](https://github.com/spring-projects/spring-framework/issues/29545) except that now it only reproducing for `ExecutorService`.\r\n\r\n**Steps to reproduce the issue**\r\nPlease see reproducible Demo app: [spring-native-executor-demo.zip](https://github.com/spring-projects/spring-framework/files/13890213/spring-native-executor-demo.zip)\r\n\r\n**Describe GraalVM and your environment:**\r\n - GraalVM version: **17.0.9-graal**\r\n - JDK major version: **17**\r\n - OS: **macOS Sonoma 14.1.1 (23B81)**\r\n - Architecture: **ARM64**""]",['closed'],[4],"[""Looks indeed very similar to #29545, especially given the fact that `ExecutorService` has the `void shutdown()` method defined at interface level.\r\n\r\nSurprisingly, I can't reproduce with using SDKman with `sdk use java 23.1.1.r21-nik` or `sdk use java 21.0.1-graalce`, but I can reproduce using `sdk use java 17.0.9-graalce`. On Spring AOT side, the metadata for `ExecutorService#shutdown` are generated as expected.\r\n\r\nThat likely indicates that this is a GraalVM limitation or bug only fixed in recent versions.\r\n\r\nAs consequence, and since we don't have any actionable item on Spring side, I close this ticket.\r\n\r\nI advise you to use a more recent GraalVM distribution or add invoke reflection hints on `ThreadPoolExecutor#shutdown`."", '@sdeleuze thank you for quick investigation!\r\nI see that for different java versions the metadata for `ExecutorService`\'s Destroy method generated differently.\r\n\r\nFor the Java 17 _(`sdk use java 17.0.9-graalce`)_ metadata looks like this:\r\n```json\r\n  {\r\n    ""name"": ""java.util.concurrent.ExecutorService"",\r\n    ""queryAllPublicMethods"": true,\r\n    ""queryAllDeclaredMethods"": true,\r\n    ""methods"": [\r\n      {\r\n        ""name"": ""shutdown"",    <<== one method, which is not default in ExecutorService interface\r\n        ""parameterTypes"": [ ]\r\n      }\r\n    ]\r\n  },\r\n\r\n```\r\n\r\n...but for the Java 21 _(`sdk use java 21.0.1-graalce`)_ metadata looks like this:\r\n\r\n```json\r\n  {\r\n    ""name"": ""java.util.concurrent.ExecutorService"",\r\n    ""queryAllPublicMethods"": true,\r\n    ""queryAllDeclaredMethods"": true,\r\n    ""methods"": [\r\n      {\r\n        ""name"": ""close"",      <<== new default method\r\n        ""parameterTypes"": [ ]\r\n      }\r\n    ]\r\n  },\r\n```\r\n\r\n...because, since the Java 19 `ExecutorService` interface extends `AutoClosable`, and has [`default void close()` method](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/ExecutorService.html#close()).\r\n\r\nSo, probably this is the issue?', ""Good catch, this is probably the reason for such difference of behavior. But that's does not explain why the repro for #29545 works and this one on Java 17 doesn't.\r\n\r\nAfter a deeper look, I think I found the cause: #29545 does not attempt to find methods in superclass interfaces. As a consequence, I reopen this issue."", '@sdeleuze I suppose this should be backported to 6.0.x as well?']",,,,,
spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java,5cbc972a0de195ebb09645f65a1dea8fb85880c9,Condition_Change,"-		if (logger.isDebugEnabled()) {
-			logger.debug(""Listener container task ["" + task + ""] has been rejected and paused: "" + ex);
+		if (logger.isWarnEnabled()) {
+			logger.warn(""Listener container task ["" + task + ""] has been rejected and paused: "" + ex);",4,condition,Log rejected listener container tasks at warn level,"Closes gh-27451
",['https://api.github.com/repos/spring-projects/spring-framework/issues/27451'],1,['DefaultMessageListenerContainer does not log an error/warning when consumer tasks have been rejected'],"['**Affects:** 5.1.2, 5.3.9\r\n\r\n_Background:_ We experienced an issue due to `DefaultMessageListenerContainer` no longer receiving messages. This was because of a misunderstanding on our part how `ThreadPoolExecutorFactoryBean` works. We used following settings for the executor:\r\n\r\ncorePoolSize=5\r\nmaximumPoolSize=10\r\nqueueCapacity=1\r\n\r\nwhich was injected into a `DefaultMessageListenerContainer` with these parameters:\r\n\r\nconcurrentConsumers=1\r\nmaxConcurrentConsumers=10\r\nmaxMessagesPerTask=1\r\n\r\nThe goal was to have a dynamic scaling of threads aligned with the scaling of consumers; however we shouldn\'t have set neither a queue capacity nor a maximum pool size and rather used something like `Executors.newCachedThreadPool()`; after all, the container will take care of not scheduling more than maxConcurrentConsumers * 2 threads in the worst case (since each task reschedules itself if all are busy).\r\n\r\nOur problem was reproducible given [this test](https://github.com/grubeninspekteur/defaultmessagelistenercontainer/blob/master/src/test/java/com/example/demo/MessageListenerTest.java), the log is available [here](https://github.com/grubeninspekteur/defaultmessagelistenercontainer/blob/master/experiment.log) (I killed the process after no more messages were being received).\r\n\r\n_The issue:_ There are some rejected task debug level log entries due to the executor misconfiguration, but no warn or error entries. I would expect at least the error ""All scheduled consumers have been paused, probably due to tasks having been rejected. Check your thread pool configuration! Manual recovery necessary through a start() call."" at [DefaultMessageListenerContainer.java#L1180-L1183](https://github.com/spring-projects/spring-framework/blob/main/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java#L1180-L1183) to appear. I don\'t understand why it didn\'t, since everything happens inside locks held on the `lifecycleMonitor`.\r\n\r\nOn a side note, why is the rejection of tasks logged only at debug level (not even info)? After all, dropping below `concurrentConsumers` raises a warning (this works in the test if I set `concurrentConsumers` to 2). Is there any use case of configuring an executor that occasionally rejects tasks?']",['closed'],[1],"[""Not sure why the error did not get logged, but in any case, each individual rejection should get logged at warn level at least. While executor implementations may temporarily reject tasks for any reason, it really isn't the norm, in particular not with the common executor implementations out there. I'll therefore backport the log level change to 5.2.18 as well.""]",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,5d0700b9360399802bf929a0b7b845cb6bb73813,Add_Condition,"+	@Deprecated  // just here for older tool versions trying to reflectively clear the cache
+	private static final Map<Class<?>, ?> annotatedInterfaceCache = annotatedBaseTypeCache;
+",3,iteration,AnnotationUtils.annotatedInterfaceCache available as deprecated field,"Issue: SPR-16675
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/CollectionUtils.java,6013591fac1444df88bb75542367633373603a45,Remove_Condition,"-		if (isEmpty(source) || isEmpty(candidates)) {
-			return false;
-		}
-		for (Object candidate : candidates) {
-			if (source.contains(candidate)) {
-				return true;
-			}
-		}
-		return false;
+		return findFirstMatch(source, candidates) != null;",10,iteration,Polish containsAny of CollectionUtils by reusing findFirstMatch,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/aot/generate/ClassNameGenerator.java,63fae8c5a7ea21e4ff59ee094cc4541c048e8e54,Add_Condition,"-		if(target != null) {
-			return generateSequencedClassName(target.getName().replace(""$"", ""_"") + SEPARATOR + StringUtils.capitalize(featureName));
+		if (target != null) {
+			return generateSequencedClassName(target.getName().replace(""$"", ""_"")
+					+ SEPARATOR + StringUtils.capitalize(featureName));
-		return generateSequencedClassName(AOT_PACKAGE+ featureName);
+		return generateSequencedClassName(AOT_PACKAGE + featureName);",7,condition,Clarify the scope of target in ClassNameGenerator,"Closes gh-28517
",['https://api.github.com/repos/spring-projects/spring-framework/issues/28517'],1,['Ambiguous behavior for ClassNameGenerator::generateClassName'],"['`ClassNameGenerator` has two variants for the `generateClassName` feature. One that takes a target `Class<?>` and another that takes a target `String`. I\'m a bit confused by the concept of a target here and I think we should explain that a bit more in the javadocs.\r\n\r\nThese methods also have different behavior:\r\n\r\n```java\r\nClassName first = this.generator.generateClassName(java.io.InputStream.class, ""bytes"");\r\n// will result in java.io.InputStream__Bytes\r\n\r\nClassName first = this.generator.generateClassName(""java.io.InputStream"", ""bytes"");\r\n// will result in __.JavaIoInputStream__Bytes\r\n```\r\n\r\nEven if the difference of behavior is intended, the name and docs are very similar. Also, a common use case for the `ClassNameGenerator` is about generating sources in a specific package to work around visibility issues. The second variant can make this case more difficult to achieve.\r\n\r\nAs a side note, this class is also referring to the now defunct `@see GeneratedClassName`.\r\n\r\ncc @philwebb @snicoll ']",['closed'],[2],"[""The `String` variant was added to support generation where there isn't a single class that can be linked. I think it's currently only used in `BeanRegistrationsAotContribution`. We should probably rename that method to make it clearer that there is no target class.\r\n\r\nI know @snicoll was wondering about the use of the `__` package in general, perhaps we can make the generated `BeanRegistrations` class be in the same package as the `@SpringBootApplication` class then we can drop the string version entirely.\r\n\r\nThe `ClassNameGenerator` should be removed, we dropped that class during the prototype work."", 'The second method that takes a `String` rather than a `Class<?>` has been removed in 4bd33cb6e0659df2cd0b9fa04feea8fd77e5a16d. I am going to look at the Javadoc and see if we can clarify ']",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CollectionFactory.java,6806aaf162f396e89cc07735d399737c87bcd2a1,Condition_Change,"-		else if (TreeSet.class == collectionType || SortedSet.class == collectionType || NavigableSet.class == collectionType) {
+		else if (TreeSet.class == collectionType || NavigableSet.class == collectionType
+				|| SortedSet.class == collectionType) {",3,condition,"Polish ""Add missing TreeSet to CollectionFactory.createCollection()""","See gh-28949
",['https://api.github.com/repos/spring-projects/spring-framework/issues/28949'],1,['Support TreeSet collection type in CollectionFactory.createCollection() without using reflection'],['It seems to have been missed in #28718.'],['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java,6887802526dbef2857c4c0106153c0650ec5e4aa,Condition_Change,"-				MethodHandles.Lookup lookup =
-						(MethodHandles.Lookup) privateLookupInMethod.invoke(null, contextClass, MethodHandles.lookup());
+				MethodHandles.Lookup lookup = (MethodHandles.Lookup)
+						privateLookupInMethod.invoke(null, contextClass, MethodHandles.lookup());
-				if (!(ex.getTargetException() instanceof IllegalArgumentException)) {
-					throw new CodeGenerationException(ex.getTargetException());
+				Throwable target = ex.getTargetException();
+				if (target.getClass() != LinkageError.class && target.getClass() != IllegalArgumentException.class) {
+					throw new CodeGenerationException(target);",9,condition,Fallback to ClassLoader.defineClass for Lookup.defineClass LinkageError,"Issue: SPR-16902
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java,68cc57549a56480b723b6112e1bee0de114eeda1,Condition_Change,"-				
+
+			boolean isTerminated = this.terminated;
+
-			if (this.terminated) {
+			if (isTerminated) {",6,condition,Restore correct order of terminated flag check,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java,6d91d54fc9e93bbecbfb2778cf4d1fed1a39b7f6,Condition_Change,"-	private static ConversionService defaultConversionService;
+	private static volatile ConversionService defaultConversionService;
-		synchronized (this) {
-			if (defaultConversionService == null) {
-				defaultConversionService = new DefaultConversionService();
-			}
+		if (defaultConversionService == null) {
+			defaultConversionService = new DefaultConversionService();",8,condition,StandardTypeConverter initializes default ConversionService against volatile field,"Issue: SPR-14465
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java,6e0dfd6999aaec4590625de9f818abab16c3aa92,Condition_Change,"+import org.springframework.http.HttpHeaders;
-		if (this.writeAcceptCharset) {
-			outputMessage.getHeaders().setAcceptCharset(getAcceptedCharsets());
+		HttpHeaders headers = outputMessage.getHeaders();
+		if (this.writeAcceptCharset && headers.get(HttpHeaders.ACCEPT_CHARSET) == null) {
+			headers.setAcceptCharset(getAcceptedCharsets());
-		Charset charset = getContentTypeCharset(outputMessage.getHeaders().getContentType());
+		Charset charset = getContentTypeCharset(headers.getContentType());",8,condition,Check if Accept-Charset is present before adding it,"Closes gh-22506
",['https://api.github.com/repos/spring-projects/spring-framework/issues/22506'],1,['StringHttpMessageConverter will add all the default charsets even if Accept-Charset is set explicitly'],"[""<!--\r\n!!! For Security Vulnerabilities, please go to https://pivotal.io/security !!!\r\n-->\r\n**Affects:** 5.1.5\r\n\r\n---\r\nHi,\r\nFirst, I would like to check if the current behavior of StringHttpMessageConverter is intentional. I found #15437 to be the same issue as I'm describing here, but its closed due to inactivity.\r\n\r\nCurrent Behavior\r\n============\r\nStringHttpMessageConverter will add all the available charsets available to the jvm in the `Accept-Charset` header when used to call apis with `RestTemplate`. This has two problems\r\n1) The outgoing request size can be huge\r\n2) The external system may not recognize all the charsets and throw errors (the issue I'm facing)\r\n\r\nIf this is not the intended behavior please see the proposal below\r\n\r\nProposal\r\n======\r\n```java\r\nprotected void writeInternal(String str, HttpOutputMessage outputMessage) throws IOException {\r\n  if (this.writeAcceptCharset) {\r\n    // Also check if Accept-Charset is already in headers before setting it        <----\r\n    outputMessage.getHeaders().setAcceptCharset(getAcceptedCharsets());\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n**NB: At the moment I'm using the below workaround. If this is intentional, please let me know if there is a better way. If not I'd be glad to work on the above proposal**\r\n```java\r\nRestTemplate restClient = new RestTemplate();\r\nList<HttpMessageConverter<?>> messageConverters = restClient.getMessageConverters();\r\nmessageConverters.forEach(\r\n    messageConverter -> {\r\n      if (messageConverter instanceof StringHttpMessageConverter) {\r\n        ((StringHttpMessageConverter) messageConverter).setWriteAcceptCharset(false);\r\n      }\r\n    }\r\n);\r\n```""]",['closed'],[1],"[""Thanks for the suggestion to make the change. To ensure this makes it for 5.1.7 tomorrow, I've applied it myself. Also in master for 5.2 I've switched the default from `true` to `false`.""]",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ResolvableType.java,6f1acdd561e60b389fa2eefdecf1f2811018253d,Add_Condition,"+
+		if (type instanceof Class<?>) {
+			return new ResolvableType(type, typeProvider, variableResolver, null);
+		}",4,condition,Optimize ResolvableType cache,"Prior to this commit, the ResolvableType static cache was holding a lot
of duplicates for simple types. We are using too much metadata to compute
the key when the class has no generic information. so setFoo(String foo)
and setBar(String bar) would result in two entries in the cache because
the TypeProvider is different. On a very simple application 65% of the
entries in the cache were duplicate.

When the type is a Class with no generic information, the ResolvableType
instance is a simple wrapper around it so we might just as well not cache
it at all as the cost of finding it back from the cache is higher than
creating that simple wrapper.

This commit adds an explicit check; if the type is a simple Class we just
return a ""resolved"" ResolvableType instance for it. On a few test cases,
this reduces the size of the cache by 85%

Issue: SPR-12275
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java,6fed3425437ab1736244a8d77005b4fa8fa3e57b,Add_Condition,"+			if (ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION.equals(this.defaultPersistenceUnitRootLocation)) {
+				logger.debug(""Unable to resolve classpath root as persistence unit root URL"");
+				return null;
+			}",4,condition,Refine DefaultPersistenceUnitManager#determineDefaultPersistenceUnitRootUrl,"This commit refines the implementation to be more
lenient when defaultPersistenceUnitRootLocation is equals
to ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION and an
IOException is thrown, which happens when running on
native image.

Closes gh-29137
",['https://api.github.com/repos/spring-projects/spring-framework/issues/29137'],1,['DefaultPersistenceUnitManager.determineDefaultPersistenceUnitRootUrl is unable to resolve root url in native image'],['Bootstrapping the `DefaultPersistenceUnitManager` fails in native image being unable to resolve the root url. Replacing `determineDefaultPersistenceUnitRootUrl` via a substitution that returns `null` allowed to initialize the `PersistenceUnitManager`.  \r\n\r\nSee: [pring-aot-smoke-tests#113](https://github.com/spring-projects/spring-aot-smoke-tests/pull/113/files#diff-3f810a09badaf6852c87168c71c77aa4871afec6e8a526ed5c512c0e600156f6)'],['closed'],[1],"['I guess it would also help to call `setDefaultPersistenceUnitRootLocation(null)` since the implementation already has that escape hatch? We should make the default implementation more defensive though, there is no need to fail hard, at least not with the `ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION` as input. This could be as straightforward as just logging the ""Unable to resolve persistence unit root URL"" message and returning `null` instead of throwing a `PersistenceException` there, potentially with an `if` check to only perform such a lenient return in case of `defaultPersistenceUnitRootLocation == ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION`.']",,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,71463fb3991a2b7e8e79cafa91a824c51f4fc73a,Condition_Change,"-				if (this.alreadyCreated.add(beanName)) {
+				if (!this.alreadyCreated.contains(beanName)) {
+					this.alreadyCreated.add(beanName);
-		this.alreadyCreated.remove(beanName);
+		synchronized (this.mergedBeanDefinitions) {
+			this.alreadyCreated.remove(beanName);
+		}",7,condition,AbstractBeanFactory consistently guards add/remove operations against alreadyCreated Set,"Issue: SPR-14269
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/SpelNodeImpl.java,716e7de8415485dffe25aee446458deebf540c5c,Condition_Change,"-		if (typeDescriptor.startsWith(""["") || typeDescriptor.startsWith(""L"")) {
+		if (typeDescriptor.length() > 1) {",2,condition,Simplify implementation of SpelNodeImpl.loadClassForExitDescriptor(...),,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java,7244c9aea191d5afba4179e69a0139925206a9bd,Condition_Change,"-		while (source != null && source != Object.class
-				&& !hasPlainJavaAnnotationsOnly(source) && remaining > 0) {
+		while (source != null && source != Object.class && remaining > 0
+				&& !hasPlainJavaAnnotationsOnly(source)) {
-				name.startsWith(""org.springframework.lang."");
+				name.startsWith(""org.springframework.lang."") ||
+				name.startsWith(""org.springframework.util."") ||
+				(name.startsWith(""com.sun"") && !name.contains(""Proxy""));",8,iteration,Add more aggressive annotation element filtering,"Refine the element filtering performed by `AnnotationsScanner` to also
cover `org.springframework.util` and most `com.sun` classes which turn
out to be referenced quite frequently and which we know contain no
useful annotations.

See gh-21697
",['https://api.github.com/repos/spring-projects/spring-framework/issues/21697'],1,['Create replacement API for handling merged annotations [SPR-17161]'],"[""**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-17161](https://jira.spring.io/browse/SPR-17161?redirect=false)** and commented\r\n\r\nThe existing `AnnotationUtils` and `AnnotatedElementUtils` have grown quite a bit over the years and could do with being revisited now that we have pretty comprehensive support for merged annotations throughout the framework.\r\n\r\nSome common issues with the current utils classes include:\r\n\r\n* Quite a broad API (~58 public methods between them) that can make it hard for users to find the right method.\r\n* Some performance concerns. The classes often appear near the top when profiling applications and a typical application will synthesize quite a few annotations.\r\n* Difficult to evolve. We have some ideas around using annotation processing at compile time to pre-compute some information. It's quite hard to currently plug this in to the existing code.\r\n* Complicated meta-data relationships. There's quite a complicated relationship between `AnnotatedTypeMetadata` and the utils and the meta-data API is different.\r\n\r\nA new API could help us to determine which methods are really needed and provide the potential for more intelligent caching or pre-computed data.\r\n\r\n---\r\n\r\n**Affects:** 5.1 RC1\r\n""]",['closed'],[1],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nSome initial prototype work for this is here: https://github.com/philwebb/spring-framework/tree/annotations\n\nThe new API tries to separate the representation of merged annotations from the way that they\'re discovered. This helps to reduce the surface area of the API since `find...` vs `get...` semantic methods are no longer needed. For example, to get only the direct annotations and related meta-annotations you would call `MergedAnnotations.from(element, SearchStrategy.DIRECT)`. For a complete search of all superclasses and interface you would do  `MergedAnnotations.from(element, SearchStrategy.EXHAUSTIVE)`. Regardless of the method used to find the `MergedAnnotations`, the API is identical and contains contains methods to:\n\n* Determine if an annotation is present\n* Get a single merged annotation\n* Get a stream of a specific annotation type\n* Get a stream of all annotations\n\nThe `MergedAnnotation` interface allows you to inspect information about the annotation and `synthesize` it if required. The method on the interface are also designed to be used when working with streams. Some typical examples:\n\n```java\n// is an annotation present or meta-present\nmergedAnnotations.isPresent(ExampleAnnotation.class);\n\n// get the merged ""value"" attribute of ExampleAnnotation (either direct or meta-present)\nmergedAnnotations.get(ExampleAnnotation.class).getString(""value"");\n\n// get all meta-annotations but no direct annotations\nmergedAnnotations.stream().anyMatch(MergedAnnotation::isMetaPresent);\n\n// get all ExampleAnnotation declarations (include any meta-annotations) and print the merged ""value"" attributes\nmergedAnnotations.stream(ExampleAnnotation.class).map(a -> a.getString(""value"")).forEach(System.out::println);\n \n```\n\n']",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/FileCopyUtils.java,72685b1d819d0fda74ebf17a489080059051baed,Remove_Condition,"-	private static void close(@Nullable Closeable closeable) {
-		if (closeable == null) return;
+	private static void close(Closeable closeable) {
-		} catch (IOException e) {
+		} catch (IOException ex) {",5,condition,Polish contribution,"See gh-24393
",['https://api.github.com/repos/spring-projects/spring-framework/issues/24393'],1,['Add close() method in FileCopyUtils to reduce duplication'],['That can be reduced by the close method.'],['closed'],[1],['This has been merged into `master` and revised in 72685b1d819d0fda74ebf17a489080059051baed.\r\n\r\nThanks'],,,,,
spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java,7582adc0bc4d9456465338f92198fbcbdc84151a,Add_Condition,"+			if (requestPath.endsWith(""/"") && !subPath.endsWith(""/"")) {
+				subPath += ""/"";
+			}",3,condition,Fix trailing slash in nested path,"This commit adds a trailing slash to the nested path if the request path
also ends with a slash. For instance, given the request ""/foo/bar/"", and
nested path pattern ""/foo/**"", we expect the nested path to be “/bar/”,
not “/bar"".
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java,7816c9e411578493407533315030c476daf160c3,Condition_Change,"-import org.springframework.aot.AotDetector;
-
-		if (!AotDetector.useGeneratedArtifacts()) {
+		if (!NativeDetector.inNativeImage()) {",4,condition,Exclude LocalVariableTableParameterNameDiscoverer based on native image check,"See gh-29531
",['https://api.github.com/repos/spring-projects/spring-framework/issues/29531'],1,['Deprecate `LocalVariableTableParameterNameDiscoverer` completely (avoiding its exposure in native images)'],['`DefaultParameterNameDiscoverer` should be updated to not use `LocalVariableTableParameterNameDiscoverer` when running as a native image.'],['closed'],[7],"['I think this should behave the same way on the JVM. the check should be on AOT not native. ', ""Could be great for consistency indeed even if technically on JVM + AOT we have to the capability to use it. Let's validate the choice in today's Framework meeting."", 'I updated the PR accordingly.', ""An interesting case in terms of automatic exclusion indeed.\r\n\r\nWe certainly don't want to support that parameter name discovery strategy in a native image (where the underlying class files are generally not available), and it's not recommended in any other scenario either... since you can always compile with `-parameters` instead, with no need to parse class files then. In such a recommended setup, `StandardReflectionParameterNameDiscoverer` will always be able to resolve the parameter names first, so `LocalVariableTableParameterNameDiscoverer` will never actually be reached.\r\n\r\nFrom that perspective, for a setup following Java 8+ recommendations, `LocalVariableTableParameterNameDiscoverer` could even be removed completely. It's only really there for backwards compatibility with older setups that got migrated without `-parameters`. Baking that assumption into our AOT arrangement - namely that you need to compile with `-parameters` when you are optimizing for AOT, completely avoiding unnecessary class file parsing - seems sensible."", ""I'm afraid we'll have to return to a `NativeDetector` check here since `AotDetector` is in the higher-level `aot` package whereas `DefaultParameterNameDiscoverer` is a very low-level `core` component. Since there is no significant difference to be expected in practice, I don't think the cycle-free narrower check matters. After all, `LocalVariableTableParameterNameDiscoverer` is effectively not applicable in a native image due to its class file parsing approach, so it arguably does make sense to exclude it on that basis and rely on `-parameters` usage by convention."", ""Reopening this one after a team discussion: It is ultimately preferable to deprecate `LocalVariableTableParameterNameDiscoverer` completely, not using it by default in any setup anymore, since that class file parsing strategy has been long superseded by the Java 8 `-parameters` flag on `javac` already.\r\n\r\nWe have considered doing this before and meant to address the native image impact of it in 6.0 but somehow missed this last week. So let's fix this glitch now, in time for the Boot 3.0 GA release, with a note in the upgrade wiki page."", ""As a lenient measure for the transition period, we'll keep `LocalVariableTableParameterNameDiscoverer` active on the JVM but log a warning for each successful parameter name resolution. This will only be logged when parameter names actually need to be inspected, and only when `StandardReflectionParameterNameDiscoverer` did not return anything, suggesting that compilation with `-parameters` has been missed somewhere.""]",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java,7b95bd72f7e9922f655c582f47c2fe80d8664a1b,Condition_Change,"-		if (mimeTypes.size() >= 50) {
+		if (mimeTypes.size() > 50) {",2,condition,"Fix condition for ""Too many elements"" in MimeTypeUtils.sortBySpecificity()","See gh-31254
Closes gh-31769
","['https://api.github.com/repos/spring-projects/spring-framework/issues/31769', 'https://api.github.com/repos/spring-projects/spring-framework/issues/31254']",2,"['Fix condition for ""Too many elements"" in `MimeTypeUtils.sortBySpecificity()`', 'HeaderContentNegotiationStrategy.resolveMediaTypes throws unexpected IllegalArgumentException ']","['This PR fixes condition for ""Too many elements"" in `MimeTypeUtils.sortBySpecificity()` that seems to have been changed accidentally in 05c3ffb2fbdf358c6a23309a3118b0a64ecb4b40 to align with its Javadoc again.\r\n\r\nSee gh-31254', '**Affects:** 6.0.11\r\n\r\nParsing of http accept header throws IllegalArguemntException which is unexpected, and causes unexpected application behavior.\r\nExample stack trace\r\n\r\n```\r\nToo many elements\r\njava.lang.IllegalArgumentException: Too many elements\r\nat org.springframework.util.Assert.isTrue(Assert.java:122)\r\nat org.springframework.util.MimeTypeUtils.sortBySpecificity(MimeTypeUtils.java:365)\r\nat org.springframework.web.accept.HeaderContentNegotiationStrategy.resolveMediaTypes(HeaderContentNegotiationStrategy.java:55)\r\nat org.springframework.web.accept.ContentNegotiationManager.resolveMediaTypes(ContentNegotiationManager.java:128)\r\nat org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getAcceptedMediaTypes(ProducesRequestCondition.java:290)\r\nat org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getMatchingCondition(ProducesRequestCondition.java:208)\r\nat org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition(RequestMappingInfo.java:401)\r\nat org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:110)\r\nat org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:68)\r\n```\r\n\r\nClass HeaderContentNegotiationStrategy currently catches only InvalidMediaTypeException, but IllegalArgumentException can also be thrown here.\r\n```\r\npublic List<MediaType> resolveMediaTypes(NativeWebRequest request)\r\n\t\t\tthrows HttpMediaTypeNotAcceptableException {\r\n\r\n\t\tString[] headerValueArray = request.getHeaderValues(HttpHeaders.ACCEPT);\r\n\t\tif (headerValueArray == null) {\r\n\t\t\treturn MEDIA_TYPE_ALL_LIST;\r\n\t\t}\r\n\r\n\t\tList<String> headerValues = Arrays.asList(headerValueArray);\r\n\t\ttry {\r\n\t\t\tList<MediaType> mediaTypes = MediaType.parseMediaTypes(headerValues);\r\n\t\t\tMimeTypeUtils.sortBySpecificity(mediaTypes);\r\n\t\t\treturn !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;\r\n\t\t}\r\n\t\tcatch (InvalidMediaTypeException ex) {\r\n\t\t\tthrow new HttpMediaTypeNotAcceptableException(\r\n\t\t\t\t\t""Could not parse \'Accept\' header "" + headerValues + "": "" + ex.getMessage());\r\n\t\t}\r\n\t}\r\n```\r\nplease consider changing of this catch to IllegalArgumentException (InvalidMediaTypeException  is a subclass of IllegalArgumentException). This change would make behavior more predictable. \r\n\r\n\r\n\r\n\r\n']","['closed', 'closed']","[5, 5]","['Out of curiosity, can you share the Accept request header that causes this?', 'It was some kind of bot - so I have no control over it. I assume it was mistake, or some kind of attack (maybe fingerprinting)\r\n\r\nThe header was\r\n```\r\naccept=text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8\r\n```', '@mhankus, could you clarify where the `IllegalStateException` is coming from, either through a stracktrace or instructions on how to reproduce.\r\n\r\nI\'ve tried thsi with 6.0.11 and with the latest 6.0.14 snapshot:\r\n```java\r\nMediaType.parseMediaTypes(""accept=text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8"")\r\n```\r\n\r\nIt results in:\r\n```\r\norg.springframework.util.InvalidMimeTypeException: Invalid mime type ""accept=text/html"": Invalid token character \'=\' in token ""accept=text""\r\n\tat app//org.springframework.util.MimeTypeUtils.parseMimeTypeInternal(MimeTypeUtils.java:279)\r\n\tat app//org.springframework.util.ConcurrentLruCache.get(ConcurrentLruCache.java:103)\r\n\tat app//org.springframework.util.MimeTypeUtils.parseMimeType(MimeTypeUtils.java:213)\r\n\tat app//org.springframework.http.MediaType.parseMediaType(MediaType.java:739)\r\n\tat app//org.springframework.http.MediaType.parseMediaTypes(MediaType.java:768)\r\n\t...\r\n```\r\n', 'If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.\n', '@rstoyanchev I\'m sorry for not responding - I must have missed notification.\r\nAs for your question. My example was not perfect, as it contained header name (accept) then equals character and then headaer value. \r\nTo reproduce error just execute sample code below (""accept="" was removed from string)\r\n```\r\n MimeTypeUtils.sortBySpecificity(MediaType.parseMediaTypes(""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, "" +\r\n                ""text/html,application/xhtml+xml;q=0.9,*/*;q=0.8, text/html,application/xhtml+xml;q=0.9,*/*;q=0.8""));\r\n    }\r\n```\r\n\r\nyou will get IllegalArgumentException, which is not caught, so application throws error, user gets 500 error (not 400 as expected), and logs are filled with information about stacktrace.\r\n\r\n\r\n']",,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,7c47f554c02a506a8f69af2f7d664794b0df3479,Condition_Change,"-			if (asyncManager.hasConcurrentResult() &&
-					asyncManager.getConcurrentResultContext().length > 0 &&
-					asyncManager.getConcurrentResultContext()[0] instanceof ModelAndViewContainer) {
-
+			if (asyncManager.hasConcurrentResult()) {",5,condition,Remove unnecessary check in RequestMappingHandlerAdapter,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java,7defbfc18b5e43f1de271419ea37ace7a2984d43,Add_Condition,"+		WebSocketSessionHolder holder = this.sessions.get(session.getId());
+		if (holder != null) {
+			session = holder.getSession();
+		}
-		WebSocketSessionHolder holder = this.sessions.get(session.getId());",5,condition,Ensure concurrent WebSocketSession wrapper is used,"Issue: SPR-13326
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java,7e8ffc7bf56dcc9d7fcc3992589b126b0eecf22f,Condition_Change,"-			if (propertySource instanceof EnumerablePropertySource) {
-				names.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));
+			if (!(propertySource instanceof EnumerablePropertySource)) {
+				throw new IllegalStateException(
+						""Failed to enumerate property names due to non-enumerable property source: "" + propertySource);
+			names.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));",6,condition,CompositePropertySource rejects getPropertyNames call when containing a non-enumerable source,"Issue: SPR-12788
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java,7ef3257b031000b9f092d4014902bd676c607c9c,Add_Condition,"+import javax.servlet.RequestDispatcher;
-			HttpServletMapping mapping = request.getHttpServletMapping();
+			HttpServletMapping mapping = (HttpServletMapping) request.getAttribute(RequestDispatcher.INCLUDE_MAPPING);
+			if (mapping == null) {
+				mapping = request.getHttpServletMapping();
+			}",6,condition,Correctly determine HttpServletMapping for INCLUDE,"Closes gh-26216
",['https://api.github.com/repos/spring-projects/spring-framework/issues/26216'],1,['Wrong HttpServletMapping used on INCLUDE in UrlPathHelper.skipServletPathDetermination'],"['<!--\r\n!!! For Security Vulnerabilities, please go to https://pivotal.io/security !!!\r\n-->\r\n**Affects:** 5.3.1\r\n\r\nIn `UrlPathHelper.skipServletPathDetermination()` the servlet mapping from the request is used. But if the request is processing an include then the mapping in the request is for the original path. The servlet mapping for the include is in the request attribute `RequestDispatcher.INCLUDE_MAPPING` (""javax.servlet.include.mapping"").\r\n\r\nSo that method uses the wrong servlet mapping and therefore in some cases return the wrong result. And I\'m guessing the same goes for when there\'s a forward, but that I haven\'t verified. Then the servlet mapping is in `RequestDispatcher.FORWARD_MAPPING`.\r\n\r\nOr is this an issue with the container? In my case I use tomcat 9.0.39.']",['closed'],[4],"['Mainly we check it isn\'t a PATH mapping (e.g. `""/path/*""`). That\'s the more problematic case where the Servlet path prefix needs to be determined and stripped. Presumably on a given server, mapping by path prefix is either used or not. Can you provide more details for a more specific case?', ""Let me give you some more background on the issue.\r\n\r\nIf you have a **jsp** page with an **include tag** which includes the result of a spring controller method, then it will fail when using spring-framework 5.3.1. In 5.2.10.RELEASE it works just fine.\r\n\r\nAnd the reason for the failure is that when processing the include it's still in the context of the request for the jsp file. So the servlet mapping of the request will contain the servlet mapping for the jsp which usually is EXTENSION (*.jsp). But the include path might be of type PATH and then the `UrlPathHelper.skipServletPathDetermination()` will return the wrong result for the include and therefore generate a `NoHandlerFoundException`.\r\n\r\nI've attached a sample war project which demonstrates the problem: [spring-example.zip](https://github.com/spring-projects/spring-framework/files/5651733/spring-example.zip). In index.jsp there's an include tag which includes the result of a spring controller (/spring/example). But that include fails with a `NoHandlerFoundException`. But if I go directly to that url I'll get the result without any `NoHandlerFoundException`.\r\n\r\nTo solve this issue the correct servlet mapping must be used in `UrlPathHelper.skipServletPathDetermination(`). And the servlet mapping for the include is in the request attribute _javax.servlet.include.mapping_ according to Servlet 4 spec (chapter 9.3.1).\r\n\r\nAnd the same problem might affect forwards, but I haven't investigated that. But then then servlet mapping is in _javax.servlet.forward.mapping_."", ""Thanks for the sample and extra detail. So in your case, the request starts with a JSP page that includes a request to a Servlet mapped by prefix, and on an include the Servlet container returns original request details by default. For forward it's the other way around, with the Servlet container returning current request details by default. Hence I think only include is affected."", '@rstoyanchev A big thanks for the quick response and fix! I can confirm that it resolves my issue.']",,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java,7ff257c0ea00c02e453c8390c641835ebe778955,Add_Condition,"-		view.setLocale(locale);
+		if (view != null) {
+			view.setLocale(locale);
+		}",4,condition,Prevent NPE in ScriptTemplateView when no view is found,"Issue: SPR-15064
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java,803fc2001907636605aa3ed2fcdf1437171761a5,Condition_Change,"-			Map<String, ViewResolver> map = BeanFactoryUtils.beansOfTypeIncludingAncestors(
+			String[] names = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(
-			if (map.isEmpty()) {
+			if (names.length == 1) {",4,condition,Correct check for ViewResolver beans,"Check for bean names of type rather than actual beans.

Issue: SPR-12267
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java,81aca78579df061e08aa0e6a6488b3e4d3ebb3dc,Remove_Condition,"+import org.springframework.util.ClassUtils;
-		if (clazz == null) {
-			return ""null"";
-		}
-		return clazz.getTypeName();
+		return (clazz != null ? ClassUtils.getQualifiedName(clazz) : ""null"");",6,condition,Delegate to common ClassUtils.getQualifiedName,"Issue: SPR-15237
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java,83293b39df23d91c6ea18f520912c0c4fbb5f1c2,Condition_Change,"-			else if (namespaceUri.startsWith(""https://www.springframework.org/"")) {
+			else if (namespaceUri.startsWith(""http://www.springframework.org/"")) {",2,condition,URL Cleanup - fix undesirable code change,"Namespace handlers are mapped based on the canonical names for XML
namespaces which in Spring do not use ""https"" as the scheme.

See gh-22680
",['https://api.github.com/repos/spring-projects/spring-framework/issues/22680'],1,['URL Cleanup'],,['closed'],[1],['Merged into `5.1.x` in commit 3db08c6b7af48ca213fca46ae2cb63cbb1137cc4.'],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,8662b7773c01c710aa44b684b292335695199436,Condition_Change,"-			for (String url : StringUtils.delimitedListToStringArray(
+			for (String path : StringUtils.delimitedListToStringArray(
-					if (url.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {
+					if (path.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {
+						File file = new File(path);
-								ResourceUtils.FILE_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR);
+								ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +
+								ResourceUtils.JAR_URL_SEPARATOR);
-						logger.debug(""Cannot search for matching files underneath ["" + url +
+						logger.debug(""Cannot search for matching files underneath ["" + path +",10,condition,PathMatchingResourcePatternResolver converts manifest entries to absolute paths,"Issue: SPR-14934
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java,86733a98da91c57d2ac28365a82da3e3fbd15fb1,Condition_Change,"-			else { // TODO annotationAttributes null with proxy
+			else {
-				this.condition = (eventListener != null ? eventListener.condition() : null);
+				this.condition = (eventListener != null ? eventListener.condition() : """");",4,condition,Polish ApplicationListenerMethodAdapter,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,8694a0aac06388332373765a3cf0a494b0243a90,Condition_Change,"-import java.util.Arrays;
+
-		for (Annotation annotation : Arrays.asList(clazz.getDeclaredAnnotations())) {
+		for (Annotation annotation : clazz.getDeclaredAnnotations()) {",4,iteration,Minor changes to AnnotationUtils,"- Polished Javadoc for isAnnotationDeclaredLocally() and
  isAnnotationInherited().
- Removed unnecessary call to Arrays.asList() in
  isAnnotationDeclaredLocally().
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java,871e378ed054d95f19bcb75fa0f01e202e83f367,Condition_Change,"-		if (aspectClass.getSuperclass().getAnnotation(Aspect.class) != null &&
-				!Modifier.isAbstract(aspectClass.getSuperclass().getModifiers())) {
+		Class<?> superclass = aspectClass.getSuperclass();
+		if (superclass.getAnnotation(Aspect.class) != null &&
+				!Modifier.isAbstract(superclass.getModifiers())) {
-					aspectClass.getSuperclass().getName() + ""]"");
+					superclass.getName() + ""]"");",7,condition,Polish AbstractAspectJAdvisorFactory,Closes gh-27340,['https://api.github.com/repos/spring-projects/spring-framework/issues/27340'],1,['Polish AbstractAspectJAdvisorFactory'],['Left out invoke the native method.'],['closed'],[5],"['@Inmord Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27340)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27340) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@Inmord Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27340)!', 'This has been merged into `main`.\r\n\r\nThanks for submitting your first PR to the Spring Framework! 👍 ', '@Inmord, for future PRs, please make sure you create your PR against the `main` branch instead of the `5.2.x` branch.\r\n\r\nThanks', '> @Inmord，对于未来的 PR，请确保您针对`main`分支而不是分支创建 PR `5.2.x`。\r\n> \r\n> 谢谢\r\n\r\nOkay, thanks.\r\n']",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,87fa2c3b97c7ee4785c4109ebd14ff3310f9db11,Add_Condition,"+		if (lastCharIndex == inString.length()) {
+			return inString;
+		}",3,condition,Avoid unnecessary String instantiation in StringUtils.deleteAny(),"This commit avoids unnecessary String instantiation in
StringUtils.deleteAny() if nothing was deleted from the
input string.

Closes gh-24924",['https://api.github.com/repos/spring-projects/spring-framework/issues/24924'],1,['Avoid unnecessary String instantiation in StringUtils.deleteAny()'],"[""When I was reading https://github.com/spring-projects/spring-framework/pull/24870, I noticed that `String` instantiation in `StringUtils.deleteAny()` isn't necessary when nothing is deleted. So this PR changes to avoid it.\r\n\r\nThis is a straightforward change, but I just ran [the same benchmark](https://github.com/izeye/samples-jmh-gradle/blob/d193de7d08ce7d8de71dc6ba724cb89018501d20/src/jmh/java/com/izeye/samples/jmh/SpringStringUtilsDeleteAnyBenchmark.java) used in https://github.com/spring-projects/spring-framework/pull/24870. The result is as follows:\r\n\r\n```\r\nBenchmark                                                                                                    Mode  Cnt     Score   Error   Units\r\nSpringStringUtilsDeleteAnyBenchmark.original                                                                 avgt         68.215           ns/op\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.alloc.rate                                                  avgt       1384.675          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.alloc.rate.norm                                             avgt        104.000            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.churn.PS_Eden_Space                                         avgt       1359.258          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.churn.PS_Eden_Space.norm                                    avgt        102.091            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.churn.PS_Survivor_Space                                     avgt          0.048          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.churn.PS_Survivor_Space.norm                                avgt          0.004            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.count                                                       avgt         21.000          counts\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.time                                                        avgt         12.000              ms\r\nSpringStringUtilsDeleteAnyBenchmark.patched                                                                  avgt         20.938           ns/op\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.alloc.rate                                                   avgt       4510.715          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.alloc.rate.norm                                              avgt        104.000            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.churn.PS_Eden_Space                                          avgt       4477.181          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.churn.PS_Eden_Space.norm                                     avgt        103.227            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.churn.PS_Survivor_Space                                      avgt          0.074          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.churn.PS_Survivor_Space.norm                                 avgt          0.002            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.count                                                        avgt         69.000          counts\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.time                                                         avgt         38.000              ms\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted                                   avgt         13.284           ns/op\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.alloc.rate                    avgt       2734.452          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.alloc.rate.norm               avgt         40.000            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.churn.PS_Eden_Space           avgt       2788.360          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.churn.PS_Eden_Space.norm      avgt         40.789            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.churn.PS_Survivor_Space       avgt          0.036          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.churn.PS_Survivor_Space.norm  avgt          0.001            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.count                         avgt         43.000          counts\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.time                          avgt         22.000              ms\r\n```""]",['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks'],,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java,8922da3af60ba17084383eace6b80bc9ac7eccd0,Condition_Change,"-import java.sql.SQLDataException;
-				catch (SQLDataException ex) {
-					logger.debug(""JDBC driver has limited support for JDBC 4.1 'getObject(int, Class)' method"", ex);
+				catch (AbstractMethodError err) {
+					logger.debug(""JDBC driver does not implement JDBC 4.1 'getObject(int, Class)' method"", err);
-				catch (AbstractMethodError err) {
-					logger.debug(""JDBC driver does not implement JDBC 4.1 'getObject(int, Class)' method"", err);
+				catch (SQLException ex) {
+					logger.debug(""JDBC driver has limited support for JDBC 4.1 'getObject(int, Class)' method"", ex);",9,iteration,"Generalized workaround for JDBC 4.1 getObject(index, requiredType) failures on MySQL and Derby","Issue: SPR-12174
Issue: SPR-12157
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java,8b023b17c948bb180794a23207903718404e2cca,Condition_Change,"-	public Object postProcessBeforeInitialization(final Object bean, String beanName) throws BeansException {
-
+	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
-		if (System.getSecurityManager() != null ) {
+		if (System.getSecurityManager() != null) {
-	@Override
-	public Object postProcessAfterInitialization(Object bean, String beanName) {
-		return bean;
-	}
-",10,condition,Polish contribution,"See gh-23435
",['https://api.github.com/repos/spring-projects/spring-framework/issues/23435'],1,['Avoid unnecessary processing in ApplicationContextAwareProcessor'],['It could return bean that do not meet the requirements immediately to avoid subsequent operations'],['closed'],[1],['This has been merged into `master` in 1dc2177a4af5c6ff8622017b9a79cecba1d8c635 and polished in 8b023b17c948bb180794a23207903718404e2cca.\r\n\r\nThanks'],,,,,
spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java,8f0f5faf4d541df10db9b38e670bed83a1990b98,Remove_Condition,"-		name = SCHEDULER_BEAN_NAME;
-		if (context.getRegistry().containsBeanDefinition(name)) {
-			beanDef.getPropertyValues().add(""sockJsTaskScheduler"", context.getRegistry().getBeanDefinition(name));
-		}
+		Object scheduler = WebSocketNamespaceUtils.registerScheduler(SCHEDULER_BEAN_NAME, context, source);
+		beanDef.getPropertyValues().add(""sockJsTaskScheduler"", scheduler);
+",7,condition,XML config properly initialize WS message broker stats,"Issue: SPR-14190
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java,90388e4701add18ec060e6b2fb219f54c9474429,Condition_Change,"-		if (sourceCollection.size() == 0) {
+		if (sourceCollection.isEmpty()) {",2,condition,Replace size() check with isEmpty(),"Closes gh-1333
",['https://api.github.com/repos/spring-projects/spring-framework/issues/1333'],1,['CollectionToObjectConverter - Refactor with Collection#isEmpty()'],['Replace `sourceCollection.size() == 0` by `sourceCollection.isEmpty()` in class `CollectionToObjectConverter`.'],['closed'],[1],"['Merged, thanks.']",,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java,913cc079af07fbb58ea09e73d3fb538714b6a1dc,Add_Condition,"+	}
+	
+	/**
+	public void writeAttribute(String attributeName) throws JspException {
+		if (currentState().isBlockTag()) {
+			throw new IllegalStateException(""Cannot write attributes after opening tag is closed."");
+		}
+		this.writer.append("" "").append(attributeName);",8,condition,TagWriter can write empty attribute,"See gh-910
",['https://api.github.com/repos/spring-projects/spring-framework/issues/910'],1,['Support empty attributes in TagWriter'],"['Support for empty HTML attributes (like ""required"", ""ng-disabled""...)\nIf you want to use this tool for a custom tag in a project that is mainly Angular-oriented, you may want to write attributes without values.\nAnd since members are private, you cannot extend TagWriter (another proposal could be ""protecting"" fields).\n']",['closed'],[2],"['@djechelon Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=910)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=910) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@djechelon Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=910)!']",,,,,
spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java,92a48b72d77e4a377cfe31316fcbd5249ee4b34d,Condition_Change,"-		if (byte[].class.equals(this.payload.getClass())) {
+		if (this.payload instanceof byte[]) {",2,condition,Polish (minor),,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java,475c4d4425b2170c4a0f19d5bd39b70e752e38a1,Condition_Change,"-					while (j < statement.length && '}' != statement[j]) {
+					while (j < statement.length && statement[j] != '}') {
-						if (':' == statement[j] || '{' == statement[j]) {
+						if (statement[j] == ':' || statement[j] == '{') {
-						totalParameterCount = addNamedParameter(parameterList, totalParameterCount, escapes, i, j + 1, parameter);
+						totalParameterCount = addNamedParameter(
+								parameterList, totalParameterCount, escapes, i, j + 1, parameter);
-						totalParameterCount = addNamedParameter(parameterList, totalParameterCount, escapes, i, j, parameter);
+						totalParameterCount = addNamedParameter(
+								parameterList, totalParameterCount, escapes, i, j, parameter);",10,iteration,Polishing,,[],0,[],[],[],[],[],1,1,n/a,n/a,n/a
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java,964467d2691180a7f01de441a190fb998801df91,Condition_Change,"-		DataSource dataSource = this.dataSource;
-		if (dataSource == null) {
+		if (this.dataSource == null) {
-					con = dataSource.getConnection();
+					con = this.dataSource.getConnection();
-								""DataSource returned null from getConnection(): "" + dataSource);
+								""DataSource returned null from getConnection(): "" + this.dataSource);
-					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval));
+					TimeUnit.SECONDS.sleep(this.interval);",9,condition,Polish DatabaseStartupValidator.afterPropertiesSet(),,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java,96bfc14dba7691f0f8cd893ac90b39e09ac8ae1a,Condition_Change,"-			if (logger.isWarnEnabled()) {
+			if (invocationEx != exception && logger.isWarnEnabled()) {",2,condition,No warn logging for propagated original exception,"Issue: SPR-14907
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,977550f9560f6ce7670aae883261f412fbba02f4,Condition_Change,"-				Lifecycle bean = getBeanFactory().getBean(beanNameToCheck, Lifecycle.class);
-				if (bean != this) {
-					beans.put(beanNameToRegister, bean);
+				Object bean = getBeanFactory().getBean(beanNameToCheck);
+				if (bean != this && bean instanceof Lifecycle) {
+					beans.put(beanNameToRegister, (Lifecycle) bean);",6,condition,Properly handle null bean instance in getLifecycleBeans,"Issue: SPR-16343
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,988aae4f2e41ee4d23e827c09095cde1fc07d201,Condition_Change,"-				Method key = method;
-				if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) {
+				if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(method)) {
-					int index = this.fixedInterceptorMap.get(key);
+					int index = this.fixedInterceptorMap.get(method);",5,condition,Remove unnecessary variable declaration in ProxyCallbackFilter,Closes gh-24675,['https://api.github.com/repos/spring-projects/spring-framework/issues/24675'],1,['Remove unnecessary variable declaration in ProxyCallbackFilter'],['The var `key` declaration seems unnecessary. Suggest remove it. '],['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks'],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java,990a9c74b93b3124dae554e6246b9b75504a5d23,Condition_Change,"-			int slashIndex = requestUri.indexOf('/', semicolonIndex);
-			if (slashIndex >= 0) {
-				sb.delete(semicolonIndex, slashIndex);
+			int slashIndex = requestUri.indexOf('/', semicolonIndex + 1);
+			if (slashIndex == -1) {
+				slashIndex = sb.length();
+			sb.delete(semicolonIndex, slashIndex);",7,condition,Restore removal of trailing semicolon content,"See gh-26012
",['https://api.github.com/repos/spring-projects/spring-framework/issues/26012'],1,['Improve URI/query strings sanitization'],"['Use `StringBuilder.deleteCharAt(int)` and `StringBuilder.delete(int, int)` to handle sanitization more effectively']",['closed'],[1],"['@rstoyanchev done.\r\n\r\nI\'ve also measured performance impact with simple benchmark\r\n```java\r\n@BenchmarkMode(Mode.AverageTime)\r\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n@Fork(jvmArgsAppend = {""-Xms2g"", ""-Xmx2g""})\r\npublic class DropDoubleSlashBenchmark {\r\n\r\n  @Benchmark\r\n  public String ineffective(Data data) {\r\n    String path = data.path;\r\n    while (true) {\r\n      int index = path.indexOf(""//"");\r\n      if (index == -1) {\r\n        break;\r\n      }\r\n      path = path.substring(0, index) + path.substring(index + 1);\r\n    }\r\n    return path;\r\n  }\r\n\r\n  @Benchmark\r\n  public String effective(Data data) {\r\n    StringBuilder path = new StringBuilder(data.path);\r\n    while (true) {\r\n      int index = path.indexOf(""//"");\r\n      if (index == -1) {\r\n        break;\r\n      }\r\n      path.deleteCharAt(index);\r\n    }\r\n    return path.toString();\r\n  }\r\n\r\n  @State(Scope.Thread)\r\n  public static class Data {\r\n    private final String path = ""/home/"" + ""/path"";\r\n  }\r\n}\r\n```\r\nand got the following results on my machine\r\n```\r\nJDK 8\r\n\r\neffective                          avgt    47.882 ±   1.801   ns/op\r\nineffective                        avgt    51.620 ±   0.907   ns/op\r\neffective:·gc.alloc.rate.norm      avgt   136.000 ±   0.001    B/op\r\nineffective:·gc.alloc.rate.norm    avgt   224.000 ±   0.001    B/op\r\n\r\nJDK 11\r\n\r\neffective                          avgt    33.949 ±   0.188   ns/op\r\nineffective                        avgt    47.735 ±   0.519   ns/op\r\neffective:·gc.alloc.rate.norm      avgt   104.000 ±   0.001    B/op\r\nineffective:·gc.alloc.rate.norm    avgt   152.000 ±   0.001    B/op\r\n```\r\nOn longer strings I think we\'ll have even better improvement.']",,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java,99399084a6b1960d152ee46aa59da5304a019439,Condition_Change,"+import java.util.concurrent.Future;
-		if (task instanceof RunnableFuture) {
-			((RunnableFuture<?>) task).cancel(true);
+		if (task instanceof Future) {
+			((Future<?>) task).cancel(true);",5,condition,Consistent Future check (even if typically encountering RunnableFuture),"Issue: SPR-16607
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java,99dc96b1a47394740b0db4bf15e67d9abd27a25a,Condition_Change,"+
-		if (supportsReadStreaming && InputStreamResource.class == clazz) {
+		if (this.supportsReadStreaming && InputStreamResource.class == clazz) {",3,condition,Polishing,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java,9a513cfdea9020c6ed2cf3f37711ed4e31d7c310,Add_Condition,"-		else {
+		else if (void.class == returnType) {
+		else {
+			throw new IllegalArgumentException(
+					""Invalid return type for async method (only Future and void supported): "" + returnType);
+		}",6,iteration,Enforce Future/void return declaration for async methods,"Closes gh-27734
",['https://api.github.com/repos/spring-projects/spring-framework/issues/27734'],1,['Enforce Future or void return declaration for each asynchronously executed method (e.g. with class-level @Async)'],"['https://github.com/spring-projects/spring-framework/blob/79d3f5c64c94a356831916ec78be4296fba92b18/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java#L113-L127\r\n\r\nI have found an odd behaviour working with `@Async`-annotated classes in Spring. Please note that **there is** a fundamental error in my code. Unfortunately, this post has to be long and detailed.\r\n\r\nLet\'s say I have already made a synchronous REST API generated by Swagger generator. Following code omits all documentation-level annotations\r\n\r\n```java\r\n\r\npublic interface TaxonomiesApi {\r\n   \r\n    ResponseEntity<GenericTaxonomyItem> disableItem(Integer idTaxonomyType, String idTaxonomy, String appSource);\r\n\r\n}\r\n```\r\n\r\nThis API is easily implemented via `RestTemplate`, but I won\'t discuss the inner details.\r\n\r\nNow, suppose I want to provide an async version to developers consuming the API. What I have done is to create another interface with some search&replace-fu 🥋🥋\r\n\r\n```java\r\n@Async\r\npublic interface TaxonomiesApiAsync extends TaxonomyApi {\r\n   \r\n    default CompletableFuture<ResponseEntity<GenericTaxonomyItem>> disableItemAsync(Integer idTaxonomyType, String idTaxonomy, String appSource) {\r\n        try {\r\n            return completedFuture(this.disableItem(idTaxonomyType, idTaxonomy, appSource));\r\n        } catch (Exception ex) {\r\n            return failedFuture(ex);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWith the search&replace, I basically created an async-ish version of every method that should be backed by Spring\'s `@Async` annotation. My original idea was that synchronous methods can be invoked as they are, but if you instantiate `TaxonomiesApiAsync` you also have access to the async version.\r\n\r\nI have discovered I made **a fundamental mistake** by applying the `@Async` annotation at interface level when the class contains both sync and async methods. I found that synchronous `disableItem` was performed in the same `@Async` context. Accoding to design (correctly), Spring found the `@Async` annotation at interface level so **every method**, including inherited ones, was invoked asynchronously.\r\n\r\nBut the method always returned null. By debugging and looking at the code, I found that Spring tries to resolve the return value of the invoked method **only** if it\'s a `Future`. What if the returned value is a _Present_ object?\r\n\r\nThat means that if the returned value is not a `Future<ResponseEntity<GenericTaxonomyItem>>` but rather just a `ResponseEntity<GenericTaxonomyItem>` Spring neither throws an exception nor returns that value directly.\r\n\r\nExample of working calling code (invoking a different method)\r\n\r\n```java\r\n    protected CompletableFuture<Set<TaxonomyLegalEntityDTO>> importTaxonomyLegalEntities(int userId) {\r\n        TaxonomySearchParameters searchParameters = new TaxonomySearchParameters();\r\n        searchParameters.setIdTaxonomyType(amlcProperties.getTaxonomies().getTaxonomyLegalEntitiesId());\r\n        searchParameters.setLogicalState(1);\r\n        return taxonomiesApiAsync.getAllTaxonomyItemsAsync(searchParameters)\r\n                .thenApply(ResponseEntity::getBody)\r\n                .thenApply(taxonomyLegalEntityMasterDbMapping::toLegalEntity) // Costruisco i DTO che voglio utilizzare\r\n                .whenComplete(traceLoggerConsumer(""Legal entity""))\r\n                .thenApply(dtos -> taxonomyLegalEntityManager.mergeFromMasterDb(dtos, userId))\r\n                .whenComplete((ignored, ex) -> {\r\n                    if (ex != null)\r\n                        log.error(""Error importing legal entities: "" + ex.getMessage(), ex);\r\n                })\r\n                .thenApply(TaxonomyMasterDbMergeDTO::getSnapshot);\r\n    }\r\n```\r\n\r\nExample of non-working code; the result of the CompletableFuture is always null.\r\nIn this code, I decided not to use the executor _embedded_ in the API service, but rather the executor injected in the consuming service. So I ran a sync method in an executor, expecting the same result.\r\n\r\n```java\r\n    protected CompletableFuture<Set<TaxonomyLegalEntityDTO>> importTaxonomyLegalEntities(int userId) {\r\n        TaxonomySearchParameters searchParameters = new TaxonomySearchParameters();\r\n        searchParameters.setIdTaxonomyType(amlcProperties.getTaxonomies().getTaxonomyLegalEntitiesId());\r\n        searchParameters.setLogicalState(1);\r\n        return CompletableFuture.supplyAsync(() -> taxonomiesApi.getAllTaxonomyItems(searchParameters), taxonomyBatchImportServiceExecutor)\r\n                .thenApply(ResponseEntity::getBody)\r\n                .thenApply(taxonomyLegalEntityMasterDbMapping::toLegalEntity)\r\n                .whenComplete(traceLoggerConsumer(""Legal entity""))\r\n                .thenApplyAsync(dtos -> taxonomyLegalEntityManager.mergeFromMasterDb(dtos, userId))\r\n                .whenComplete((ignored, ex) -> {\r\n                    if (ex != null)\r\n                        log.error(""Error importing legal entities: "" + ex.getMessage(), ex);\r\n                })\r\n                .thenApply(TaxonomyMasterDbMergeDTO::getSnapshot);\r\n    }\r\n```\r\n\r\n\r\nSince I spent one hour debugging that problem, I decided to spend more of my after-work time to document the issue here.\r\n\r\n**Proposed fix**\r\n\r\nIn the code I linked, if the `instanceof` check fails the returned value is simply null. I don\'t yet understand the implications, but what about not unwrapping the value from Future if that\'s not a future? I mean `return result`']",['closed'],[5],"[""> In terms of target method signatures, any parameter types are supported. However, the return type is constrained to either `void` or `Future`. In the latter case, you may declare the more specific `ListenableFuture` or `CompletableFuture` types which allow for richer interaction with the asynchronous task and for immediate composition with further processing steps.\r\n\r\nThe documentation states the limitations in the return types only `void` or `Future`. It doesn't really make sense to allow for a return of a specific type as that would make the method call synchronous again as one would need to do a `Future.get` which is blocking and thus renders the `@Async` useless. \r\n\r\nSo I the return type isn't a `Future` it can return `null` because the other allowed return value is `void`. \r\n\r\nAs a solution an exception would be better imho with a clear message stating that only `void` or `Future` is supported as a return type. "", ""As the documentation states and as @mdeinum pointed out, the return type must `Future` or `void`, or otherwise the calling code has to block anyway, making it pointless to involve an Executor thread, and making asynchronous methods that are meant to be synchronous.\r\n\r\nI think this can be closed, unless @jhoeller you see some opportunity to bypass methods that don't return void or Future.\r\n"", ""I'm inclined to explicitly throw an exception for non-Future/void return type declarations whenever we attempt to execute a method asynchronously. While this may not be much of an issue with an explicit annotated method, a class-level `@Async` declaration is certainly harder to track when some specific method mismatches then."", ""Noob question @jhoeller since I assume you systematically do an instanceof/reflection check, and that *could* incur a slowdown, wouldn't it be better to have this check only enabled on dev/debug mode et disabled on release mode? "", ""@LifeIsStrange as you can see in the code, what is done is a `==` check on the `returnType`, which is already available (already reflected). So, it's not going to add any overhead.\r\n\r\nAs for your question about the `instanceof` performance, I found an [interesting reading](https://stackoverflow.com/questions/103564/the-performance-impact-of-using-instanceof-in-java) and the **tl;dr** says\r\n\r\n> In Java 1.8 instanceof is the fastest approach, although getClass() is very close.\r\n\r\nNevertheless, it doesn't apply to this fix.""]",,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java,9a618dc7a1527ac02fff9fd1385a277ebd3736ed,Condition_Change,"-		if (!isAsyncDispatch(request) && !(response instanceof ContentCachingResponseWrapper)) {
+		if (!isAsyncDispatch(request) && !(response instanceof ConditionalContentCachingResponseWrapper)) {
-
-		ContentCachingResponseWrapper wrapper =
-				WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);
-
+		ConditionalContentCachingResponseWrapper wrapper =
+				WebUtils.getNativeResponse(response, ConditionalContentCachingResponseWrapper.class);
-",9,condition,Enforce ConditionalContentCachingResponseWrapper in ShallowEtagHeaderFilter,"Closes gh-24976
",['https://api.github.com/repos/spring-projects/spring-framework/issues/24976'],1,"[""Don't get ContentCachingResponseWrapper in ShallowEtagHeaderFilter so that users can extend this wrapper""]","['Issue Description:\r\nCode in `ShallowEtagHeaderFilter`:\r\n[`WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);`](https://github.com/spring-projects/spring-framework/blob/c237338d8f4b0100c8432c48acc2cabc8305a651/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java#L116)\r\nshould be replaced into \r\n`WebUtils.getNativeResponse(response, ConditionalContentCachingResponseWrapper.class);` so that users can implement their own business logic based on `ContentCachingResponseWrapper`.\r\n\r\nChange `ContentCachingResponseWrapper` to `ConditionalContentCachingResponseWrapper` so that it gets the right one.\r\n```\r\nprivate void updateResponse(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n\r\n\tContentCachingResponseWrapper wrapper = \r\n// WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);\r\n   WebUtils.getNativeResponse(response, ConditionalContentCachingResponseWrapper.class);\r\n\r\n\t\tAssert.notNull(wrapper, ""ContentCachingResponseWrapper not found"");\r\n\t\tHttpServletResponse rawResponse = (HttpServletResponse) wrapper.getResponse();\r\n\r\n\t\tif (isEligibleForEtag(request, wrapper, wrapper.getStatus(), wrapper.getContentInputStream())) {\r\n\t\t\tString eTag = wrapper.getHeader(HttpHeaders.ETAG);\r\n\t\t\tif (!StringUtils.hasText(eTag)) {\r\n\t\t\t\teTag = generateETagHeaderValue(wrapper.getContentInputStream(), this.writeWeakETag);\r\n\t\t\t\trawResponse.setHeader(HttpHeaders.ETAG, eTag);\r\n\t\t\t}\r\n\t\t\tif (new ServletWebRequest(request, rawResponse).checkNotModified(eTag)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twrapper.copyBodyToResponse();\r\n\t}\r\n```\r\n\r\nI have implemented my own Filter, and in my own Filter, i have implemented my own ResponseWrapper which extends `ContentCachingResponseWrapper`, everything works fine if `ShallowEtagHeaderFilter` is not loaded, but when it works with `ShallowEtagHeaderFilter`, when `ShallowEtagHeaderFilter.updateResponse` is invoked, the real HttpServletResponse get through `WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);` become my own ResponseWrapper, so my own logic will be invoked inside `ShallowEtagHeaderFilter`, which is a mistake. \r\nBy changing the code to `WebUtils.getNativeResponse(response, ConditionalContentCachingResponseWrapper.class);`, everything will be fine.\r\n\r\n\r\n**Affects:** \\<5.2.5.RELEASE and others>\r\n\r\n\r\n']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,9a722b4558ca7985fb54a06ff76e3934abe898cb,Condition_Change,"-		if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) {
+		if (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER && typeName == null)) {",2,condition,Pass type name into PreparedStatement.setNull in case of Types.OTHER,"Issue: SPR-16669
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java,9b7a492bc95c8c1f3e3abfe055defa3722a0aa45,Condition_Change,"-		if (ClassUtils.isPresent(""rx.Observable"", classLoader)) {
+		if (ClassUtils.isPresent(""rx.Observable"", classLoader) &&
+				ClassUtils.isPresent(""rx.RxReactiveStreams"", classLoader)) {",3,condition,Test RxReactiveStreams presence in ReactiveAdapterRegistry,"Issue: SPR-17000
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/AntPathMatcher.java,9cbac985fbe20df1b0cce399dd238183de9befbc,Condition_Change,"-			if (cachePatterns == null && this.stringMatcherCache.size() == CACHE_TURNOFF_THRESHOLD) {
+			if (cachePatterns == null && this.stringMatcherCache.size() >= CACHE_TURNOFF_THRESHOLD) {",2,condition,Refined check for cache turnoff threshold,"Issue: SPR-10803
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,9dfa46f6902b7b134847ae20bc88b4a3968a99bb,Remove_Condition,"-			String scheme = rootDirUri.getScheme();
-			String path = rootDirUri.getPath();
-			if (""resource"".equals(scheme) && (path.length() > 1) && path.endsWith(""/"")) {
-				path = path.substring(0, path.length() - 1);
-				rootDirUri = new URI(scheme, path, rootDirUri.getFragment());
-			}",6,condition,Remove GraalVM workaround in PathMatchingResourcePatternResolver,"Tested successfully using the following locally built GraalVM dev build.

OpenJDK Runtime Environment GraalVM 22.3.0-dev (build 17.0.5+5-jvmci-22.3-b07)

Closes gh-29214
",['https://api.github.com/repos/spring-projects/spring-framework/issues/29214'],1,['Remove GraalVM workaround in PathMatchingResourcePatternResolver'],"['This is a follow up to #29163.\r\n\r\nOnce https://github.com/oracle/graal/issues/5080 and https://github.com/oracle/graal/issues/5081 have been resolved (tentatively in GraalVM 22.3), we should be able to remove the following workaround in `PathMatchingResourcePatternResolver`.\r\n\r\nhttps://github.com/spring-projects/spring-framework/blob/6cb131ac7629cfda489d4d2367a36d44ee7b5ed2/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java#L744-L750']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,9fec516560741a01c9049b5526113f2a94c72387,Condition_Change,"+import org.springframework.core.NativeDetector;
-		if (ClassUtils.isPresent(""org.crac.Core"", getClass().getClassLoader())) {
+		if (!NativeDetector.inNativeImage() && ClassUtils.isPresent(""org.crac.Core"", getClass().getClassLoader())) {",3,condition,Skip CRaC support with native images,"Skip CRaC support with native images to avoid compiling related
infrastructure to the native image and to fix tests via
gh-30422.

See gh-30242
","['https://api.github.com/repos/spring-projects/spring-framework/issues/30422', 'https://api.github.com/repos/spring-projects/spring-framework/issues/30242']",2,"['Update `RuntimeHintsAgentPlugin` to use the native image code path', 'CRaC Resource adapter for bean lifecycle in application context']","['`RuntimeHintsAgentPlugin` purpose is to verify that reflective invocations expected match the ones performed.\r\n\r\ngh-30242 introduces a code path where the reflective invocation is skipped when running on native.\r\n\r\nThis issue set the system property `org.graalvm.nativeimage.imagecode` to `runtime` when running runtime tests with the agent in order to make sure the code path tested for those tests is the native one.', ""In addition to our CRaC-oriented revisiting of the existing contracts for the bean lifecycle in an application context (#29921), we consider providing an `org.crac.Resource` adapter for Spring's `DefaultLifecycleProcessor` out of the box - e.g. as an implicit optional part of the `DefaultLifecycleProcessor` implementation or as a dedicated subclass of it. This allows for stopping/restarting of beans in an application context on a fine-grained basis, with some tightening of the `Lifecycle` contract and possibly even some dedicated extensions in `SmartLifecycle` that participating component implementations may rely on.""]","['closed', 'closed']","[0, 0]",[],,,,,
spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java,a1529d498e004b3e3b1aa123b57a07435e6d644d,Condition_Change,"-	@SuppressWarnings(""unchecked"")
+			boolean alreadyReceivedReply = this.hasReceived;
-			else if (this.hasReceived) {
+			else if (alreadyReceivedReply) {",4,condition,Fix possible GenericMsgTemplate race condition,"Fix a potential race condition with GenericMessagingTemplate's inner
TemporaryReplyChannel class.

Prior to this commit the `hasReceived` member variable was read after
calling `replyLatch.countDown()`.

Issue: SPR-11206
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,a2f5e1254e3ccf190ec559492a33ca87c47e54d3,Add_Condition,"+					int prefixIndex = filePath.indexOf(':');
+					if (prefixIndex == 1) {
+						filePath = filePath.substring(0, 1).toUpperCase() + filePath.substring(1);
+					}",4,condition,Drive letter case alignment in addClassPathManifestEntries,"Issue: SPR-16117
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java,a4c157fc09d3169f44901ee8969f3dacc73aaccb,Add_Condition,"+		if (message.getNativeMessage() != null) {
+			return message.getNativeMessage();
+		}",3,condition,Check for native WebSocket message,"In addition to the changes in
313a7836b091d20dbb9763b3677d559fea32d13d to support passing on a
the underlying WebSocket message, this commits checks for its
availability.

Closes gh-25099
",['https://api.github.com/repos/spring-projects/spring-framework/issues/25099'],1,"[""WebSocketMessage's methods `fromMessage` and `toFrames` ignore  Netty WebSocketFrame metadata ""]","['**Affects:** LATEST (since ReactorNettyWebSocketSession introduced)\r\n\r\n## Expected Behavior\r\nAdd metadata property to the WebSocketMessage POJO. And by-pass Netty WebSocketFrame metadata in ReactorNettyWebSocketSession implementation.\r\n\r\n## Motivation\r\nTo allow proxy compressed WebSocket frames through Spring Cloud Gateway metadata of the [WebSocketFrame](https://github.com/netty/netty/blob/f66412c84c57f77915accb003dec8dc9b3896afe/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketFrame.java#L31-L36)  (`rsv` and  `finalFragment`) should be processed. This will open the possibility to proxy frames ""as is"" and avoid unwanted decompress\\compress cycles inside the proxy service.\r\n\r\nThis will be also useful for the Undertow implementation soon since the migration to Netty was announced(http://undertow.io/blog/2019/04/15/Undertow-3.html)\r\nMetadata can be useful for other implementation in the future.\r\n \r\n## Possible Solution\r\nSince internal Spring WebSocketMessage is the generic POJO for the multiple servers I\'d propose adding some metadata to the WebSocketMessage which and use it for any metadata needs to be passed through the `toMessage` and `toFrame` methods. \r\n\r\nFor the specific ReactorNettyWebSocketSession implementation it may looks like:\r\n```java\r\n//avoided constants similar extractions\r\n    protected WebSocketMessage toMessage(WebSocketFrame frame) {\r\n        DataBuffer payload = bufferFactory().wrap(frame.content());\r\n\r\n        return new WebSocketMessage(messageTypes.get(frame.getClass()), payload,extractFrameMetadata(frame));\r\n    }\r\n\r\n    private void extractFrameMetadata(WebSocketFrame frame) {\r\n        Map<String,Object> frameMetadata = new HashMap<>();\r\n        frameMetadata.put(""rsv"",frame.rsv());\r\n        frameMetadata.put(""finalFragment"", frame.isFinalFragment());\r\n    }\r\n\r\n    protected WebSocketFrame toFrame(WebSocketMessage message) {\r\n        ByteBuf byteBuf = NettyDataBufferFactory.toByteBuf(message.getPayload());\r\n        if (WebSocketMessage.Type.TEXT.equals(message.getType())) {\r\n            return new TextWebSocketFrame(byteBuf,message.getMetadataEntry(""rsv""), message.getMetadataEntry(""finalFragment""));\r\n        }\r\n        else if (WebSocketMessage.Type.BINARY.equals(message.getType())) {\r\n            return new BinaryWebSocketFrame(byteBuf,message.getMetadataEntry(""rsv""), message.getMetadataEntry(""finalFragment""));\r\n        }\r\n        else if (WebSocketMessage.Type.PING.equals(message.getType())) {\r\n            return new PingWebSocketFrame(byteBuf,message.getMetadataEntry(""rsv""), message.getMetadataEntry(""finalFragment""));\r\n        }\r\n        else if (WebSocketMessage.Type.PONG.equals(message.getType())) {\r\n            return new PongWebSocketFrame(byteBuf,message.getMetadataEntry(""rsv""), message.getMetadataEntry(""finalFragment""));\r\n        }\r\n        else {\r\n            throw new IllegalArgumentException(""Unexpected message type: "" + message.getType());\r\n        }\r\n    }\r\n```\r\n']",['closed'],[5],"['We could pass the entire frame into `WebSocketMessage` and expose it like so:\r\n```java\r\npublic Object getNativeMessage() { ... }\r\n```\r\n', 'Hi @rstoyanchev , First of all thanks for your response.\r\nIt may be good in some cases to pass entire frame but from other perspective it can be, for example, a room to unefficient body consumption, or some other unefficient operations with frame data. Usually I prefer a wat which is used in netty/reactor netty projects, which allow to perform potentially unefficient operations only through their helper methods, and that\'s why i proposed to bypass relevant metadata only here.\r\nIn this case in seems that frame do have only body and ""metadata"", (rsv and finalFragment properties)\r\nWDYT?\r\nIn any case passing complete frame will solve my case completelly as well.\r\n  ', ""Spring's `WebSocketMessage` already exposes the `ByteBuf` content of the Netty `WebSocketFrame`.  So in regards to body consumption, I don't see anything that changes. It's more about providing access to the rest of what's in the `WebSocketFrame` in a way that is simple (without any indirection) and is also future proof in case new fields are exposed."", ""Hi @rstoyanchev  \r\nUnfortunately, you've fixed only half of the original issue.\r\nsince the method -  `toFrame` does not get the data from the original message and `rsv` and `isFinalFragment` fragment is still missing when user uses `toFrame` method through  WebSocketClient.\r\nand also in Spring Cloud Gateway  (where I originally discovered this issue), the original problem will be still actual."", 'So it should be something like this then?\r\n```java\r\nprotected WebSocketFrame toFrame(WebSocketMessage message) {\r\n\tif (message.getNativeMessage() != null) {\r\n\t\treturn message.getNativeMessage();\r\n\t}\r\n\t// the rest of toFrame...\r\n}\r\n```\r\nAs for Spring Cloud Gateway I think that would have to be changed there in a similar way I think.']",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,a537eb3a6a763eb1812afaa1ccfc56a3dadd6cb0,Condition_Change,"-		for (Annotation ann : this.getAnnotations()) {
+		for (Annotation ann : getAnnotations()) {
-			return ObjectUtils.nullSafeEquals(this.getElementTypeDescriptor(), other.getElementTypeDescriptor());
+			return ObjectUtils.nullSafeEquals(getElementTypeDescriptor(), other.getElementTypeDescriptor());
-			return ObjectUtils.nullSafeEquals(this.getMapKeyTypeDescriptor(), other.getMapKeyTypeDescriptor()) &&
-					ObjectUtils.nullSafeEquals(this.getMapValueTypeDescriptor(), other.getMapValueTypeDescriptor());
+			return ObjectUtils.nullSafeEquals(getMapKeyTypeDescriptor(), other.getMapKeyTypeDescriptor()) &&
+					ObjectUtils.nullSafeEquals(getMapValueTypeDescriptor(), other.getMapValueTypeDescriptor());",8,iteration,Polishing,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,a57d6ba5f3cf8afd6f333435d47035d5fe61fcf3,Add_Condition,"+		if (pathToUse.indexOf('.') == -1) {
+			return pathToUse;
+		}
+",4,condition,Optimize StringUtils.cleanPath,"Add an early exit to `StringUtils.cleanPath` to save array creating and
string concatenation. With a typical Spring application, the `cleanPath`
method can be called over 600 times, often with a path constructed by
a `ClassPathResource` that is likely to already be clean.

Closes gh-22568
",['https://api.github.com/repos/spring-projects/spring-framework/issues/22568'],1,['Optimize StringUtils.cleanPath'],['The `StringUtils.cleanPath` method is called ~600 times with a typical Spring Boot application and mostly with paths that are already correct. I think we can safely bypass String splitting and re-concatenation if the path does not contain `.`.'],['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java,a6b0b6e27945dcf3c84f2c8ae49969470a1c8c76,Remove_Condition,"+import org.springframework.util.CollectionUtils;
-		if (nativeHeaders.containsKey(STOMP_CONTENT_LENGTH_HEADER)) {
-			List<String> values = nativeHeaders.get(STOMP_CONTENT_LENGTH_HEADER);
-			String value = (values != null ? values.get(0) : null);
-			return Integer.valueOf(value);
-		}
-		return null;
+		List<String> values = nativeHeaders.get(STOMP_CONTENT_LENGTH_HEADER);
+		return (!CollectionUtils.isEmpty(values) ? Integer.valueOf(values.get(0)) : null);",9,condition,Efficient STOMP content-length header check,"Issue: SPR-14747
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java,aa49949d7ad09944db4284b957d754e8189ecc74,Condition_Change,"+import org.springframework.util.ClassUtils;
-					if (beanInstance != null && !beanMethod.getReturnType().isInstance(beanInstance)) {
+					if (beanInstance != null && !ClassUtils.isAssignableValue(beanMethod.getReturnType(), beanInstance)) {",3,condition,Bean type mismatch check accepts assignable values according to ClassUtils,"Issue: SPR-12905
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java,ab5aea5a1346cf489e8c727c3d4ee563352b3787,Condition_Change,"-	private static Object javaUtilOptionalEmpty = null;
-
+
+	private static Object javaUtilOptionalEmpty = null;
+
-		} catch (Exception ex) {
+		}
+		catch (Exception ex) {
-		if (targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {
+		if (javaUtilOptionalEmpty != null && targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {",10,condition,Defensively check javaUtilOptionalEmpty,"Issue: SPR-11888
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java,abcfffdde9aa833c1ce493525e9d2b9e4f15c46c,Condition_Change,"-		if (jaxb2Present && !jackson2Present) {
+		if (jaxb2Present && !jackson2XmlPresent) {",2,condition,Allow JAXB to be registered next to plain Jackson,"Issue: SPR-14336
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java,ac11acb532803ad557c2739549b9ac5e00695f12,Add_Condition,"+		if (postProcessors.size() <= 1) {
+			return;
+		}",3,condition,Optimize sorting in PostProcessorRegistrationDelegate,"Closes gh-24776
",['https://api.github.com/repos/spring-projects/spring-framework/issues/24776'],1,['Optimize sortPostProcessors() in PostProcessorRegistrationDelegate'],"['Size equal to 0 or 1 can return directly\r\n\r\n```java\r\nprivate static void sortPostProcessors(List<?> postProcessors, ConfigurableListableBeanFactory beanFactory) {\r\n\t\tComparator<Object> comparatorToUse = null;\r\n\t\tif (beanFactory instanceof DefaultListableBeanFactory) {\r\n\t\t\tcomparatorToUse = ((DefaultListableBeanFactory) beanFactory).getDependencyComparator();\r\n\t\t}\r\n\t\tif (comparatorToUse == null) {\r\n\t\t\tcomparatorToUse = OrderComparator.INSTANCE;\r\n\t\t}\r\n\t\tpostProcessors.sort(comparatorToUse);\r\n\t}\r\n```']",['closed'],[3],"[""Good catch. We'll optimize this in `5.2.6`."", 'It make code ugly, is it worthy?', '@quaff, We have implemented similar optimizations recently. See #24617 for details.']",,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/JsonViewResponseBodyAdvice.java,ae43b17fa0f7c6303a53a97803a8a64ce3d42b01,Add_Condition,"+
-import org.springframework.util.Assert;
-		Assert.isTrue(annotation.value().length != 0, ""No view class in JsonView annotation on "" + returnType);
-		bodyContainer.setSerializationView(annotation.value()[0]);
+		Class<?>[] classes = annotation.value();
+		if (classes.length != 1) {
+			throw new IllegalArgumentException(
+					""@JsonView only supported for response body advice with exactly 1 class argument: "" + returnType);
+		}
+		bodyContainer.setSerializationView(classes[0]);",10,iteration,JsonViewResponseBodyAdvice throws IllegalArgumentException in case of >1 view class specified,"Issue: SPR-12270
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java,af13580fd52be266df4e10b058c134bf05373d9f,Remove_Condition,"-			for (int i = 0; i < this.argumentValues.length; i++) {
-				this.argumentValues[i] = null;
-			}",3,iteration,Remove unnecessary array initialization,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ReflectionUtils.java,b082f546ecf781af7d572c22dc52f0c49760452b,Condition_Change,"-				List<Method> defaultMethods = findConcreteMethodsOnInterfaces(clazz);
+				List<Method> defaultMethods = findDefaultMethodsOnInterfaces(clazz);
-	private static List<Method> findConcreteMethodsOnInterfaces(Class<?> clazz) {
+	private static List<Method> findDefaultMethodsOnInterfaces(Class<?> clazz) {
-			for (Method ifcMethod : ifc.getMethods()) {
-				if (ifcMethod.isDefault()) {
+			for (Method method : ifc.getMethods()) {
+				if (method.isDefault()) {
-					result.add(ifcMethod);
+					result.add(method);",10,condition,Polishing,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java,b0e6091cadeaf29a95ab7d85eebd3c46671b6ac6,Add_Condition,"-			logger.error(""No session for "" + message);
+			if (logger.isDebugEnabled()) {
+				logger.debug(""No session for "" + message);
+			}",4,condition,"Lower ""no session"" message log level in SubProtocolWSH","Issue: SPR-12247
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java,b0e6091cadeaf29a95ab7d85eebd3c46671b6ac6,Condition_Change,"-			logger.error(""No session for "" + message);
+			if (logger.isDebugEnabled()) {
+				logger.debug(""No session for "" + message);
+			}",4,iteration,"Lower ""no session"" message log level in SubProtocolWSH","Issue: SPR-12247
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java,b121c0e2eac898d9762523af01895ca18219126d,Add_Condition,"+import javax.servlet.ServletInputStream;
+			ServletInputStream inputStream = ((ServletRequest) getNativeRequest()).getInputStream();
+			if (!(inputStream instanceof CoyoteInputStream)) {
+				return super.readFromInputStream();
+			}
-				ServletRequest request = getNativeRequest();
-				int read = ((CoyoteInputStream) request.getInputStream()).read(byteBuffer);
+				int read = ((CoyoteInputStream) inputStream).read(byteBuffer);",8,condition,Avoid ClassCastException in TomcatHttpHandlerAdapter,"Closes gh-24707
",['https://api.github.com/repos/spring-projects/spring-framework/issues/24707'],1,['Avoid ClassCastException for CoyoteInputStream in TomcatHttpHandlerAdapter'],"[""Servlet filter added in Spring Boot's `org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer` may override `HttpServletRequestWrapper.getInputStream()` and return an object derived from `ServletInputStream` that is not assignment compatible with Tomcat's `CoyoteInputStream`.""]",['closed'],[6],"['@sada-sigsci, do you have a concrete use case where you encountered a `ClassCastException` in conjunction with the `TomcatHttpHandlerAdapter`?', 'Tentatively slated for 5.2.5 since this seems like a potential bug.', 'Thank you for reviewing the PR.\r\nYes, web application security servlet filter middleware we work on reads the POST body and inspects for any anomalies before the HTTP servlet can read the POST body. Unbuffered POST body can be read (ServletInputStream.markSupported() may return false) only once in the filter. So the servlet filter has to extend the ServletInputStream class and wrap the body already read in the filter.', '`TomcatHttpHandlerAdapter` is for use in WebFlux where direct use of the Servlet is not supported. It is expected to use `WebFilter` instead. For example Spring Security provides a WebFlux integration based on that.\r\n\r\nAs an aside, when Servlet 3.1 non-blocking I/O is used, as in WebFlux, quite a few other parts of the Servlet API should not be used, or would interfere if used.\r\n\r\n', 'Example application is standard Reactive `SpringBootApplication` using embedded Tomcat instead of default Netty and customized using component `WebServerFactoryCustomizer<TomcatReactiveWebServerFactory>`.\r\n\r\nApplication was throwing ClassCastException when `@RestController` method tried to read `@RequestBody`. \r\n\r\n`TomcatHttpHandlerAdapter` wrapped `httpHandlerServlet` and added to `TomcatReactiveWebserver` in spring-boot(`TomcatReactiveWebServerFactory.java`). This fix is required so the servlet `httpHandlerServlet` is able to read the POST body on behalf of application `@RequestBody` \r\n\r\nOur middleware class derived from ServletInputStream overrides non-blocking i/o methods and `ReadListener` of servlets 3.1 ', ""So you are wrapping `ServletInputStream` and don't want it (e.g. unwrapped and) read more efficiently via `CoyoteInputStream` writing directly to a `ByteBuffer` (vs via `byte[]` first)? ""]",,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java,b1231de062f58571702e77ad9a3896fdbad092ef,Condition_Change,"-	private static int getPropertyNameKeyEnd(String propertyName, int startIndex) {
+	private int getPropertyNameKeyEnd(String propertyName, int startIndex) {
-					} else {
+					}
+					else {
+",6,condition,Fix formatting,"See gh-21855
",['https://api.github.com/repos/spring-projects/spring-framework/issues/21855'],1,"['Correctly parse property name in path ""map[key[foo]]""']","[""We have a `Bean` that contains a `Map`. In this `Map` we want to save properties with property names which contain an index that is relevant for our application only, like `key5[foo]`. For spring that index doesn't matter, it should just treat `key5[foo]` as property name.\r\nHowever spring-bean is not able to correctly retrieve the property name, it tries to retrieve `key5[foo` (missing square bracket at the end). That's because spring just looks for the first occurrence of `]` and thinks it's the closing square bracket of the property name, however in our case that square bracket is part of the property name, and the relevant square bracket for spring (to actually close the property name) comes afterwards.\r\n\r\n- [x] Added tests\r\n- [x] Signed the CLA.\r\n\r\nWould be nice if this could be backported to `5.1.x`.\r\nThanks!""]",['closed'],[3],"[""The Codacy check fails because the `switch` statement I added does not have a `default`. However that isn't necessary for the logic I added.\r\nDo I really have to add an empty/no-op `default` to that `switch` statement?"", '@jhoeller any chance you will assign this issue to the `5.1.5` milestone? I think the bug here - as well as the fix - is obvious. Thanks!', ""On review, I'll rather make this a 5.2 topic since the bean property binding is a high-risk area for regressions. Even if some such paths are not meant to be valid from our side, people may encounter e.g. property paths with incomplete nested brackets which we would possibly parse differently then.""]",,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/util/RfcUriParser.java,b13f86cf461feaa32f5298a0f12f17e79d7a2a32,Remove_Condition,"+					case '.':
+						parser.index(--i);
+						parser.advanceTo(PATH);
+						break;
-						if (c == '.') {
-							parser.index(--i);
-						}",7,condition,Fix failing tests in spring-test after recent changes,"See gh-33639
",['https://api.github.com/repos/spring-projects/spring-framework/issues/33639'],1,['Add URL Parser for RFC 3986'],"['Before 6.2, `UriComponentsBuilder` used regex expressions. Generally, they split on the main component delimiters, `"":""`, `""/""`, `""?""`, and `""#""`, but did not enforce deviations from the allowed character set by component. The resulting `UriComponents` can then encode any non-conforming characters.\r\n\r\nRegular expressions are convenient, but provide limited control and visibility. This is why in #32513 we added an implementation of the URL parsing algorithm from the [WhatWg URL Living Standard](https://url.spec.whatwg.org/) that browsers use to align on how to handle a wide range of cases leniently. While this provides more robust parsing than before, arguably on a server we can expect URLs that don\'t deviate from the RFC quite as far as what browsers need to be able to handle.\r\n\r\nWe can add a new parser that follows RFC syntax along the lines of the `java.net.URI` or Jetty\'s `HttpUri` parsers. The new parser should respect the main component delimiters, but otherwise leave some room for leniency within each component to allow some characters like spaces or curly braces (URI variables), similar to what the regex expressions did. `UriComponents` can then encode any non-confirming characters that remain after URI variables are expanded.\r\n\r\nIt should be possible to choose which parser to use, RFC or the WhatWG, when more leniency or alignment with browsers is needed.\r\n\r\nThe topic of RFC vs WhatWG parsing was first brought up by @joakime in #33542. For broader context, and possible future effort to standardize lenient parsing of user provided URLs, see https://lists.w3.org/Archives/Public/ietf-http-wg/2024JulSep/0281.html.\r\n']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java,b158110801db32b50243be538165274551a49512,Condition_Change,"-				if (body != null) {
-					throw new HttpMediaTypeNotAcceptableException(producibleTypes);
-				}
+				if (body != null) {
+					throw new HttpMediaTypeNotAcceptableException(producibleTypes);
+				}",6,condition,Fix debug log for no matching acceptableTypes,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java,b23cc01cb7981bdaf7274483a69673c519123444,Remove_Condition,"-				Method[] destroyMethods = new Method[destroyMethodNames.length];
+				List<Method> destroyMethods = new ArrayList<>(destroyMethodNames.length);
+						destroyMethods.add(destroyMethod);
-					destroyMethods[i] = destroyMethod;
-				this.destroyMethods = destroyMethods;
+				this.destroyMethods = destroyMethods.toArray(Method[]::new);
-				if (destroyMethod != null) {
-					invokeCustomDestroyMethod(destroyMethod);
-				}
+				invokeCustomDestroyMethod(destroyMethod);",10,condition,"Revise ""Ignore nonexistent default-destroy-method in XML config""","This commit revises the fix in c811428512ffd04d41e558dbbc672382079ced2c.

Closes gh-30301
",['https://api.github.com/repos/spring-projects/spring-framework/issues/30301'],1,['NPE thrown for nonexistent `default-destroy-method` in XML config'],"['**Affects:** v6.0.7\r\n\r\n---\r\n\r\nWhen I configure the `default-destroy-method` in XML config and there is a bean that does not have a destroy method, a `NullPointerException` is thrown when closing the `ApplicationContext`.\r\n\r\n\r\n### Example Config and Code\r\n\r\n```xml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<beans xmlns=""http://www.springframework.org/schema/beans""\r\n  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\r\n  xsi:schemaLocation=""http://www.springframework.org/schema/beans\r\n        https://www.springframework.org/schema/beans/spring-beans.xsd""\r\n  default-init-method=""myInit""\r\n  default-destroy-method=""myDestroy"">\r\n\r\n  <bean id=""a"" class=""com.wpp.core.c1.s1_6._3.AInit""/>\r\n  <bean id=""b"" class=""com.wpp.core.c1.s1_6._3.BDestroy""/>\r\n\r\n</beans>\r\n```\r\n\r\n```java\r\npackage com.wpp.core.c1.s1_6._3;\r\npublic class AInit {\r\n  public void myInit() {\r\n    System.out.println(""A myInit"");\r\n  }\r\n}\r\n\r\n```\r\n\r\n```java\r\npackage com.wpp.core.c1.s1_6._3;\r\npublic class BDestroy {\r\n  public void myDestroy() {\r\n    System.out.println(""B myDestroy"");\r\n  }\r\n}\r\n```\r\n\r\n```java\r\npackage com.wpp.core.c1.s1_6._3;\r\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\r\npublic class DefaultInitAndDestroyDemo {\r\n  public static void main(String[] args) {\r\n    var context = new ClassPathXmlApplicationContext(""com/wpp/core/c1/s1_6/_3/DefaultInitAndDestroyDemo.xml"");\r\n    context.close();\r\n  }\r\n}\r\n```\r\n\r\n### Exception\r\n\r\n```\r\n09:59:03.853 [main] DEBUG org.springframework.context.support.ClassPathXmlApplicationContext -- Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@880ec60\r\n09:59:04.048 [main] DEBUG org.springframework.beans.factory.xml.XmlBeanDefinitionReader -- Loaded 2 bean definitions from class path resource [com/wpp/core/c1/s1_6/_3/DefaultInitAndDestroyDemo.xml]\r\n09:59:04.088 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory -- Creating shared instance of singleton bean \'a\'\r\nA myInit\r\n09:59:04.123 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory -- Creating shared instance of singleton bean \'b\'\r\n09:59:04.194 [main] DEBUG org.springframework.context.support.ClassPathXmlApplicationContext -- Closing org.springframework.context.support.ClassPathXmlApplicationContext@880ec60, started on Fri Apr 07 09:59:03 CST 2023\r\nB myDestroy\r\n09:59:04.197 [main] WARN org.springframework.beans.factory.support.DefaultListableBeanFactory -- Destruction of bean with name \'a\' threw an exception\r\njava.lang.NullPointerException: Cannot invoke ""java.lang.reflect.Method.getParameterCount()"" because ""destroyMethod"" is null\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:278)\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:238)\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587)\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559)\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1189)\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520)\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1182)\r\n\tat org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1084)\r\n\tat org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1053)\r\n\tat org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1003)\r\n\tat com.wpp.core.c1.s1_6._3.DefaultInitAndDestroyDemo.main(DefaultInitAndDestroyDemo.java:25)\r\n```\r\n\r\n### Related Issues\r\n\r\n- #10879\r\n- #30295\r\n']",['closed'],[3],"['Hi @edfeff,\r\n\r\nThanks for raising the issue and providing the sample application.\r\n\r\nIt turns out that we already have a test in our own test suite which demonstrates the `NullPointerException`.\r\n\r\nIf we run `org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.ignoreDefaultLifecycleMethods()`, we see the following message logged at WARN level.\r\n\r\n```\r\n13:31:19.852 [main] WARN  o.s.b.f.s.DefaultListableBeanFactory - Destruction of bean with name \'foo\' threw an exception\r\njava.lang.NullPointerException: Cannot invoke ""java.lang.reflect.Method.getParameterCount()"" because ""destroyMethod"" is null\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:290) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:239) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1189) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1182) ~[main/:?]\r\n\tat org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.ignoreDefaultLifecycleMethods(DefaultLifecycleMethodsTests.java:70) ~[test/:?]\r\n```', 'This appears to have been a regression introduced in 6.0.x and has been fixed for inclusion in 6.0.8.', 'Reopening to investigate a potentially more suitable fix for the regression.']",,,,,
spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java,b6144e5682c966759e7fd16dbac4d4948d332161,Add_Condition,"+import org.springframework.util.StringUtils;
-		close(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));
+		if(!StringUtils.hasText(ex.getMessage())) {
+			close(CloseStatus.SERVER_ERROR);
+		}
+		else {
+			close(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));
+		}",8,condition,Improve setting of WebSocket error status,"See gh-28836
",['https://api.github.com/repos/spring-projects/spring-framework/issues/28836'],1,['Avoid IllegalArgumentException when setting WebSocket error status'],"[""Fixing internal error, when the message of an exception doesn't contain any text.\r\n\r\nIn my application, this probably caused a memory leak. (Which I will retest with a fork, but it will take some time because the issue happened very infrequently)\r\n\r\nThis is how it looks in the log:\r\n```\r\njava.lang.IllegalArgumentException: Reason must not be empty\r\n\tat org.springframework.util.Assert.hasText(Assert.java:289) ~[spring-core-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.CloseStatus.withReason(CloseStatus.java:184) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.onError(AbstractListenerWebSocketSession.java:250) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat reactor.core.publisher.StrictSubscriber.onError(StrictSubscriber.java:106) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:544) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onError(FluxDoFinally.java:119) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:192) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:259) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:842) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:588) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:863) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:990) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:258) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:903) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.onError(MonoSubscribeOn.java:152) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.SinkEmptyMulticast$VoidInner.error(SinkEmptyMulticast.java:247) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.SinkEmptyMulticast.tryEmitError(SinkEmptyMulticast.java:88) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.SinkEmptySerialized.tryEmitError(SinkEmptySerialized.java:65) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.onError(AbstractListenerWebSocketSession.java:245) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat reactor.core.publisher.StrictSubscriber.onError(StrictSubscriber.java:106) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:544) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:258) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat org.springframework.http.server.reactive.WriteResultPublisher$State.publishError(WriteResultPublisher.java:277) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.WriteResultPublisher.publishError(WriteResultPublisher.java:99) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State.onError(AbstractListenerWriteProcessor.java:479) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onError(AbstractListenerWriteProcessor.java:132) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat reactor.core.publisher.StrictSubscriber.onError(StrictSubscriber.java:106) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher$State.onError(AbstractListenerReadPublisher.java:497) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher.onError(AbstractListenerReadPublisher.java:145) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.handleError(AbstractListenerWebSocketSession.java:208) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter.onError(StandardWebSocketHandlerAdapter.java:120) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.onError(WsHttpUpgradeHandler.java:234) ~[tomcat-embed-websocket-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.upgradeDispatch(WsHttpUpgradeHandler.java:161) ~[tomcat-embed-websocket-9.0.64.jar!/:na]\r\n\tat org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:60) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:59) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]\r\n```""]",['closed'],[3],"['I think we could switch to a very generic message instead.', 'Any suggestions? Then I will change the PR accordingly.', ""I've left it as a status-only response since the status code itself communicates the nature. I've also added logging with the exception message at INFO and the full stacktrace at DEBUG.""]",,,,,
spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java,b92515bdee5a3f153183e2f86ee5e378c28b0d1e,Condition_Change,"-			if (this.targetName == null) {
+			if (this.targetName == null && logger.isInfoEnabled()) {",2,condition,Add logger.isInfoEnabled check before logger.info,Closes gh-24667,['https://api.github.com/repos/spring-projects/spring-framework/issues/24667'],1,['Add logger.isInfoEnabled check before logger.info'],[''],['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks'],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/AntPathMatcher.java,baa7b1c6c84f64465cecdf6ad2e2bf90371cbd7b,Remove_Condition,"-				return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) :
-						!path.endsWith(this.pathSeparator));
+				return (pattern.endsWith(this.pathSeparator) == path.endsWith(this.pathSeparator));
-					if (skipped > 0) {
-						return true;
-					}
-					return (pattDir.length() > 0) && isWildcardChar(pattDir.charAt(0));
+					return (skipped > 0 || (pattDir.length() > 0 && isWildcardChar(pattDir.charAt(0))));",8,condition,Simplified match condition checks,"Issue: SPR-15477
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,bac5cd866e3ad685b84be0bcce2bdef573077242,Remove_Condition,"-				sessionAttrHandler = this.sessionAttributesHandlerCache.get(handlerType);
-				if (sessionAttrHandler == null) {
-					sessionAttrHandler = new SessionAttributesHandler(handlerType, this.sessionAttributeStore);
-					this.sessionAttributesHandlerCache.put(handlerType, sessionAttrHandler);
-				}
+				sessionAttrHandler = this.sessionAttributesHandlerCache.computeIfAbsent(handlerType, type -> new SessionAttributesHandler(type, this.sessionAttributeStore));",6,condition,Simplify getSessionAttributesHandler() method,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java,bac68c8d3f9ca4caa70b54c14e0e9805f88f8d34,Remove_Condition,"-		if (!""post"".equalsIgnoreCase(request.getMethod())) {
-			return false;
-		}
-		String contentType = request.getContentType();
-		return StringUtils.startsWithIgnoreCase(contentType, ""multipart/"");
+		return StringUtils.startsWithIgnoreCase(request.getContentType(), ""multipart/"");",6,condition,StandardServletMultipartResolver accepts any HTTP method for multipart,"Issue: SPR-16975
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java,bd8d71be0e6ff0a6cb5cded33b473c6ba8260e9d,Condition_Change,"+		ResolvableType actualElementType;
+			actualElementType = elementType;
-			elementType = (bodyType.toClass() == Object.class && body != null ?
-					ResolvableType.forInstance(body) : bodyType);
+			actualElementType = body != null ? ResolvableType.forInstance(body) : bodyType;
+			elementType = (bodyType.toClass() == Object.class && body != null ? actualElementType : bodyType);
-				if (writer.canWrite(elementType, bestMediaType)) {
+				if (writer.canWrite(actualElementType, bestMediaType)) {",8,condition,canWrite uses actual return value type if known,"Closes gh-22803
",['https://api.github.com/repos/spring-projects/spring-framework/issues/22803'],1,"[""Return value doesn't serialize to JSON when return type is Mono of Interface in WebFlux""]","['In WebMVC type application, Spring\'s message converter can convert the return value to a proper message(like a JSON) when controller return type declared by interface.\r\n\r\nBut, Webflux\'s behavior is different.\r\n\r\nFor example, we have Car class that implements Vehicle interface.\r\n```\r\npublic interface Vehicle {\r\n}\r\n\r\npublic class Car implements Vehicle {\r\n    private String gearType;\r\n}\r\n```\r\nAnd then there is a controller method like that.\r\n```\r\n@GetMapping(""vehicle"")\r\npublic Vehicle getVehicle() {\r\n    return new Car();\r\n}\r\n```\r\nI can get a json response of Car class with `content-type: application/json` header.\r\n\r\nBut, webflux\'s result is defferent. \r\n```\r\n@GetMapping(""vehicle"")\r\npublic Mono<Vehicle> getVehicle() {\r\n    return Mono.just(new Car());\r\n}\r\n```\r\nIt only supports a \'content-type: text/event-stream\' when return type is a mono of interface.\r\nIs it a bug?']",['closed'],[3],"['This odd. The signature with `Mono<Vehicle>` should work in both Spring MVC and WebFlux as expected. Do you have a sample?', 'Here is my simple example.\r\n\r\nWebflux : https://github.com/freddieyyh/demo/tree/webflux\r\nWebMVC : https://github.com/freddieyyh/demo/tree/webmvc\r\n\r\nCommand `curl -X GET -H ""Accept: application/json"" ""localhost:8080/interface-a""`\r\nworks on WebMVC demo, but doesn\'t work on  Webflux demo.', ""The `Result` interface from the sample has no methods, so Jackson returns false for `getObjectMapper().canSerialize(Result.class)`. Adding at least one accessor makes it work. \r\n\r\nSpring MVC works is because it uses the actual type `ResultA`. We can make an improvement in WebFlux so that a concrete return value works the same, but for `Mono<Result>` it would still rely on the declared type, so it's best to have some sort of accessor on the interface.""]",,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/BeanUtils.java,bd8e682c51a6a383df559717d5352188032afb1b,Remove_Condition,"-			Constructor<T> kotlinPrimaryConstructor = KotlinDelegate.findPrimaryConstructor(clazz);
-			if (kotlinPrimaryConstructor != null) {
-				return kotlinPrimaryConstructor;
-			}
+			return KotlinDelegate.findPrimaryConstructor(clazz);",5,condition,Simplify BeanUtils.findPrimaryConstructor(),Closes gh-26519,['https://api.github.com/repos/spring-projects/spring-framework/issues/26519'],1,['Simplify BeanUtils.findPrimaryConstructor()'],['Simplified code.'],['closed'],[4],"['@1993heqiang Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26519)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26519) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@1993heqiang Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26519)!', 'This has been merged into `master`.\r\n\r\nThanks', 'good']",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,be853d466b406b7f6a66420158b5eba1de2fe267,Add_Condition,"+		@Override
+		public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass) {
+			for (Annotation annotation : getAnnotations()) {
+				if (annotation.annotationType() == annotationClass) {
+					return true;
+				}
+			}
+			return false;
+		}
+",10,condition,AnnotatedElementAdapter explicitly declares isAnnotationPresent method,"Issue: SPR-14872
(cherry picked from commit 17863df)
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,be853d466b406b7f6a66420158b5eba1de2fe267,Add_Condition,"+		@Override
+		public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass) {
+			for (Annotation annotation : getAnnotations()) {
+				if (annotation.annotationType() == annotationClass) {
+					return true;
+				}
+			}
+			return false;
+		}
+",10,iteration,AnnotatedElementAdapter explicitly declares isAnnotationPresent method,"Issue: SPR-14872
(cherry picked from commit 17863df)
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java,c23fd784a0d91f5de1e6b5cab82e86b1746fc3b4,Remove_Condition,"-	private TaskExecutorAdapter getAdaptedExecutor(Executor concurrentExecutor) {
-		if (managedExecutorServiceClass != null && managedExecutorServiceClass.isInstance(concurrentExecutor)) {
-			return new ManagedTaskExecutorAdapter(concurrentExecutor);
-		}
-		TaskExecutorAdapter adapter = new TaskExecutorAdapter(concurrentExecutor);
+	private TaskExecutorAdapter getAdaptedExecutor(Executor originalExecutor) {
+		TaskExecutorAdapter adapter =
+				(managedExecutorServiceClass != null && managedExecutorServiceClass.isInstance(originalExecutor) ?
+						new ManagedTaskExecutorAdapter(originalExecutor) : new TaskExecutorAdapter(originalExecutor));",9,condition,Consistently apply TaskDecorator to ManagedExecutorService as well,"Closes gh-32455
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32455'],1,['Consistently apply TaskDecorator to ManagedExecutorService as well'],"['Following up on #30442, there is still one case where a configured `TaskDecorator` is not applied: to a late-initialized JSR-236 `ManagedExecutorService`, as typically encountered by `DefaultManagedTaskExecutor` in an application server environment.']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,c3dbaed4ced5dafe736dfe391807ac85bfe6858e,Condition_Change,"+				result = synthesizeAnnotation(result, method);
-		return synthesizeAnnotation(result, method);
+		return result;
-			if (result != null) {
+			if (result != null && synthesize) {
+				result = synthesizeAnnotation(result, clazz);
-		return (synthesize ? synthesizeAnnotation(result, clazz) : result);
+		return result;",8,condition,AnnotationUtils caches findAnnotation results in pre-synthesized form,"Issue: SPR-13621
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java,c4e8ffece16db679ef4d92d97d7b3e8c748f0b5a,Condition_Change,"-		if (KotlinDetector.isKotlinReflectPresent() && !NativeDetector.inNativeImage()) {
+		if (KotlinDetector.isKotlinReflectPresent()) {",2,condition,Remove outdated NativeDetector check for Kotlin reflection,"See gh-25179
",['https://api.github.com/repos/spring-projects/spring-framework/issues/25179'],1,['Disable and remove unsupported features from native images'],['The work done on [spring-graalvm-native substitutions](https://github.com/spring-projects-experimental/spring-graalvm-native/tree/master/spring-graalvm-native-substitutions) has allows to identify a first set of classes where we need to add a specific code path for GraalVM native images:\r\n\r\n- Remove load time weaving capabilities from `org.springframework.context.support.AbstractApplicationContext`\r\n- Remove `ConfigurationClassEnhancer` usage from `org.springframework.context.annotation.ConfigurationClassPostProcessor`\r\n- Remove usage of `ObjenesisCglibAopProxy` from   `org.springframework.aop.framework.DefaultAopProxyFactory`\r\n- Remove `CglibSubclassCreator` usage from `org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy`\r\n\r\nThere are likely other ones to be identified.'],['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java,c5590ae9e6a3d75feae96f3015a65462c67dbcf8,Condition_Change,"-			catch (AbstractMethodError err) {
-				logger.debug(""JDBC driver does not implement JDBC 4.1 'getObject(int, Class)' method"", err);
-			}
-			catch (SQLFeatureNotSupportedException ex) {
+			catch (SQLFeatureNotSupportedException | AbstractMethodError ex) {
-				logger.debug(""JDBC driver has limited support for JDBC 4.1 'getObject(int, Class)' method"", ex);
+				if (logger.isDebugEnabled()) {
+					logger.debug(""JDBC driver has limited support for 'getObject(int, Class)' with column type: "" +
+							requiredType.getName(), ex);
+				}",10,iteration,Log column type for limited support message in getResultSetValue,"Closes gh-32601
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32601'],1,['Log column type for limited support message in `JdbcUtils.getResultSetValue`'],"['It would have been great to see which type is not supported in the logs, all the more as a driver provider gives a very terse error message (""Invalid column type""):\r\nlogger.debug(""JDBC driver has limited support for JDBC 4.1 \'getObject(int, Class)\' method for class = "" + requiredType, ex);\r\n\r\n_Originally posted by @PhilippeHaution in https://github.com/spring-projects/spring-framework/issues/16223#issuecomment-2035184262_']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java,c95dfca726aa72ef0c7dc64526b5808f28e258f1,Add_Condition,"+					if (logger.isInfoEnabled()) {
+						logger.info(""Skipped XML bean definition file due to specified profiles ["" + profileSpec +
+								""] not matching: "" + getReaderContext().getResource());
+					}",4,condition,Log profile-based exclusion of XML bean definition file,"Issue: SPR-10202
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CollectionFactory.java,ccec75c98daa681727f510fa8e69d9651615d59c,Condition_Change,"-		else if (SortedSet.class == collectionType || NavigableSet.class == collectionType) {
+		else if (TreeSet.class == collectionType || SortedSet.class == collectionType || NavigableSet.class == collectionType) {",2,condition,Add missing TreeSet to CollectionFactory.createCollection(),"See gh-28949
",['https://api.github.com/repos/spring-projects/spring-framework/issues/28949'],1,['Support TreeSet collection type in CollectionFactory.createCollection() without using reflection'],['It seems to have been missed in #28718.'],['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java,cd4ce8727e97366cd50281f9ad2dd22922578ac1,Condition_Change,"-
-
-			interceptors.add(new OriginHandshakeInterceptor(allowedOrigins));
+			RootBeanDefinition originHandshakeInterceptor = new RootBeanDefinition(OriginHandshakeInterceptor.class);
+			originHandshakeInterceptor.getPropertyValues().add(""allowedOrigins"", allowedOrigins);
+			interceptors.add(originHandshakeInterceptor);
-			for (Element beanElement : DomUtils.getChildElementsByTagName(parentElement, new String[] {""bean"", ""ref""})) {
+			for (Element beanElement : DomUtils.getChildElementsByTagName(parentElement, ""bean"", ""ref"")) {",8,iteration,WebSocket namespace consistently applies resolvable allowed-origins value,"Issue: SPR-13760
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,cdf6eb95ab1ec041b1512185d2e00b09f433e866,Add_Condition,"-				logger.warn(""Exception encountered during context initialization - cancelling refresh attempt"", ex);
+				if (logger.isWarnEnabled()) {
+					logger.warn(""Exception encountered during context initialization - "" +
+							""cancelling refresh attempt: "" + ex);
+				}",5,condition,Reduced warn log entry without stacktrace for startup exceptions,"Issue: SPR-13663
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java,cdfcc23b6f1424f04e8273b3aa69fe185fb73dde,Condition_Change,"-			if (logger.isErrorEnabled()) {
-				logger.error(""Failed to invoke @ExceptionHandler method: "" + exceptionHandlerMethod, invocationEx);
+			if (logger.isDebugEnabled()) {
+				logger.debug(""Failed to invoke @ExceptionHandler method: "" + exceptionHandlerMethod, invocationEx);",4,condition,Reduce log level for @ExceptionHandler failure,"Issue: SPR-13932
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,ce1954da1edd64f1280ead0435c7b3923e33f6da,Condition_Change,"-			if (!this.knownSuperclasses.containsKey(superclass)) {
+			if (!superclass.startsWith(""java"") && !this.knownSuperclasses.containsKey(superclass)) {",2,condition,Configuration class processing explicitly skips java.* classes since we'll never find @Bean annotations there anyway,"Issue: SPR-11718
(cherry picked from commit c8ea80d)
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java,ce49354400936778b7a7a1e6ec1a373d2a1fa5cb,Add_Condition,"+import java.nio.charset.StandardCharsets;
+	private static final MediaType APPLICATION_PLUS_JSON = new MediaType(""application"", ""*+json"");
+
+				else if (mediaType.isCompatibleWith(MediaType.APPLICATION_JSON) ||
+						mediaType.isCompatibleWith(APPLICATION_PLUS_JSON)) {
+						this.characterEncoding = StandardCharsets.UTF_8.name();
+				}",7,condition,Sync MockHttpServletResponse implementations,"See gh-33019
",['https://api.github.com/repos/spring-projects/spring-framework/issues/33019'],1,['`MockHttpServletResponse` defaults to ISO-8859-1 for JSON while the rest of the framework defaults to UTF-8'],"['**Affects:** 6.1.8\r\n\r\nWhen Spring MVC serializes JSON and no charater encoding is specified, UTF-8 is used by default (see [this](https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java#L436) or [this](https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java#L156)). \r\n\r\nMockMvc on the other hand always defaults to ISO-8859-1 which results in inconsistencies reproduced [here](https://github.com/lukas-krecan/JsonUnit/issues/212).\r\n\r\nThis is a follow-up of https://github.com/spring-projects/spring-framework/issues/32997\r\n\r\n']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,ce4eff321cd976df4ba26fe3971642259af891d2,Add_Condition,"-		StringBuilder sb = new StringBuilder(inString.length());
+		int capacity = inString.length();
+		if (newPattern.length() > oldPattern.length()) {
+			capacity += 16;
+		}
+		StringBuilder sb = new StringBuilder(capacity);
+
+",8,condition,Optimize StringUtils.replace for larger replacement pattern,"Issue: SPR-15430
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java,cfae40afb456c98b2a11be600096da89b8aacafd,Add_Condition,"+import org.springframework.http.HttpStatus;
+import org.springframework.web.server.ResponseStatusException;
-			return Mono.error(new IllegalStateException(
-					""In a WebFlux application, form data is accessed via ServerWebExchange.getFormData().""));
+			if (logger.isDebugEnabled()) {
+				logger.debug(""Form data is accessed via ServerWebExchange.getFormData() in WebFlux."");
+			}
+			return Mono.error(new ResponseStatusException(HttpStatus.UNSUPPORTED_MEDIA_TYPE));",8,condition,Return 415 for form data with @RequestBody in WebFlux,"Closes gh-26386
",['https://api.github.com/repos/spring-projects/spring-framework/issues/26386'],1,['Return 415 for form data via @RequestBody in WebFlux'],"['A `@RestController` like\r\n\r\n```\r\n@RestController\r\n public class DemoController {\r\n     @PostMapping\r\n     public Map<String, Object> getAttributes(@RequestBody Body body, ServerWebExchange serverWebExchange) {\r\n         return serverWebExchange.getAttribute(body.getAttribute());\r\n     }\r\n }\r\n```\r\n\r\nis expected to handle requests with content type _application/json_. When the client request has a content type _x-www-form-urlencoded_, I would expect that the server returns _415 Unsupported Media Type_ or another client error.\r\nInstead Spring throws _java.lang.IllegalStateException: In a WebFlux application, form data is accessed via ServerWebExchange.getFormData()._\r\n\r\nA sample application with failing test can be found here: https://github.com/huberchrigu/spring-reactive-wrong-content-type']",['closed'],[1],"[""Technically it is possible to read the body via `FormHttpMessageReader` but we decided to prevent it as part of #22486 in order to avoid running into the issue of trying to consume the body twice, once via `ServerWebExchange#getFormData` (e.g. in a filter or other) and a second via `@RequestBody`. You're right though that 415 would be a better way to flag this since this effectively means that method doesn't support it.\r\n\r\n""]",,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/BeanUtils.java,d2868f5dd0840c158a5a60fa96c4afd9ce19f777,Condition_Change,"+import java.util.HashSet;
-		List<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null);
+		Set<String> ignoreSet = (ignoreProperties != null ? new HashSet<>(Arrays.asList(ignoreProperties)) : null);
-			if (writeMethod != null && (ignoreList == null || !ignoreList.contains(targetPd.getName()))) {
+			if (writeMethod != null && (ignoreSet == null || !ignoreSet.contains(targetPd.getName()))) {",5,condition,Use Set to track ignored properties in BeanUtils.copyProperties(),"Closes gh-30088
",['https://api.github.com/repos/spring-projects/spring-framework/issues/30088'],1,['Use `Set` to track ignored properties in `BeanUtils.copyProperties()`'],[None],['closed'],[2],"['@liupeng12345 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30088)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30088) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@liupeng12345 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30088)!']",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,d2aa6a98f25274b99f48866d83c10cfe3bf00f52,Condition_Change,"-import org.springframework.util.ReflectionUtils;
+import org.springframework.util.ReflectionUtils;
-									} else {
+									}
+									else {",5,condition,Polishing,"Closes gh-31846
",['https://api.github.com/repos/spring-projects/spring-framework/issues/31846'],1,['Convert args to Kotlin value class in CoroutinesUtils'],"['Currently, `IllegalArgumentException` occurs when Kotlin suspend function with value class parameters  in proxied class is called.\r\nThis is because those functions are called by `CoroutinesUtils` (called from `AopUtils`), but it does not convert Java type args to Kotlin value class.\r\n\r\nThis PR aims to avoid the exception.\r\nI referred to https://github.com/spring-projects/spring-framework/issues/31698\r\n\r\nRelated issue:\r\nhttps://github.com/ExpediaGroup/graphql-kotlin/issues/1894\r\n\r\nSample code:\r\nhttps://github.com/T45K/Spring_GraphQL-Kotlin_trial\r\n\r\nStack trace:\r\n<details><summary>Details</summary>\r\n<p>\r\n\r\n```\r\njava.lang.IllegalArgumentException: object is not an instance of declaring class\r\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(DirectMethodHandleAccessor.java:197) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:99) ~[na:na]\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.calls.ValueClassAwareCaller.call(ValueClassAwareCaller.kt:190) ~[kotlin-reflect-1.9.20.jar:1.9.255-SNAPSHOT]\r\n\tat kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207) ~[kotlin-reflect-1.9.20.jar:1.9.255-SNAPSHOT]\r\n\tat kotlin.reflect.full.KCallables.callSuspendBy(KCallables.kt:74) ~[kotlin-reflect-1.9.20.jar:1.9.255-SNAPSHOT]\r\n\tat org.springframework.core.CoroutinesUtils.lambda$invokeSuspendingFunction$2(CoroutinesUtils.java:124) ~[spring-core-6.1.1.jar:6.1.1]\r\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4.invokeSuspend(IntrinsicsJvm.kt:270) ~[kotlin-stdlib-1.9.20.jar:1.9.255-SNAPSHOT]\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) ~[kotlin-stdlib-1.9.20.jar:1.9.255-SNAPSHOT]\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.EventLoop.processUnconfinedEvent(EventLoop.common.kt:68) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.DispatchedTaskKt.resumeUnconfined(DispatchedTask.kt:245) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.DispatchedTaskKt.dispatch(DispatchedTask.kt:163) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.dispatchResume(CancellableContinuationImpl.kt:474) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.resumeImpl(CancellableContinuationImpl.kt:508) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.resumeImpl$default(CancellableContinuationImpl.kt:497) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.resumeWith(CancellableContinuationImpl.kt:368) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.reactive.AwaitKt$awaitOne$2$1.onNext(Await.kt:242) ~[kotlinx-coroutines-reactive-1.7.3.jar:na]\r\n\tat reactor.core.publisher.StrictSubscriber.onNext(StrictSubscriber.java:89) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415) ~[reactor-netty-core-1.1.13.jar:1.1.13]\r\n\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446) ~[reactor-netty-core-1.1.13.jar:1.1.13]\r\n\tat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687) ~[reactor-netty-http-1.1.13.jar:1.1.13]\r\n\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114) ~[reactor-netty-core-1.1.13.jar:1.1.13]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284) ~[reactor-netty-http-1.1.13.jar:1.1.13]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346) ~[netty-codec-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318) ~[netty-codec-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997) ~[netty-common-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) ~[netty-common-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[netty-common-4.1.101.Final.jar:4.1.101.Final]\r\n\tat java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]\r\n```\r\n\r\n</p>\r\n</details> ']",['closed'],[1],"['Merged, thanks!']",,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java,d41ca095abee4e8284139f239d4b5bbf09f694a5,Add_Condition,"+import org.springframework.core.KotlinDetector;
+import org.springframework.util.ReflectionUtils;
+		Class<?> declaringClass = method.getDeclaringClass();
+		if (KotlinDetector.isKotlinType(declaringClass)) {
+			ReflectionUtils.doWithMethods(declaringClass, m -> hints.registerMethod(m, ExecutableMode.INVOKE),
+					m -> m.getName().equals(method.getName() + ""$default""));
+		}",7,condition,Add native support for Kotlin default values in controllers,"Closes gh-33384
",['https://api.github.com/repos/spring-projects/spring-framework/issues/33384'],1,['spring native not support method handler with kotlin default value'],"['spring version: 6.1.8\r\n\r\nexample:\r\n```kotlin\r\n@RestController\r\nclass DefaultController {\r\n    @GetMapping(""/defaultValue"")\r\n    fun defaultValue(@RequestParam(required = false) argument: Boolean? = null) = argument\r\n}\r\n```\r\n\r\ntest:\r\n```shell\r\ncurl localhost:8080/defaultValue\r\n{""timestamp"":""2024-08-14T03:59:59.186+00:00"",""status"":500,""error"":""Internal Server Error"",""path"":""/defaultValue""}\r\n```\r\n\r\nstack trace:\r\n```\r\nServlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed: org.graalvm.nativeimage.MissingReflectionRegistrationError: The program tried to reflectively invoke method public static java.lang.Boolean com.example.DefaultController.defaultValue$default(com.example.DefaultController,java.lang.Boolean,int,java.lang.Object) without it being registered for runtime reflection. Add it to the reflection metadata to solve this problem. See https://www.graalvm.org/latest/reference-manual/native-image/metadata/#reflection for help.] with root cause\r\n\r\norg.graalvm.nativeimage.MissingReflectionRegistrationError: The program tried to reflectively invoke method public static java.lang.Boolean com.example.DefaultController.defaultValue$default(com.example.DefaultController,java.lang.Boolean,int,java.lang.Object) without it being registered for runtime reflection. Add it to the reflection metadata to solve this problem. See https://www.graalvm.org/latest/reference-manual/native-image/metadata/#reflection for help.\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.reflect.MissingReflectionRegistrationUtils.forQueriedOnlyExecutable(MissingReflectionRegistrationUtils.java:97) ~[na:na]\r\n        at java.base@17.0.11/java.lang.reflect.Method.acquireMethodAccessor(Method.java:77) ~[com.example.ApplicationKt:na]\r\n        at java.base@17.0.11/java.lang.reflect.Method.invoke(Method.java:566) ~[com.example.ApplicationKt:na]\r\n        at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97) ~[com.example.ApplicationKt:1.9.24-release-822]\r\n        at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Static.call(CallerImpl.kt:106) ~[na:na]\r\n        at kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:215) ~[com.example.ApplicationKt:1.9.24-release-822]\r\n        at kotlin.reflect.jvm.internal.KCallableImpl.callBy(KCallableImpl.kt:112) ~[com.example.ApplicationKt:1.9.24-release-822]\r\n        at org.springframework.web.method.support.InvocableHandlerMethod$KotlinDelegate.invokeFunction(InvocableHandlerMethod.java:334) ~[na:na]\r\n        at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:252) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[com.example.ApplicationKt:6.1.11]\r\n```\r\n\r\nissue reproduce repository: https://github.com/czp3009/spring-native-not-support-method-handler-with-kotlin-default-value\r\n\r\nPossible causes:\r\ni notice that in [this issue](https://github.com/spring-projects/spring-framework/issues/21139#issuecomment-1602718793) spring finally support kotlin default value in method handler\r\n\r\nbut according to code in [PR](https://github.com/mdeinum/spring-framework/commit/06bc03e7e560ee166e142e070feead3b8c80b8fd), it seems that the native hint for method handlers with method names ending in \'$default\' is missing']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,d43dfc7bae5aa5e81bc51dfb26c1ae1ff1ecc52e,Add_Condition,"-				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR);
+				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR);
+				if (separatorIndex == -1) {
+					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR);
+				}
-					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length());
+					rootEntryPath = urlFile.substring(separatorIndex + 2);  // both separators are 2 chars",7,condition,Properly extract jar file from Tomcat war URL,"Issue: SPR-15485
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/ui/ModelMap.java,d62522982f39f2610f0d9d26d9908ccb1ea24222,Condition_Change,"-			for (String key : attributes.keySet()) {
+			for (Map.Entry<String, ?> entry : attributes.entrySet()) {
+				String key = entry.getKey();
-					put(key, attributes.get(key));
+					put(key, entry.getValue());",5,iteration,Performance improvement,"Use entrySet instead of keySet followed by a lookup per key as the
former is more efficient.

Issue: SPR-12363
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java,d7b45b7c8ee7bf9fc780d5512005a273846d9ee1,Add_Condition,"-							declaration.""""""
-								.formatted(name, rootAnnotationTypeName));
+							declaration -- for example, @AliasFor(annotation = %s.class).""""""
+								.formatted(name, rootAnnotationTypeName, this.annotationType.getName()));",4,iteration,Improve diagnostics for convention-based annotation attribute overrides,"The warning message logged for an annotation that still uses
convention-based overrides now includes a concrete suggestion for how
the problem may potentially be fixed.

  WARN - Support for convention-based annotation attribute overrides is
  deprecated and will be removed in Spring Framework 6.1. Please
  annotate the 'locations' attribute in
  @org.springframework.core.annotation.MergedAnnotationsTests$ConventionBasedComposedContextConfiguration
  with an appropriate @AliasFor declaration -- for example,
  @AliasFor(annotation = org.springframework.core.annotation.MergedAnnotationsTests$ContextConfiguration.class).

See gh-28760
",['https://api.github.com/repos/spring-projects/spring-framework/issues/28760'],1,['Deprecate convention-based annotation attribute overrides in favor of `@AliasFor`'],"[""## Overview\r\n\r\n**Implicit** convention-based annotation attribute overrides have been supported for a long time; however, Spring Framework 4.2 introduced support for **explicit** annotation attribute overrides via `@AliasFor`.\r\n\r\nSince explicit overrides are favorable to implicit overrides, and since the support for convention-based overrides increases the complexity of Spring's annotation search algorithms, we will deprecate convention-based overrides in 6.0 and remove the support in 6.2 (see #28761).\r\n\r\n## Deliverables\r\n\r\n- [x] in 6.0, whenever a convention-based override is detected, log a warning stating the reasons mentioned above\r\n""]",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/EvalTag.java,d87465f9e9a802b6ad97fcc9a19d6d4e24c58082,Condition_Change,"+import jakarta.el.ELContext;
-		private final jakarta.servlet.jsp.el.VariableResolver variableResolver;
+		private final ELContext elContext;
+
-			this.variableResolver = pageContext.getVariableResolver();
+			this.elContext = pageContext.getELContext();
-			if (this.variableResolver == null) {
+			if (this.elContext == null) {
-				return this.variableResolver.resolveVariable(name);
+				return this.elContext.getELResolver().getValue(this.elContext, name, null);",10,condition,Use ELContext instead of VariableResolver in JspPropertyAccessor,"The JSP VariableResolver API has been deprecated since JSP 2.1 in favor
of the newer ELContext API.

This commit therefore refactors JspPropertyAccessor to use the
ELContext API.

Closes gh-32383
",['https://api.github.com/repos/spring-projects/spring-framework/issues/32383'],1,['Use `ELContext` instead of deprecated `VariableResolver` API in `JspPropertyAccessor`'],['The JSP `VariableResolver` API has been deprecated since JSP 2.1 in favor of the newer `ELContext` API.\r\n\r\nWe should therefore use `ELContext` instead of the deprecated `VariableResolver` API in `JspPropertyAccessor`.'],['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java,d8f4d37624fc38a8c28d8e427f205b395e290f15,Condition_Change,"-				if ((read = channel.read(byteBuffer)) > 0) {
+				if ((read = channel.read(byteBuffer)) >= 0) {",2,condition,Fixed bug in reading Flux from Channel,"Fixed bug where the returned Flux from DataBufferUtils.read() would be
completed prematurely if the channel was not ready to read, but did
not reach the end of the file either.
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java,d9cae339d60cc7f21b6f067fa4d66c5104cdc15c,Condition_Change,"-		Advisor advisor = this.advisors.get(index);
+		Advisor advisor = this.advisors.remove(index);
-			for (int j = 0; j < ia.getInterfaces().length; j++) {
-				removeInterface(ia.getInterfaces()[j]);
+			Class<?>[] interfaces = ia.getInterfaces();
+			for (Class<?> iface : interfaces) {
+				removeInterface(iface);
-		this.advisors.remove(index);",8,iteration,Simplify AdvisedSupport.removeAdvisor(),Closes gh-24205,['https://api.github.com/repos/spring-projects/spring-framework/issues/24205'],1,['Simplify AdvisedSupport.removeAdvisor()'],"[""1) it's not necessary to call `IntroductionAdvisor.getInterfaces()` twice for each iteration\r\n2) instead of calling `ArrayList.get()` and then `ArrayList.remove()` we can once call `ArrayList.remove()` to get and remove item by its index""]",['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks'],,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,db2601d6e25a427368500ffcb8d274319222ec92,Condition_Change,"-			if (logger.isDebugEnabled()) {
-				logger.debug(""Ignoring bean creation exception on FactoryBean type check: "" + ex);
+			if (logger.isWarnEnabled()) {
+				logger.warn(""Bean creation exception on FactoryBean type check: "" + ex);",4,condition,AbstractBeanFactory logs bean creation exception on FactoryBean type check at warn level,"Issue: SPR-12397
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/CollectionUtils.java,dbbdd044cdd5439e4066b71af34324670a274514,Remove_Condition,"-		for (Object elem : arr) {
-			collection.add((E) elem);
-		}
+		Collections.addAll(collection, (E[])arr);",4,iteration,Use Collections.addAll instead of Collection.addAll,"See gh-24636
",['https://api.github.com/repos/spring-projects/spring-framework/issues/24636'],1,['Polish mergeArrayIntoCollection of CollectionUtils'],['This can simplify the code'],['closed'],[2],"['@NathanQingyangXu Thank you for your pointing.', '@chenqimiao actually, the advice from javadoc is outdated, see https://github.com/openjdk/jdk/pull/1764']",,,,,
spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java,dcc8dcdff81dd76cfcb7df8c6f1d61b4a3d4f207,Add_Condition,"+			long contentLength = getHeaders().getContentLength();
+			if (contentLength != -1) {
+				this.servletResponse.setContentLengthLong(contentLength);
+			}",4,condition,Set content length on ServletHttpResponse,"Prior to this commit, the `ServletServerHttpResponse` would copy headers
from the `HttpHeaders` map and calls methods related to headers exposed
as properties (content-type, character encoding).

Unlike its reactive variant, this would not set the content length.
Depending on the Servlet container implementation, this could cause
duplicate Content-Length response headers in the actual HTTP response.

This commit aligns both implementations and ensures that the
`setContentLengthLong` method is called if necessary so that the Servlet
container can ensure a single header for that.

Fixes gh-26330
",['https://api.github.com/repos/spring-projects/spring-framework/issues/26330'],1,"['The response has a duplicate ""Content-Length"" header when get by range header']","['When I use Undertow as server , and make a range request, the response will have two ""Content-Length"" header.\r\n\r\n## request\r\n\r\n> GET /inspection/api/v1/binary/1568 HTTP/1.1\r\n> Host: inspection.lubansoft.net:58888\r\n> Connection: keep-alive\r\n> Pragma: no-cache\r\n> Cache-Control: no-cache\r\n> User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\r\n> Accept: */*\r\n> Accept-Encoding: identity\r\n> Accept-Language: zh-CN,zh;q=0.9\r\n> Range: bytes=0-65535\r\n\r\n## response\r\n\r\n> HTTP/1.1 206 Partial Content\r\n> Expires: 0\r\n> Cache-Control: no-cache, no-store, max-age=0, must-revalidate\r\n> X-XSS-Protection: 1; mode=block\r\n> Pragma: no-cache\r\n> Content-Disposition: form-data; name=""attachment""; filename*=UTF-8\'\'%E8%AF%84%E5%AE%9A%E8%A1%A810.3.2%20%E6%98%8E%E6%B4%9E%E6%B5%87%E7%AD%91%E5%88%86%E9%A1%B9%E5%B7%A5%E7%A8%8B%E8%B4%A8%E9%87%8F%E6%A3%80%E9%AA%8C%E8%AF%84%E5%AE%9A%E8%A1%A8%28SG%29.pdf\r\n> Accept-Ranges: bytes\r\n> Date: Mon, 21 Dec 2020 13:02:45 GMT\r\n> Connection: keep-alive\r\n> Content-Language: zh-CN\r\n> X-Frame-Options: SAMEORIGIN\r\n> ETag: ""10""\r\n> Vary: Origin\r\n> Vary: Access-Control-Request-Method\r\n> Vary: Access-Control-Request-Headers\r\n> Last-Modified: Mon, 21 Dec 2020 06:02:31 GMT\r\n> Content-Range: bytes 196608-212611/212612\r\n> X-Content-Type-Options: nosniff\r\n> Content-Length: 212612\r\n> Content-Length: 16004\r\n> Content-Type: application/pdf\r\n\r\n\r\nin response header, Content-Length has two values , and chrome will have net::ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH error\r\n\r\n\r\n\r\n`org.springframework.web.servlet.resource.ResourceHttpRequestHandler` actually writes the content-length twice. Once, with the entire content-length and then later on, if a partial-content response, with the range length.\r\n\r\nTomcat handles this just fine accepting the last content-length set as the authoritative content-length and writes it back to the client.\r\n\r\nUndertow seems to assume all headers are multi-value and writes both content-length headers back to the client.\r\n\r\n']",['closed'],[4],"['https://github.com/paulcwarren/spring-content/issues/449', ""The http spec doesn’t specify how to handle multiple content-length headers with different values.  This [SO post](https://stackoverflow.com/questions/37002982/multiple-content-length-headers-and-multiple-transfer-encoding-headers), commented on by spec author Julian Reschke, confirms that.  But perhaps that is because it is obviously an error?  \u2028\r\n\r\nThe only think I can really determine from the spec is that is it meant to be a single-valued header.  So, probably this can be chased down to the stack to undertow using tomcat's behavior as justification.   They could decide to treat the last set header as the authoritative value (as tomcat does) and everything would be fine, but equally they could decide to treat it as an error I guess?  Either way, maybe this is the best first course of action.\r\n\r\nBut I also wonder if `org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setHeaders` has to write a content-length header at all?  Given, content-length is single-valued and the message converter attempts to write the header anyway.  Perhaps it is too assumptive to knowingly write this “provisionally” instance up-front?  \r\n\r\nWould this be viewed as a backward incompatible change though?  A custom `ResourceHttpMessageConverter` might rely on the original `setHeaders` method.  However, to do so I think it would have to override `getContentLength` to return null which would be weird (why would a resource not want to return a content-length???).  So, perhaps it is ok?\r\n\r\nWhat other considerations would we need to make?"", 'I think it should be fixed in Undertow not Spring.', 'I\'ve reproduced the problem and looked into it.\r\n\r\nHere\'s what\'s happening:\r\n\r\n1. the `ResourceHttpRequestHandler` is setting the content length using `ServletHttpResponse.setContentLength` or `ServletHttpResponse.setContentLengthLong`\r\n2. it\'s then delegating to the message converters. `ResourceHttpMessageConverter` and `ResourceRegionHttpMessageConverter` are setting the content length using `HttpHeaders.setContentLength` (this adds a ""Content-Length"" header to the header map).\r\n3. later, `ServletServerHttpResponse` is writing headers to the Servlet response by calling `ServletResponse.addHeader` for each entry\r\n4. unlike other containers, Undertow doesn\'t seem to enforce a single Content-Length header if we\'re using `ServletHttpResponse.addHeader` to add headers, which is the case in `ServletServerHttpResponse`\r\n\r\nBecause the ""Content-Length"" header can be set in multiple ways through the Servlet API, containers behave differently. It seems that Tomcat is enforcing a single response header no matter what, while Undertow is enforcing that only if it\'s set through the `setContentLength{Long}` methods.\r\n\r\nWe can fix this problem with a couple of changes:\r\n\r\n* first, remove the duplicate code and avoid setting the content length twice\r\n* then, align `org.springframework.http.server.ServletServerHttpResponse` with `org.springframework.http.server.reactive.ServletServerHttpResponse` and call `ServletHttpResponse.setContentLength` after copying the headers from the map.\r\n\r\nNote that those specific Servlet containers behavior are hard to test without complete integration tests or replicating their headers implementation. Our own `org.springframework.mock.web.MockHttpServletResponse` is enforcing a single Content-Length header no matter what.']",,,,,
spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateExceptionTranslator.java,ddb41172331ef015e67826a5a1cece1c44d4153f,Add_Condition,"+import javax.persistence.PersistenceException;
+
+import org.springframework.orm.jpa.EntityManagerFactoryUtils;
-		return null;
+		if (ex instanceof PersistenceException && ex.getCause() instanceof HibernateException) {
+			return convertHibernateAccessException((HibernateException) ex.getCause());
+		}
+		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);",8,condition,HibernateExceptionTranslator converts JPA exceptions as well (for Hibernate 5.2),"Issue: SPR-14455
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java,de069d06d852e6fa2e8e4ca9d442168729af6588,Remove_Condition,"-	protected JAXBContext getJaxbContext() {
+	/**
+	public JAXBContext getJaxbContext() {
-		if (this.supportJaxbElementClass && JAXBElement.class.isAssignableFrom(clazz)) {
-			return true;
-		}
-		return supportsInternal(clazz, this.checkForXmlRootElement);
+		return ((this.supportJaxbElementClass && JAXBElement.class.isAssignableFrom(clazz)) ||
+				supportsInternal(clazz, this.checkForXmlRootElement));",9,condition,"Made ""getJaxbContext()"" method public","Issue: SPR-10282
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java,dedb04bd5c611d098053d94233b848db5e9f40b2,Add_Condition,"+import java.sql.SQLDataException;
+				catch (SQLDataException ex) {
+					logger.debug(""JDBC driver has limited support for JDBC 4.1 'getObject(int, Class)' method"", ex);
+				}",4,iteration,"Workaround for Derby's limited support for JDBC 4.1 getObject(index, requiredType)","Issue: SPR-12157
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java,defc1d31574ea6b3faa5ed84c4aa23c808b0c7cf,Remove_Condition,"-			if (!shouldIntrospectorIgnoreBeaninfoClasses) {
-				Class<?> classToFlush = beanClass;
-				do {
-					Introspector.flushFromCaches(classToFlush);
-					classToFlush = classToFlush.getSuperclass();
-				}
-				while (classToFlush != null);
-			}
-",9,condition,Drop Introspector.flushFromCaches calls completely,"According to the JDK's documentation and changelog, the Introspector itself safely handles weak references as of JDK 6 update 21 (which is what we require for Spring 4.0).

Issue: SPR-11356
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.java,df8412bded77faadd60d62dc5c78ca8b2b44a481,Condition_Change,"-		if (logger.isDebugEnabled()) {
-			logger.debug(""Closing due to exception for "" + session, exception);
+		if (logger.isErrorEnabled()) {
+			logger.error(""Closing session due to exception for "" + session, exception);",4,condition,ExceptoinWebSocketHandlerDecorator uses ERROR level,"Issue: SPR-15537
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java,e2b1dcbaca1cc618281d1308a5c24c28d4a04020,Condition_Change,"-			TypedValue value = this.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences);
-			if (this.ref.cachedReadAccessor instanceof CompilablePropertyAccessor) {
-				CompilablePropertyAccessor accessor = (CompilablePropertyAccessor) this.ref.cachedReadAccessor;
-				this.ref.exitTypeDescriptor = CodeFlow.toDescriptor(accessor.getPropertyType());
+			TypedValue value =
+					this.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences);
+			PropertyAccessor accessorToUse = this.ref.cachedReadAccessor;
+			if (accessorToUse instanceof CompilablePropertyAccessor) {
+				this.ref.exitTypeDescriptor =
+						CodeFlow.toDescriptor(((CompilablePropertyAccessor) accessorToUse).getPropertyType());",10,condition,AccessorLValue reliably downcasts to CompilablePropertyAccessor in concurrent scenarios,"Issue: SPR-14850
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java,e2ccd55d146c245ee3e6d46783e3c288999894ff,Remove_Condition,"-		Method[] methods = this.sortedMethodsCache.get(clazz);
-		if (methods == null) {
-			methods = clazz.getMethods();
+		return this.sortedMethodsCache.computeIfAbsent(clazz, key -> {
+			Method[] methods = key.getMethods();
-			this.sortedMethodsCache.put(clazz, methods);
-		}
-		return methods;
+			return methods;
+		});",10,condition,ReflectivePropertyAccessor uses computeIfAbsent for cache computation,"Issue: SPR-16882
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java,e3bb06c8783ca45633ee361bb637cc3236471479,Condition_Change,"-		if (this.method.getParameters().length == 0) {
+		if (this.method.getParameterTypes().length == 0) {",2,condition,Avoid Java8 API,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java,e4539d9f4003bee0f3cd31dd70b87a32ffb95884,Condition_Change,"-			if (methodParam.getParameterAnnotation(RequestBody.class).required()) {
+			if (checkRequired(methodParam)) {
+	protected boolean checkRequired(MethodParameter methodParam) {
+		return methodParam.getParameterAnnotation(RequestBody.class).required();
+	}
+",6,condition,Add protected method for required RequestBody,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,e48ec4fcd333a3f2149f8966b367e51322d9ff90,Condition_Change,"-					if (checkGetParameterType) {
+					if (checkGetParameterType &&
+							!(jdbcDriverName.startsWith(""Oracle"") && dbmd.getDriverMajorVersion() >= 12)) {",3,condition,StatementCreatorUtils always tries getParameterType on Oracle 12c driver,"Issue: SPR-13825
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,e53c2c6331be891b19bf90fc8cc0d2c194d88615,Condition_Change,"-			if (lastDotIndex != -1) {
+			int previousDotIndex = name.lastIndexOf(PACKAGE_SEPARATOR, lastDotIndex -1);
+			if (lastDotIndex != -1 && previousDotIndex != 1 && Character.isUpperCase(name.charAt(previousDotIndex + 1))) {",3,condition,Reduce nested class lookups in ClassUtils,"Prior to this commit, `ClassUtils#forName` would always attempt to
resolve the given class name as a nested type. For example, searching
for `org.example.Spring` would try to resolve:

* `org.example.Spring`
* if not available, try `org.example$Spring` as well

Java classes usually start with uppercase letters, so this additional
lookup can be costly and not very useful.

This commit only attempts nested class lookups when the previous segment
starts with an uppercase. So `org.example.Spring.Issue` will look for
`org.example.Spring$Issue`, but `org.example.Spring` will not.

Closes gh-31258
",['https://api.github.com/repos/spring-projects/spring-framework/issues/31258'],1,['Reduce nested class lookups in ClassUtils'],"[""While working on #31213, I have noticed that Framework performs more class lookups than we thought.\r\n\r\nFor example, we need to register reflection on `jakarta.inject.Inject` types; even if the type is not present on the classpath at build time, the application might try to load it at runtime anyway. If the class is not present at runtime, `ClassUtils#forName` will try to load both `jakarta.inject.Inject` and `jakarta.inject$Inject`.\r\n\r\nWhile I understand the rationale for nested classes, I think we need to consider the following proposals:\r\n\r\n1. This is the expected behavior, so we'll need to amend our reflection hints engine to automatically register nested class variants no matter what. This could be the best solution for our 6.0.x branch.\r\n2. As part of 6.1, we could consider toning things down and only attempting to resolve nested classes if the previous segment starts with a capital letter (which is more typical for a class name), like `org.example.Spring.Issue` -> `org.example.Spring$Issue`. This could also benefit most JVM applications by reducing the amount of unnecessary lookups.\r\n3. Eliminate nested classes entirely; I'm not sure this is the right approach as we're likely to break existing apps for no added benefit.\r\n\r\nAny opinion @jhoeller @snicoll ?""]",['closed'],[2],"['Only trying the nested class syntax in case of an upper-case segment before looks like a good way out, covering the common cases that we are trying to optimize for.', ""Thanks Juergen, I'll use this issue to apply that change in 6.1.""]",,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java,e5475d698a8a861a03a18c24de16e3e4f0d22f72,Condition_Change,"-				for (Iterator<Class<?>> it = this.customEditors.keySet().iterator(); it.hasNext() && editor == null;) {
-					Class<?> key = it.next();
+				for (Map.Entry<Class<?>, PropertyEditor> entry : this.customEditors.entrySet()) {
+					if (editor != null) {
+						break;
+					}
+					Class<?> key = entry.getKey();
-						editor = this.customEditors.get(key);
+						editor = entry.getValue();",9,iteration,Iterate over Map's entrySet() instead of keySet() in PropertyEditorRegistrySupport,"Closes gh-27591
",['https://api.github.com/repos/spring-projects/spring-framework/issues/27591'],1,['Iterate over Map.entrySet() instead of Map.keySet() in PropertyEditorRegistrySupport'],['Tiny optimization is possible using `Map.entrySet()` instead of `Map.keySet()`'],['closed'],[1],['This has been merged into `5.3.x` and `main`.\r\n\r\nThanks'],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,e7f89f87c14bb65a83518508a791dc68e681ddd4,Condition_Change,"-		if (parts.length >= 2) {
+		if (parts.length > 2) {",2,condition,Fix off-by-one error in parseLocaleString,"Fix off-by-one error in StringUtils.parseLocaleString()

Issue: SPR-10364
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/TypePath.java,e8486e2afe6e49f5597313da8a4e4f37e2029bc2,Add_Condition,"+                if (i < n && typePath.charAt(i) == ';') {
+                    i += 1;
+                }
-                result.append(getStepArgument(i));
+                result.append(getStepArgument(i)).append(';');",5,condition,Tracking ASM 5.0.4 development: Fix for ASM issue 317539,"Issue: SPR-12255
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java,ecce7520fb2cb56494d78dcc6adadb446d51ace7,Condition_Change,"-			for (Element converter : DomUtils.getChildElementsByTagName(convertersElement, ""bean"")) {
-				BeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(converter);
-				beanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(converter, beanDef);
-				messageConverters.add(beanDef);
+			for (Element beanElement : DomUtils.getChildElementsByTagName(convertersElement, new String[] { ""bean"", ""ref"" })) {
+				Object object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);
+				messageConverters.add(object);",7,iteration,Support HttpMessageConverter refs in mvc namespace,"Issue: SPR-9469
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionBeanRegistrationAotProcessor.java,f1cbbd2aa80476dc570d3bdf23d589a9a2544a37,Remove_Condition,"-			if (proxyInterfaces.length == 0) {
-				return;
-			}",3,condition,Remove redundant array length check,"Closes gh-33655
",['https://api.github.com/repos/spring-projects/spring-framework/issues/33655'],1,['Remove unnecessary array length check'],"['This is why I opened PR.\r\n\r\n1. ClassUtils.getAllInterfacesForClass does not return null.\r\n2. Even if the length of proxyInterfaces is 0, no error occurs in the loop.\r\nSo I think that conditional statement is unnecessary.']",['closed'],[0],[],,,,,
spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java,f29ffb37f71e09bc1ec98633a87b49875b611f8b,Condition_Change,"-	private static final Method getPushBuilderMethod =
-			ClassUtils.getMethodIfAvailable(HttpServletRequest.class, ""getPushBuilder"");
+	private static final Method newPushBuilderMethod =
+			ClassUtils.getMethodIfAvailable(HttpServletRequest.class, ""newPushBuilder"");
-				(getPushBuilderMethod != null && getPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) ||
+				(newPushBuilderMethod != null && newPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) ||
-		else if (getPushBuilderMethod != null && getPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) {
-			Object pushBuilder = ReflectionUtils.invokeMethod(getPushBuilderMethod, request);
+		else if (newPushBuilderMethod != null && newPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) {
+			Object pushBuilder = ReflectionUtils.invokeMethod(newPushBuilderMethod, request);",10,condition,Compatibility with Servlet 4.0 b05,"Issue: SPR-15379
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,f31eb2dcf9f03148907ea49c209144753c96573a,Add_Condition,"+
+		if (NativeDetector.inNativeImage()) {
+			return result;
+		}
+",5,condition,Skip scanning the module path when running in a native image,"Prior to this commit, the following exception was thrown when using the
PathMatchingResourcePatternResolver to scan for class path resources
using the `classpath*:` prefix within a native image.

com.oracle.svm.core.jdk.UnsupportedFeatureError: JRT file system is disabled
com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89)
jdk.internal.module.SystemModuleFinders$SystemImage.reader(SystemModuleFinders.java:139)
jdk.internal.module.SystemModuleFinders$ModuleContentSpliterator.<init>(SystemModuleFinders.java:527)
jdk.internal.module.SystemModuleFinders$SystemModuleReader.list(SystemModuleFinders.java:502)
org.springframework.core.io.support.PathMatchingResourcePatternResolver.lambda$findAllModulePathResources$6(PathMatchingResourcePatternResolver.java:819)

This commit addresses this by not attempting to scan the module path
when running in a GraalVM native image.

Closes gh-29183
",['https://api.github.com/repos/spring-projects/spring-framework/issues/29183'],1,['Optimize native footprint by avoiding using `ModuleFinder.ofSystem()` at runtime'],"['#28506 introduced JPMS support in `PathMatchingResourcePatternResolver` by using `ModuleFinder.ofSystem()`, but it has introduced a significant footprint increase on native (close to 2M RSS) due to the transitive usage of `JarVerifier` and related crypto classes.\r\n\r\nThis commit skip `ModuleFinder.ofSystem()` usage on native since JPMS usage is pretty niche, so it is probably ok to skip it on native. We may be able to re-introduce JPMS on native support there if we achieve to support this use case via #29081.']",['closed'],[1],"[""While working on #29163, I have encountered the following error.\r\n\r\n```\r\n    => com.oracle.svm.core.jdk.UnsupportedFeatureError: JRT file system is disabled\r\n       com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89)\r\n       jdk.internal.module.SystemModuleFinders$SystemImage.reader(SystemModuleFinders.java:139)\r\n       jdk.internal.module.SystemModuleFinders$ModuleContentSpliterator.<init>(SystemModuleFinders.java:527)\r\n       jdk.internal.module.SystemModuleFinders$SystemModuleReader.list(SystemModuleFinders.java:502)\r\n       org.springframework.core.io.support.PathMatchingResourcePatternResolver.lambda$findAllModulePathResources$6(PathMatchingResourcePatternResolver.java:819)\r\n```\r\n\r\nIn light of that, I am reopening this issue and co-assigning it to me since I'll work on a fix.""]",,,,,
spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java,f425a993e7be82ffdbdda24370925a34c42925f2,Add_Condition,"+				if (!session.isOpen()) {
+					logger.trace(""Dropped inbound WebSocket message due to closed session"");
+					return;
+				}",4,condition,Ignore missing STOMP decoder if session closed,"Closes gh-24842
",['https://api.github.com/repos/spring-projects/spring-framework/issues/24842'],1,['Avoid “No decoder for session id” Exception if session is closed'],"['Hello, We using spring websocket in stomp for chatting in service. ( android, ios app connect to server with stomp, and then send/receive stomp messages. ) when we deploy stomp web server, throws exception when server reloading. ( intermittently occurs after server reloading. )\r\n\r\n```\r\n""java.lang.IllegalStateException: No decoder for session id \'e3d585e7-f176-362b-2b7a-9dbf8630cc82\'\r\n at org.springframework.web.socket.messaging.StompSubProtocolHandler.handleMessageFromClient(StompSubProtocolHandler.java:231)\r\n at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:312)\r\n at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75)\r\n```\r\n\r\nI heard that this exception occurs the connection is closed by the server and spring drops the session and everything(decoder) associated with it. This exception occurs in spring library. so we can\'t anything to prevent this exception occurs.\r\n\r\nI want know about how can we prevent to occur this exception when server deployed.\r\n\r\nI thought some cases about send to ""DISCONNET"" message client.\r\n\r\n1. server send ""DISCONNECT"" message to client with regiseterd session id when server drops.\r\nBut in now, we don\'t know how can get connected session id in server. If we can get session id for all client connected in server, then we can do it. or if we can extend StompSubProtocolHandler and register custom StompSubProtocolHandler, then it can be done.\r\n\r\n2. catch IllegalStateException and send to ""DISCONNET"" message client.\r\nThis error occurs in library. If we register exception handler, then we seems to control it, but we can\'t know about session id in clent. ']",['closed'],[1],"[""This is most likely a race condition where the `WebSocketSession` has closed at the same time. We can check and if that's the case, only log a warning about the dropped incoming message.""]",,,,,
spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java,f4e23fe204588a744b111b8c7f6bbd1dbeda97b0,Add_Condition,"+import org.springframework.aot.AotDetector;
+
-		addDiscoverer(new LocalVariableTableParameterNameDiscoverer());
+		if (!AotDetector.useGeneratedArtifacts()) {
+			addDiscoverer(new LocalVariableTableParameterNameDiscoverer());
+		}",6,condition,Do not use LocalVariableTableParameterNameDiscoverer in AOT mode,"Closes gh-29531
",['https://api.github.com/repos/spring-projects/spring-framework/issues/29531'],1,['Deprecate `LocalVariableTableParameterNameDiscoverer` completely (avoiding its exposure in native images)'],['`DefaultParameterNameDiscoverer` should be updated to not use `LocalVariableTableParameterNameDiscoverer` when running as a native image.'],['closed'],[7],"['I think this should behave the same way on the JVM. the check should be on AOT not native. ', ""Could be great for consistency indeed even if technically on JVM + AOT we have to the capability to use it. Let's validate the choice in today's Framework meeting."", 'I updated the PR accordingly.', ""An interesting case in terms of automatic exclusion indeed.\r\n\r\nWe certainly don't want to support that parameter name discovery strategy in a native image (where the underlying class files are generally not available), and it's not recommended in any other scenario either... since you can always compile with `-parameters` instead, with no need to parse class files then. In such a recommended setup, `StandardReflectionParameterNameDiscoverer` will always be able to resolve the parameter names first, so `LocalVariableTableParameterNameDiscoverer` will never actually be reached.\r\n\r\nFrom that perspective, for a setup following Java 8+ recommendations, `LocalVariableTableParameterNameDiscoverer` could even be removed completely. It's only really there for backwards compatibility with older setups that got migrated without `-parameters`. Baking that assumption into our AOT arrangement - namely that you need to compile with `-parameters` when you are optimizing for AOT, completely avoiding unnecessary class file parsing - seems sensible."", ""I'm afraid we'll have to return to a `NativeDetector` check here since `AotDetector` is in the higher-level `aot` package whereas `DefaultParameterNameDiscoverer` is a very low-level `core` component. Since there is no significant difference to be expected in practice, I don't think the cycle-free narrower check matters. After all, `LocalVariableTableParameterNameDiscoverer` is effectively not applicable in a native image due to its class file parsing approach, so it arguably does make sense to exclude it on that basis and rely on `-parameters` usage by convention."", ""Reopening this one after a team discussion: It is ultimately preferable to deprecate `LocalVariableTableParameterNameDiscoverer` completely, not using it by default in any setup anymore, since that class file parsing strategy has been long superseded by the Java 8 `-parameters` flag on `javac` already.\r\n\r\nWe have considered doing this before and meant to address the native image impact of it in 6.0 but somehow missed this last week. So let's fix this glitch now, in time for the Boot 3.0 GA release, with a note in the upgrade wiki page."", ""As a lenient measure for the transition period, we'll keep `LocalVariableTableParameterNameDiscoverer` active on the JVM but log a warning for each successful parameter name resolution. This will only be logged when parameter names actually need to be inspected, and only when `StandardReflectionParameterNameDiscoverer` did not return anything, suggesting that compilation with `-parameters` has been missed somewhere.""]",,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java,f9cffcce0544b648e002251518e319dbdcfaec41,Add_Condition,"+		int batchSize = pss.getBatchSize();
+		if (batchSize == 0) {
+			return new int[0];
+		}
-				int batchSize = pss.getBatchSize();
-					return batchSize > 0 ? ps.executeBatch() : new int[] {};
+					return ps.executeBatch();",7,condition,"Polish ""Avoid calling executeBatch() with an empty batch""","See gh-27154
",['https://api.github.com/repos/spring-projects/spring-framework/issues/27154'],1,['Avoid calling executeBatch() with 0 batch size'],"['Now usign  `org.springframework.jdbc.core.JdbcTemplate#batchUpdate(java.lang.String, org.springframework.jdbc.core.BatchPreparedStatementSetter)` with empty data array may produce exception with some DBs. E. g. with HSQLDB it produce `java.sql.SQLException: statement is not in batch mode`. Suggest avoid it by batchSize checking.']",['closed'],[2],"['@Li0n13 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27154)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27154) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@Li0n13 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27154)!']",,,,,
spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,f9d2641fd59a39b149277c707dd277922c3aa5d7,Condition_Change,"-	private static Class<?> javaxInjectProviderClass;
+	private static Class<?> jakartaInjectProviderClass;
-			javaxInjectProviderClass =
+			jakartaInjectProviderClass =
-			javaxInjectProviderClass = null;
+			jakartaInjectProviderClass = null;
-		else if (javaxInjectProviderClass == descriptor.getDependencyType()) {
+		else if (jakartaInjectProviderClass == descriptor.getDependencyType()) {",8,condition,Update field name to reflect switch to Jakarta,,[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/GenericCallMetaDataProvider.java,fc93f99f539afb812a839e48ef9160b92da913b6,Add_Condition,"+				else if (""Oracle"".equals(databaseMetaData.getDatabaseProductName())) {
+					if (logger.isDebugEnabled()) {
+						logger.debug(""Oracle JDBC driver did not return procedure/function/signature for '"" +
+								metaDataProcedureName + ""' - assuming a non-exposed synonym"");
+					}
+				}",6,iteration,Relaxed procedure existence check on Oracle (for non-exposed synonyms),"Issue: SPR-16478
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java,fd69ee541e288687f04adb6446ac1b41a9bf415b,Add_Condition,"-			(ConnectionHolder) TransactionSynchronizationManager.getResource(this.dataSource);
+				(ConnectionHolder) TransactionSynchronizationManager.getResource(this.dataSource);
-			DataSourceUtils.releaseConnection(con, this.dataSource);
+			if (txObject.isNewConnectionHolder()) {
+				DataSourceUtils.releaseConnection(con, this.dataSource);
+				txObject.setConnectionHolder(null, false);
+			}",7,condition,DataSourceTransactionManager resets ConnectionHolder on doBegin failure,"Issue: SPR-12280
",[],0,[],[],[],[],[],,,,,
spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,ff8655846d9c6903f16730efc1650a4ae55866b9,Condition_Change,"-		if (info == null) {
+		if (info == null || info.transactionStatus == null) {
-		return currentTransactionInfo().transactionStatus;
+		return info.transactionStatus;",4,condition,TransactionAspectSupport.currentTransactionStatus() reliably throws NoTransactionException,"Issue: SPR-9144
",[],0,[],[],[],[],[],,,,,
,,,,,,,,,,,,,,,,,,,,
,,,,,,,,,,,,,,,Total Annotated,20,70,,,
,,,,,,,,,,,,,,,,,25,,,
,,,,,,,,,,,,,,,,,5,,,