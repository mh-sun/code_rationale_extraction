commit,repo,file,change_type,diff,change_count,condition_type,commit_subject,commit_body,note
000b8a699ceefd0a362bb307e01261617b4dbf51,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/client/DefaultRestClientBuilder.java,Add_Condition,"+import org.springframework.http.client.ReactorClientHttpRequestFactory;
+	private static final boolean reactorNettyClientPresent;
+
+		reactorNettyClientPresent = ClassUtils.isPresent(""reactor.netty.http.client.HttpClient"", loader);
+		else if (reactorNettyClientPresent) {
+			return new ReactorClientHttpRequestFactory();
+		}",7,condition,Auto-detect Reactor Netty client in RestClient,"Closes gh-33635
",
009d2a5efd456a37c29fd984be3087f09082c325,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java,Remove_Condition,"-		if (actualName == null) {
-			// at this point we know the property does not exist
-			return null;
-		}",3,condition,Remove unnecessary null check in SysEnvPropSource,"Remove unnecessary null check and dead code from
SystemEnvironmentPropertySource.

Issue: SPR-10318
",
010e8a303b1caf3b80e244fc5e4aebc23d854118,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java,Condition_Change,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-		if (!cookies.isEmpty()) {
-			this.builder.header(HttpHeaders.COOKIE, cookies.values().stream()
-					.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining("";"")));
+		if (cookies.isEmpty()) {
+			return;
+		this.builder.header(HttpHeaders.COOKIE, cookies.values().stream()
+				.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining("";"")));",7,condition,Polishing contribution,"Closes gh-32799
",
01c8de0111806d8f9346f332b22ece9dd9fef618,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java,Remove_Condition,"-			DefaultListableBeanFactory internalBeanFactory = this.internalBeanFactories.get(beanName);
-			if (internalBeanFactory == null) {
-				internalBeanFactory = buildInternalBeanFactory(this.beanFactory);
-				this.internalBeanFactories.put(beanName, internalBeanFactory);
-			}
-			return internalBeanFactory;
+			return this.internalBeanFactories.computeIfAbsent(beanName, k -> buildInternalBeanFactory(this.beanFactory));",7,condition,Simplify getInternalBeanFactoryForBean,"This commit simplifies getInternalBeanFactoryForBean() in
AbstractBeanFactoryBasedTargetSourceCreator via
Map::computeIfAbsent.

Closes gh-27234",
01df63b9cdd12f89763874a14cc50e0c4f8a7e4d,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/support/SimpleJmsHeaderMapper.java,Condition_Change,"-			Set<Map.Entry<String, Object>> entries = headers.entrySet();
-			for (Map.Entry<String, Object> entry : entries) {
+			for (Map.Entry<String, Object> entry : headers.entrySet()) {",3,iteration,Delete unnecessary variable,"See gh-27101
",
0268e762980f302e251a92743dd6724403660399,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/ExtendedEntityManagerCreator.java,Add_Condition,"-				Set<Class<?>> ifcs = new LinkedHashSet<>(4);
-				ifcs.add(key);
-				ifcs.add(EntityManagerProxy.class);
-				return ClassUtils.toClassArray(ifcs);
+				if (EntityManagerProxy.class.equals(key)) {
+					return new Class<?>[] {key};
+				}
+				return new Class<?>[] {key, EntityManagerProxy.class};",8,condition,Improve mapping function in ExtendedEntityManagerCreator.createProxy(),"Closes gh-27456
",
02b539c5f50b59d9f5605c21e42d53f0c8e23ae1,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java,Add_Condition,"+import org.springframework.core.SpringProperties;
+ * @author Sebastien Deleuze
+	/**
+	 * Boolean flag controlled by a {@code spring.xml.ignore} system property that instructs Spring to
+	 * ignore XML, i.e. to not initialize the XML-related infrastructure.
+	 * <p>The default is ""false"".
+	 */
+	private static final boolean shouldIgnoreXml = SpringProperties.getFlag(""spring.xml.ignore"");
+	
+
+				else if (shouldIgnoreXml) {
+					throw new UnsupportedOperationException(""XML support disabled"");
+				}",8,condition,Leverage spring.ignore.xml flag to avoid XmlBeanDefinitionReader,"Closes gh-25338
",
030bc224e30699a91e33e27a6d9782803afbd0d4,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java,Condition_Change,"-			if (!this.inputStream.isFinished() && this.inputStream.isReady()) {
+			if (this.inputStream.isReady() && !this.inputStream.isFinished()) {",2,condition,Invert the check for ServletInputStream.isReady(),"When checking whether there is still request body the first method
that should be checked is ServletInputStream.isReady() and then
ServletInputStream.isFinished(). ServletInputStream.isReady() is the active
method whereas the ServletInputStream.isFinished() is not.
It is important to call ServletInputStream.isReady() because if it returns
false it will schedule a dispatch and if the request body is already read it will
send onAllDataRead event.

Issue: SPR-16521
",
03468fd9ed2e9b07c672897ef6fd98a0224228bd,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java,Add_Condition,"-		mergedHolder = new PropertiesHolder(mergedProps, -1);
+		long latestTimestamp = -1;
+					if (propHolder.getFileTimestamp() > latestTimestamp) {
+						latestTimestamp = propHolder.getFileTimestamp();
+					}
+		mergedHolder = new PropertiesHolder(mergedProps, latestTimestamp);",6,condition,ReloadableResourceBundleMessageSource sets file timestamp on merged holder,"Issue: SPR-14583
",
03b409f891f8ae3e2e22fc347695d07211cf5b8e,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java,Remove_Condition,"-		for (Advisor advisor : advisors) {
-			proxyFactory.addAdvisor(advisor);
-		}
-
+		
+		proxyFactory.addAdvisors(advisors);
+",7,iteration,Use dedicated addAdvisors,"See gh-1469
",
03d6350e4b3c7e23e3cc84bf3f261f2c53b5b1e9,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java,Condition_Change,"-		if (providedArgs == null || parameter.hasParameterAnnotations()) {
+		if (providedArgs == null) {",2,condition,Fix issue with resolution of WebDataBinder argument,"There is usually not need to put annotations on a WebDataBinder
argument in an `@InitBinder` method. However, the presence of any
annotation prevented the successful resolution of the argument.
This fix addresses the issue.

Issue: SPR-8946
",
044ea17bf935d651c269baad966d58f8fcf6c9aa,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java,Condition_Change,"-		if (reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.Deferred"", classLoader)) {
+		if (this.reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.Deferred"", classLoader)) {
-		if (reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.flow.Flow"", classLoader)) {
+		if (this.reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.flow.Flow"", classLoader)) {",4,condition,Polishing,,
050e79e45ed0cdab1a4e3f522e2e9b601a13d94d,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java,Add_Condition,"-	 * Check if the path has a file extension and whether the extension is either
-	 * {@link #WHITELISTED_EXTENSIONS whitelisted} or
-	 * {@link ContentNegotiationManager#getAllFileExtensions() explicitly
-	 * registered}. If not add a 'Content-Disposition' header with a safe
-	 * attachment file name (""f.txt"") to prevent RFD exploits.
+	 * Check if the path has a file extension and whether the extension is
+	 * either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly
+	 * {@link ContentNegotiationManager#getAllFileExtensions() registered}.
+	 * If not, and the status is in the 2xx range, a 'Content-Disposition'
+	 * header with a safe attachment file name (""f.txt"") is added to prevent
+	 * RFD exploits.
+		try {
+			int status = response.getServletResponse().getStatus();
+			if (status < 200 || status > 299) {
+				return;
+			}
+		}
+		catch (Throwable ex) {
+			// Ignore
+		}
+",9,condition,Skip Content-Disposition header if status != 2xx,"Issue: SPR-13588
",
052bbcc53031bd48dc76d070ba862f5293618600,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,"Add_Condition, Condition_Change","+		Class<?>[] parameterTypes = null;
-			Class<?>[] ifcs = current.getInterfaces();
-			for (Class<?> ifc : ifcs) {
+			if (parameterTypes == null) {
+				// Since Method#getParameterTypes() clones the array, we lazily retrieve
+				// and cache parameter types to avoid cloning the array multiple times.
+				parameterTypes = method.getParameterTypes();
+			}
+			for (Class<?> ifc : current.getInterfaces()) {
-					return ifc.getMethod(method.getName(), method.getParameterTypes());
+					return ifc.getMethod(method.getName(), parameterTypes);",9,"condition, iteration",Cache parameter types array in ClassUtils.findInterfaceMethodIfPossible(),,
05521027800ef2a49342ac7ef2e5cd1304a080bf,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+	/** Maximum number of suppressed exceptions to preserve. */
+	private static final int SUPPRESSED_EXCEPTIONS_LIMIT = 100;
+
+
-	/** List of suppressed Exceptions, available for associating related causes. */
+	/** Collection of suppressed Exceptions, available for associating related causes. */
-	 * Register an Exception that happened to get suppressed during the creation of a
+	 * Register an exception that happened to get suppressed during the creation of a
+	 * <p>The default implementation preserves any given exception in this registry's
+	 * collection of suppressed exceptions, up to a limit of 100 exceptions, adding
+	 * them as related causes to an eventual top-level {@link BeanCreationException}.
+	 * @see BeanCreationException#getRelatedCauses()
-			if (this.suppressedExceptions != null) {
+			if (this.suppressedExceptions != null && this.suppressedExceptions.size() < SUPPRESSED_EXCEPTIONS_LIMIT) {",5,condition,Enforce limit for storing suppressed exceptions,"Closes gh-24902
",
05683fed7a3f9b51c4a251363504b0aef12826d3,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,Condition_Change,"-		if (beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {
+		if (!IN_NATIVE_IMAGE && beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {",2,condition,Skip LoadTimeWeaverAwareProcessor with native images,,
05b15812bbffc86cd3ee4c664e2eccfb4ec0092b,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java,Condition_Change,"-		if (attribute instanceof Constructor<?>[]) {
-			return (Constructor<?>[]) attribute;
+		if (attribute instanceof Constructor<?>[] constructors) {
+			return constructors;",4,condition,Apply instanceof pattern matching in RootBeanDefinition,"Closes gh-32520
",
05d616240ad08f69926368f5549b6472c27a0d5c,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java,Add_Condition,"+		else if (contentType != null && contentType.isCompatibleWith(MediaType.APPLICATION_JSON)) {
+			// Matching to AbstractJackson2HttpMessageConverter#DEFAULT_CHARSET
+			return StandardCharsets.UTF_8;
+		}",3,condition,StringHttpMessageConverter defaults to UTF-8 for JSON,"Issue: SPR-17568
",
0634555424a8742bbe95333c49975437af6eacf8,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java,Condition_Change,"+	@Override
+	@Override
-		boolean endsWithSlash = pattern.endsWith(""/"");
-			if (!endsWithSlash && this.pathMatcher.match(pattern + ""/"", lookupPath)) {
+			if (!pattern.endsWith(""/"") && this.pathMatcher.match(pattern + ""/"", lookupPath)) {
+	@Override",6,condition,Delay check if pattern ends with slash,"This is a minor fix with no actual impact.

Issue: SPR-10504
",
0637864b3909ab13727cb228258b778a265da8d9,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,Condition_Change,"-		A annotation = clazz.getDeclaredAnnotation(annotationType);
-		if (annotation != null) {
-			return annotation;
+		if (isAnnotationDeclaredLocally(annotationType, clazz)) {
+			return clazz.getAnnotation(annotationType);
-			annotation = findAnnotation(ifc, annotationType, visited);
+			A annotation = findAnnotation(ifc, annotationType, visited);
-				annotation = findAnnotation(ann.annotationType(), annotationType, visited);
+				A annotation = findAnnotation(ann.annotationType(), annotationType,
+						visited);",10,condition,Ensure AnnotationUtils is compatible with Java 6,"The previous commit introduced a dependency on
Class.getDeclaredAnnotation() which is a Java 8 API.

This commit refactors AnnotationUtils.findAnnotation(Class, Class, Set)
to use Class.getAnnotation() in conjunction with
isAnnotationDeclaredLocally() in order to achieve the same desired
behavior.

Issue: SPR-11475
",
0720f9e9786a79503420a5c39f079f5d19aa8736,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java,Condition_Change,"-				if (!(result.get(0) instanceof Separator)) {
+				if (result.isEmpty() || !(result.get(0) instanceof Separator)) {",2,condition,Fix an eventual IndexOutOfBoundsException in RequestPredicates,,
0728e32e7f3b93e49dfc8c7af20b489b12b3e663,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java,Add_Condition,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-					this.columnLabelMap.put(rsmd.getColumnLabel(i), i);
+					String key = rsmd.getColumnLabel(i);
+					// Make sure to preserve first matching column for any given name,
+					// as defined in ResultSet's type-level javadoc (lines 81 to 83).
+					if (!this.columnLabelMap.containsKey(key)) {
+						this.columnLabelMap.put(key, i);
+					}",5,condition,ResultSetWrappingSqlRowSet preserves first matching column per name (as defined in ResultSet's javadoc),"Issue: SPR-11786
",
07a1aea9c73ef9859b7405c7c7d8e1905427e229,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Condition_Change,"-			if (result instanceof Object[] array) {
+			if (result instanceof Object[] array && array.length > 1) {",2,condition,Skip array sort when the length of array not greater than 1,"Closes gh-30934
",
085565a771270f7a124186e7691381534018dd03,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java,Add_Condition,"+import org.hibernate.bytecode.enhance.spi.EnhancementContext;
+
+					@Override
+					public void pushClassTransformer(EnhancementContext enhancementContext) {
+						if (!NativeDetector.inNativeImage()) {
+							super.pushClassTransformer(enhancementContext);
+						}
+					}",8,condition,Skip class transformer in PersistenceUnitInfoDescriptor for native images,"In order to restore native support with Hibernate 6.2, this
change updates the PersistenceUnitInfoDescriptor instance
created by SpringHibernateJpaPersistenceProvider in order to
skip the class transformer for native images.

Closes gh-30492
",
0933734fbb5dae4c523b3bc0fcfb30a927ddc209,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java,Remove_Condition,"-	 * <p><b>Do not raise the number of concurrent consumers for a topic.</b>
-	 * This would lead to concurrent consumption of the same message,
-	 * which is hardly ever desirable.
+	 * <p><b>Do not raise the number of concurrent consumers for a topic,
+	 * unless vendor-specific setup measures clearly allow for it.</b>
+	 * With regular setup, this would lead to concurrent consumption
+	 * of the same message, which is hardly ever desirable.
-	@Override
-	protected void validateConfiguration() {
-		super.validateConfiguration();
-		synchronized (this.lifecycleMonitor) {
-			if (isSubscriptionDurable() && this.concurrentConsumers != 1) {
-				throw new IllegalArgumentException(""Only 1 concurrent consumer supported for durable subscription"");
-			}
-		}
-	}
-",10,condition,DefaultMessageListenerContainer allows for concurrent subscription consumers on WebLogic/ActiveMQ,"Issue: SPR-10037
",
09da10cc6c585995f4623793aa2b2f6a38b5284d,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java,Add_Condition,"+		@Nullable
+		private Subscription subscription;
+
+			this.subscription = subscription;
+			Subscription subscription = this.subscription;
+			if (subscription != null) {
+				subscription.cancel();
+			}",8,condition,Propagate the cancel signal to the downstream,"Issue: SPR-17609
",
0a92d84778dcb03dd5bf2860f2d997d1db2687f4,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/hibernate5/SessionFactoryUtils.java,Add_Condition,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
-				session.close();
+				if (session.isOpen()) {
+					session.close();
+				}",4,condition,Check open status before close call (aligned with EntityManagerFactoryUtils),"Closes gh-27972
",
0a94dce41dd032d5f6c153863c52b2dcd1dd0e91,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java,Condition_Change,"-import java.util.List;
+import java.util.Collection;
+import java.util.Map;
-						if (merged.stream().anyMatch(VALID_PREDICATE) && List.class.isAssignableFrom(type)) {
+						if (merged.stream().anyMatch(VALID_PREDICATE) &&
+								(Collection.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type))) {",6,condition,Improve HandlerMethod check when method validation applies,"Method validation needs to be used for a container such as a List or
Map, but until now we were only checking for a List container.
Moreover, in gh-31530 we improved method validation to also cover
any Collection.

This change aligns with HandlerMethod check for when method validation
applies with the underlying ability of method validation.
",
0b1639d9635d31adfb6e6280776decf5fc91ec9f,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-	 * Set the fetch size for this JdbcTemplate. This is important for processing
-	 * large result sets: Setting this higher than the default value will increase
-	 * processing speed at the cost of memory consumption; setting this lower can
-	 * avoid transferring row data that will never be read by the application.
-	 * <p>Default is -1, indicating to use the JDBC driver's default
-	 * (i.e. to not pass a specific fetch size setting on the driver).
+	 * Set the fetch size for this JdbcTemplate. This is important for processing large
+	 * result sets: Setting this higher than the default value will increase processing
+	 * speed at the cost of memory consumption; setting this lower can avoid transferring
+	 * row data that will never be read by the application.
+	 * <p>Default is -1, indicating to use the JDBC driver's default configuration
+	 * (i.e. to not pass a specific fetch size setting on to the driver).
+	 * <p>Note: As of 4.3, negative values other than -1 will get passed on to the
+	 * driver, since e.g. MySQL supports special behavior for {@code Integer.MIN_VALUE}.
-	 * Set the maximum number of rows for this JdbcTemplate. This is important
-	 * for processing subsets of large result sets, avoiding to read and hold
-	 * the entire result set in the database or in the JDBC driver if we're
-	 * never interested in the entire result in the first place (for example,
-	 * when performing searches that might return a large number of matches).
-	 * <p>Default is -1, indicating to use the JDBC driver's default
-	 * (i.e. to not pass a specific max rows setting on the driver).
+	 * Set the maximum number of rows for this JdbcTemplate. This is important for
+	 * processing subsets of large result sets, avoiding to read and hold the entire
+	 * result set in the database or in the JDBC driver if we're never interested in
+	 * the entire result in the first place (for example, when performing searches
+	 * that might return a large number of matches).
+	 * <p>Default is -1, indicating to use the JDBC driver's default configuration
+	 * (i.e. to not pass a specific max rows setting on to the driver).
+	 * <p>Note: As of 4.3, negative values other than -1 will get passed on to the
+	 * driver, in sync with {@link #setFetchSize}'s support for special MySQL values.
-		if (fetchSize >= 0) {
+		if (fetchSize != -1) {
-		if (maxRows >= 0) {
+		if (maxRows != -1) {",4,condition,JdbcTemplate passes negative values other than -1 on to the driver (for MySQL's special values),"Issue: SPR-14028
",
0b580d194d2390c4cb860f337e146b90ba16c6f2,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java,Add_Condition,"-						throw new PersistenceException(message + ""; nested exception is "" + causeString, cause);
+						ex = new PersistenceException(message + ""; nested exception is "" + causeString, cause);
+			if (logger.isErrorEnabled()) {
+				logger.error(""Failed to initialize JPA EntityManagerFactory: "" + ex.getMessage());
+			}",5,condition,Early log entry for async EntityManagerFactory initialization failure,"Closes gh-26093
",
0bd923b0a77f5da1d98018dc0c1301a1242e5f56,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/aot/hint/ExecutableHint.java,Condition_Change,"+import org.springframework.util.Assert;
-	 * @return the modes
+	 * @return the mode
-			if (this.mode == null || !this.mode.includes(mode)) {
+			Assert.notNull(mode, ""'mode' must not be null"");
+			if ((this.mode == null || !this.mode.includes(mode))) {",4,condition,Polishing,,
0c2b787cb5e7159ec40f6e5d9bb33a063e866b2d,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/MethodWriter.java,Condition_Change,"-            if (code.length > 65536) {
+            if (code.length > 65535) {",2,condition,ASM fix #317578,"http://forge.ow2.org/tracker/?func=detail&aid=317578&group_id=23&atid=100023
",
0cc877ad0fb6dd5775b21b56fc773c577fd2d489,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java,Condition_Change,"-		if (executorToCheck.get() instanceof ReflectiveMethodExecutor) {
+		if (executorToCheck != null && executorToCheck.get() instanceof ReflectiveMethodExecutor) {",2,condition,MethodReference accesses cached executor in a thread-safe manner,"Issue: SPR-12269
",
0d4ef4eafe7031781707f296af755387f30bcf88,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/config/DeprecatedBeanWarner.java,Condition_Change,"-		if (StringUtils.hasLength(resourceDescription)) {
+		if (StringUtils.hasText(resourceDescription)) {",2,condition,Omit empty resource description in DeprecatedBeanWarner's log message,"Closes gh-32647
",
0eb73c130c4006b631edb6df6adebe1330fc07a7,spring-projects/spring-framework,spring-context-indexer/src/main/java/org/springframework/context/index/processor/TypeHelper.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-		if (type instanceof DeclaredType) {
-			DeclaredType declaredType = (DeclaredType) type;
+		if (type instanceof DeclaredType declaredType) {",3,condition,"Apply ""instanceof pattern matching"" Eclipse clean-up in spring-context-indexer",,
0ef29b204b94ab2aec9333338a2035a11c8d81fb,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/GenericBeanDefinition.java,Add_Condition,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-		return ""Generic bean: "" + super.toString();
+		StringBuilder sb = new StringBuilder(""Generic bean"");
+		if (this.parentName != null) {
+			sb.append("" with parent '"").append(this.parentName).append(""'"");
+		}
+		sb.append("": "").append(super.toString());
+		return sb.toString();",7,condition,GenericBeanDefinition's toString() takes parent definition into account,"Issue: SPR-9671
",
0f36569d75b814a43b081d5a8036534fc1090d62,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/config/FreeMarkerConfigurerBeanDefinitionParser.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-			if (locations.isEmpty()) {
-				locations.add(""/WEB-INF/"");
-			}",3,condition,Remove dead fallback code,,
0f70ac74cd07228bcf67db925b1c01c6b17fc092,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java,Condition_Change,"-				if (constructor.getParameterCount() == 9) {
+				if (constructor.getParameterTypes().length == 9) {",2,condition,Polish,"Constructor.getParameterCount is JDK8+ only!
",
10838a636fbbd4a95ac3652bc7209e98c6a11f6c,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java,Add_Condition,"-		if (msg != null && msg.contains(""size"") && msg.contains(""exceed"")) {
-			throw new MaxUploadSizeExceededException(-1, ex);
+		if (msg != null) {
+			msg = msg.toLowerCase();
+			if (msg.contains(""size"") && msg.contains(""exceed"")) {
+				throw new MaxUploadSizeExceededException(-1, ex);
+			}",7,condition,Correctly identify MaxUploadSizeExceededException in StandardMultipartHttpServletRequest,"This commit correctly identifies MaxUploadSizeExceededException in
StandardMultipartHttpServletRequest by converting keywords in the
exception message to lowercase before checking for their presence, for
compatibility with Jetty 9.4.x.

Closes gh-28759
",
1222ca38fb46a5c461fa41d2d4383469d10a2ede,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/client/RestTemplate.java,Add_Condition,"-		this.messageConverters.clear();
-		this.messageConverters.addAll(messageConverters);
+		// Take getMessageConverters() List as-is when passed in here
+		if (this.messageConverters != messageConverters) {
+			this.messageConverters.clear();
+			this.messageConverters.addAll(messageConverters);
+		}",6,condition,RestTemplate accepts getMessageConverters() List on setMessageConverters again,"Issue: SPR-11962
",
1273c90a645a4fcc79719f14b4dc500106dfac2b,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java,Condition_Change,"- * {@code <task:annotation-driven>} XML element, and also by the @{@link EnableScheduling}
- * annotation.
+ * {@code <task:annotation-driven>} XML element, and also by the
+ * @{@link EnableScheduling} annotation.
- * <p>Auto-detects any {@link SchedulingConfigurer} instances in the container,
- * allowing for customization of the scheduler to be used or for fine-grained control
- * over task registration (e.g. registration of {@link Trigger} tasks.
+ * <p>Autodetects any {@link SchedulingConfigurer} instances in the container,
+ * allowing for customization of the scheduler to be used or for fine-grained
+ * control over task registration (e.g. registration of {@link Trigger} tasks.
-		if (!this.nonAnnotatedClasses.contains(bean.getClass())) {
+		Class<?> targetClass = AopUtils.getTargetClass(bean);
+		if (!this.nonAnnotatedClasses.contains(targetClass)) {
-			Class<?> targetClass = AopUtils.getTargetClass(bean);
-				this.nonAnnotatedClasses.add(bean.getClass());
+				this.nonAnnotatedClasses.add(targetClass);",6,condition,ScheduledAnnotationBeanPostProcessor uses target class as cache key in case of proxy,"Issue: SPR-12709
",
1278459ad536126a7c707e4b69a0a359f54bb556,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java,Add_Condition,"+ * @author Rossen Stoyanchev
-public class ReactorHttpHandlerAdapter
-		implements BiFunction<HttpServerRequest, HttpServerResponse, Mono<Void>> {
+public class ReactorHttpHandlerAdapter implements BiFunction<HttpServerRequest, HttpServerResponse, Mono<Void>> {
-
-			logger.error(""Invalid URL "" + ex.getMessage(), ex);
+			if (logger.isWarnEnabled()) {
+				logger.warn(""Invalid URL for incoming request: "" + ex.getMessage());
+			}",8,condition,ReactorHttpHandlerAdapter logs bad request at warn level only,"Issue: SPR-16524
",
14bc0d6469d8fa887f6829c7ef827fc227349ead,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Condition_Change,"-		// Look for pre-cached root dir resources, either a direct match
-		// or for a parent directory in the same classpath locations.
+		// Look for pre-cached root dir resources, either a direct match or
+		// a match for a parent directory in the same classpath locations.
-			// No direct match -> search for parent directory match.
+			// No direct match -> search for a common parent directory match
+			// (cached based on repeated searches in the same base location,
+			// in particular for different root directories in the same jar).
-			if (rootDirResources == null & StringUtils.hasLength(commonPrefix)) {
+			if (rootDirResources == null && StringUtils.hasLength(commonPrefix)) {
-					// Replace existing subdirectory cache entry with common parent directory.
+					// Replace existing subdirectory cache entry with common parent directory,
+					// avoiding repeated determination of root directories in the same jar.",2,condition,Fix typo in condition check,"See gh-21190
",
153fd82946c350a0c42be2dbd13774d5ee9ffc0c,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java,Add_Condition,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
+import org.apache.commons.logging.Log;
-				if (ex.getMessage().startsWith(event.getClass().getName())) {
+				String msg = ex.getMessage();
+				if (msg != null && msg.startsWith(event.getClass().getName())) {
-					LogFactory.getLog(getClass()).debug(""Non-matching event type for listener: "" + listener, ex);
+					Log logger = LogFactory.getLog(getClass());
+					if (logger.isDebugEnabled()) {
+						logger.debug(""Non-matching event type for listener: "" + listener, ex);
+					}",9,condition,SimpleApplicationEventMulticaster defensively handles ClassCastException without message,"Issue: SPR-15145
",
157df861f94dd7244a505c479bf6ba4ae8f1bf41,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java,Condition_Change,"-			// Any other than the original exception is unintended here,
+			// Any other than the original exception (or its cause) is unintended here,
-			if (invocationEx != exception && logger.isWarnEnabled()) {
+			if (invocationEx != exception && invocationEx != exception.getCause() && logger.isWarnEnabled()) {",2,condition,Do not warn also if cause is re-thrown,"Closes gh-23233
",
15c97b753ef32cd4bf000148f9dddbfc89ddab47,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java,Condition_Change,"-		if (this.uri.getUserInfo() != null || this.uri.getHost() != null) {
+		if (this.uri.getRawUserInfo() != null || this.uri.getHost() != null) {
-			if (this.uri.getUserInfo() != null) {
-				uriBuilder.append(this.uri.getUserInfo()).append('@');
+			if (this.uri.getRawUserInfo() != null) {
+				uriBuilder.append(this.uri.getRawUserInfo()).append('@');
-		if (this.uri.getFragment() != null) {
-			uriBuilder.append('#').append(this.uri.getFragment());
+		if (this.uri.getRawFragment() != null) {
+			uriBuilder.append('#').append(this.uri.getRawFragment());",10,condition,Revised URI building in http.server (consistently use raw attributes),"Issue: SPR-16434
",
16410cad4de1042c1c9641890b16fa3d49cc8b33,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java,Condition_Change,"-		while (value < minimumValue && value < minimumValue) {
+		while (value < minimumValue && value < maximumValue) {",2,iteration,Fix ConcurrentReferenceHashMap max constraints,"Update calculateShift to respect the maximum upper bound as well as the
minimum value.

Issue: SPR-11720
",
1678eaaed04c3b9557e26089ca7dd5952976a4b6,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Condition_Change,"-		if (logger.isInfoEnabled()) {
-			logger.info(""Destroying singletons in "" + this);
+		if (logger.isDebugEnabled()) {
+			logger.debug(""Destroying singletons in "" + this);",4,condition,Turn down logging in DefaultSingletonBeanRegistry,"Reduce INFO level destroy logging to DEBUG

Issue: SPR-10758
",
168a5159b8ae176950c3ea5bfb7df98b3774a79b,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-				if (logger.isDebugEnabled()) {
-					logger.debug(""Non-matching event type for listener: "" + listener, ex);
+				if (logger.isTraceEnabled()) {
+					logger.trace(""Non-matching event type for listener: "" + listener, ex);",4,condition,Log ClassCastException from lambda-defined listener at trace level,"Closes gh-22834
",
1694691b791d9f86e735a9d31fc6820bd8f3c55c,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java,Add_Condition,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
+import org.springframework.http.client.reactive.JdkClientHttpConnector;
-		throw new IllegalStateException(""No suitable default ClientHttpConnector found"");
+		else {
+			return new JdkClientHttpConnector();
+		}",5,condition,Default to JDK HttpClient if no others present,"Closes gh-23432
",
1763bfbad04704f4a38290f371119a3544f7546b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/xml/XmlValidationModeDetector.java,Condition_Change,"- * Copyright 2002-2007 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-		return (content.indexOf(DOCTYPE) > -1);
+		return content.contains(DOCTYPE);
-		return (openTagIndex > -1 && content.length() > openTagIndex && Character.isLetter(content.charAt(openTagIndex + 1)));
+		return (openTagIndex > -1 && (content.length() > openTagIndex + 1) &&
+				Character.isLetter(content.charAt(openTagIndex + 1)));
-		if (line.indexOf(START_COMMENT) == -1 && line.indexOf(END_COMMENT) == -1) {
+		if (!line.contains(START_COMMENT) && !line.contains(END_COMMENT)) {",7,condition,Fixed content length check in XmlValidationModeDetector,"Issue: SPR-11477
",
17edbec0351f35aaea61f876fe617e6bbe40b58a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java,Remove_Condition,"-				for (String profile : parentDefaultProfiles) {
-					this.defaultProfiles.add(profile);
-				}
+				Collections.addAll(this.defaultProfiles, parentDefaultProfiles);",4,iteration,Polishing,,
1815a6a7ebafb184b1f08de6245898b19de19c6a,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,Add_Condition,"-	private static final boolean completionStagePresent = ClassUtils.isPresent(""java.util.concurrent.CompletionStage"",
-			RequestMappingHandlerAdapter.class.getClassLoader());
+	private static final boolean completionStagePresent = ClassUtils.isPresent(
+			""java.util.concurrent.CompletionStage"", RequestMappingHandlerAdapter.class.getClassLoader());
-
-		mav = invokeHandlerMethod(request, response, handlerMethod);
+		else {
+			mav = invokeHandlerMethod(request, response, handlerMethod);
+		}",9,condition,RequestMappingHandlerAdapter properly invokes handler method in synchronizeOnSession mode again,"Issue: SPR-13999
",
18c46713185744c477814959f1043d918300a0d8,spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/jaxb/ClassPathJaxb2TypeScanner.java,Condition_Change,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
-			if (filter.match(reader, factory)) {
+			if (filter.match(reader, factory) && !reader.getClassMetadata().isInterface() ) {",2,condition,JAXB scan skips annotated interfaces,"Issue: SPR-13221
",
194b4cedfbf9f947797d97af851c8e718c2aa91e,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/filter/UrlHandlerFilter.java,Condition_Change,"+import org.springframework.http.server.PathContainer;
-				if (!entry.getKey().canHandle(request)) {
+				if (!entry.getKey().canHandle(request, path)) {
-		boolean canHandle(HttpServletRequest request);
+		boolean canHandle(HttpServletRequest request, RequestPath path);
-		public boolean canHandle(HttpServletRequest request) {
-			return request.getRequestURI().endsWith(""/"");
+		public boolean canHandle(HttpServletRequest request, RequestPath path) {
+			List<PathContainer.Element> elements = path.elements();
+			return (!elements.isEmpty() && elements.get(elements.size() - 1).value().equals(""/""));",10,condition,Use parsed path for checks in UrlHandlerFilter,"See gh-32830
",
1958ae3a625dbf7761cd4f6a530c9cd8543a19eb,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java,Condition_Change,"-			if (logger.isTraceEnabled()) {
-				logger.trace(""Message broker is not active. Ignoring: "" + message);
+			if (logger.isDebugEnabled()) {
+				logger.debug(""Message broker is not active. Ignoring: "" + message);
-					if (logger.isTraceEnabled()) {
-						logger.trace(""Ignoring client message received "" + message +
+					if (logger.isDebugEnabled()) {
+						logger.debug(""Ignoring client message received "" + message +",8,condition,Update log level,"Issue: SPR-11673
",
19a1477228b8ed75926a15358e3253eb7ffa492e,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,Condition_Change,"-					else if (nonSyntheticConstructors == 2 && primaryConstructor != null && defaultConstructor != null) {
+					else if (nonSyntheticConstructors == 2 && primaryConstructor != null
+							&& defaultConstructor != null && !primaryConstructor.equals(defaultConstructor)) {",3,condition,Fix Kotlin bean w/ default + secondary ctors handling,"This commit polishes SPR-16022 fix in order to handle correctly
the case when primary and default constructors are the same when
a secondary constructor is defined.

Issue: SPR-16289
",
19a9bc4747028e68d0fc9ce71c302488cfbfa978,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java,Remove_Condition,"-
-			if (InMemoryWebSessionStore.this.sessions.remove(currentId) == null) {
-				return Mono.error(new IllegalStateException(
-						""Failed to change session id: "" + currentId +
-								"" because the Session is no longer present in the store.""));
-			}
+			InMemoryWebSessionStore.this.sessions.remove(currentId);",7,condition,Remove unnecessary assertion,"Issue: SPR-16201
",
1acf5a742436d2e8460a880c11dd4946d2ca3555,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java,Remove_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+		catch (ScriptException ex){
+			throw ex;
+		}
-			if (ex instanceof ScriptException) {
-				throw (ScriptException) ex;
-			}",6,condition,Use dedicated catch block for ScriptException,Closes gh-24383,
1b1682eacd9c8aabbb86f24dc9c54070f3dd18b4,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java,Condition_Change,"-		if (!c1.isInterface() && c1 != Object.class) {
-			// Try early initialization for overridden methods on subclasses
+		if (!c1.isInterface() && c1 != Object.class && !Factory.class.isAssignableFrom(c2)) {
+			// Try early initialization for overridden methods on specifically purposed subclasses",2,condition,Narrow early initialization of CGLIB method proxies (for AOT processing),"Do not trigger early initialization on Factory classes (e.g. AOP proxies)

See gh-29107
",
1b1ba479125ecd1051d14742d89f492376176130,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java,Condition_Change,"-		for (char ch: name.toCharArray()) {
-			if (!Character.isJavaIdentifierPart(ch)) {
+		for (int i = 1; i < name.length(); i++) {
+			if (!Character.isJavaIdentifierPart(name.charAt(i))) {",4,"condition, iteration",Avoid char array creation in AbstractAspectJAdvice.isVariableName(),"See gh-26100
",
1b93ea97ac4fb7011e4afb026bb32d0c589aa198,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java,Add_Condition,"+				// retrying in case of concurrent reads on the same key
+				if (this.queue.remove(key)) {
+					this.queue.add(key);
+					return this.cache.get(key);
+				}",4,condition,Fix concurrent reads issue in MimeTypeUtils cache,"As of gh-22340, `MimeTypeUtils` has a built-in LRU cache implementation
for caching parsed MIME types and avoiding excessive garbage creation at
runtime.
This implementation, when hit with highly concurrent reads on the same
media type (the cache key), can create multiple keys for the same MIME
type string. This duplication leads to the cache filling up and evicting
entries. When the cache fetches a duplicate key, it is then not
associated with a value and the cache can return a `null` value, which
is forbidden by the API contract.

This commit adds another cache check within the write lock: this avoids
creating duplicate entries in the cache and `null` return values.

Fixes gh-23211
",
1c01f575c2d3407e5c3c18a58d19ee00f5420249,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,Add_Condition,"-				members.add(asSourceClass(memberClassName));
+				try {
+					members.add(asSourceClass(memberClassName));
+				}
+				catch (IOException ex) {
+					// Let's skip it if it's not resolvable - we're just looking for candidates
+					if (logger.isDebugEnabled()) {
+						logger.debug(""Failed to resolve member class ["" + memberClassName +
+								""] - not considering it as a configuration class candidate"");
+					}
+				}",10,condition,ConfigurationClassParser ignores unresolvable member classes,"Issue: SPR-13115
",
1c24dc1f27fda6736c5a7b123f0476a1bc124a94,spring-projects/spring-framework,spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java,Condition_Change,"-			StringBuilder sb = new StringBuilder(this.contentType);
-			if (!this.contentType.toLowerCase().contains(CHARSET_PREFIX) && this.charset) {
-				sb.append("";"").append(CHARSET_PREFIX).append(this.characterEncoding);
+			String value = this.contentType;
+			if (this.charset && !this.contentType.toLowerCase().contains(CHARSET_PREFIX)) {
+				value = value + ';' + CHARSET_PREFIX + this.characterEncoding;
-			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, sb.toString(), true);
+			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, value, true);",8,condition,Simplify String concatenation,,
1cb2dfa45963321e530ff53d2d582642ed1d2294,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/AbstractErrors.java,Condition_Change,"-		if (nestedPath.length() > 0 && !nestedPath.endsWith(NESTED_PATH_SEPARATOR)) {
+		if (!nestedPath.isEmpty() && !nestedPath.endsWith(NESTED_PATH_SEPARATOR)) {",2,condition,enh: use isEmpty() instead of length(),,
1db9faf24838b5df83238e36312e9f721f11fa80,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,Add_Condition,"+				if (bean instanceof SmartLifecycle) {
+					latch.countDown();
+				}",3,condition,Avoid shutdown timeout in case of exception on stop,"Closes gh-33442
",
1dfe737d0e57e8634d3bf48a9e49b001bd106cc3,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ResolvableType.java,Add_Condition,"-						if (forClass(clazz).hasGenerics()) {
+						if (clazz.getTypeParameters().length > 0) {
-			return getSuperType().hasUnresolvableGenerics();
+			Class<?> superclass = resolved.getSuperclass();
+			if (superclass != null && superclass != Object.class) {
+				return getSuperType().hasUnresolvableGenerics();
+			}",7,condition,Avoid ResolvableType creation for interface/superclass check,"See gh-30713
",
1e003a1c90fe7f5aa91f99a34fa5be53a43ad6d8,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java,Remove_Condition,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-		SimpMessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, SimpMessageHeaderAccessor.class);
-		if (accessor == null) {
-			throw new IllegalStateException(
-					""No header accessor (not using the SimpMessagingTemplate?): "" + message);
-		}
-",6,condition,Remove unnecessary assertion,"Issue: SPR-14279
",
1e07468d20c49baeb441425c7d0df053cb5d3cd1,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,Condition_Change,"-				if (!Modifier.isStatic(mod)) {
+				if (!Modifier.isStatic(mod) && !Modifier.isPrivate(mod)) {
-					else if (!Modifier.isPublic(mod) && !Modifier.isProtected(mod) && !Modifier.isPrivate(mod) &&
+					else if (!Modifier.isPublic(mod) && !Modifier.isProtected(mod) &&",4,condition,Prevent warning about final private methods in CglibAopProxy,"Issue: SPR-15820
",
1e0e477833c90d13d60b4f8ed0649ab7bb3e1541,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java,Condition_Change,"-		if (dataSource instanceof DataSource) {
-			return (DataSource) dataSource;
+		if (dataSource instanceof DataSource result) {
+			return result;
-		else if (dataSource instanceof String) {
-			return this.dataSourceLookup.getDataSource((String) dataSource);
+		else if (dataSource instanceof String name) {
+			return this.dataSourceLookup.getDataSource(name);",8,condition,"Apply ""instanceof pattern matching"" in AbstractRoutingDataSource","Closes gh-28011
",
1e9ab53095ed601850d2fd780bffd8bee5919487,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/propertyeditors/CharacterEditor.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-	 * <p>The ""allowEmpty"" parameter controls whether an empty String is
-	 * to be allowed in parsing, i.e. be interpreted as the {@code null}
-	 * value when {@link #setAsText(String) text is being converted}. If
-	 * {@code false}, an {@link IllegalArgumentException} will be thrown
-	 * at that time.
+	 * <p>The ""allowEmpty"" parameter controls whether an empty String is to be
+	 * allowed in parsing, i.e. be interpreted as the {@code null} value when
+	 * {@link #setAsText(String) text is being converted}. If {@code false},
+	 * an {@link IllegalArgumentException} will be thrown at that time.
-		else if (text.length() != 1) {
-			throw new IllegalArgumentException(""String ["" + text + ""] with length "" +
-					text.length() + "" cannot be converted to char type"");
+		else if (text.length() == 1) {
+			setValue(Character.valueOf(text.charAt(0)));
-			setValue(new Character(text.charAt(0)));
+			throw new IllegalArgumentException(""String ["" + text + ""] with length "" +
+					text.length() + "" cannot be converted to char type: neither Unicode nor single character"");
-		setValue(new Character((char) code));
+		setValue(Character.valueOf((char) code));",10,condition,CharacterEditor uses Character.valueOf(char) and throws a more descriptive exception,"Issue: SPR-12386
",
1ed1167153fe3717e72e3a064bcde934304416fe,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java,Condition_Change,"- * Copyright 2002-2014 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
-				for (ExceptionListener listener : this.delegates) {
+				// Iterate over temporary copy in order to avoid ConcurrentModificationException,
+				// since listener invocations may in turn trigger registration of listeners...
+				for (ExceptionListener listener : new LinkedHashSet<ExceptionListener>(this.delegates)) {",2,iteration,Avoid ConcurrentModificationException in SingleConnectionFactory's AggregatedExceptionListener,"Issue: SPR-13421
",
1f13516528a5884a1182649566a33f6dd0cc4e68,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,Condition_Change,"-			// Optimize for Mono
-			if (Mono.class.isAssignableFrom(method.getReturnType())) {
+			// For Mono and suspending functions not returning kotlinx.coroutines.flow.Flow
+			if (Mono.class.isAssignableFrom(method.getReturnType()) || (KotlinDetector.isSuspendingFunction(method) && !COROUTINES_FLOW_CLASS_NAME.equals(new MethodParameter(method, -1).getParameterType().getName()))) {",2,condition,Fix @Transactional support on suspending function,"With this commit, @Transactional on suspending functions
returning a value now commits the transaction properly.

Closes gh-25998
",
204a50ee6c9c77ec1f6be479af2e979991130da1,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java,Remove_Condition,"-		// For backwards compatibility
-		MediaType mediaType = getMediaType(resource);
-		if (mediaType != null) {
-			return mediaType;
-		}",4,condition,Fix compile issue,,
21267e56b7b4645e145422ee918eb75fab250f56,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java,Add_Condition,"+	/**
+	 * Declared as {@code Object} since this may be a reference to a
+	 * {@code String} representing the bean name or a reference to the actual
+	 * bean instance.
+	 */
+	/**
+	 * A reference to the resolved bean instance, potentially lazily retrieved
+	 * via the {@code BeanFactory}.
+	 */
+	private Object resolvedBean;
+
+			this.resolvedBean = bean;
+	 * <p>As of Spring Framework 5.2, once the bean instance has been resolved it
+	 * will be cached, thereby avoiding repeated lookups in the {@code BeanFactory}.
-		return (this.bean instanceof String ? obtainBeanFactory().getBean((String) this.bean) : this.bean);
+		if (this.resolvedBean == null) {
+			// this.bean must be a String representing the bean name if
+			// this.resolvedBean is null.
+			this.resolvedBean = obtainBeanFactory().getBean((String) this.bean);
+		}
+		return this.resolvedBean;",10,condition,Cache resolved bean instance in ControllerAdviceBean,"Prior to this commit, the resolveBean() method in ControllerAdviceBean
looked up the @ControllerAdvice bean instance in the ApplicationContext
by name for every web request that involved lookups for global methods
annotated with @ExceptionHandler, @InitBinder, and @ModelAttribute.

This commit avoids the need for such repeated lookups in the
ApplicationContext by caching the resolved @ControllerAdvice bean
instance within ControllerAdviceBean once it has been resolved.
",
215e5f5682cd9aaf9c95105f3d2069298a364a0e,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,Add_Condition,"-				sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex);
+				try {
+					sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex);
+				}
+				catch (SQLException ex) {
+					if (logger.isDebugEnabled()) {
+						logger.debug(""JDBC getParameterType call failed - using fallback method instead: "" + ex);
+					}
+				}",9,condition,Defensively call getParameterType (which might fail for certain statements),"Issue: SPR-15977
",
2172b99fee345f0068e9d1851bf5ed6d0ba36633,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java,Add_Condition,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
-import org.springframework.util.StringUtils;
-		if(!StringUtils.hasText(ex.getMessage())) {
-			close(CloseStatus.SERVER_ERROR);
+		if (logger.isDebugEnabled()) {
+			logger.debug(""WebSocket session completed with error"", ex);
-		else {
-			close(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));
+		else if (logger.isInfoEnabled()) {
+			logger.info(""WebSocket session completed with error: "" + ex.getMessage());
+		close(CloseStatus.SERVER_ERROR);",10,condition,Polishing contribution,"Closes gh-28836
",
224e36948412b258a9e8f4336aa06e5f3645220b,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Condition_Change,"-
+	/**
+	 * Common prefix that DispatcherServlet's default strategy attributes start with.
+	 */
+        private static final String DEFAULT_STRATEGIES_PREFIX = ""org.springframework.web.servlet"";
+	
-			throw new IllegalStateException(""Could not load 'DispatcherServlet.properties': "" + ex.getMessage());
+			throw new IllegalStateException(""Could not load '"" + DEFAULT_STRATEGIES_PATH + ""': "" + ex.getMessage());
-				if (this.cleanupAfterInclude || attrName.startsWith(""org.springframework.web.servlet"")) {
+				if (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {",8,condition,Reuse constant in DispatcherServlet,"See gh-1398
",
2270df515b040d8612c691acc0102d1a224bcd82,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"+			String urlString = url.toString();
+			String cleanedPath = StringUtils.cleanPath(urlString);
+			if (!cleanedPath.equals(urlString)) {
+				// Prefer cleaned URL, aligned with UrlResource#createRelative(String)
+				try {
+					return new UrlResource(ResourceUtils.toURI(cleanedPath));
+				}
+				catch (URISyntaxException | MalformedURLException ex) {
+					// Fallback to regular URL construction below...
+				}
+			}",9,condition,Enforce cleaned URL for root resource from ClassLoader,"Closes gh-32828
",
22db1ac14635eb6599eff1708f02a4f7a2cb63eb,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java,Add_Condition,"+import org.springframework.core.CoroutinesUtils;
+import org.springframework.core.KotlinDetector;
+ * @author Sebastien Deleuze
-		int count = method.getParameterCount();
+		int count = (KotlinDetector.isSuspendingFunction(method) ? method.getParameterCount() - 1 : method.getParameterCount());
+			if (KotlinDetector.isSuspendingFunction(this.method)) {
+				return CoroutinesUtils.invokeSuspendingFunction(this.method, bean, args);
+			}",7,condition,Add Coroutines support for `@EventListener`,"Closes gh-28343
",
231433f5406453069aa125329be042d5e32ddff0,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ReflectionUtils.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
-			throw new IllegalStateException(""Unexpected reflection exception - "" + ex.getClass().getName() + "": ""
-					+ ex.getMessage());
+			throw new IllegalStateException(
+					""Unexpected reflection exception - "" + ex.getClass().getName() + "": "" + ex.getMessage());
-				if (name.equals(method.getName())
-						&& (paramTypes == null || Arrays.equals(paramTypes, method.getParameterTypes()))) {
+				if (name.equals(method.getName()) &&
+						(paramTypes == null || Arrays.equals(paramTypes, method.getParameterTypes()))) {",8,condition,Polishing (cherry picked from commit 6021822),,
239b7086c676321b48b1b094704b4995417a188b,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Condition_Change,"-        private static final String DEFAULT_STRATEGIES_PREFIX = ""org.springframework.web.servlet"";
-	
+	private static final String DEFAULT_STRATEGIES_PREFIX = ""org.springframework.web.servlet"";
+
-			if (this.cleanupAfterInclude || attrName.startsWith(""org.springframework.web.servlet"")) {
+			if (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {",6,condition,"Polish ""Reuse constant in DispatcherServlet""","Closes gh-1398
",
24aae2e104f9e8eb1f21e79959ab00cb7fdcc49f,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java,Add_Condition,"-						this.factoryBeanObjectCache.put(beanName, object);
+						if (containsSingleton(beanName)) {
+							this.factoryBeanObjectCache.put(beanName, object);
+						}",4,condition,Defensive containsSingleton cache guard within getObjectFromFactoryBean,"Issue: SPR-16625
",
25e6a2da646c9a465fabf1c73796a1ae01886857,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java,Remove_Condition,"-
-				Principal user = getUser(session);
-				if (user != null) {
-					headerAccessor.setUser(user);
-				}
-
+				headerAccessor.setUser(getUser(session));
+							Principal user = headerAccessor.getUser();
+							Principal user = getUser(session);",9,condition,StompSubProtocolHandler consistently accesses current user,"Issue: SPR-15822
",
2624b909060e0967e16771de7a35261decd5a4a9,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,Add_Condition,"- * Copyright 2002-2011 the original author or authors.
+ * Copyright 2002-2012 the original author or authors.
+			if (method == null) {
+				// annotations like @Inject, @Value and @Resource don't have a method
+				// (attribute) named ""required"" -> default to required status
+				return true;
+			}
-			// required by default
+			// an exception was thrown during reflective invocation of the required
+			// attribute -> default to required status",3,condition,Avoid NPE in AutowiredAnnotationBeanPostProcessor,"Prior to this change, AABPP#determineRequiredStatus never checked the
return value of ReflectionUtils#findMethod when searching for a
'#required' attribute. This call returns null for annotations such as
@Inject, @Value and @Resource, and subsequently causes a
NullPointerException to be thrown when ReflectionUtils#invokeMethod is
called. The NPE is caught immediately and #determineRequiredStatus
returns defaulting to true, but this this approach is inefficient. It
is also problematic for users who have set breakpoints on NPE -- they
end up debugging into Spring internals, which is a false positive.

This commit checks the return value of of ReflectionUtils#findMethod,
and in the case of null, eagerly returns true.  There is no change to
external behavior, simply a more efficient and debugging-friendly
implementation.

Existing test cases already cover this change, given that it is purely
a refactoring.

Issue: SPR-9316
",
262c702da4588e5f467fd24774357113379666b2,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java,Add_Condition,"+		else if (this.metadataReaderCache != null) {
+			// Shared resource cache -> reset to local cache.
+			setCacheLimit(DEFAULT_CACHE_LIMIT);
+		}
+			this.cacheLimit = cacheLimit;",4,condition,CachingMetadataReaderFactory releases shared cache Map on clearCache(),"LocalResourceCache properly initializes cacheLimit on construction.

Issue: SPR-17527
",
26acb4887d5e8521e4f7d1bb23994e1992904996,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java,Condition_Change,"- * Copyright 2002-2014 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
-import java.io.InputStream;
+import java.io.Reader;
+import org.yaml.snakeyaml.reader.UnicodeReader;
-			InputStream stream = resource.getInputStream();
+			Reader reader = new UnicodeReader(resource.getInputStream());
-				for (Object object : yaml.loadAll(stream)) {
+				for (Object object : yaml.loadAll(reader)) {
-				stream.close();
+				reader.close();",9,iteration,YamlProcessor explicitly closes UnicodeReader,"Issue: SPR-13173
",
26d143868f912bcd8fe4b8cc66135928807526f8,spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java,Add_Condition,"-
-
+
-	private ConverterRegistry converterRegistry;
+	private ConverterRegistry converterRegistry = (ConverterRegistry) this.converterLookup;
+		if (converterLookup instanceof ConverterRegistry) {
+			this.converterRegistry = (ConverterRegistry) converterLookup;
+		}
+	@SuppressWarnings(""deprecation"")
+		// The referenced XStream constructor has been deprecated as of 1.4.5.
+		// We're preserving this call for broader XStream 1.4.x compatibility.",9,condition,Compatibility with XStream 1.4.5,"XStream 1.4.5 doesn't check a given ConverterLookup for a ConverterRegistry implementation anymore, so we have to manually perform that check and assignment.

Issue: SPR-11147
",
27942644804732378806a6a560be6b321f74c0ce,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/socket/server/upgrade/JettyRequestUpgradeStrategy.java,Condition_Change,"-				this.running = true;
+					this.running = true;
-				this.running = false;
+						this.running = false;
-		if (this.servletContext != null) {
+		if (isRunning()) {
-			if (this.servletContext == null) {
+			if (!isRunning()) {",8,condition,Fix JettyRequestUpgradeStrategy initialization bug,"Closes gh-23313
",
279777b2f3a43ed96eb8151f07b76f38672cc78f,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java,Condition_Change,"-	 * @return the mirrorSets the attribute mirror sets.
+	 * @return the attribute mirror sets
-					if (lastValue != null &&
-							!ObjectUtils.nullSafeEquals(lastValue, value)) {
+					if (lastValue != null && !ObjectUtils.nullSafeEquals(lastValue, value)) {",3,condition,Polishing,,
27e9db8c8c30a941bbbc4ceae6a18bd2124ea527,spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java,Condition_Change,"+				boolean isJdk7 = (org.springframework.core.JdkVersion.getMajorJavaVersion() >= org.springframework.core.JdkVersion.JAVA_17);
-					if (isJdk6 && classArgument.isArray()) {
-						return (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) ||
-								supportsInternal(classArgument, false));
+					if (isJdk7 && classArgument.isArray()) {
+						return (classArgument.getComponentType() == Byte.TYPE);
-						return (classArgument.getComponentType() == Byte.TYPE);
+						return (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) ||
+								supportsInternal(classArgument, false));",9,condition,Fix regression in Jaxb2Marshaller regarding JdkVersion,"Issue: SPR-13312
",
289d378aebd4782f422b880702fbd098122a389c,spring-projects/spring-framework,spring-core-test/src/main/java/org/springframework/aot/agent/InstrumentedBridgeMethods.java,Condition_Change,"-					!Modifier.isPublic(constructor.getDeclaringClass().getModifiers()) || !constructor.canAccess(null)) {
+					!Modifier.isPublic(constructor.getDeclaringClass().getModifiers())) {
-			if (!Modifier.isPublic(method.getModifiers())) {
+			if (!Modifier.isPublic(method.getModifiers())
+				|| !Modifier.isPublic(method.getDeclaringClass().getModifiers())) {",5,condition,Polish,"This fixes an additional case where invoked methods are public but the
declaring class is package private.

Fixes gh-29046
",
28e206a9469b603c40bb023c69592570374bc8bb,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java,Add_Condition,"-		return (isStreamingMediaType(contentType) ?
-				message.writeAndFlushWith(body.map(Flux::just)) : message.writeWith(body));
+		if (isStreamingMediaType(contentType)) {
+			return message.writeAndFlushWith(body.map(buffer ->
+					Mono.fromCallable(() -> buffer)
+							.doOnDiscard(PooledDataBuffer.class, PooledDataBuffer::release)));
+		}
+
+		return message.writeWith(body);",9,condition,Apply doOnDiscard for streaming mode,"Use of Flux.just is problematic in that if the Flux is cancelled before
demand, the item may never be read, nor freed. Flux#just does not
even delegate cancellation signals.

Closes gh-22731
",
2950958f35de1a6d5a265017c5111f640b9887aa,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java,Remove_Condition,"-import java.util.Enumeration;
-			Enumeration<String> attributeNames = this.servletRequest.getAttributeNames();
-			while (attributeNames.hasMoreElements()) {
-				String name = attributeNames.nextElement();
-				this.servletRequest.removeAttribute(name);
-			}
+			List<String> attributeNames = Collections.list(this.servletRequest.getAttributeNames());
+			attributeNames.forEach(this.servletRequest::removeAttribute);",8,iteration,Fix ConcurrentModificationException on Undertow,"This commit fixes a ConcurrentModificationException that occurs when
requesting a nonexistant route.

Closes gh-22698
",
2a19b8f7a5f9dcc43831b2f674b76c9bd1fa6d31,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java,Condition_Change,"-		if (ClassUtils.isPresent(""kotlinx.coroutines.Deferred"", classLoader)) {
+		if (reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.Deferred"", classLoader)) {
-		if (ClassUtils.isPresent(""kotlinx.coroutines.flow.Flow"", classLoader)) {
+		if (reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.flow.Flow"", classLoader)) {",4,condition,Refine Coroutines adapter registration activation,"Closes gh-23087
",
2ac4355ec075fec77a8fbafd635fb4fefba81d4e,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/ClassReader.java,Add_Condition,"+    // SPRING PATCH: leniently handle offset mismatch
+    if (bytecodeOffset >= labels.length) {
+      return new Label();
+    }
+    // END OF PATCH",3,condition,ASM ClassReader leniently handles label offset mismatch (again),"Issue: SPR-17467
",
2bfff7fc376c4c747cc9811c54c0ba320787db11,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"-					return new UrlResource(ResourceUtils.toURI(cleanedPath));
+					// Cannot test for URLStreamHandler directly: URL equality for same String
+					// in order to find out whether original URL uses default URLStreamHandler.
+					if (ResourceUtils.toURL(urlString).equals(url)) {
+						// Plain URL with default URLStreamHandler -> replace with cleaned path.
+						return new UrlResource(ResourceUtils.toURI(cleanedPath));
+					}
+			// Retain original URL instance, potentially including custom URLStreamHandler.",4,condition,Retain original URL instance in case of custom URLStreamHandler,"Closes gh-33199
",
2c1afca9c556b63c1645630b1db8d2934d1f2033,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java,Add_Condition,"+import org.springframework.util.CollectionUtils;
-		formData.forEach((name, values) ->
+		formData.forEach((name, values) -> {
+				if (name == null) {
+					Assert.isTrue(CollectionUtils.isEmpty(values), ""Null name in form data: "" + formData);
+					return;
+				}
-				}));
+				});
+		});",10,condition,Reject null form data names,"...or skip if there are no values either.

Closes gh-22372
",
2c5a1af236e6c90460b2279fd0a871d0fc6c9d6e,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java,Condition_Change,"-		if (!KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {
+		if (ctor.getDeclaringClass().isEnum() || !KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {",2,condition,Leverage Java reflection for Kotlin enums,"As discussed in KT-25165, from a Kotlin POV enum constructors
have no parameter, this is an ""implementation detail""
required for running on the JVM, so it seems relevant to skip
Kotlin reflection in that case and just delegate to Java
reflection.

Issue: SPR-16931
",
2c7d2f70636691bdbaadcf1eccb87a29fe171b78,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/context/support/ServletContextResource.java,Condition_Change,"-		URL url = getURL();
-		if (ResourceUtils.isFileURL(url)) {
+		URL url = this.servletContext.getResource(this.path);
+		if (url != null && ResourceUtils.isFileURL(url)) {",4,condition,Handle non-existent files in ServletContextResource,"ServletContextResource#getFile now falls back to #getRealPath for
non-existent files

Issue: SPR-8461
",
2c98c1b81a2bfb6d0d13415a2fd222b642106146,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java,Condition_Change,"-			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {
+			Object managedResource, @Nullable ModelMBean modelMBean, @Nullable ObjectName objectName) {
-		if (managedResource instanceof NotificationPublisherAware) {
+		if (managedResource instanceof NotificationPublisherAware && modelMBean != null && objectName != null) {
-			Assert.state(this.modelMBean != null && this.objectName != null, ""Not initialized"");",5,condition,Relaxed assertion in NotificationPublisherAwareLazyTargetSource,"Issue: SPR-17592
",
2d86f221ce9e4df99aec801ae226ed228f5b64ac,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/codec/json/Jackson2Tokenizer.java,Remove_Condition,"-			if (!this.parser.hasCurrentToken()) {
-				System.out.println(""NO CURRENT TOKEN: "" + token);
-			}",3,condition,Remove println,,
2daa0745611f4989a5dc99619dd4aef541288503,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java,Remove_Condition,"-		long count = 0;
-		for (ParamExpression e : expressions) {
-			if (e.getValue() != null && !e.isNegated()) {
-				count++;
-			}
-		}
-		return count;
+		return expressions.stream()
+				.filter(e -> e.getValue() != null && !e.isNegated())
+				.count();",10,"condition, iteration",Use count in ParamsRequestCondition#getValueMatchCount,"See gh-32088
",
2e5d0470dc0c9766d98d144d5b6bd56248112e46,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/BeanUtils.java,Condition_Change,"-		Set<String> ignoreSet = (ignoreProperties != null ? new HashSet<>(Arrays.asList(ignoreProperties)) : null);
+		Set<String> ignoredProps = (ignoreProperties != null ? new HashSet<>(Arrays.asList(ignoreProperties)) : null);
-			if (writeMethod != null && (ignoreSet == null || !ignoreSet.contains(targetPd.getName()))) {
+			if (writeMethod != null && (ignoredProps == null || !ignoredProps.contains(targetPd.getName()))) {",4,condition,Polishing,,
2e5d752e15164b331ad48bcdcb61c174f880498c,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java,Condition_Change,"-		for (String beanName : candidateBeans.keySet()) {
+		for (Map.Entry<String, T> entry : candidateBeans.entrySet()) {
+			String beanName = entry.getKey();
-				matchingBean = candidateBeans.get(beanName);
+				matchingBean = entry.getValue();",5,iteration,Better use of key iterator,"This commit uses an EntrySet instead of looping over the keys and
retrieving the value in a separate call.

Issue: SPR-12356
",
2f0970b18401426846b38388927f182b3327bb98,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java,Condition_Change,"-			if (jaxb2Present) {
+			if (jaxb2Present && !jackson2XmlPresent) {",2,condition,Fix an AllEncompassingFormHttpMessageConverter regression,"Restore previous behavior to configure
Jaxb2RootElementHttpMessageConverter when JAXB but not Jackson are present.

Closes gh-25291
",
2f920e8fb3bf3f45754ebe64a33bf8c0ed84cfa6,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/json/JacksonModulesRuntimeHints.java,Remove_Condition,"-		if (ClassUtils.isPresent(className, classLoader)) {
-			reflectionHints.registerType(TypeReference.of(className),
-					builder -> builder.onReachableType(TypeReference.of(Jackson2ObjectMapperBuilder.class))
-							.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));
-		}
+		reflectionHints.registerTypeIfPresent(classLoader, className,
+				builder -> builder.onReachableType(TypeReference.of(Jackson2ObjectMapperBuilder.class))
+						.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));",8,condition,Polish JacksonModulesRuntimeHints,"Closes gh-29001
",
2f9d0a7de8e2f1247dd4a34811220106f7359aa5,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java,Condition_Change,"-					while (j < statement.length && !('}' == statement[j])) {
+					while (j < statement.length && '}' != statement[j]) {
-					if (!(statement[position + j] == START_SKIP[i].charAt(j))) {
+					if (statement[position + j] != START_SKIP[i].charAt(j)) {
-								if (!(statement[m + n] == STOP_SKIP[i].charAt(n))) {
+								if (statement[m + n] != STOP_SKIP[i].charAt(n)) {",6,"condition, iteration",simplify boolean NOT operation,,
2ff22510d92986ebabd0f7f4667d7ede3f83e01d,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+import org.springframework.util.CollectionUtils;
-		if (earlyEventsToProcess != null) {
+		if (!CollectionUtils.isEmpty(earlyEventsToProcess)) {",3,condition,Avoid earlyApplicationEvents iteration in case of empty Set,"Closes gh-25161
",
30ebc3b8e2185c56791531507e0f430972f82b51,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java,Remove_Condition,"-	/**
-	 * Store the supplied {@code value} in this map under the specified
-	 * {@code key}, unless a value is already stored under the key.
-	 * @param key the key under which to store the value
-	 * @param value the value to store
-	 * @return the current value stored in this map, or {@code null} if no
-	 * value was previously stored in this map
-	 * @see #get
-	 * @see #put
-	 * @since 4.2
-	 */
-	@Override
-	public Object putIfAbsent(String key, Object value) {
-		Object obj = get(key);
-		if (obj == null) {
-			obj = put(key, value);
-		}
-		return obj;
-	}
-",10,condition,Remove superfluous AnnotationAttributes#putIfAbsent implementation,"Since Java 8, putIfAbsent() is a standard method in java.util.Map. We
therefore no longer need the custom implementation that overrides the
standard implementation in HashMap.
",
311b3338145038ea92c693bb2a8babec9580deda,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java,Remove_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-	 * Return a ResourceBundle for the given basename and code,
-	 * fetching already generated MessageFormats from the cache.
+	 * Return a ResourceBundle for the given basename and Locale,
+	 * fetching already generated ResourceBundle from the cache.
-					localeMap = new ConcurrentHashMap<>();
-					Map<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap);
-					if (existing != null) {
-						localeMap = existing;
-					}
+					localeMap = this.cachedResourceBundles.computeIfAbsent(basename, bn -> new ConcurrentHashMap<>());",6,condition,Use computeIfAbsent in ResourceBundleMessageSource,"This commit optimizes code in ResourceBundleMessageSource
by using computeIfAbsent instead of putIfAbsent.

In addition, the content of some Javadoc has been adjusted.

Closes gh-25054",
321d7b0b061b552aa10e7af099d0610663fab1ef,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java,Add_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-		CacheControl cacheControl = CacheControl.empty();
+		CacheControl cacheControl;
+		else {
+			cacheControl = CacheControl.empty();
+		}
+",6,condition,Put CacheControl.empty() in else part.,Make sure the constructor of `CacheControl` being invoked only once.,
325fb5d97e309a9eb94cfb42a12b136fc7aada16,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultMethodReturnValueHandler.java,Add_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
+import java.util.concurrent.CompletionException;
+				if (ex instanceof CompletionException && ex.getCause() != null) {
+					ex = ex.getCause();
+				}",4,condition,Unwrap CompletionException in return value handler,"See gh-22476
",
327e761536eb23c9db90e93c18a549b6bccca2f8,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/codec/multipart/PartGenerator.java,Add_Condition,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
+import java.nio.charset.Charset;
- * {@link MultipartParser#parse(Flux, byte[], int)}, and produces a flux of {@link Part} objects.
+ * {@link MultipartParser#parse(Flux, byte[], int, Charset)}, and produces a flux of {@link Part} objects.
+				if (!Files.exists(directory)) {
+					Files.createDirectory(directory);
+				}",4,condition,Recreate file storage directory when removed in DefaultPartHttpMessageReader,"Some operating systems delete temp files not just when booting up, but
also during operation. This commit makes sure that the
DefaultPartHttpMessageReader recreates the directory used to store
files in, if it's not there.

Closes gh-26790
",
32df079b05d2b1b755c6c84ef4d2bf5238186b71,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,Condition_Change,"+	private static final char WINDOWS_FOLDER_SEPARATOR_CHAR = '\\';
+
-		if (path.indexOf('\\') != -1) {
+		if (path.indexOf(WINDOWS_FOLDER_SEPARATOR_CHAR) != -1) {
-		if (pathToUse.indexOf('.') == -1) {
+		if (pathToUse.indexOf(EXTENSION_SEPARATOR) == -1) {",6,condition,Polish use of constants in StringUtils,"The hardcoded '.' and '\\' literals have been replaced by the use of
EXTENSION_SEPARATOR and WINDOWS_FOLDER_SEPARATOR_CHAR.

Closes gh-33654
",
33642345a4bebadb6226a8497037e9b8c13af0e1,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,Condition_Change,"-			final boolean infoEnabled = logger.isInfoEnabled();
-			final boolean debugEnabled = logger.isDebugEnabled();
-						if (infoEnabled && implementsInterface(method, ifcs)) {
+						if (logger.isInfoEnabled() && implementsInterface(method, ifcs)) {
-						if (debugEnabled) {
+						if (logger.isDebugEnabled()) {
-					else if (debugEnabled && !Modifier.isPublic(mod) && !Modifier.isProtected(mod) &&
+					else if (logger.isDebugEnabled() && !Modifier.isPublic(mod) && !Modifier.isProtected(mod) &&",8,condition,Lazily check log level within validation conditions,"See gh-24672
",
33ef9107e068223b53b9f19cf9b7906aabf769e0,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadMethodArgumentResolver.java,Remove_Condition,"-		if (ClassUtils.isAssignable(targetClass, payloadClass)) {
-			validate(message, parameter, payload);
-			return (isOptionalTargetClass ? Optional.of(payload) : payload);
-		}
-		else {
+		if (!ClassUtils.isAssignable(targetClass, payloadClass)) {
-			validate(message, parameter, payload);
-			return (isOptionalTargetClass ? Optional.of(payload) : payload);
+		validate(message, parameter, payload);
+		return (isOptionalTargetClass ? Optional.of(payload) : payload);",10,condition,Minor refactoring in PayloadMethodArgumentResolver,"Closes gh-30168
",
341ac76209a0a5ad34cb80385179040d47636974,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java,Remove_Condition,"+	 * @see #setMappedClass
+	 * @see BeanUtils#getPropertyDescriptors
+	 * @see #mappedNames(PropertyDescriptor)
+	 * @see #initialize
-		String lowerCaseName = lowerCaseName(pd.getName());
-		mappedNames.add(lowerCaseName);
-		String underscoreName = underscoreName(pd.getName());
-		if (!lowerCaseName.equals(underscoreName)) {
-			mappedNames.add(underscoreName);
-		}
+		mappedNames.add(lowerCaseName(pd.getName()));
+		mappedNames.add(underscoreName(pd.getName()));",8,condition,Rely on HashSet for uniqueness of mapped names,"See gh-32199
",
3477738bed64f0cda2952eee787a267e89b0569d,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,Condition_Change,"-				else if (replace) {
+				else if (replace && replacingClass == null) {",2,condition,Consistently pick lowest superclass level to replace,"See gh-28676
",
34ab818dfa795bd67fa44061f71e68bc665fa0bf,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateExceptionTranslator.java,Add_Condition,"-		if (ex instanceof PersistenceException && ex.getCause() instanceof HibernateException) {
-			return convertHibernateAccessException((HibernateException) ex.getCause());
+		if (ex instanceof PersistenceException) {
+			if (ex.getCause() instanceof HibernateException) {
+				return convertHibernateAccessException((HibernateException) ex.getCause());
+			}
+			return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);
-		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);
+		return null;",9,condition,HibernateExceptionTranslator avoids JPA IllegalState/ArgumentException translation,"Issue: SPR-14681
",
34e5ce9360ed6c0fe83678a904d5e70064765db6,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java,Condition_Change,"-		if (transactionManager instanceof UserTransaction userTransaction) {
-			return userTransaction;
+		if (transactionManager instanceof UserTransaction ut) {
+			return ut;
-		if (ut instanceof TransactionManager transactionManager) {
+		if (ut instanceof TransactionManager tm) {
-			return transactionManager;
+			return tm;",8,condition,Fix Checkstyle violations,"See gh-30019
",
35055fd866baadefeec2e2f47d1d94454763b452,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java,Condition_Change,"- * Copyright 2002-2011 the original author or authors.
+ * Copyright 2002-2012 the original author or authors.
-			if (propertySource.getProperty(key) != null) {
+			if (propertySource.containsProperty(key)) {",2,condition,Refactor PropertyResolver impl for consistency,"PropertySourcesPropertyResolver#containsProperty now
calls #containsProperty on each underlying PropertySource instead of
calling #getProperty and checking for null.

Issue: SPR-9529
",
3576ff051cf13ccc97d8b0fea8d961d204c15f0d,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java,Add_Condition,"-			Set<ScheduledTask> tasks =
-					new LinkedHashSet<ScheduledTask>(4);
+			Set<ScheduledTask> tasks = this.scheduledTasks.get(bean);
+			if (tasks == null) {
+				tasks = new LinkedHashSet<ScheduledTask>(4);
+				this.scheduledTasks.put(bean, tasks);
+			}
-			this.scheduledTasks.put(bean, tasks);",8,condition,ScheduledAnnotationBeanPostProcessor properly registers multiple tasks per bean,"Issue: SPR-14286
",
358555929d4ff7d33dc1a5895a324e550cfa993e,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java,Add_Condition,"- * Copyright 2002-2024 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-		return expressions.stream()
-				.filter(e -> e.getValue() != null && !e.isNegated())
-				.count();
+		long count = 0;
+		for (ParamExpression e : expressions) {
+			if (e.getValue() != null && !e.isNegated()) {
+				count++;
+			}
+		}
+		return count;",10,"condition, iteration","Revert ""Merge pull request #32088 from Ryan-Dia""","This reverts commit 484aee069e7edaf0cf904d0135ab10b6b8162e70, reversing
changes made to 6bd7f0231dcc47e8099000dea301157788fd5b15.

See gh-32088
",
35bd00beaf25943521b5650ef6e004291b19eff7,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java,Condition_Change,"-		char[] content = script.toCharArray();
-			char c = content[i];
+			char c = script.charAt(i);
-		char[] content = script.toCharArray();
-			if (content[i] == '\'') {
+			if (script.charAt(i) == '\'') {",6,condition,Remove String#toCharArray from ScriptUtils,"ScriptUtils contains two calls to String#toCharArray for the sole
purpose to iterating over all chars in a String. Not only is this
unnecessary and can be replaced with String#charAt it also causes
additional allocator and heap pressure because String#toCharArray
rather than returning the backing array (which is gone in Java 9)
creates a copy.

This commit contains the following changes:

 - remove String#toCharArray from ScriptUtils and replace with
   String#charAt

Issue: SPR-15075
",
37c04bd9c8d7a1269d1088af935a5571cb6887bc,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java,Condition_Change,"-		Parameter[] parameters = this.method.getParameters();
-		if (parameters.length != 1) {
+		int count = this.method.getParameterTypes().length;
+		if (count != 1) {",4,condition,Fix usage of Java8 API,,
37f9c8675804d4282bed9d2d1fb9da9761aee86a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java,Condition_Change,"-		if (reactiveType == null) {
+		if (clazz == null) {",2,condition,Fix failing tests due to last commit,,
3809d885b6e5825368705d00a3d63f0ab7cd0128,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/ContentDisposition.java,Add_Condition,"-			} else {
+			}
+			else {",3,condition,Fix Checkstyle violation,,
38525ceff609e4ae5c3d1c06a35c0e96e7da748d,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java,Condition_Change,"-					if (logger.isWarnEnabled()) {
+					if (logger.isInfoEnabled()) {",2,condition,Fix log level guard in DatabaseStartupValidator.afterPropertiesSet(),,
38dcd179d5c2ad7630310cba292e80471b000d5f,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java,Add_Condition,"- * of essential SpEL features and configuration options.
+ * of essential SpEL features and customization options, targeting simple
+ * condition evaluation and in particular data binding scenarios.
- * <p>When creating {@code SimpleEvaluationContext} you need to choose the level
- * of support you need to deal with properties and methods in SpEL expressions:
+ * <p>When creating a {@code SimpleEvaluationContext} you need to choose the
+ * level of support that you need for property access in SpEL expressions:
- * <li>Custom {@code PropertyAccessor} only (no reflection)</li>
+ * <li>A custom {@code PropertyAccessor} (typically not reflection-based),
+ * potentially combined with a {@link DataBindingPropertyAccessor}</li>
- * <p>For more flexibility, consider {@link StandardEvaluationContext} instead.
+ * <p>For more flexibility, in particular for internal configuration
+ * scenarios, consider using {@link StandardEvaluationContext} instead.
+ * @see #forPropertyAccessors
-	 * Create a {@code SimpleEvaluationContext} for the specified
-	 * {@link PropertyAccessor} delegates.
-	 * @see ReflectivePropertyAccessor
-	 * @see DataBindingPropertyAccessor
+	 * Create a {@code SimpleEvaluationContext} for the specified {@link PropertyAccessor}
+	 * delegates: typically a custom {@code PropertyAccessor} specific to a use case
+	 * (e.g. attribute resolution in a custom data structure), potentially combined with
+	 * a {@link DataBindingPropertyAccessor} if property dereferences are needed as well.
+	 * @see DataBindingPropertyAccessor#forReadOnlyAccess()
+	 * @see DataBindingPropertyAccessor#forReadWriteAccess()
+		for (PropertyAccessor accessor : accessors) {
+			if (accessor.getClass() == ReflectivePropertyAccessor.class) {
+				throw new IllegalArgumentException(""SimpleEvaluationContext is not designed for use with a plain "" +
+						""ReflectivePropertyAccessor. Consider using DataBindingPropertyAccessor or a custom subclass."");
+			}
+		}
+	 * @see #forPropertyAccessors
-	 * @see DataBindingPropertyAccessor#forReadOnlyAccess()
+	 * @see DataBindingPropertyAccessor#forReadWriteAccess()
+	 * @see #forPropertyAccessors
-		 * {@link org.springframework.core.convert.support.DefaultConversionService}
-		 * is used.
+		 * {@link org.springframework.core.convert.support.DefaultConversionService} is used.
-		 * {@link org.springframework.core.convert.support.DefaultConversionService}
-		 * is used.
+		 * {@link org.springframework.core.convert.support.DefaultConversionService} is used.",6,"condition, iteration",Guidance of which PropertyAccessors to use with SimpleEvaluationContext,"Issue: SPR-16588
",
3910350b0a21b3f24750b26d22ce158b732b028b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/ClassReader.java,Add_Condition,"+        // SPRING PATCH: leniently handle offset mismatch
+        if (offset >= labels.length) {
+            return new Label();
+        }
+        // END OF PATCH",3,condition,ASM ClassReader leniently handles label offset mismatch,"Issue: SPR-14089
",
39de64bafc234a3db9210f05b38174e878a69489,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java,Condition_Change,"-				if (logger.isDebugEnabled()) {
-					logger.debug(""Found explicit default unit with name '"" + defaultName + ""' in persistence.xml - "" +
-							""overriding local default unit settings ('packagesToScan'/'mappingResources')"");
+				if (logger.isWarnEnabled()) {
+					logger.warn(""Found explicit default persistence unit with name '"" + defaultName + ""' in persistence.xml - "" +
+							""overriding local default persistence unit settings ('packagesToScan'/'mappingResources')"");",6,condition,Log at WARN level in case of contradicting PersistenceUnitManager setup,"Closes gh-23257
",
3b1d46b3bac74802d264cd57c4a7e685f377c91e,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java,Condition_Change,"+	private static final ResolvableType VOID_TYPE = ResolvableType.forClass(Void.class);
-		if (elementType.equals(ResolvableType.forClass(Void.class))) {
+		if (VOID_TYPE.equals(elementType)) {",3,condition,Polishing,,
3b3798977408c25ec38ef1f7fe65bafc3712f7d9,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/SortedProperties.java,Condition_Change,"-			if (!this.omitComments || !line.startsWith(""#"")) {
+			if (!(this.omitComments && line.startsWith(""#""))) {
-			if (!this.omitComments || !line.startsWith(""#"")) {
+			if (!(this.omitComments && line.startsWith(""#""))) {",4,condition,Apply De Morgan's law for greater clarity of purpose,,
3baacedfd9c8d908ac95be00ee745d938033cd67,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,Condition_Change,"-public final class CoroutinesUtils {
-
-	private CoroutinesUtils() {
-	}
+public abstract class CoroutinesUtils {
-		if (classifier.equals(JvmClassMappingKt.getKotlinClass(Flow.class))) {
+		if (classifier != null && classifier.equals(JvmClassMappingKt.getKotlinClass(Flow.class))) {",7,condition,Alignment with other abstract utils classes,,
3bc1121b9d6f73f601776a20e6ec5b0e1ea0f4b2,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java,Condition_Change,"-			if (!this.isStompConnected) {
+			if (!this.isStompConnected || conn == null) {",2,condition,Check both connection and connected flag,"Issue: SPR-14703
",
3d57425dcb67bc9f403a412555afeb6ba962ff9f,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/SimpleErrors.java,Add_Condition,"+		FieldError fieldError = getFieldError(field);
+		if (fieldError != null) {
+			return fieldError.getRejectedValue();
+		}
+
+
+",7,condition,Return rejected value from getFieldValue in case of error,"See gh-19877
",
3dd817585b6258fe51d3279262234dc41f34009b,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/jmx/support/MBeanRegistrationSupport.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
+import java.util.Collections;
-	protected final Set<ObjectName> registeredBeans = new LinkedHashSet<ObjectName>();
+	private final Set<ObjectName> registeredBeans = Collections.synchronizedSet(new LinkedHashSet<ObjectName>());
-		for (ObjectName objectName : this.registeredBeans) {
+		for (ObjectName objectName : new LinkedHashSet<ObjectName>(this.registeredBeans)) {
-		this.registeredBeans.clear();
+		this.registeredBeans.remove(objectName);",7,iteration,MBeanExporter does not log warnings for manually unregistered MBeans,"Issue: SPR-9451
",
40822746306f5d0e5d553504275046ec4906309b,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLStateSQLExceptionTranslator.java,Add_Condition,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
+import org.springframework.dao.QueryTimeoutException;
+		// First, the getSQLState check...
+
+		// For MySQL: exception class name indicating a timeout?
+		// (since MySQL doesn't throw the JDBC 4 SQLTimeoutException)
+		if (ex.getClass().getName().contains(""Timeout"")) {
+			return new QueryTimeoutException(buildMessage(task, sql, ex), ex);
+		}
+
+		// Couldn't resolve anything proper - resort to UncategorizedSQLException.",6,condition,SQLStateSQLExceptionTranslator checks exception class name for timeout indication before resorting to UncategorizedSQLException,"Issue: SPR-11959
",
40bf83c9e585bcca99dc321f071f69f4e7cdffa9,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-						setFunctionReturnName(paramName);
+						this.actualFunctionReturnName = paramName;
-					else if (paramName != null) {
-						setFunctionReturnName(paramName);
+					else {
+						this.actualFunctionReturnName = param.getName();
-							setFunctionReturnName(returnNameToUse);
+							this.actualFunctionReturnName = returnNameToUse;",8,condition,Restore original 4.x behavior for initialization of function return name,"Closes gh-25707
",
40cd277b7e26e135de71b80bec757b2022641815,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java,Condition_Change,"-		long originalTimestamp = -1;
+		long originalTimestamp = -2;
-			if (originalTimestamp < 0 || originalTimestamp > System.currentTimeMillis() - this.cacheMillis) {
+			if (originalTimestamp == -1 || originalTimestamp > System.currentTimeMillis() - this.cacheMillis) {",4,condition,ReloadableResourceBundleMessageSource prevents accidental exposure of incomplete holder,"Issue: SPR-12177
",
42a4f2896222959d85ba4642542cfe05aff91f2c,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,Condition_Change,"-			for (Annotation annotation : getAnnotations()) {
+			for (Annotation annotation : this.annotations) {
-			for (Annotation annotation : getAnnotations()) {
+			for (Annotation annotation : this.annotations) {",4,iteration,Avoid unnecessary Annotation array cloning in TypeDescriptor,"Closes gh-32476
",
42b16591ec9978f9e317035bad998e617e79bb7e,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/SpringPersistenceUnitInfo.java,Add_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
+import org.apache.commons.logging.LogFactory;
-		if (this.loadTimeWeaver == null) {
-			throw new IllegalStateException(""Cannot apply class transformer without LoadTimeWeaver specified"");
+		if (this.loadTimeWeaver != null) {
+			this.loadTimeWeaver.addTransformer(new ClassFileTransformerAdapter(classTransformer));
+		}
+		else {
+			LogFactory.getLog(getClass()).info(""No LoadTimeWeaver setup: ignoring JPA class transformer"");
-		this.loadTimeWeaver.addTransformer(new ClassFileTransformerAdapter(classTransformer));",9,condition,SpringPersistenceUnitInfo leniently ignores transformer if no LoadTimeWeaver is present,"Closes gh-29736
",
437ffa6067266eafca6fa7c5200b7375618e1970,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,Add_Condition,"+
+		// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime
+		// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)
+		if (beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {
+			beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));
+			beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));
+		}",5,condition,Detect LoadTimeWeaver bean when declared through @Bean method as well,"Issue: SPR-10856
",
43dd813ee64e7c62aeeaf24cdd52230457336d5b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/xml/DomContentHandler.java,Condition_Change,"-		if (node instanceof Document document) {
-			this.document = document;
+		if (node instanceof Document doc) {
+			this.document = doc;",4,condition,Temporary workaround for Checkstyle bug,"Attempting to name a variable in an ""instanceof pattern"" the same as
a field results in a Checkstyle violation similar to the following if
the ""instanceof pattern matching"" is located within a constructor.

Reference to instance variable 'document' needs ""this."". [RequireThis]

See gh-28188
",
43e315f10c6021ef46f403f17b473ffd98c8474a,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-				return;
-				if (inValue instanceof DisposableSqlTypeValue) {
-					((DisposableSqlTypeValue) inValue).cleanup();
+				// Unwrap SqlParameterValue first...
+				if (inValue instanceof SqlParameterValue) {
+					inValue = ((SqlParameterValue) inValue).getValue();
-				else if (inValue instanceof SqlValue) {
+				// Check for disposable value types
+				if (inValue instanceof SqlValue) {
+				else if (inValue instanceof DisposableSqlTypeValue) {
+					((DisposableSqlTypeValue) inValue).cleanup();
+				}",10,condition,Unwrap SqlParameterValue for disposable value detection in cleanupParameters,"Closes gh-22972
",
4453102e852f4693222d103264c9a62b421f3d2a,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java,Remove_Condition,"-			ExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(handlerType);
-			if (resolver == null) {
-				resolver = new ExceptionHandlerMethodResolver(handlerType);
-				this.exceptionHandlerCache.put(handlerType, resolver);
-			}
+			ExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.computeIfAbsent(handlerType, ExceptionHandlerMethodResolver::new);",6,condition,Polish ExceptionHandlerMethodResolver mapping,"See gh-27801
",
449174c7d4c5925ff54cc4390d33d0d0bd8ad377,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java,Condition_Change,"-				for (int i = 0; i < destroyMethodNames.length; i++) {
-					String destroyMethodName = destroyMethodNames[i];
+				for (String destroyMethodName : destroyMethodNames) {",3,iteration,Polishing,,
449f704650fa02750a807e7f060515128dc888f3,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
+		if (logger.isDebugEnabled()) {
+			logger.debug(""Resolved classpath location ["" + location + ""] to resources "" + result);
+		}",3,condition,PathMatchingResourcePatternResolver consistently logs retrieval results,"Issue: SPR-13923
",
44c31a6aad26ce2a4e7225e93e6fb26612f07b2c,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java,Add_Condition,"-						subs.add(sessionId, subsId);
-						this.accessCache.put(cachedDestination, subs.deepCopy());
+						// Subscription id's may also be populated via getSubscriptions()
+						if (!subs.containsKey(sessionId) || !subs.get(sessionId).contains(subsId)) {
+							subs.add(sessionId, subsId);
+							this.accessCache.put(cachedDestination, subs.deepCopy());
+						}",6,condition,Fix duplicate STOMP subscription id issue,"Issue: SPR-15543
",
44da77513444f8388397f93d057ad1b6187516d3,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java,Add_Condition,"+import org.springframework.web.context.request.async.WebAsyncManager;
+import org.springframework.web.context.request.async.WebAsyncUtils;
+			// Consistent with CorsFilter, ignore ASYNC dispatches
+			WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);
+			if (asyncManager.hasConcurrentResult()) {
+				return true;
+			}
+",7,condition,CorsInterceptor skips async dispatch,"Closes gh-24223
",
45a629e20a4f184769808d2958b6ca17f9333334,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-		if (applicationContext != null && applicationContext instanceof ConfigurableApplicationContext) {
+		if (applicationContext instanceof ConfigurableApplicationContext) {",2,condition,Remove unnecessary check in ConvertingEncoderDecoderSupport,,
460947651ae4c58d31386a0a14396c273b287119,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/DefaultPathContainer.java,Condition_Change,"-				String value = input.substring(index + 1);
-				for (String v : StringUtils.commaDelimitedListToStringArray(value)) {
-					name = StringUtils.uriDecode(name, charset);
-					if (StringUtils.hasText(name)) {
+				name = StringUtils.uriDecode(name, charset);
+				if (StringUtils.hasText(name)) {
+					String value = input.substring(index + 1);
+					for (String v : StringUtils.commaDelimitedListToStringArray(value)) {",8,"condition, iteration",Minor refactoring in DefaultPathContainer,"Closes gh-27204
",
46b7cd54a154df16d4c93d1e6c2e44bbc8c74399,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/context/support/SpringBeanAutowiringSupport.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-			if (logger.isDebugEnabled()) {
-				logger.debug(""Current WebApplicationContext is not available for processing of "" +
+			if (logger.isWarnEnabled()) {
+				logger.warn(""Current WebApplicationContext is not available for processing of "" +
-						""Make sure this class gets constructed in a Spring web application. Proceeding without injection."");
+						""Make sure this class gets constructed in a Spring web application after the"" +
+						""Spring WebApplicationContext has been initialized. Proceeding without injection."");",7,condition,Log missing web application context at warn level (instead of debug),"Closes gh-26925
",
4751769a7c984f9bce6dd095e6c9324c8fce150e,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java,Condition_Change,"-			Method[] methods = getMethods(type);
-			for (Method method : methods) {
+			for (Method method : getMethods(type)) {
-				Method[] methods = getMethods(ifc);
-				for (Method method : methods) {
+				for (Method method : getMethods(ifc)) {
-			Method[] methods = getMethods(type);
-			for (Method method : methods) {
+			for (Method method : getMethods(type)) {
-	 * static methods sand non-user-declared methods on the {@link Object} base class.
+	 * static methods and non-user-declared methods on the {@link Object} base class.",9,iteration,Polishing,,
475c4d4425b2170c4a0f19d5bd39b70e752e38a1,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java,Condition_Change,"-					while (j < statement.length && '}' != statement[j]) {
+					while (j < statement.length && statement[j] != '}') {
-						if (':' == statement[j] || '{' == statement[j]) {
+						if (statement[j] == ':' || statement[j] == '{') {
-						totalParameterCount = addNamedParameter(parameterList, totalParameterCount, escapes, i, j + 1, parameter);
+						totalParameterCount = addNamedParameter(
+								parameterList, totalParameterCount, escapes, i, j + 1, parameter);
-						totalParameterCount = addNamedParameter(parameterList, totalParameterCount, escapes, i, j, parameter);
+						totalParameterCount = addNamedParameter(
+								parameterList, totalParameterCount, escapes, i, j, parameter);",10,"condition, iteration",Polishing,,
47a3a5c97011a4e147db9a4cab3e85c8486fcec7,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java,Remove_Condition,"-	// 0 - not subscribed, 1 - subscribed, 2 - cancelled, 3 - cancelled via connector (before subscribe)
+	// 0 - not subscribed, 1 - subscribed, 2 - cancelled via connector (before subscribe)
-					// https://github.com/reactor/reactor-netty/issues/503
-					// FluxReceive rejects multiple subscribers, but not after a cancel().
-					// Subsequent subscribers after cancel() will not be rejected, but will hang instead.
-					// So we need to reject once in cancelled state.
-						throw new IllegalStateException(
-								""The client response body can only be consumed once."");
-					}
-					else if (this.state.get() == 3) {
-				.doOnCancel(() -> this.state.compareAndSet(1, 2))
-		if (mayHaveBody(method) && this.state.compareAndSet(0, 3)) {
+		if (mayHaveBody(method) && this.state.compareAndSet(0, 2)) {",7,condition,Switch to Reactor 2020.0.0 snapshots,"See gh-25373
",
47ff92873bc35345a0e0a743be4939527a27f896,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java,Condition_Change,"-		if (!message.contains(parameter.getExecutable().toGenericString())) {
+		if (message != null && !message.contains(parameter.getExecutable().toGenericString())) {",2,condition,Add null check,,
49356b2c0f498ae6580c1ef7d7ac0787629de7c8,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java,Remove_Condition,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
- * A simple {@link IdGenerator} that starts at 1 and increments by 1 with each call.
+ * A simple {@link IdGenerator} that starts at 1, increments up to
+ * {@link Long#MAX_VALUE}, and then rolls over.
-	private final AtomicLong mostSigBits = new AtomicLong(0);
-
-		long leastSigBits = this.leastSigBits.incrementAndGet();
-		if (leastSigBits == 0) {
-			this.mostSigBits.incrementAndGet();
-		}
-		return new UUID(this.mostSigBits.get(), leastSigBits);
+		return new UUID(0, this.leastSigBits.incrementAndGet());",8,condition,SimpleIdGenerator rolls over at Long.MAX_VALUE,"Closes gh-25485
",
49c4d310b51ac0552e036348fc1c1dbbc2b0589f,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java,Condition_Change,"-					if (editor != null) {
-						break;
-					}
+						if (editor != null) {
+							break;
+						}",6,condition,Polish,"See gh-27799
",
4a81f2c904ef72ec80a043cb9f9b1d9ab2a390c5,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java,Remove_Condition,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-			// To be on the safe side: explicitly delete the parts,
-			// but only actual file parts (for Resin compatibility)
+
-					if (request.getFile(part.getName()) != null) {
-						part.delete();
-					}
+					part.delete();",5,condition,Remove HTTP parts workaround for Resin,"A workaround was added for the Resin Servlet container in gh-13937.
This avoids attempting to delete parts that are not named, because the
`part.delete()` call would fail for non-file entries. This can be
problematic for files that are unnamed as they might not be removed by
the Framework.

This commit removes this workaround as Resin is not supported anymore.

Fixes gh-33511
",
4c964473b19590780b9ddad34c832f0b2b4f47d8,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Condition_Change,"-		boolean newJarFile = false;
+		boolean closeJarFile;
+			closeJarFile = !jarCon.getUseCaches();
-				newJarFile = true;
+				closeJarFile = true;
-			// Close jar file, but only if freshly obtained -
-			// not from JarURLConnection, which might cache the file reference.
-			if (newJarFile) {
+			if (closeJarFile) {",7,condition,Defensively close jar files from non-cached JarURLConnections,"Issue: SPR-6295
",
4d3c3056edc983c1afe13d055aeb443bd96bd473,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java,Add_Condition,"-import org.springframework.web.HttpMediaTypeNotAcceptableException;
-import org.springframework.web.accept.ContentNegotiationManagerFactoryBean;
-	 * Configure a {@code ContentNegotiationManager} to determine the media types
-	 * for resources being served. If the manager contains a path
-	 * extension strategy it will be used to look up the file extension
-	 * of resources being served via
-	 * {@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource
-	 * getMediaTypeForResource}. If that fails the check is then expanded
-	 * to use any configured content negotiation strategy against the request.
-	 * <p>By default a {@link ContentNegotiationManagerFactoryBean} with default
-	 * settings is used to create the manager. See the Javadoc of
-	 * {@code ContentNegotiationManagerFactoryBean} for details
-	 * @param contentNegotiationManager the manager to use
+	 * Configure a {@code ContentNegotiationManager} to help determine the
+	 * media types for resources being served. If the manager contains a path
+	 * extension strategy it will be checked for registered file extension.
+	 * @param contentNegotiationManager the manager in use
-	 * Return the specified content negotiation manager.
+	 * Return the configured content negotiation manager.
-	 * to it. This implementation first tries to determine the MediaType based
-	 * strictly on the file extension of the Resource via
-	 * {@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}
-	 * and then expands to check against the request via
-	 * {@link ContentNegotiationManager#resolveMediaTypes}.
+	 * to it. This implementation tries to determine the MediaType based on the
+	 * file extension of the Resource via
+	 * {@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}.
+		// For backwards compatibility
+		MediaType mediaType = getMediaType(resource);
+		if (mediaType != null) {
+			return mediaType;
+		}",6,condition,Polish media type change in ResourceHttpRequestHandler,,
4dab35205dbbde83b219352c0567cb1e7f1f4062,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java,Add_Condition,"-		super.doTrace(request, response);
+		// Work around until https://github.com/jakartaee/servlet/pull/545 is fixed and in use
+		if (request.getDispatcherType() != DispatcherType.ERROR) {
+			super.doTrace(request, response);
+		}",4,condition,Avoid super.doTrace for ERROR dispatches,"Closes gh-31457
",
4eaee1e7381d5f3d8cd6e3ab77c8cfcf7ef2d716,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AttributeMethods.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
+ * @author Sam Brannen
-			if (method.getDefaultValue() != null) {
+			if (!foundDefaultValueMethod && (method.getDefaultValue() != null)) {
-			if (type.isAnnotation() || (type.isArray() && type.getComponentType().isAnnotation())) {
+			if (!foundNestedAnnotation && (type.isAnnotation() || (type.isArray() && type.getComponentType().isAnnotation()))) {",4,condition,Short circuit if-conditions in AttributeMethods,,
4edc7196fb172cabe454dfc0377d322678b7ea7f,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java,Add_Condition,"+			// Request handling error (e.g. remote call), if we manage to set the status..
+			if (response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR)) {
+				logger.error(logPrefix + ""500 Server Error for "" + formatRequest(request), ex);
+				return Mono.empty();
+			}",4,condition,Refine disconnected client handling in WebFlux,"If an error looks like a ""disconnected client"" but the response is not
yet committed then it can't be an I/O error from writing to the server
response. It is most likely as a result of a remote call as part of
request handling.

Not setting the response to 500 in this case results in a 200 response
status despite the error. Even if it was an I/O error from the server
response, setting the status won't impact a failed response.

Closes gh-23319
",
502997d8e986dcfde1f49b2b2f443a32b5488b13,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Condition_Change,"-		if (dependentBeans == null) {
+		if (dependentBeans == null || dependentBeans.isEmpty()) {",2,condition,Further simplify DefaultSingletonBeanRegistry.isDependent(),"See gh-30839
",
5068eb2e01a5f534b6ceaefe9d1034446b674164,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/AbstractErrors.java,Add_Condition,"-		return (field.equals(fieldError.getField()) ||
-				(field.endsWith(""*"") && fieldError.getField().startsWith(field.substring(0, field.length() - 1))));
+		if (field.equals(fieldError.getField())) {
+			return true;
+		}
+		// Optimization: use chatAt instead of endsWith (SPR-11304, VESC-165)
+		int endIndex = field.length() - 1;
+		return (field.charAt(endIndex) == '*' && fieldError.getField().startsWith(field.substring(0, endIndex)));",7,condition,Add minor optimization to AbstractErrors,"Issue: SPR-11304
",
50829c9fdce91309118a2dfa2ebd8cd9bcf43437,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-				if (target == null || !TransactionSynchronizationManager.isActualTransactionActive()) {
+				if (target == null || (!TransactionSynchronizationManager.isActualTransactionActive() &&
+						!target.getTransaction().isActive())) {",3,condition,Shared EntityManager does not insist on actualTransactionActive flag anymore,"Issue: SPR-13838
",
511dab1ade9c8b45d35e3bca005b631f0c40af89,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/DefaultAdvisorChainFactory.java,Condition_Change,"-					if (mm instanceof IntroductionAwareMethodMatcher) {
+					if (mm instanceof IntroductionAwareMethodMatcher iamm) {
-						match = ((IntroductionAwareMethodMatcher) mm).matches(method, actualClass, hasIntroductions);
+						match = iamm.matches(method, actualClass, hasIntroductions);",4,condition,"Apply ""instanceof pattern matching"" (#29710)",,
51875cdf5fa1ee0fafad85876cd14e0ea422f003,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java,Condition_Change,"-		// SPRING PATCH BEGIN: early initialization for overridden methods on subclasses
-		if (!c1.isInterface()) {
-			proxy.init();
+		// SPRING PATCH BEGIN
+		if (!c1.isInterface() && c1 != Object.class) {
+			// Try early initialization for overridden methods on subclasses
+			try {
+				proxy.init();
+			}
+			catch (CodeGenerationException ex) {
+				// Ignore - to be retried when actually needed later on (possibly not at all)
+			}",8,condition,Defensive early initialization of CGLIB method proxies (for AOT processing),"Method proxies might not actually be used later on, so failure is not fatal.

See gh-29107
",
51e30dd2211d635703359e907529a1ec871b91fa,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/MimeType.java,Condition_Change,"-import java.util.Map.Entry;
-		for (Entry<String, String> entry : this.parameters.entrySet()) {
-			String key = entry.getKey();
+		for (String key : this.parameters.keySet()) {",4,iteration,Polish MimeType,,
53597f90e9e7da2739da9b874d16a4b1c5c50c10,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/SortedProperties.java,Condition_Change,"-import org.springframework.util.StringUtils;
-
-		for (String line : StringUtils.tokenizeToStringArray(contents, EOL)) {
+		for (String line : contents.split(EOL)) {
-		for (String line : StringUtils.tokenizeToStringArray(contents, EOL)) {
+		for (String line : contents.split(EOL)) {",6,iteration,Remove dependency on StringUtils in SortedProperties,"See gh-23018, gh-22383
",
5405c07d26db564cb680c713dce5abb859635147,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java,Add_Condition,"+		if (!this.setMetadataReaderFactoryCalled) {
+			this.metadataReaderFactory = new CachingMetadataReaderFactory(resourceLoader);
+		}",3,condition,Configuration class processing uses MetadataReaderFactory for current ResourceLoader,"Issue: SPR-14684
",
5459304a4b5e8dc6ce08ff8d9e09228ab7d72659,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java,Add_Condition,"+ * @author Juergen Hoeller
-					AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(annotationType).get(0);
-					if (mapping.isSynthesizable()) {
-						return true;
+					if (annotationType != this.annotationType) {
+						AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(annotationType).get(0);
+						if (mapping.isSynthesizable()) {
+							return true;
+						}",8,condition,Re-introduce support for annotation declarations with self references,"Closes gh-31400
",
550f13e8ed678447a61872b4f9ff96d918003102,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-			ConvertersForPair convertersForPair = this.converters.get(convertiblePair);
-			if (convertersForPair == null) {
-				convertersForPair = new ConvertersForPair();
-				this.converters.put(convertiblePair, convertersForPair);
-			}
-			return convertersForPair;
+			return this.converters.computeIfAbsent(convertiblePair, k -> new ConvertersForPair());",7,condition,Simplify GenericConversionService.getMatchableConverters(),Closes gh-24403,
55b258f2dec5110145f9017fc8fc3ba05bbb7aeb,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java,Add_Condition,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
+		int index = inString.indexOf('\\');
+		if (index == -1) {
+			return inString;
+		}
-		int index = inString.indexOf('\\');",5,condition,Avoid unnecessary allocations in StompDecoder#unescape,"Closes gh-29443
",
55faf6e3205d26a4ba693f40c1ea1cef179f31cb,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Condition_Change,"+import org.springframework.http.HttpMethod;
-				boolean isGet = ""GET"".equals(method);
-				if (isGet || ""HEAD"".equals(method)) {
+				boolean isGet = HttpMethod.GET.matches(method);
+				if (isGet || HttpMethod.HEAD.matches(method)) {",5,condition,Use HttpMethod enums,"See gh-26855
",
5619b005f03d5b4160c3a0bf31991067f58401be,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java,Condition_Change,"-	 * This method is invoked by
-	 * {@link #searchWithGetSemantics(AnnotatedElement, Class, String, Processor, Set, int)}
-	 * to perform the actual search within the supplied list of annotations.
+	 * This method is invoked by {@link #searchWithGetSemantics} to perform
+	 * the actual search within the supplied list of annotations.
-				if ((annotation.annotationType() == annotationType
-						|| annotation.annotationType().getName().equals(annotationName))
-						|| processor.alwaysProcesses()) {
-
+				if (annotation.annotationType() == annotationType ||
+						annotation.annotationType().getName().equals(annotationName) ||
+						processor.alwaysProcesses()) {",7,condition,Polishing,,
564c6f7f86467e1f831d107d571ec34501104b18,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java,Condition_Change,"-				for (Object key : namedArgs.keySet()) {
-					String propName = (String) key;
-					setProperty(propName, namedArgs.get(propName));
+				for (Map.Entry<?, ?> entity : namedArgs.entrySet()) {
+					String propName = (String) entity.getKey();
+					setProperty(propName, entity.getValue());",6,iteration,improve the performance of iteration,,
56688ab36130aa9b08c456a2ef90287337c39a74,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Add_Condition,"-				String headers = values.isEmpty() ? """" : ""masked"";
+				String headers;
+				else {
+					headers = (!values.isEmpty() ? ""masked"" : """");
+				}",5,condition,Polish contribution,"See gh-31244
",
574dffb60b52c7cb708a436b2939def65b94d0c9,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java,Condition_Change,"-		if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) {
+		int resolvedAutowireMode = mbd.getResolvedAutowireMode();
+		if (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) {
-			if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME) {
+			if (resolvedAutowireMode == AUTOWIRE_BY_NAME) {
-			if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) {
+			if (resolvedAutowireMode == AUTOWIRE_BY_TYPE) {",7,condition,Some trivial optimization in method populateBean() (#22792),Optimize the number of getResolvedAutowireMode() method calls,
58e113a591fc040cbe1534ece68c5a28bf6d73bf,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java,Add_Condition,"+			if (candidate == null) {
+				continue;
+			}",3,condition,Avoid NPE in AutoProxyRegistrar when no attribute found,"Issue: SPR-15055
",
5912d6f52af193e8bc562db80a64062394158851,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBean.java,Add_Condition,"+	private boolean metadataSourcesAccessed = false;
+
+		this.metadataSourcesAccessed = true;
+		this.metadataSourcesAccessed = true;
+		if (this.metadataSources != null && !this.metadataSourcesAccessed) {
+			// Repeated initialization with no user-customized MetadataSources -> clear it.
+			this.metadataSources = null;
+		}
+",8,condition,LocalSessionFactoryBean clears default MetadataSources on reinitialization,"Issue: SPR-14815
",
593bd064e1466125ef2c25141e5da6d992f3cb94,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java,Condition_Change,"-		if (!(targetTypeValue instanceof Class)) {
+		if (!(targetTypeValue instanceof Class<?> clazz)) {
-		return (Class<?>) targetTypeValue;
+		return clazz;
-		if (targetTypeValue instanceof Class) {
-			return ((Class<?>) targetTypeValue).getName();
+		if (targetTypeValue instanceof Class<?> clazz) {
+			return clazz.getName();",8,condition,Polishing,,
59b66007638c6937daca6b0c5f97a0fbe8a111bf,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,Condition_Change,"-				targetClass != null && !targetClass.equals(method.getDeclaringClass())) {
+				targetClass != null && targetClass != method.getDeclaringClass()) {
-			if (resolvedPrimitive != null && lhsType.equals(resolvedPrimitive)) {
+			if (lhsType == resolvedPrimitive) {",4,condition,Class identity comparisons wherever possible,"Issue: SPR-12926
",
5ab966fbdefc33840ff2ac4c12b26a6c306b59cf,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/support/CronField.java,Condition_Change,"-		 * minimum value of this field's range, except for daylight saving.
+		 * minimum value of this field's range.
-			T result =  this.field.getBaseUnit().addTo(temporal, amount);
-			//adjust daylight saving
-			if (get(result) != range.getMinimum()) {
-				result = this.field.adjustInto(result,result.range(this.field).getMinimum());
+			T result = this.field.getBaseUnit().addTo(temporal, amount);
+			current = get(result);
+			range = result.range(this.field);
+			// adjust for daylight savings
+			if (current != range.getMinimum()) {
+				result = this.field.adjustInto(result, range.getMinimum());",8,condition,Polish contribution,"See gh-28038
",
5b47816183e4e9a0dc2ad5d2175065ac17539719,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Add_Condition,"-				multipartRequestParsed = processedRequest != request;
+				multipartRequestParsed = (processedRequest != request);
+			else if (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) instanceof MultipartException) {
+				logger.debug(""Multipart resolution failed for current request before - "" +
+						""skipping re-resolution for undisturbed error rendering"");
+			}",6,condition,DispatcherServlet skips multipart resolution if error page exception attribute indicates MultipartException as root cause,"Issue: SPR-11716
",
5b97c47fc4b9a4248db9cd2472f25ae78242baf4,spring-projects/spring-framework,spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java,Add_Condition,"+		ZonedDateTime expires = (cookie instanceof MockCookie ? ((MockCookie) cookie).getExpires() : null);
-			ZonedDateTime expires = (cookie instanceof MockCookie ? ((MockCookie) cookie).getExpires() : null);
+		else if (expires != null) {
+			buf.append(""; Expires="");
+			buf.append(expires.format(DateTimeFormatter.RFC_1123_DATE_TIME));
+		}",6,condition,Sync changes in MockHttpServletResponse test fixture,"See gh-26558
",
5c77c3739ea2eaf292639a702f721c0b5a73a277,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java,Condition_Change,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-			for (Class<?> beanInterface : beanClass.getInterfaces()) {
+			for (Class<?> beanInterface : ClassUtils.getAllInterfacesForClass(beanClass)) {",2,iteration,Find destroy methods in superclass interfaces,"Related tests will be added in
https://github.com/spring-projects/spring-aot-smoke-tests.

Closes gh-32006
",
5cbc972a0de195ebb09645f65a1dea8fb85880c9,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java,Condition_Change,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-	 * at debug level.
+	 * at warn level.
-		if (logger.isDebugEnabled()) {
-			logger.debug(""Listener container task ["" + task + ""] has been rejected and paused: "" + ex);
+		if (logger.isWarnEnabled()) {
+			logger.warn(""Listener container task ["" + task + ""] has been rejected and paused: "" + ex);",4,condition,Log rejected listener container tasks at warn level,"Closes gh-27451
",
5d5cd17d33c59f105f992373d6e0aa013c7a02d3,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java,Condition_Change,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-	/** Cache of early target objects: cacheKey to bean instance. */
-	private final Map<Object, Object> earlyTargetReferences = new ConcurrentHashMap<>(16);
+	private final Map<Object, Object> earlyBeanReferences = new ConcurrentHashMap<>(16);
-		this.earlyTargetReferences.put(cacheKey, bean);
+		this.earlyBeanReferences.put(cacheKey, bean);
-			if (this.earlyTargetReferences.remove(cacheKey) != bean) {
+			if (this.earlyBeanReferences.remove(cacheKey) != bean) {",6,condition,"Polish ""Rename earlyProxyReferences in AbstractAutoProxyCreator""","See gh-23914
",
5dcd55b23b5dd43e5e7ef7241c15942ab8ceedb8,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java,Add_Condition,"-			if (logger.isDebugEnabled()) {
+			SimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(message.getHeaders());
+			if (messageType.equals(SimpMessageType.CONNECT) && logger.isErrorEnabled()) {
+				logger.error(""Message broker is not active. Ignoring: "" + message);
+			}
+			else if (logger.isDebugEnabled()) {",6,condition,Log ignored CONNECT messages at error level,"Issue: SPR-11673
",
5ec2cd79470aeaa8e676dfbe794a63b189349fa2,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java,Add_Condition,"- * Copyright 2002-2014 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
+			if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT && logger.isWarnEnabled()) {
+				logger.warn(""Custom isolation level specified but no actual transaction initiated; "" +
+						""isolation level will effectively be ignored: "" + definition);
+			}",4,condition,AbstractPlatformTransactionManager logs warning for custom isolation level in case of no actual transaction,"Issue: SPR-12600
",
5f2e298c08255bbda2b36ad0351146748d847bc6,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java,Condition_Change,"+		boolean debugEnabled = logger.isDebugEnabled();
-				if (logger.isDebugEnabled()) {
+				if (debugEnabled) {
-			if (logger.isDebugEnabled()) {
+			if (debugEnabled) {
+		boolean debugEnabled = logger.isDebugEnabled();
-				if (logger.isDebugEnabled()) {
+				if (debugEnabled) {
-				if (logger.isDebugEnabled()) {
+				if (debugEnabled) {",10,condition,Extract isDebugEnabled() checks to local variables,Closes gh-24683,
6013591fac1444df88bb75542367633373603a45,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/CollectionUtils.java,Remove_Condition,"-		if (isEmpty(source) || isEmpty(candidates)) {
-			return false;
-		}
-		for (Object candidate : candidates) {
-			if (source.contains(candidate)) {
-				return true;
-			}
-		}
-		return false;
+		return findFirstMatch(source, candidates) != null;",10,iteration,Polish containsAny of CollectionUtils by reusing findFirstMatch,,
60fac678844a5626f4f5c7150a648b981c4ce427,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/MediaType.java,Add_Condition,"-
-
+	/**
+	 * Create a new {@code MediaType} for the given {@link MimeType}.
+	 * The type, subtype and parameters information is copied and {@code MediaType}-specific
+	 * checks on parameters are performed.
+	 * @param mimeType the MIME type
+	 * @throws IllegalArgumentException if any of the parameters contain illegal characters
+	 * @since 5.3.0
+	 */
-		for(MimeType mimeType : mimeTypes) {
+		for (MimeType mimeType : mimeTypes) {",5,iteration,Polish,,
61117245a6fa5ef793bfd447f6edaa4c1d432684,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,Remove_Condition,"-							for (int i = 0; i < arguments.length; i++) {
-								cachedMethodArguments[i] = descriptors[i];
-							}
+							System.arraycopy(descriptors, 0, cachedMethodArguments, 0, arguments.length);",4,iteration,Replace manual array copy with native method call,"Closes gh-1606
",
6251222a23415d8b8788e79b9c208d3208988685,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java,Remove_Condition,"-	private static volatile boolean kotlinWarningLogged;
-
-				if (!kotlinWarningLogged) {
-					kotlinWarningLogged = true;
-					logger.warn(""For Jackson Kotlin classes support please add "" +
-							""\""com.fasterxml.jackson.module:jackson-module-kotlin\"" to the classpath"");
-				}
+				// jackson-module-kotlin not available",7,condition,Remove jackson-module-kotlin warning,"Closes gh-26962
",
62ea627965eb10eb3f3c2b2388ff6d1ac7ddb3a6,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java,Condition_Change,"+
-				if (Class.class.equals(beanClass) && ""classLoader"".equals(pd.getName())) {
-					// Ignore Class.getClassLoader() method - nobody needs to bind to that
+				if (Class.class.equals(beanClass) &&
+						(""classLoader"".equals(pd.getName()) ||  ""protectionDomain"".equals(pd.getName()))) {
+					// Ignore Class.getClassLoader() and getProtectionDomain() methods - nobody needs to bind to those",4,condition,Revised exclusion of java.lang.Class properties,"Issue: SPR-11098
",
62efdfb89c368fd3a3665fe78a7180692d174c23,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java,Condition_Change,"-		if (!c1.isInterface() && c1 != Object.class && !Factory.class.isAssignableFrom(c2)) {
+		if (c1 != Object.class && c1.isAssignableFrom(c2.getSuperclass()) && !Factory.class.isAssignableFrom(c2)) {",2,condition,Try early initialization for all user-declared methods (including interfaces),"Closes gh-32682
",
6305a69cc14f90a6e65e96362d38cab46e6c8b07,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/ContentDisposition.java,Add_Condition,"+ * @author Sergey Tsypanov
-			sb.append((c == '""' && !escaped) ? ""\\\"""" : c);
+			if (!escaped && c == '""') {
+				sb.append(""\\\"""");
+			} else {
+				sb.append(c);
+			}",6,condition,Avoid StringBuilder.append(Object) in ContentDisposition,"This commit avoids invoking StringBuilder.append(Object) in favor
of explicit method calls to append(String) and append(char) in
ContentDisposition.escapeQuotationsInFilename(String).

Closes gh-25056",
63fae8c5a7ea21e4ff59ee094cc4541c048e8e54,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/aot/generate/ClassNameGenerator.java,Add_Condition,"- * Generates unique class names that can be used in ahead-of-time generated
- * source code. This class is stateful so the same instance should be used for
- * all name generation. Most commonly the class name generator is obtained via a
- * {@link GenerationContext}.
+ * Generate unique class names based on an optional target {@link Class} and
+ * a feature name. This class is stateful so the same instance should be used
+ * for all name generation. Most commonly the class name generator is obtained
+ * via a {@link GenerationContext}.
+ * @author Stephane Nicoll
-	 * Generate a new class name for the given {@code target} /
-	 * {@code featureName} combination.
-	 * @param target the target of the newly generated class or {@code null} if
-	 * there is not target.
+	 * Generate a unique {@link ClassName} based on the specified {@code target}
+	 * class and {@code featureName}. If a {@code target} is specified, the
+	 * generated class name is a suffixed version of it.
+	 * <p>For instance, a {@code com.example.Demo} target with an
+	 * {@code Initializer} feature name leads to a
+	 * {@code com.example.Demo__Initializer} generated class name. If such a
+	 * feature was already requested for this target, a counter is used to
+	 * ensure uniqueness.
+	 * <p>If there is no target, the {@code featureName} is used to generate the
+	 * class name in the {@value #AOT_PACKAGE} package.
+	 * @param target the class the newly generated class relates to, or
+	 * {@code null} if there is not target
-		if(target != null) {
-			return generateSequencedClassName(target.getName().replace(""$"", ""_"") + SEPARATOR + StringUtils.capitalize(featureName));
+		if (target != null) {
+			return generateSequencedClassName(target.getName().replace(""$"", ""_"")
+					+ SEPARATOR + StringUtils.capitalize(featureName));
-		return generateSequencedClassName(AOT_PACKAGE+ featureName);
+		return generateSequencedClassName(AOT_PACKAGE + featureName);",7,condition,Clarify the scope of target in ClassNameGenerator,"Closes gh-28517
",
66c63c374b8be03f765a84a386932920e6580402,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java,Add_Condition,"+import java.util.concurrent.ConcurrentHashMap;
-	private final Map<String, Object> attributes;
+	private final Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();
-		this.attributes = attributes;
+
+		if (attributes != null) {
+			this.attributes.putAll(attributes);
+		}",8,condition,Ensure handshake attrs are copied in SockJS session,,
66e488850be2169e94c9daf161fb682094132ac2,spring-projects/spring-framework,spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/init/ScriptUtils.java,Condition_Change,"-	 * @since 5.2.16
+	 * @since 5.3.8
-			if (!EOF_STATEMENT_SEPARATOR.equals(separatorToUse) && !containsSqlScriptDelimiters(statement, separatorToUse)) {
+			if (!EOF_STATEMENT_SEPARATOR.equals(separatorToUse) &&
+					!containsStatementSeparator(resource, statement, separatorToUse, commentPrefixes,
+						blockCommentStartDelimiter, blockCommentEndDelimiter)) {",4,condition,Ignore comments when searching for statement delimiter in ScriptUtils,"This commit picks up where 569ce840cf left off, by correctly invoking
the new containsStatementSeparator(...) method from
executeSqlScript(...) in ScriptUtils in spring-r2dbc.

See gh-26911
",
674dc2f2039fb6186b35ab674c3046ecd5809bb3,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Add_Condition,"-			if (isEnableLoggingRequestDetails()) {
+			if (StringUtils.startsWithIgnoreCase(request.getContentType(), ""multipart/"")) {
+				params = ""multipart"";
+			}
+			else if (isEnableLoggingRequestDetails()) {",5,condition,Do not log request parameters for multipart requests,"Closes gh-27350
",
67e3b1b5310b9ecc4cbcab6dab1262d5369bbde8,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java,Condition_Change,"-	private final Map<Object, Object> earlyProxyReferences = new ConcurrentHashMap<>(16);
+	/** Cache of early target objects: cacheKey to bean instance. */
+	private final Map<Object, Object> earlyTargetReferences = new ConcurrentHashMap<>(16);
-		this.earlyProxyReferences.put(cacheKey, bean);
+		this.earlyTargetReferences.put(cacheKey, bean);
-			if (this.earlyProxyReferences.remove(cacheKey) != bean) {
+			if (this.earlyTargetReferences.remove(cacheKey) != bean) {",6,condition,Rename earlyProxyReferences in AbstractAutoProxyCreator,"See gh-23914
",
67f184293b94c076b0474231f739a74f42d5ffa8,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java,Add_Condition,"-		Assert.notNull(key, ""Null key returned for cache operation (maybe you are using named params "" +
-				""on classes without debug info?) "" + context.metadata.operation);
+		if (key == null) {
+			throw new IllegalArgumentException(""Null key returned for cache operation (maybe you are "" +
+					""using named params on classes without debug info?) "" + context.metadata.operation);
+		}",6,condition,Improve performance of generateKey,"Only compute the error message to display when the generated key is
actually null instead of using Assert.notNull as the cache operation
'toString()' method is non trivial and gets computed regardless of the
result.

Issue: SPR-12527
",
6806aaf162f396e89cc07735d399737c87bcd2a1,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CollectionFactory.java,Condition_Change,"-		else if (TreeSet.class == collectionType || SortedSet.class == collectionType || NavigableSet.class == collectionType) {
+		else if (TreeSet.class == collectionType || NavigableSet.class == collectionType
+				|| SortedSet.class == collectionType) {",3,condition,"Polish ""Add missing TreeSet to CollectionFactory.createCollection()""","See gh-28949
",
68837ebb57b111bcaa2f98f1d570268cfa23df0f,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java,Condition_Change,"-			else if (namespaceUri.startsWith(""https://www.springframework.org/"")) {
+			else if (namespaceUri.startsWith(""http://www.springframework.org/"")) {",2,condition,URL Cleanup - fix undesirable code change,"Namespace handlers are mapped based on the canonical names for XML
namespaces which in Spring do not use ""https"" as the scheme.

See gh-22617 gh-22622 gh-22635
",
6887802526dbef2857c4c0106153c0650ec5e4aa,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java,Condition_Change,"-				MethodHandles.Lookup lookup =
-						(MethodHandles.Lookup) privateLookupInMethod.invoke(null, contextClass, MethodHandles.lookup());
+				MethodHandles.Lookup lookup = (MethodHandles.Lookup)
+						privateLookupInMethod.invoke(null, contextClass, MethodHandles.lookup());
-				if (!(ex.getTargetException() instanceof IllegalArgumentException)) {
-					throw new CodeGenerationException(ex.getTargetException());
+				Throwable target = ex.getTargetException();
+				if (target.getClass() != LinkageError.class && target.getClass() != IllegalArgumentException.class) {
+					throw new CodeGenerationException(target);
-				// in case of IllegalArgumentException: fall through to defineClass
+				// in case of plain LinkageError (class already defined)
+				// or IllegalArgumentException (class in different package):
+				// fall through to traditional ClassLoader.defineClass below",9,condition,Fallback to ClassLoader.defineClass for Lookup.defineClass LinkageError,"Issue: SPR-16902
",
68cc57549a56480b723b6112e1bee0de114eeda1,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java,Condition_Change,"-				
+
+			// Check terminal signal before processing element..
+			boolean isTerminated = this.terminated;
+
-			if (this.terminated) {
+			if (isTerminated) {",6,condition,Restore correct order of terminated flag check,,
692c5f292da714c251280058d58e8c05176ef478,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Condition_Change,"-			// A clone of the AutowireCandidateResolver since it is potentially BeanFactoryAware...
+			// A clone of the AutowireCandidateResolver since it is potentially BeanFactoryAware
-			// Make resolvable dependencies (e.g. ResourceLoader) available here as well...
+			// Make resolvable dependencies (e.g. ResourceLoader) available here as well
-	public <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)  {
+	public <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType) {
-						else  {
+						else {",4,condition,Polishing,,
6c74fee5e88073ec321e956f7c5a1dd5b00f2b08,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java,Remove_Condition,"-			UnknownContentTypeException unknownContentTypeException = new UnknownContentTypeException(bodyType, contentType,
+
+			throw new UnknownContentTypeException(bodyType, contentType,
-			if (observation != null) {
-				observation.error(unknownContentTypeException);
-			}
-			throw unknownContentTypeException;",7,condition,Remove unnecessary error signal from DefaultRestClient,"Before UnknownContentTypeException is thrown, it is added to the current
Observation but since UnknownContentTypeException is a
RestClientException, the exception is added again in one of the
catch blocks later on.

Closes gh-33347
",
6d5080825cd26ec29957de2626da9f117e32e41b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/KotlinDetector.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-	private static final Log logger = LogFactory.getLog(KotlinDetector.class);
-
-		if (kotlinMetadata != null && !kotlinReflectPresent) {
-			logger.info(""Kotlin reflection implementation not found at runtime, related features won't be available."");
-		}",8,condition,Remove potentially confusing kotlin-reflect related log message,"Closes gh-24935
",
6d55b3a592547fc335c73e7d071e511fea8f89b9,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java,Condition_Change,"+			// Iterate over temporary copy in order to avoid ConcurrentModificationException,
+			// since listener invocations may in turn trigger registration of listeners...
+			Set<ExceptionListener> copy;
-				// Iterate over temporary copy in order to avoid ConcurrentModificationException,
-				// since listener invocations may in turn trigger registration of listeners...
-				for (ExceptionListener listener : new LinkedHashSet<>(this.delegates)) {
-					listener.onException(ex);
-				}
+				copy = new LinkedHashSet<>(this.delegates);
+			}
+			for (ExceptionListener listener : copy) {
+				listener.onException(ex);",8,iteration,Perform onException delegation outside of connection monitor,"Issue: SPR-15738
",
6d7573262e604b5c8e58cd97309bd2486c478016,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java,Condition_Change,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
+import org.springframework.util.CollectionUtils;
-		if ((processor != null) && (request instanceof HttpServletRequest)) {
+		if (processor != null && request instanceof HttpServletRequest) {
-		if (hiddenFields != null) {
+		if (!CollectionUtils.isEmpty(hiddenFields)) {
+",6,condition,FormTag skips rendering of hidden fields in case of empty Map,"Issue: SPR-16498
",
6d91d54fc9e93bbecbfb2778cf4d1fed1a39b7f6,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java,Condition_Change,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-	private static ConversionService defaultConversionService;
+	private static volatile ConversionService defaultConversionService;
-		synchronized (this) {
-			if (defaultConversionService == null) {
-				defaultConversionService = new DefaultConversionService();
-			}
+		if (defaultConversionService == null) {
+			defaultConversionService = new DefaultConversionService();",8,condition,StandardTypeConverter initializes default ConversionService against volatile field,"Issue: SPR-14465
",
6e0dfd6999aaec4590625de9f818abab16c3aa92,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
+import org.springframework.http.HttpHeaders;
-	 * Indicates whether the {@code Accept-Charset} should be written to any outgoing request.
+	 * Whether the {@code Accept-Charset} header should be written to any outgoing
+	 * request sourced from the value of {@link Charset#availableCharsets()}.
+	 * The behavior is suppressed if the header has already been set.
-		if (this.writeAcceptCharset) {
-			outputMessage.getHeaders().setAcceptCharset(getAcceptedCharsets());
+		HttpHeaders headers = outputMessage.getHeaders();
+		if (this.writeAcceptCharset && headers.get(HttpHeaders.ACCEPT_CHARSET) == null) {
+			headers.setAcceptCharset(getAcceptedCharsets());
-		Charset charset = getContentTypeCharset(outputMessage.getHeaders().getContentType());
+		Charset charset = getContentTypeCharset(headers.getContentType());",8,condition,Check if Accept-Charset is present before adding it,"Closes gh-22506
",
6e3f974951b71b6566392f58135b71ffca6fd135,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/HttpHeaders.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-	 * Return a {@code HttpHeaders} object that can read and written to.
+	 * Return a {@code HttpHeaders} object that can be read and written to.
+	 * @since 5.1.1
-		if (headers instanceof ReadOnlyHttpHeaders) {
+		if (headers == EMPTY) {
+			return new HttpHeaders();
+		}
+		else if (headers instanceof ReadOnlyHttpHeaders) {",5,condition,HttpHeaders.writableHttpHeaders properly handles HttpHeaders.EMPTY,"Issue: SPR-17633
",
6e936a408195f95d41f3463bb93e255218493664,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java,Remove_Condition,"-		if (!uri.isAbsolute()) {
-			return Mono.error(new IllegalArgumentException(""URI is not absolute: "" + uri));
-		}
-",4,condition,Remove absolute URI check from ReactorClientHttpConnector,"This allows maknig use of the Unix Domain Socket support in Reactor 1.0.

Closes gh-25929
",
6f1acdd561e60b389fa2eefdecf1f2811018253d,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ResolvableType.java,Add_Condition,"+
+		if (type instanceof Class<?>) {
+			return new ResolvableType(type, typeProvider, variableResolver, null);
+		}",4,condition,Optimize ResolvableType cache,"Prior to this commit, the ResolvableType static cache was holding a lot
of duplicates for simple types. We are using too much metadata to compute
the key when the class has no generic information. so setFoo(String foo)
and setBar(String bar) would result in two entries in the cache because
the TypeProvider is different. On a very simple application 65% of the
entries in the cache were duplicate.

When the type is a Class with no generic information, the ResolvableType
instance is a simple wrapper around it so we might just as well not cache
it at all as the cost of finding it back from the cache is higher than
creating that simple wrapper.

This commit adds an explicit check; if the type is a simple Class we just
return a ""resolved"" ResolvableType instance for it. On a few test cases,
this reduces the size of the cache by 85%

Issue: SPR-12275
",
6f2f5bb8c1a0926c0d2be683bb721c3966cf9c80,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java,Condition_Change,"-		if (target == attribute) {
+		if (target.equals(attribute)) {
-			if (mirror != attribute) {
+			if (!mirror.equals(attribute)) {",4,condition,Fix annotation exceptions in tight memory,"Update `AnnotationTypeMapping` so that instance comparisons are no
longer used when checking attribute methods. Prior to this commit,
in an environment with tightly constrained memory, the method cache
could be cleared and different method instances would be returned.

Closes gh-23010
",
6fdf5ef6eeba50387686082f2dd4d1407a669f39,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-			Class<?>[] interfaces = ia.getInterfaces();
-			for (Class<?> iface : interfaces) {
-				removeInterface(iface);
+			for (Class<?> ifc : ia.getInterfaces()) {
+				removeInterface(ifc);",5,iteration,Polish contribution,"See gh-24205
",
6fed3425437ab1736244a8d77005b4fa8fa3e57b,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java,Add_Condition,"+			if (ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION.equals(this.defaultPersistenceUnitRootLocation)) {
+				logger.debug(""Unable to resolve classpath root as persistence unit root URL"");
+				return null;
+			}",4,condition,Refine DefaultPersistenceUnitManager#determineDefaultPersistenceUnitRootUrl,"This commit refines the implementation to be more
lenient when defaultPersistenceUnitRootLocation is equals
to ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION and an
IOException is thrown, which happens when running on
native image.

Closes gh-29137
",
70cb96c1d832eccd0d7e8ab5768cf63bda6879c1,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,Condition_Change,"-					if (method.getParameterCount() == 0) {
+					if (!method.getDeclaringClass().isRecord() && method.getParameterCount() == 0) {",2,condition,Ignore @Value on record property,"See gh-31433
",
70e6e3bb39c9db1a85a77411707fb560292b7b3e,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java,Condition_Change,"-		if (!isRunning()) {
+		if (isRunning()) {",2,condition,Fix condition check in SockJsClient lifecycle method,,
71463fb3991a2b7e8e79cafa91a824c51f4fc73a,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,Condition_Change,"-				if (this.alreadyCreated.add(beanName)) {
+				if (!this.alreadyCreated.contains(beanName)) {
+					this.alreadyCreated.add(beanName);
-		this.alreadyCreated.remove(beanName);
+		synchronized (this.mergedBeanDefinitions) {
+			this.alreadyCreated.remove(beanName);
+		}",7,condition,AbstractBeanFactory consistently guards add/remove operations against alreadyCreated Set,"Issue: SPR-14269
",
716e7de8415485dffe25aee446458deebf540c5c,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/SpelNodeImpl.java,Condition_Change,"-		if (typeDescriptor.startsWith(""["") || typeDescriptor.startsWith(""L"")) {
+		// If the SpEL exitDescriptor is not for a primitive (single character),
+		// ASM expects the typeDescriptor to end with a ';'.
+		if (typeDescriptor.length() > 1) {",2,condition,Simplify implementation of SpelNodeImpl.loadClassForExitDescriptor(...),,
7244c9aea191d5afba4179e69a0139925206a9bd,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java,Condition_Change,"-		while (source != null && source != Object.class
-				&& !hasPlainJavaAnnotationsOnly(source) && remaining > 0) {
+		while (source != null && source != Object.class && remaining > 0
+				&& !hasPlainJavaAnnotationsOnly(source)) {
-				name.startsWith(""org.springframework.lang."");
+				name.startsWith(""org.springframework.lang."") ||
+				name.startsWith(""org.springframework.util."") ||
+				(name.startsWith(""com.sun"") && !name.contains(""Proxy""));",8,iteration,Add more aggressive annotation element filtering,"Refine the element filtering performed by `AnnotationsScanner` to also
cover `org.springframework.util` and most `com.sun` classes which turn
out to be referenced quite frequently and which we know contain no
useful annotations.

See gh-21697
",
72590dbb21048245e0af2ea507e7b0896330e89d,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java,Add_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-					return getCachedProducer((Destination) args[0]);
+					Destination dest = (Destination) args[0];
+					if (!(dest instanceof TemporaryQueue || dest instanceof TemporaryTopic)) {
+						return getCachedProducer(dest);
+					}",5,condition,CachingConnectionFactory does not cache producer for temporary queue/topic,"Issue: SPR-16353
",
72685b1d819d0fda74ebf17a489080059051baed,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/FileCopyUtils.java,Remove_Condition,"-	 * Close the {@link Closeable} as a null-safety.
-	 *
-	 * @param closeable to close, may be null.
+	 * Attempt to close the supplied {@link Closeable}, silently swallowing any
+	 * exceptions.
+	 * @param closeable the {@code Closeable} to close
-	private static void close(@Nullable Closeable closeable) {
-		if (closeable == null) return;
+	private static void close(Closeable closeable) {
-		} catch (IOException e) {
-			// do nothing
+		} catch (IOException ex) {
+			// ignore",5,condition,Polish contribution,"See gh-24393
",
739d2881faf7d98bfbf09cab3a5fae0f2e87497d,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/PrincipalMethodArgumentResolver.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
- * {@link HandlerMethodArgumentResolver} to a {@link Principal} or {@link Optional} of {@link Principal}.
+ * Resolver for arguments of type {@link Principal}, including {@code Optional<Principal>}.
-		if (parameter.isOptional()) {
-			return Optional.ofNullable(user);
-		} else {
-			return user;
-		}
+		return parameter.isOptional() ? Optional.ofNullable(user) : user;",6,condition,Polishing,,
7582adc0bc4d9456465338f92198fbcbdc84151a,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java,Add_Condition,"+			if (requestPath.endsWith(""/"") && !subPath.endsWith(""/"")) {
+				subPath += ""/"";
+			}",3,condition,Fix trailing slash in nested path,"This commit adds a trailing slash to the nested path if the request path
also ends with a slash. For instance, given the request ""/foo/bar/"", and
nested path pattern ""/foo/**"", we expect the nested path to be “/bar/”,
not “/bar"".
",
772a26a743466ef84239aa97f1e07560426ad71b,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java,Condition_Change,"-			if (beanName != null && this.beanFactory.containsBean(beanName)) {
+			if (beanName != null && this.beanFactory.containsBeanDefinition(beanName)) {",2,condition,polishing,"Issue: SPR-12761
",
775ffbe10b89d419a4d2a1409eccaf51188f93a9,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java,Condition_Change,"-		if (path.contains(""../"")) {
+		if (path.contains("".."")) {",2,condition,Improve static resource path check,,
7772b914c694b5b16d6e9c9f56acf7b03b47f9d4,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,Condition_Change,"-			if (ex instanceof BeanCurrentlyInCreationException) {
+			if (ex.contains(BeanCurrentlyInCreationException.class)) {",2,condition,Deep BeanCurrentlyInCreationException check in getTypeForFactoryBean,"Issue: SPR-16427
",
7816c9e411578493407533315030c476daf160c3,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java,Condition_Change,"-import org.springframework.aot.AotDetector;
-
- * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} (when not using
- * AOT-processed optimizations) for checking debug information in the class file.
+ * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} (when not in
+ * a native image) for checking debug information in the class file.
-		if (!AotDetector.useGeneratedArtifacts()) {
+		if (!NativeDetector.inNativeImage()) {",4,condition,Exclude LocalVariableTableParameterNameDiscoverer based on native image check,"See gh-29531
",
78549d4963a15c6decfd17ea9be15f27c3cdc03c,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java,Add_Condition,"+import org.springframework.util.MultiValueMap;
-		this.builder.header(HttpHeaders.COOKIE, getCookies().values().stream()
-				.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining("";"")));
+		MultiValueMap<String, HttpCookie> cookies = getCookies();
+		if (!cookies.isEmpty()) {
+			this.builder.header(HttpHeaders.COOKIE, cookies.values().stream()
+					.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining("";"")));
+		}",8,condition,Fix cookie management in reactive JdkClientHttpRequest,"Prevent cookies to be set to empty in the HTTP request if no cookie
is present

See gh-32799
",
787b09b202f0eb507d5e5c687bde5282c5a6bb22,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
- * {@link KotlinReflectionParameterNameDiscoverer} is added first in the list and used
- * for Kotlin classes and interfaces. When compiling or running as a Graal native image,
- * no {@link ParameterNameDiscoverer} is used.
+ * {@link KotlinReflectionParameterNameDiscoverer} is added first in the list and
+ * used for Kotlin classes and interfaces. When compiling or running as a GraalVM
+ * native image, the {@code KotlinReflectionParameterNameDiscoverer} is not used.
+ * @author Sam Brannen
-		if (!GraalDetector.inImageCode()) {
-			if (KotlinDetector.isKotlinReflectPresent()) {
-				addDiscoverer(new KotlinReflectionParameterNameDiscoverer());
-			}
-			addDiscoverer(new StandardReflectionParameterNameDiscoverer());
-			addDiscoverer(new LocalVariableTableParameterNameDiscoverer());
+		if (KotlinDetector.isKotlinReflectPresent() && !GraalDetector.inImageCode()) {
+			addDiscoverer(new KotlinReflectionParameterNameDiscoverer());
+		addDiscoverer(new StandardReflectionParameterNameDiscoverer());
+		addDiscoverer(new LocalVariableTableParameterNameDiscoverer());",10,condition,Relax GraalVM check in DefaultParameterNameDiscoverer,"Prior to this commit, DefaultParameterNameDiscoverer did not register
any discovers when compiling or running as a GraalVM native image.

This commit relaxes the GraalVM check so that it is only applied to the
registration of KotlinReflectionParameterNameDiscoverer.

Consequently, StandardReflectionParameterNameDiscoverer and
LocalVariableTableParameterNameDiscoverer are once again always
registered by DefaultParameterNameDiscoverer.

Closes gh-24600
",
7a0e5a378a04817805ddaac30310fb10b12970b7,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java,Condition_Change,"-		if (key == IntAttr.PREFETCH) {
+		if (key == Attr.PREFETCH) {
-		if (key == ScannableAttr.PARENT) {
+		if (key == Attr.PARENT) {",4,condition,Update for reactor-core change,,
7b2c74b05c5ca195f7259e1c4e6a2e94737eb613,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.java,Add_Condition,"-		this.validator = validator;
+		if(validator instanceof LocalValidatorFactoryBean) {
+			this.validator = ((LocalValidatorFactoryBean) validator).getValidator();
+		}
+		else {
+			this.validator = validator;
+		}",7,condition,Improving method validation support for BV 1.1,"Update MethodValidationPostProcessor.setValidator(...) to use
LocalValidatorFactoryBean.getValidator() when possible.

This is required because LocalValidatorFactoryBean does not directly
implement the forExecutables() method introduced in bean validation v1.1.

Issue: SPR-10644
",
7b3f5fd855fe822ef1bfb21c3fa0d430c0713e39,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ResourceUtils.java,Add_Condition,"-			// Tomcat's ""jar:war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt""
+			// Tomcat's ""war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt""
+			if (URL_PROTOCOL_WAR.equals(jarUrl.getProtocol())) {
+				return new URL(warFile);
+			}
-	 * <p>Furthermore, this method works on JDK 1.4 as well,
-	 * in contrast to the {@code URL.toURI()} method.",3,condition,ResourceUtils.extractArchiveURL properly deals with top-level war URLs,"Issue: SPR-15556
",
7b95bd72f7e9922f655c582f47c2fe80d8664a1b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java,Condition_Change,"-		if (mimeTypes.size() >= 50) {
+		if (mimeTypes.size() > 50) {",2,condition,"Fix condition for ""Too many elements"" in MimeTypeUtils.sortBySpecificity()","See gh-31254
Closes gh-31769
",
7c47f554c02a506a8f69af2f7d664794b0df3479,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,Condition_Change,"-			if (asyncManager.hasConcurrentResult() &&
-					asyncManager.getConcurrentResultContext().length > 0 &&
-					asyncManager.getConcurrentResultContext()[0] instanceof ModelAndViewContainer) {
-
+			if (asyncManager.hasConcurrentResult()) {",5,condition,Remove unnecessary check in RequestMappingHandlerAdapter,,
7d3f42b27bd0042f1461e3e2ef45bbd641b05fa3,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerEndpoint.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
+import org.springframework.util.StringUtils;
+	/**
+	 * Set a custom id for this endpoint.
+	 */
+	/**
+	 * Return the id of this endpoint (possibly generated).
+	 */
+		if (StringUtils.hasText(getId())) {
+			listenerContainer.setBeanName(getId());
+		}",6,condition,Expose endpoint id as listener container name (for transaction/thread name),"Closes gh-26683
",
7defbfc18b5e43f1de271419ea37ace7a2984d43,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java,Add_Condition,"+		WebSocketSessionHolder holder = this.sessions.get(session.getId());
+		if (holder != null) {
+			session = holder.getSession();
+		}
-		WebSocketSessionHolder holder = this.sessions.get(session.getId());",5,condition,Ensure concurrent WebSocketSession wrapper is used,"Issue: SPR-13326
",
7e8ffc7bf56dcc9d7fcc3992589b126b0eecf22f,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java,Condition_Change,"- * Copyright 2002-2014 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
-			if (propertySource instanceof EnumerablePropertySource) {
-				names.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));
+			if (!(propertySource instanceof EnumerablePropertySource)) {
+				throw new IllegalStateException(
+						""Failed to enumerate property names due to non-enumerable property source: "" + propertySource);
+			names.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));",6,condition,CompositePropertySource rejects getPropertyNames call when containing a non-enumerable source,"Issue: SPR-12788
",
7ea85a959c810c1689fc04b8d0c2bd17e5fe6e08,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java,Add_Condition,"- * Copyright 2002-2011 the original author or authors.
+ * Copyright 2002-2012 the original author or authors.
-		// To be on the safe side: explicitly delete all parts.
+		// To be on the safe side: explicitly delete the parts,
+		// but only actual file parts (for Resin compatibility)
-				part.delete();
+				if (request.getFile(part.getName()) != null) {
+					part.delete();
+				}",4,condition,Fix MultipartResolver Resin compatibility,"StandardServletMultipartResolver#cleanupMultipart now takes care to
delete only actual file parts for Resin compatibility.

Issue: SPR-9299
",
7ef3257b031000b9f092d4014902bd676c607c9c,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java,Add_Condition,"+import javax.servlet.RequestDispatcher;
-			HttpServletMapping mapping = request.getHttpServletMapping();
+			HttpServletMapping mapping = (HttpServletMapping) request.getAttribute(RequestDispatcher.INCLUDE_MAPPING);
+			if (mapping == null) {
+				mapping = request.getHttpServletMapping();
+			}",6,condition,Correctly determine HttpServletMapping for INCLUDE,"Closes gh-26216
",
7f1062159ee9926d5abed7cadc2b36b6b7fc242e,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/HttpStatus.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
+	private static final HttpStatus[] VALUES;
+
+	static {
+		VALUES = values();
+	}
+
+
-		for (HttpStatus status : values()) {
+		// used cached VALUES instead of values() to prevent array allocation
+		for (HttpStatus status : VALUES) {",9,iteration,Copy HttpStatus::values to prevent allocation,"Before this commit, HttpStatus::resolve used the values() method in its
logic. This causes a new array to be allocated for each invocation,
and results in memory overhead.

This commit makes a copy of the HttpStatus values array, and uses that
to resolve status codes.

Closes gh-26842
",
7f1d5d790ed4f96a03b4f604ff8e9358bb086952,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/AbstractMethodMessageHandler.java,Condition_Change,"-		if (this.applicationContext == null) {
-			logger.warn(""No ApplicationContext available for detecting beans with message handling methods."");
-			return;
-		}
+		if (this.applicationContext == null) {
+			logger.warn(""No ApplicationContext available "" +
+					""for auto-detection of beans with message handling methods."");
+			return;
+		}",9,condition,Polish,,
7f26e8cfc6798187ec463d0ee9d9cdd26d9605be,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/SynthesizedMergedAnnotationInvocationHandler.java,Add_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+		if (classLoader == interfaceClass.getClassLoader()) {
+			return true;
+		}",3,condition,Short-circuit interface visibility check in case of same ClassLoader,"Closes gh-24664
",
7f5d6ea3f9ac682b4c73d93bb148f2b906e1acb4,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CollectionFactory.java,Condition_Change,"-	private static Class<?> navigableSetClass = null;
-
-	private static Class<?> navigableMapClass = null;
-
-			else if (SortedSet.class.equals(collectionType) || collectionType.equals(navigableSetClass)) {
+			else if (SortedSet.class.equals(collectionType) || NavigableSet.class.equals(collectionType)) {
-			else if (SortedMap.class.equals(mapType) || mapType.equals(navigableMapClass)) {
+			else if (SortedMap.class.equals(mapType) || NavigableMap.class.equals(mapType)) {",8,condition,Fixed NavigableSet/NavigableMap detection in createCollection/createMap,"Issue: SPR-11257
",
7f700cc63eadacfec243857bf5c9a13397bebca7,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java,Condition_Change,"-			if (inputMessage.getServletRequest().getMethod() == ""GET""
+			if (""GET"".equals(inputMessage.getServletRequest().getMethod())",2,condition,Polish,,
7f79ccbec0bad256aa7b3bfdd11af1db1f8976b4,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/config/ScopedProxyBeanDefinitionDecorator.java,Remove_Condition,"-		if (node instanceof Element ele) {
-			if (ele.hasAttribute(PROXY_TARGET_CLASS)) {
-				proxyTargetClass = Boolean.parseBoolean(ele.getAttribute(PROXY_TARGET_CLASS));
-			}
+		if (node instanceof Element ele && ele.hasAttribute(PROXY_TARGET_CLASS)) {
+			proxyTargetClass = Boolean.parseBoolean(ele.getAttribute(PROXY_TARGET_CLASS));",6,condition,Combine conditions for better readability and simplicity,,
7ff257c0ea00c02e453c8390c641835ebe778955,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java,Add_Condition,"-		view.setLocale(locale);
+		if (view != null) {
+			view.setLocale(locale);
+		}",4,condition,Prevent NPE in ScriptTemplateView when no view is found,"Issue: SPR-15064
",
803fc2001907636605aa3ed2fcdf1437171761a5,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java,Condition_Change,"-			Map<String, ViewResolver> map = BeanFactoryUtils.beansOfTypeIncludingAncestors(
+			String[] names = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(
-			if (map.isEmpty()) {
+			if (names.length == 1) {",4,condition,Correct check for ViewResolver beans,"Check for bean names of type rather than actual beans.

Issue: SPR-12267
",
80fb8ea8137975e072c7611f5ae197cadd470da7,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java,Add_Condition,"+		if (this.exitTypeDescriptor == null) {
+			return false;
+		}
-			return (this.exitTypeDescriptor != null && this.arrayTypeDescriptor != null);
+			return (this.arrayTypeDescriptor != null);
+						TypedValue result = accessor.read(this.evaluationContext, this.targetObject, this.name);
-						return accessor.read(this.evaluationContext, this.targetObject, this.name);
+						return result;",8,condition,Avoid unnecessary compilation attempts in SpEL's Indexer,"Closes gh-32677
",
8137cc95669690f3e4055d6ccf484e98a07b6703,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java,Condition_Change,"+import org.springframework.util.StringUtils;
-					if (table != null && !table.isEmpty()) {
+					if (StringUtils.hasLength(table)) {",3,condition,Polishing,,
81aca78579df061e08aa0e6a6488b3e4d3ebb3dc,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java,Remove_Condition,"+import org.springframework.util.ClassUtils;
-	 * Produce a nice string for a given method name with specified arguments.
+	 * Produce a readable representation for a given method name with specified arguments.
-	 * @return nicely formatted string, eg. foo(String,int)
+	 * @return a nicely formatted representation, e.g. {@code foo(String,int)}
-	 * Produce a nice string for a given class object.
-	 * For example, a string array will have the formatted name ""java.lang.String[]"".
-	 * @param clazz The class whose name is to be formatted
-	 * @return a formatted string suitable for message inclusion
+	 * Determine a readable name for a given Class object.
+	 * <p>A String array will have the formatted name ""java.lang.String[]"".
+	 * @param clazz the Class whose name is to be formatted
+	 * @return a formatted String suitable for message inclusion
+	 * @see ClassUtils#getQualifiedName(Class)
-		if (clazz == null) {
-			return ""null"";
-		}
-		return clazz.getTypeName();
+		return (clazz != null ? ClassUtils.getQualifiedName(clazz) : ""null"");",6,condition,Delegate to common ClassUtils.getQualifiedName,"Issue: SPR-15237
",
81fde5ec4103e3db28bf79073691938a4743b121,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/MethodParameter.java,Add_Condition,"+		// Try first with identity checks for greater performance.
+		// Potentially try again with object equality checks in order to avoid race
+		// conditions while invoking java.lang.reflect.Executable.getParameters().
+		for (int i = 0; i < allParams.length; i++) {
+			if (parameter.equals(allParams[i])) {
+				return i;
+			}
+		}",5,"condition, iteration",Ensure that MethodParameter.findParameterIndex() is thread-safe,"Prior to this commit, parallel invocations of
MethodParameter.findParameterIndex() (invoked indirectly via
SynthesizingMethodParameter.forParameter() and
MethodParameter.forParameter()) could intermittently lead to an
IllegalArgumentException being thrown due to a race condition in the
internal implementation of the JDK's
java.lang.reflect.Executable.getParameters() method.

This commit addresses this issue by introducing a fallback for-loop
that iterates over the candidate parameters a second time using
equality checks instead of identity checks.

Issue: SPR-17534
",
83293b39df23d91c6ea18f520912c0c4fbb5f1c2,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java,Condition_Change,"-			else if (namespaceUri.startsWith(""https://www.springframework.org/"")) {
+			else if (namespaceUri.startsWith(""http://www.springframework.org/"")) {",2,condition,URL Cleanup - fix undesirable code change,"Namespace handlers are mapped based on the canonical names for XML
namespaces which in Spring do not use ""https"" as the scheme.

See gh-22680
",
8417a73913a2352fc988a63d60872f0a98f51734,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java,Condition_Change,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-			if (name.length() > 1 && name.substring(1,2).equals(""_"")) {
+			if (name.length() > 1 && name.substring(1, 2).equals(""_"")) {",2,condition,Polishing,"Closes gh-1340
",
84963ba4d865e995fc17483a7cc857bdce595e2f,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,Condition_Change,"-									if (!(type.isMarkedNullable() && arg == null) && type.getClassifier() instanceof KClass<?> kClass
-											&& KotlinDetector.isInlineClass(JvmClassMappingKt.getJavaClass(kClass))) {
+									if (!(type.isMarkedNullable() && arg == null) &&
+											type.getClassifier() instanceof KClass<?> kClass &&
+											KotlinDetector.isInlineClass(JvmClassMappingKt.getJavaClass(kClass))) {",5,condition,Polishing,,
84cc7ffdf6330ed4e437bb67fa2708c9ffa3b340,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java,Condition_Change,"-				if (true || !hasQuery) {
+				if (!hasQuery) {",2,condition,Fix test failure,,
85cecb66e5526ad29fda44b1d63ab7f202aed0e3,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/InvocableHandlerMethod.java,Condition_Change,"-	 * Configure a reactive registry. This is needed for cases where the response
-	 * is fully handled within the controller in combination with an async void
-	 * return value.
-	 * <p>By default this is an instance of {@link ReactiveAdapterRegistry} with
-	 * default settings.
-	 * @param registry the registry to use
+	 * Configure a reactive adapter registry. This is needed for async return values.
+	 * <p>By default this is a {@link ReactiveAdapterRegistry} with default settings.
-	 * @return a Mono with the result from the invocation.
+	 * @return a Mono with the result from the invocation
-
-			return isAsyncVoidReturnType(returnType, adapter) ?
-					Mono.from(adapter.toPublisher(value)) : Mono.justOrEmpty(value);
+			return (isAsyncVoidReturnType(returnType, adapter) ?
+					Mono.from(adapter.toPublisher(value)) : Mono.justOrEmpty(value));
+		MethodParameter[] parameters = getMethodParameters();
-		MethodParameter[] parameters = getMethodParameters();
+
-		if (!exMsg.contains(parameter.getExecutable().toGenericString())) {
+		if (exMsg != null && !exMsg.contains(parameter.getExecutable().toGenericString())) {",10,condition,Consistent parameter retrieval across InvocableHandlerMethod variants,"See gh-22900
",
8662b7773c01c710aa44b684b292335695199436,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Condition_Change,"-			for (String url : StringUtils.delimitedListToStringArray(
+			for (String path : StringUtils.delimitedListToStringArray(
-					if (url.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {
+					if (path.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {
+						File file = new File(path);
-								ResourceUtils.FILE_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR);
+								ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +
+								ResourceUtils.JAR_URL_SEPARATOR);
-						logger.debug(""Cannot search for matching files underneath ["" + url +
+						logger.debug(""Cannot search for matching files underneath ["" + path +",10,"condition, iteration",PathMatchingResourcePatternResolver converts manifest entries to absolute paths,"Issue: SPR-14934
",
86733a98da91c57d2ac28365a82da3e3fbd15fb1,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java,Condition_Change,"- * sub-classes to deviate from the default. Unwrap the content of a
+ * sub-classes to deviate from the default. Unwraps the content of a
-	 * {@link EventListener} annotation or any matching attribute on a meta-annotation.
+	 * {@link EventListener} annotation or any matching attribute on a composed
+	 * annotation.
+			// TODO annotationAttributes are null with proxy
-			else { // TODO annotationAttributes null with proxy
+			// TODO Remove once AnnotatedElementUtils supports annotations on proxies
+			else {
-				this.condition = (eventListener != null ? eventListener.condition() : null);
+				this.condition = (eventListener != null ? eventListener.condition() : """");",4,condition,Polish ApplicationListenerMethodAdapter,,
8694a0aac06388332373765a3cf0a494b0243a90,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
-import java.util.Arrays;
+
-	 * {@link java.lang.annotation.Inherited inherited}. For greater clarity regarding inherited
-	 * annotations, consider using {@link #isAnnotationInherited(Class, Class)} instead.
+	 * {@linkplain java.lang.annotation.Inherited inherited}. For greater clarity
+	 * regarding inherited annotations, consider using
+	 * {@link #isAnnotationInherited(Class, Class)} instead.
-		for (Annotation annotation : Arrays.asList(clazz.getDeclaredAnnotations())) {
+		for (Annotation annotation : clazz.getDeclaredAnnotations()) {
-	 * on the supplied {@code clazz} and is {@link java.lang.annotation.Inherited inherited}
-	 * i.e., not declared locally for the class).
+	 * on the supplied {@code clazz} and is {@linkplain java.lang.annotation.Inherited inherited}
+	 * (i.e., not declared locally for the class).
-	 * will not be traversed. See the {@link java.lang.annotation.Inherited JavaDoc} for the
-	 * &#064;Inherited meta-annotation for further details regarding annotation inheritance.
+	 * will not be traversed. See the {@linkplain java.lang.annotation.Inherited Javadoc} for the
+	 * {@code @Inherited} meta-annotation for further details regarding annotation inheritance.
-	 * on the supplied {@code clazz} and is {@link java.lang.annotation.Inherited inherited}
+	 * on the supplied {@code clazz} and is <em>inherited</em>",4,iteration,Minor changes to AnnotationUtils,"- Polished Javadoc for isAnnotationDeclaredLocally() and
  isAnnotationInherited().
- Removed unnecessary call to Arrays.asList() in
  isAnnotationDeclaredLocally().
",
871bb57e025d1daa42524040f038819a6c19ceef,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
+			else if (method.getName().equals(""getWarnings"") || method.getName().equals(""clearWarnings"")) {
+				// Avoid creation of target Connection on pre-close cleanup (e.g. in Hibernate Session)
+				return null;
+			}",3,condition,TransactionAwareDataSourceProxy locally handles get/clearWarnings call,"Closes gh-23346
",
871e378ed054d95f19bcb75fa0f01e202e83f367,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java,Condition_Change,"-		if (aspectClass.getSuperclass().getAnnotation(Aspect.class) != null &&
-				!Modifier.isAbstract(aspectClass.getSuperclass().getModifiers())) {
+		Class<?> superclass = aspectClass.getSuperclass();
+		if (superclass.getAnnotation(Aspect.class) != null &&
+				!Modifier.isAbstract(superclass.getModifiers())) {
-					aspectClass.getSuperclass().getName() + ""]"");
+					superclass.getName() + ""]"");",7,condition,Polish AbstractAspectJAdvisorFactory,Closes gh-27340,
871f705bca8da88c95966b9ab37d9aefa0dd24ca,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,Condition_Change,"-		if (!componentScans.isEmpty() &&
-				!this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {
+		if (!componentScans.isEmpty()) {",3,condition,Remove ComponentScan duplicate condition,"Closes gh-27077
",
87fa2c3b97c7ee4785c4109ebd14ff3310f9db11,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,Add_Condition,"+		if (lastCharIndex == inString.length()) {
+			return inString;
+		}",3,condition,Avoid unnecessary String instantiation in StringUtils.deleteAny(),"This commit avoids unnecessary String instantiation in
StringUtils.deleteAny() if nothing was deleted from the
input string.

Closes gh-24924",
88049e9b5cf9bf77d2712bb090e12a2b96887aee,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-		if (!this.nonAnnotatedClasses.contains(targetType) && !isSpringContainerClass(targetType)) {
+		if (!this.nonAnnotatedClasses.contains(targetType) &&
+				!targetType.getName().startsWith(""java"") &&
+				!isSpringContainerClass(targetType)) {
+
+",6,condition,EventListenerMethodProcessor skips annotation search on java classes,"Closes gh-22564
",
884c7696cebadc877d63d8212e311f9f3489b9fd,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java,Add_Condition,"-			if (KotlinDetector.isKotlinType(method.getDeclaringClass()) && KotlinDelegate.isSuspend(method)) {
-				throw new IllegalStateException(""Unsupported suspending handler method detected: "" + method);
+			if (KotlinDetector.isKotlinType(method.getDeclaringClass())) {
+				Class<?>[] parameterTypes = method.getParameterTypes();
+				if ((parameterTypes.length > 0) && ""kotlin.coroutines.Continuation"".equals(parameterTypes[parameterTypes.length - 1].getName())) {
+					throw new IllegalStateException(""Unsupported suspending handler method detected: "" + method);
+				}",7,condition,Make it possible to run Spring MVC without kotlin-reflect,"Closes gh-24828
",
88cac6a4a3a84ff9891d226d7ad47d2707af6d96,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java,Condition_Change,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-		if (targetMethod.getDeclaringClass().isInterface()) {
+		if (targetMethod.getDeclaringClass().isInterface() && targetMethod.getDeclaringClass() != targetClass &&
+				obtainPointcutExpression().getPointcutExpression().contains(""."" + targetMethod.getName() + ""("")) {",3,condition,Reduce creation of composite interfaces to actual method references in current pointcut,"Closes gh-29519
",
8921be18de88a0a1e63136c9d77d52eeea0acbe2,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeLocator.java,Add_Condition,"-		if (loadedType != null &&
-				!(this.classLoader instanceof SmartClassLoader scl && scl.isClassReloadable(loadedType))) {
-			this.typeCache.put(typeName, loadedType);
+		if (loadedType != null) {
+			if (!(this.classLoader instanceof SmartClassLoader scl && scl.isClassReloadable(loadedType))) {
+				this.typeCache.put(typeName, loadedType);
+			}",7,condition,Properly return loaded type even if identified as reloadable,"Closes gh-31668
",
8934eb8464e9efdc560c0d8b1ffb34ddbd18bc0a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,Condition_Change,"+ * @author Sebastien Deleuze
+	/** Precomputed value for the combination of private, static and final modifiers. */
+	private static final int NON_OVERRIDABLE_MODIFIER = Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL;
+
+	/** Precomputed value for the combination of public and protected modifiers. */
+	private static final int OVERRIDABLE_MODIFIER = Modifier.PUBLIC | Modifier.PROTECTED;
+
-		if (Modifier.isPrivate(method.getModifiers())) {
+		if ((method.getModifiers() & NON_OVERRIDABLE_MODIFIER) != 0) {
-		if (Modifier.isPublic(method.getModifiers()) || Modifier.isProtected(method.getModifiers())) {
+		if ((method.getModifiers() & OVERRIDABLE_MODIFIER) != 0) {",8,condition,Optimize ClassUtils#getMostSpecificMethod,"This commit optimizes ClassUtils#getMostSpecificMethod which is
a method frequently invoked in typical Spring applications.

It refines ClassUtils#isOverridable by considering static and
final modifiers as non overridable and optimizes its implementation.

Closes gh-30272
",
89802cfc11bc7b94387bf75f376dc08218e3946c,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,Remove_Condition,"-		if (getAnnotations().length != other.getAnnotations().length) {
+		if (!Arrays.equals(getAnnotations(), other.getAnnotations())) {
-		for (Annotation ann : getAnnotations()) {
-			if (!ann.equals(other.getAnnotation(ann.annotationType()))) {
-				return false;
-			}
-		}",7,"condition, iteration",TypeDescriptor avoids merged annotations for equality comparisons,"Issue: SPR-14926
Issue: SPR-14929
",
89b8449999769cbc412cd3301614630bbe98ae34,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java,Remove_Condition,"-			ParsedSql parsedSql = this.parsedSqlCache.get(sql);
-			if (parsedSql == null) {
-				parsedSql = NamedParameterUtils.parseSqlStatement(sql);
-				this.parsedSqlCache.put(sql, parsedSql);
-			}
-			return parsedSql;
+			return parsedSqlCache.computeIfAbsent(sql, NamedParameterUtils::parseSqlStatement);",7,condition,Simplify getParsedSql() method in NamedParameterJdbcTemplate,Closes gh-24358,
89c7c6e9dd85d880aeea71ec0c3c944a7030d109,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java,Remove_Condition,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-import org.springframework.core.KotlinDetector;
-import org.springframework.core.KotlinReflectionParameterNameDiscoverer;
+ * @author Sebastien Deleuze
-	public LocalValidatorFactoryBean() {
-		if (KotlinDetector.isKotlinReflectPresent()) {
-			this.parameterNameDiscoverer = new KotlinReflectionParameterNameDiscoverer();
-		}
-	}
-
-
-	 * <p>Default is Hibernate Validator's own internal use of standard Java reflection,
-	 * with an additional {@link KotlinReflectionParameterNameDiscoverer} if Kotlin
-	 * is present. This may be overridden with a custom subclass or a Spring-controlled
+	 * <p>Default is Hibernate Validator's own internal use of standard Java reflection.
+	 * This may be overridden with a custom subclass or a Spring-controlled",9,condition,Fix bean validation on suspending function parameters,"This commit leverages Hibernate Validator's own internal use
of standard Java reflection to perform validation on suspending
function, which fixes the ArrayIndexOutOfBoundsException previously
observed.

Validation of suspending function return values remains unsupported
as Hibernate Validator is not Coroutines aware.

Closes gh-23499
",
8a29bfba3f85f0500c95c78f463ba3644133eaf2,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java,Condition_Change,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-				if (name!=null && !HttpHeaders.CONTENT_LENGTH.equals(name)) {
+				if (!HttpHeaders.CONTENT_LENGTH.equals(name)) {
-				if (name!= null && !HttpHeaders.CONTENT_LENGTH.equals(name)) {
+				if (!HttpHeaders.CONTENT_LENGTH.equals(name)) {",4,condition,Polishing external contribution,,
8a7e839ad07211a2da51fa04fb33fe167ab79dc4,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java,Condition_Change,"-			if (view instanceof RedirectView) {
-				HttpStatus httpStatus = HttpStatus.resolve(rawStatusCode());
-				if (httpStatus != null && httpStatus.is3xxRedirection()) {
-					RedirectView redirectView = (RedirectView) view;
-					redirectView.setStatusCode(httpStatus);
+			if (view instanceof RedirectView redirectView) {
+				HttpStatusCode statusCode = statusCode();
+				if (statusCode.is3xxRedirection()) {
+					redirectView.setStatusCode(statusCode);",9,condition,Polishing,,
8b023b17c948bb180794a23207903718404e2cca,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java,Condition_Change,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-	public Object postProcessBeforeInitialization(final Object bean, String beanName) throws BeansException {
-
+	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
-		if (System.getSecurityManager() != null ) {
+		if (System.getSecurityManager() != null) {
-	@Override
-	public Object postProcessAfterInitialization(Object bean, String beanName) {
-		return bean;
-	}
-",10,condition,Polish contribution,"See gh-23435
",
8b3b8d070e3e177d580bd9da337ad73ebb707170,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/BeansDtdResolver.java,Condition_Change,"-			int dtdNameStart = systemId.indexOf(DTD_NAME);
-			if (dtdNameStart > lastPathSeparator) {
+			int dtdNameStart = systemId.indexOf(DTD_NAME, lastPathSeparator);
+			if (dtdNameStart != -1) {",4,condition,Consistently detect spring-beans.dtd reference in last path segment,"Issue: SPR-13549
",
8bd8c4f627216b054268f188130614e70a5f9dac,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java,Condition_Change,"+ * @author Sebastien Deleuze
-		else if (void.class == returnType) {
+		else if (void.class == returnType || ""kotlin.Unit"".equals(returnType.getName())) {",2,condition,Add support for `@Async` Kotlin function returning `Unit?`,"Closes gh-31881
",
8c605dd08251ca648c30aabed43d921229b7d3b1,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java,Condition_Change,"-			else if (namespaceUri.startsWith(""http://www.springframework.org/"")) {
+			else if (namespaceUri.startsWith(""http://www.springframework.org/schema/"")) {",2,condition,BeanDefinitionParserDelegate uses http://www.springframework.org/schema/,"See gh-22839
",
8c9383da7c9ce02408c4e22eb8b6fdc07043582d,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
-import org.springframework.util.Assert;
-		while (!Object.class.equals(superclass)) {
+		while (superclass != null && !Object.class.equals(superclass)) {
-		Assert.isTrue(bridgeMethod != null);
-		Assert.isTrue(bridgedMethod != null);",5,iteration,BridgeMethodResolver properly handles bridge methods in interfaces,"Issue: SPR-9330
",
8cb24e0d93c9a073fc9a8b50692c90c2e19a5b43,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java,Add_Condition,"-			this.completingThread = null;  // only first check actually counts
+			if (check) {
+				this.completingThread = null;  // only first match actually counts
+			}",4,condition,SettableTask.checkCompletingThread() only resets marker after match,"Issue: SPR-15409
",
8cce40469631327e0afdd5d41393248313819270,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java,Add_Condition,"+		if (returnValue == null && Void.class.equals(returnValueClass)) {
+			return;
+		}
+",4,condition,Add check for ResponseEntity<void> with null return value,"Issue: SPR-12287
",
8cced42fb2cdbe1d0864ca6c576d81d4cb8dcb49,spring-projects/spring-framework,spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-			this.logger = loggerContext.getLogger(name);
+			LoggerContext context = loggerContext;
+			if (context == null) {
+				// Circular call in early-init scenario -> static field not initialized yet
+				context = LogManager.getContext(Log4jLog.class.getClassLoader(), false);
+			}
+			this.logger = context.getLogger(name);",6,condition,Use local LoggerContext in Log4jLog when static field not initialized yet,"Closes gh-24440
",
8d17bcea5b06979cca48c9e3cd75420a75b7f267,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java,Add_Condition,"+				if (""websocket"".equalsIgnoreCase(request.getHeaders().getUpgrade())) {
+					response.setStatusCode(HttpStatus.BAD_REQUEST);
+					return;
+				}",4,condition,Validate top-level SockJS URL,"Closes gh-26933
",
8eb618b480896092cae04d1c5e412f7a5dba0c9c,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,Add_Condition,"- * Copyright 2002-2021 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
+import kotlin.reflect.jvm.KCallablesJvm;
+		if (method.isAccessible() && !KCallablesJvm.isAccessible(function)) {
+			KCallablesJvm.setAccessible(function, true);
+		}",4,condition,Make Kotlin functions accessible in CoroutinesUtils,"In order to allow using private classes like in Java
for example.

Closes gh-23840
",
8f0f5faf4d541df10db9b38e670bed83a1990b98,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java,Remove_Condition,"-		name = SCHEDULER_BEAN_NAME;
-		if (context.getRegistry().containsBeanDefinition(name)) {
-			beanDef.getPropertyValues().add(""sockJsTaskScheduler"", context.getRegistry().getBeanDefinition(name));
-		}
+		Object scheduler = WebSocketNamespaceUtils.registerScheduler(SCHEDULER_BEAN_NAME, context, source);
+		beanDef.getPropertyValues().add(""sockJsTaskScheduler"", scheduler);
+",7,condition,XML config properly initialize WS message broker stats,"Issue: SPR-14190
",
90268de9c0548a14893aa1c386f4de6e957e0948,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionReaderUtils.java,Remove_Condition,"-		String id = generatedBeanName;
-			id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition);
+			return generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition);
-		else {
-			// Top-level bean: use plain class name with unique suffix if necessary.
-			return uniqueBeanName(generatedBeanName, registry);
-		}
-		return id;
+
+		// Top-level bean: use plain class name with unique suffix if necessary.
+		return uniqueBeanName(generatedBeanName, registry);",9,condition,Polish implementation of BeanDefinitionReaderUtils.generateBeanName(),"Closes gh-24739
",
90388e4701add18ec060e6b2fb219f54c9474429,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-		if (sourceCollection.size() == 0) {
+		if (sourceCollection.isEmpty()) {",2,condition,Replace size() check with isEmpty(),"Closes gh-1333
",
90477b40a4b92c357184cc182f546ce742b1ffa1,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java,Add_Condition,"-	private final List<Charset> availableCharsets;
+	private volatile List<Charset> availableCharsets;
-		this.availableCharsets = new ArrayList<>(Charset.availableCharsets().values());
+		if (this.availableCharsets == null) {
+			this.availableCharsets = new ArrayList<>(
+					Charset.availableCharsets().values());
+		}",7,condition,Defer Charset.availableCharsets() call,"Change the `StringHttpMessageConverter` to defer calling
Charset.availableCharsets() until absolutely necessary to help improve
startup times.

Issue: SPR-15502
",
9064d38e4c77addbb5682e28e8c04df9fc8cd652,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,Add_Condition,"-			// Let the bean definition get re-merged now that we're actually creating
-			// the bean... just in case some of its metadata changed in the meantime.
-			clearMergedBeanDefinition(beanName);
-			this.alreadyCreated.add(beanName);
+			synchronized (this.mergedBeanDefinitions) {
+				if (this.alreadyCreated.add(beanName)) {
+					// Let the bean definition get re-merged now that we're actually creating
+					// the bean... just in case some of its metadata changed in the meantime.
+					clearMergedBeanDefinition(beanName);
+				}
+			}",7,condition,AbstractBeanFactory.markBeanAsCreated() reliably clears merged bean definition only once,"Issue: SPR-14269
",
90c9d96a4d432a31c6cfbb0c2e8f2ab83daeffef,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java,Condition_Change,"-	 * Expose the given target class for the specified bean.
+	 * Expose the given target class for the specified bean, if possible.
-		if (beanFactory.containsBeanDefinition(beanName)) {
+		if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {",2,condition,Avoid exposeTargetClass attempt if bean name is null,"Issue: SPR-13650
",
913cc079af07fbb58ea09e73d3fb538714b6a1dc,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java,Add_Condition,"+	}
+	
+	/**
+	 * Write an empty HTML attribute with the specified name.
+	 * <p>Be sure to write all attributes <strong>before</strong> writing
+	 * any inner text or nested tags.
+	 * @throws IllegalStateException if the opening tag is closed
+	 */
+	public void writeAttribute(String attributeName) throws JspException {
+		if (currentState().isBlockTag()) {
+			throw new IllegalStateException(""Cannot write attributes after opening tag is closed."");
+		}
+		this.writer.append("" "").append(attributeName);",8,condition,TagWriter can write empty attribute,"See gh-910
",
92a48b72d77e4a377cfe31316fcbd5249ee4b34d,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java,Condition_Change,"-		if (byte[].class.equals(this.payload.getClass())) {
+		if (this.payload instanceof byte[]) {",2,condition,Polish (minor),,
92c9b0dc9746ceac9ed0d60c64687247e5092ece,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java,Condition_Change,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-					// Skip unsent CONNECT messages (likely auth issues)
-					if (!isConnect || sent) {
-						logger.error(""Failed to send message to MessageChannel in session "" + session.getId() +
-								"":"" + ex.getMessage());
+					// Skip for unsent CONNECT or SUBSCRIBE (likely authentication/authorization issues)
+					if (sent || !(isConnect || StompCommand.SUBSCRIBE.equals(command))) {
+						logger.error(""Failed to send message to MessageChannel in session "" +
+								session.getId() + "":"" + ex.getMessage());",6,condition,Reduce logging for unsent SUBSCRIBE messages,"Closes gh-28252
",
93c8b7ab04af281a26d05c968fdb0ed03cf0b1c4,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Add_Condition,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
+import org.springframework.util.ClassUtils;
-		if (!isConfigurationFrozen()  || type == null || !allowEagerInit) {
+		if (!isConfigurationFrozen() || type == null || !allowEagerInit) {
-		cache.put(type, resolvedBeanNames);
+		if (ClassUtils.isCacheSafe(type, getBeanClassLoader())) {
+			cache.put(type, resolvedBeanNames);
+		}",7,condition,DefaultListableBeanFactory only puts 'cache-safe' Class keys into its by-type cache,"Issue: SPR-11520
",
93de5f407e394b70b9a3fa89e35340008d340cbc,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-			if (RequestBodyAdvice.class.isAssignableFrom(beanType)) {
-				requestResponseBodyAdviceBeans.add(adviceBean);
-			}
-			if (ResponseBodyAdvice.class.isAssignableFrom(beanType)) {
+			if (RequestBodyAdvice.class.isAssignableFrom(beanType) || ResponseBodyAdvice.class.isAssignableFrom(beanType)) {",5,condition,Avoid duplicate registration of [RequestBody|ResponseBody]Advice @ControllerAdvice,"Prior to this commit, if a @ControllerAdvice implemented both
RequestBodyAdvice and ResponseBodyAdvice, it was registered twice in
RequestMappingHandlerAdapter.

This commit ensures that such instances are only registered once.

Closes gh-22638
",
946082f8062cf859a30c461ace18ccc6e5dd2872,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,Condition_Change,"-		else if (KTypes.isSubtypeOf(returnType, monoType)) {
-			return mono.flatMap(o -> ((Mono<?>)o));
-		}
-		else if (KTypes.isSubtypeOf(returnType, publisherType)) {
+		if (KTypes.isSubtypeOf(returnType, publisherType)) {
+			if (KTypes.isSubtypeOf(returnType, monoType)) {
+				return mono.flatMap(o -> ((Mono<?>)o));
+			}",8,condition,Refine publisher type check in CoroutinesUtils,"See gh-32390
",
947255e3774fe6248c59d2cdd6a1b06b9f6b5d9b,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,Condition_Change,"+import org.springframework.core.KotlinDetector;
-				if (ReflectionUtils.declaresException(getMethod(), ex.getClass())) {
+				if (ReflectionUtils.declaresException(getMethod(), ex.getClass()) ||
+						KotlinDetector.isKotlinType(getMethod().getDeclaringClass())) {
+					// Propagate original exception if declared on the target method
+					// (with callers expecting it). Always propagate it for Kotlin code
+					// since checked exceptions do not have to be explicitly declared there.
+					// Checked exception thrown in the interceptor but not declared on the
+					// target method signature -> apply an UndeclaredThrowableException,
+					// aligned with standard JDK dynamic proxy behavior.",4,condition,Always propagate checked exceptions from Kotlin code behind CGLIB proxies,"Closes gh-23844
",
949c3d450c35b676b82a4a56ada997cf9a552f1d,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java,Condition_Change,"-					!readMethodNames.contains((method.getName())) && isPlainAccessor(method)) {
+					!readMethodNames.contains(method.getName()) && isPlainAccessor(method)) {
-		if (method.getParameterCount() > 0 || method.getReturnType() == void.class ||
-				method.getDeclaringClass() == Object.class || Modifier.isStatic(method.getModifiers())) {
+		if (Modifier.isStatic(method.getModifiers()) ||
+				method.getDeclaringClass() == Object.class || method.getDeclaringClass() == Class.class ||
+				method.getParameterCount() > 0 || method.getReturnType() == void.class ||
+				ClassLoader.class.isAssignableFrom(method.getReturnType()) ||
+				ProtectionDomain.class.isAssignableFrom(method.getReturnType())) {",9,condition,Align plain accessor check,,
9528c3532d4bb7eb62514418e32c0c5687722564,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java,Condition_Change,"-		for (MediaType mediaType : compatibleMediaTypes) {
+		for (MediaType mediaType : result) {",2,iteration,Fix typo,,
963cc09c2e742321413b29d94f390ce3f60a4799,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java,Remove_Condition,"-		boolean p1 = Modifier.isPublic(e1.getModifiers());
-		boolean p2 = Modifier.isPublic(e2.getModifiers());
-		if (p1 != p2) {
-			return (p1 ? -1 : 1);
-		}
-		int c1pl = e1.getParameterCount();
-		int c2pl = e2.getParameterCount();
-		return Integer.compare(c2pl, c1pl);
+		int result = Boolean.compare(Modifier.isPublic(e2.getModifiers()), Modifier.isPublic(e1.getModifiers()));
+		return result != 0 ? result : Integer.compare(e2.getParameterCount(), e1.getParameterCount());",10,condition,Polish AutowireUtils.EXECUTABLE_COMPARATOR,"Closes gh-22283
",
964467d2691180a7f01de441a190fb998801df91,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java,Condition_Change,"-		DataSource dataSource = this.dataSource;
-		if (dataSource == null) {
+		if (this.dataSource == null) {
-					con = dataSource.getConnection();
+					con = this.dataSource.getConnection();
-								""DataSource returned null from getConnection(): "" + dataSource);
+								""DataSource returned null from getConnection(): "" + this.dataSource);
-					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval));
+					TimeUnit.SECONDS.sleep(this.interval);",9,condition,Polish DatabaseStartupValidator.afterPropertiesSet(),,
967a2ef2d20b7bc6f6bf79463ee15d7c3e2ec607,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,Condition_Change,"-			if (method.getReturnType() == Class.class) {
+			Class<?> returnType = method.getReturnType();
+			if (returnType == Class.class || returnType == Class[].class) {",3,condition,Validate Class attributes as well as Class array attributes,"Issue: SPR-16564
",
96bfc14dba7691f0f8cd893ac90b39e09ac8ae1a,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java,Condition_Change,"-			if (logger.isWarnEnabled()) {
+			// Any other than the original exception is unintended here,
+			// probably an accident (e.g. failed assertion or the like).
+			if (invocationEx != exception && logger.isWarnEnabled()) {
+			// Continue with default processing of the original exception...",2,condition,No warn logging for propagated original exception,"Issue: SPR-14907
",
9728b8cefd1adb2ad92772a3015150eac19a5d7f,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ReflectionUtils.java,Condition_Change,"-				if (!Modifier.isAbstract(ifcMethod.getModifiers())) {
+				if (ifcMethod.isDefault()) {",2,condition,Use Method#isDefault to find default methods in interfaces,"Closes gh-31197
",
976d32fc5943a11668b12e83621feaa197677ec4,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java,Condition_Change,"-				if (msg != null && msg.startsWith(event.getClass().getName())) {
+				if (msg == null || msg.startsWith(event.getClass().getName())) {",2,condition,SimpleApplicationEventMulticaster defensively swallows ClassCastException without message,"Issue: SPR-15145
",
977550f9560f6ce7670aae883261f412fbba02f4,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,Condition_Change,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-				Lifecycle bean = getBeanFactory().getBean(beanNameToCheck, Lifecycle.class);
-				if (bean != this) {
-					beans.put(beanNameToRegister, bean);
+				Object bean = getBeanFactory().getBean(beanNameToCheck);
+				if (bean != this && bean instanceof Lifecycle) {
+					beans.put(beanNameToRegister, (Lifecycle) bean);",6,condition,Properly handle null bean instance in getLifecycleBeans,"Issue: SPR-16343
",
980f971236eb496008a6f8f9c657180c0974d47b,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java,Condition_Change,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-		if (boundValue.getClass().isEnum()) {
+		if (boundValue != null && boundValue.getClass().isEnum()) {",2,condition,SelectedValueComparator defensively handles null values in exhaustiveCompare,"Issue: SPR-12001
",
9820e3341d8691eddcadc0adc33e2a90bde1b37e,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/aot/InstanceSupplierCodeGenerator.java,Condition_Change,"-		if (accessVisibility == Visibility.PUBLIC
-				|| accessVisibility == Visibility.PACKAGE_PRIVATE) {
+		if (accessVisibility != Visibility.PRIVATE) {
-		if (accessVisibility == Visibility.PUBLIC
-				|| accessVisibility == Visibility.PACKAGE_PRIVATE) {
+		if (accessVisibility != Visibility.PRIVATE) {",6,condition,Fix handling of protected visibility,"Previously, InstanceSupplierCodeGenerator used reflection if the target
visibility is either protected or private, and use direct access if the
target visibility is public or package private.

The previous arrangement already assumed that the code is generateed in
the same package as the target type. This means that protected can be
used as well so this commit only use reflection if the target visibility
is private.

Closes gh-29253
",
9877a9e6b7d299dc32a447340bbbd0ee6a1076b5,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java,Add_Condition,"-			allInterceptors.addAll(Arrays.asList(specificInterceptors));
+			if (specificInterceptors.length > 0) {
+				// specificInterceptors may equals PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS
+				allInterceptors.addAll(Arrays.asList(specificInterceptors));
+			}",4,condition,Reduce memory consumption,,
988aae4f2e41ee4d23e827c09095cde1fc07d201,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-				Method key = method;
-				if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) {
+				if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(method)) {
-					int index = this.fixedInterceptorMap.get(key);
+					int index = this.fixedInterceptorMap.get(method);",5,condition,Remove unnecessary variable declaration in ProxyCallbackFilter,Closes gh-24675,
990a9c74b93b3124dae554e6246b9b75504a5d23,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java,Condition_Change,"-			int slashIndex = requestUri.indexOf('/', semicolonIndex);
-			if (slashIndex >= 0) {
-				sb.delete(semicolonIndex, slashIndex);
+			int slashIndex = requestUri.indexOf('/', semicolonIndex + 1);
+			if (slashIndex == -1) {
+				slashIndex = sb.length();
+			sb.delete(semicolonIndex, slashIndex);",7,condition,Restore removal of trailing semicolon content,"See gh-26012
",
99399084a6b1960d152ee46aa59da5304a019439,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java,Condition_Change,"+import java.util.concurrent.Future;
- * Base class for classes that are setting up a
- * {@code java.util.concurrent.ExecutorService}
- * (typically a {@link java.util.concurrent.ThreadPoolExecutor}).
+ * Base class for setting up a {@link java.util.concurrent.ExecutorService}
+ * (typically a {@link java.util.concurrent.ThreadPoolExecutor} or
+ * {@link java.util.concurrent.ScheduledThreadPoolExecutor}).
+ * @see java.util.concurrent.ScheduledThreadPoolExecutor
-	 * @param task the task to cancel (potentially a {@link RunnableFuture})
+	 * @param task the task to cancel (typically a {@link RunnableFuture})
-		if (task instanceof RunnableFuture) {
-			((RunnableFuture<?>) task).cancel(true);
+		if (task instanceof Future) {
+			((Future<?>) task).cancel(true);",5,condition,Consistent Future check (even if typically encountering RunnableFuture),"Issue: SPR-16607
",
99d9dacc4f6a95220ebe90455dac6410f2ffa649,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java,Add_Condition,"+				else if (logger.isWarnEnabled()) {
+					logger.debug(""Terminating '"" + session + ""': "" + ex.getMessage());
+				}",3,condition,Log sendBufferSizeLimit exceeded at warn,"Closes gh-23534
",
99dc96b1a47394740b0db4bf15e67d9abd27a25a,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java,Condition_Change,"- * Implementation of {@link HttpMessageConverter} that can read and write {@link Resource Resources}
+ * Implementation of {@link HttpMessageConverter} that can read/write {@link Resource Resources}
- *
+
-	 * Create a new instance of the {@code ResourceHttpMessageConverter}
+	 * Create a new instance of the {@code ResourceHttpMessageConverter}.
-	 * read streaming, i.e. convert to {@code InputStreamResource}.
+	 * read streaming, i.e. convert to {@code InputStreamResource}
-		if (supportsReadStreaming && InputStreamResource.class == clazz) {
+		if (this.supportsReadStreaming && InputStreamResource.class == clazz) {",3,condition,Polishing,,
9a513cfdea9020c6ed2cf3f37711ed4e31d7c310,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-		else {
+		else if (void.class == returnType) {
+		else {
+			throw new IllegalArgumentException(
+					""Invalid return type for async method (only Future and void supported): "" + returnType);
+		}",6,condition,Enforce Future/void return declaration for async methods,"Closes gh-27734
",
9a618dc7a1527ac02fff9fd1385a277ebd3736ed,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java,Condition_Change,"-		if (!isAsyncDispatch(request) && !(response instanceof ContentCachingResponseWrapper)) {
+		if (!isAsyncDispatch(request) && !(response instanceof ConditionalContentCachingResponseWrapper)) {
-
-		ContentCachingResponseWrapper wrapper =
-				WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);
-
+		ConditionalContentCachingResponseWrapper wrapper =
+				WebUtils.getNativeResponse(response, ConditionalContentCachingResponseWrapper.class);
-",9,condition,Enforce ConditionalContentCachingResponseWrapper in ShallowEtagHeaderFilter,"Closes gh-24976
",
9a722b4558ca7985fb54a06ff76e3934abe898cb,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,Condition_Change,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-		if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) {
+		if (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER && typeName == null)) {",2,condition,Pass type name into PreparedStatement.setNull in case of Types.OTHER,"Issue: SPR-16669
",
9b3131ffbaa7a4bb312dfad66d685a348ee7e61f,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java,Condition_Change,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-		Assert.notEmpty(supportedMediaTypes, ""'supportedMediaTypes' must not be empty"");
+		Assert.notEmpty(supportedMediaTypes, ""MediaType List must not be empty"");
-	 * <p>This implementation delegates to {@link #getDefaultContentType(Object)} if a content
-	 * type was not provided, set if necessary the default character set, calls
+	 * <p>This implementation delegates to {@link #getDefaultContentType(Object)} if a
+	 * content type was not provided, set if necessary the default character set, calls
-		if (headers.getContentLength() < 0) {
+		if (headers.getContentLength() < 0 && !headers.containsKey(HttpHeaders.TRANSFER_ENCODING)) {",4,condition,Skip default Content-Length if Transfer-Encoding header has been set,"Issue: SPR-15212
",
9b615ed8c669c272530733b17d11b852fed8e3b9,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java,Add_Condition,"+import io.netty.channel.Channel;
-		SslHandler sslHandler = ((Connection) this.request).channel().pipeline().get(SslHandler.class);
+		Channel channel = ((Connection) this.request).channel();
+		SslHandler sslHandler = channel.pipeline().get(SslHandler.class);
+		if (sslHandler == null && channel.parent() != null) { // HTTP/2
+			sslHandler = channel.parent().pipeline().get(SslHandler.class);
+		}",7,condition,Fix missing sslInfo with Reactor Netty and http/2,"Prior to this commit, the `SslInfo` would be missing for WebFlux apps
when deployed on Reactor Netty with http/2.

This commit ensures that the request adapter checks the current channel
and the parent channel for the presence of the `SslHander`.
In the case of http/2, the `SslHander` is tied to the parent channel.

Fixes gh-25278
",
9b662e8244905da618b96c9b73fa11f59d1ab343,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/client/JdkClientHttpRequest.java,Condition_Change,"-	private final Duration timeOut;
+	private final Duration timeout;
-		this.timeOut = readTimeout;
+		this.timeout = readTimeout;
-		if (this.timeOut != null) {
-			builder.timeout(this.timeOut);
+		if (this.timeout != null) {
+			builder.timeout(this.timeout);",8,condition,Typo,,
9b7a492bc95c8c1f3e3abfe055defa3722a0aa45,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java,Condition_Change,"-		if (ClassUtils.isPresent(""rx.Observable"", classLoader)) {
+		if (ClassUtils.isPresent(""rx.Observable"", classLoader) &&
+				ClassUtils.isPresent(""rx.RxReactiveStreams"", classLoader)) {",3,condition,Test RxReactiveStreams presence in ReactiveAdapterRegistry,"Issue: SPR-17000
",
9b85a246d83dd9386889c0edc47dfeffbbc8b6f8,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java,Condition_Change,"-		if (this.scheduledExecutor.isTerminated()) {
+		if (this.scheduledExecutor.isShutdown()) {",2,condition,SimpleAsyncTaskScheduler stops accepting new tasks when isShutdown,"This changes the criteria for simplified task rejection logging from
to be that the executor is in the shutdown phase, not fully terminated.

See gh-33334
Closes gh-33336
",
9cbac985fbe20df1b0cce399dd238183de9befbc,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/AntPathMatcher.java,Condition_Change,"-			if (cachePatterns == null && this.stringMatcherCache.size() == CACHE_TURNOFF_THRESHOLD) {
+			if (cachePatterns == null && this.stringMatcherCache.size() >= CACHE_TURNOFF_THRESHOLD) {",2,condition,Refined check for cache turnoff threshold,"Issue: SPR-10803
",
9ccbeec94748e825b438dce2acad7da44ed82b3d,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java,Add_Condition,"-		if (ex instanceof RuntimeException &&
-				ex.getCause() != null &&
-				ex.getMessage().startsWith(""Async resource cleanup failed"")) {
-			return ex.getCause();
+		if (ex instanceof RuntimeException && ex.getCause() != null) {
+			String msg = ex.getMessage();
+			if (msg != null && msg.startsWith(""Async resource cleanup failed"")) {
+				return ex.getCause();
+			}",9,condition,Ignore null message when introspecting resource cleanup failure,"This commit fixes a regression introduced in conjunction with gh-27572.

See gh-30597
Closes gh-30729
",
9dfa46f6902b7b134847ae20bc88b4a3968a99bb,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Remove_Condition,"-			// If the URI is for a ""resource"" in the GraalVM native image file system, we have to
-			// ensure that the root directory does not end in a slash while simultaneously ensuring
-			// that the root directory is not an empty string (since Path#resolve throws an
-			// ArrayIndexOutOfBoundsException in a native image if the initial Path is created
-			// from an empty string).
-			String scheme = rootDirUri.getScheme();
-			String path = rootDirUri.getPath();
-			if (""resource"".equals(scheme) && (path.length() > 1) && path.endsWith(""/"")) {
-				path = path.substring(0, path.length() - 1);
-				// Retain the fragment as well, since root folders in the native image
-				// file system are indexed via the fragment (e.g., resource:/#1).
-				rootDirUri = new URI(scheme, path, rootDirUri.getFragment());
-			}",6,condition,Remove GraalVM workaround in PathMatchingResourcePatternResolver,"Tested successfully using the following locally built GraalVM dev build.

OpenJDK Runtime Environment GraalVM 22.3.0-dev (build 17.0.5+5-jvmci-22.3-b07)

Closes gh-29214
",
9f2970bc5c06b443c12b7825a3180ef2fa292474,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java,Condition_Change,"+import org.hibernate.dialect.MySQLDialect;
-		else {  // Hibernate 6.2 aligned
+		else {  // Hibernate 6.2+ aligned
-				case MYSQL -> MySQL57Dialect.class;
+				case MYSQL -> MySQLDialect.class;",5,condition,Use non deprecated MySQL dialect for Hibernate 6+,"This commit fixes the Hibernate dialect lookup for MySQL as it was
previously using a deprecated dialect that has been removed in the most
recent Hibernate version.

Closes gh-31889
",
9fec516560741a01c9049b5526113f2a94c72387,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,Condition_Change,"+import org.springframework.core.NativeDetector;
-		if (ClassUtils.isPresent(""org.crac.Core"", getClass().getClassLoader())) {
+		if (!NativeDetector.inNativeImage() && ClassUtils.isPresent(""org.crac.Core"", getClass().getClassLoader())) {",3,condition,Skip CRaC support with native images,"Skip CRaC support with native images to avoid compiling related
infrastructure to the native image and to fix tests via
gh-30422.

See gh-30242
",
a02fd7c9953b8e7f629f4d3a66a450a13341576b,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,Add_Condition,"-		ModelAndView mav = null;
+		ModelAndView mav;
+			else {
+				// No HttpSession available -> no mutex necessary
+				mav = invokeHandlerMethod(request, response, handlerMethod);
+			}
+			// No synchronization on session demanded at all...",5,condition,RequestMappingHandlerAdapter properly invokes handler method in case of no session as well,"Issue: SPR-13999
",
a1529d498e004b3e3b1aa123b57a07435e6d644d,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java,Condition_Change,"-	@SuppressWarnings(""unchecked"")
+			boolean alreadyReceivedReply = this.hasReceived;
-			else if (this.hasReceived) {
+			else if (alreadyReceivedReply) {",4,condition,Fix possible GenericMsgTemplate race condition,"Fix a potential race condition with GenericMessagingTemplate's inner
TemporaryReplyChannel class.

Prior to this commit the `hasReceived` member variable was read after
calling `replyLatch.countDown()`.

Issue: SPR-11206
",
a2af5a90dc14217b02246b2d733f9c4d25b17600,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/UrlFilenameViewController.java,Remove_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-		String viewName = this.viewNameCache.get(uri);
-		if (viewName == null) {
-			viewName = extractViewNameFromUrlPath(uri);
-			viewName = postProcessViewName(viewName);
-			this.viewNameCache.put(uri, viewName);
-		}
-		return viewName;
+		return this.viewNameCache.computeIfAbsent(uri, u -> postProcessViewName(extractViewNameFromUrlPath(u)));",8,condition,Simplify UrlFileNameViewController#getViewNameForUrlPath(),Closes gh-24419,
a2f5e1254e3ccf190ec559492a33ca87c47e54d3,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"+					int prefixIndex = filePath.indexOf(':');
+					if (prefixIndex == 1) {
+						// Possibly ""c:"" drive prefix on Windows, to be upper-cased for proper duplicate detection
+						filePath = filePath.substring(0, 1).toUpperCase() + filePath.substring(1);
+					}",4,condition,Drive letter case alignment in addClassPathManifestEntries,"Issue: SPR-16117
",
a434903a2a5483b4d0f7976cb37957e4771b1e88,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/handler/LoggingWebSocketHandlerDecorator.java,Remove_Condition,"-		if (logger.isDebugEnabled()) {
-			logger.debug(""Transport error for "" + session + "": "" + exception);
-		}
-		else if (logger.isTraceEnabled()) {
-			logger.debug(""Transport error for "" + session, exception);
+		if (logger.isErrorEnabled()) {
+			logger.error(""Transport error for "" + session, exception);",7,condition,Adjust log level in LoggingWebSocketHandlerDecorator,,
a4968b9015217ee8116bef7f77f5da4d776047fd,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Add_Condition,"+		BeanDefinition oldBeanDefinition;
+
-			BeanDefinition oldBeanDefinition = this.beanDefinitionMap.get(beanName);
+			oldBeanDefinition = this.beanDefinitionMap.get(beanName);
-		resetBeanDefinition(beanName);
+		if (oldBeanDefinition != null || containsSingleton(beanName)) {
+			resetBeanDefinition(beanName);
+		}
-		// Remove any assumptions about by-type mappings.
-		clearByTypeCache();
-",10,condition,DefaultListableBeanFactory's registerBeanDefinition only calls resetBeanDefinition in case of pre-existing bean definition or pre-existing singleton instance,"Issue: SPR-8318
",
a4c157fc09d3169f44901ee8969f3dacc73aaccb,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java,Add_Condition,"+		if (message.getNativeMessage() != null) {
+			return message.getNativeMessage();
+		}",3,condition,Check for native WebSocket message,"In addition to the changes in
313a7836b091d20dbb9763b3677d559fea32d13d to support passing on a
the underlying WebSocket message, this commits checks for its
availability.

Closes gh-25099
",
a537eb3a6a763eb1812afaa1ccfc56a3dadd6cb0,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,Condition_Change,"-		for (Annotation ann : this.getAnnotations()) {
+		for (Annotation ann : getAnnotations()) {
-			return ObjectUtils.nullSafeEquals(this.getElementTypeDescriptor(), other.getElementTypeDescriptor());
+			return ObjectUtils.nullSafeEquals(getElementTypeDescriptor(), other.getElementTypeDescriptor());
-			return ObjectUtils.nullSafeEquals(this.getMapKeyTypeDescriptor(), other.getMapKeyTypeDescriptor()) &&
-					ObjectUtils.nullSafeEquals(this.getMapValueTypeDescriptor(), other.getMapValueTypeDescriptor());
+			return ObjectUtils.nullSafeEquals(getMapKeyTypeDescriptor(), other.getMapKeyTypeDescriptor()) &&
+					ObjectUtils.nullSafeEquals(getMapValueTypeDescriptor(), other.getMapValueTypeDescriptor());",8,iteration,Polishing,,
a57d6ba5f3cf8afd6f333435d47035d5fe61fcf3,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,Add_Condition,"+		// Shortcut if there is no work to do
+		if (pathToUse.indexOf('.') == -1) {
+			return pathToUse;
+		}
+",4,condition,Optimize StringUtils.cleanPath,"Add an early exit to `StringUtils.cleanPath` to save array creating and
string concatenation. With a typical Spring application, the `cleanPath`
method can be called over 600 times, often with a path constructed by
a `ClassPathResource` that is likely to already be clean.

Closes gh-22568
",
a603779f33d47cd9ac87919ccc26f8c2d279fa40,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHeadersAdapter.java,Add_Condition,"+import java.util.ArrayList;
+ * @author Sam Brannen
-			this.headers.remove((String) key);
+			Collection<String> removed = this.headers.remove((String) key);
+			if (removed != null) {
+				return new ArrayList<>(removed);
+			}",6,condition,Return previous value in UndertowHeadersAdapter's remove() method,"Prior to this commit, UndertowHeadersAdapter's remove() method violated
the java.util.Map contract by always returning null.

This commit fixes this by returning the previous list stored under the
specified key, and otherwise returning null if no previous value was
present.

Closes gh-27592
",
a6b0b6e27945dcf3c84f2c8ae49969470a1c8c76,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java,Remove_Condition,"+import org.springframework.util.CollectionUtils;
- * A {@code MessageHeaderAccessor} to use when creating a {@code Message} from a
- * decoded STOMP frame, or when encoding a {@code Message} to a STOMP frame.
+ * A {@code MessageHeaderAccessor} to use when creating a {@code Message} from
+ * a decoded STOMP frame, or when encoding a {@code Message} to a STOMP frame.
- * <p>When created from STOMP frame content, the actual STOMP headers are stored
- * in the native header sub-map managed by the parent class
+ * <p>When created from STOMP frame content, the actual STOMP headers are
+ * stored in the native header sub-map managed by the parent class
- * while the parent class
- * {@link org.springframework.messaging.simp.SimpMessageHeaderAccessor} manages
- * common processing headers some of which are based on STOMP headers (e.g.
- * destination, content-type, etc).
+ * while the parent class {@link SimpMessageHeaderAccessor} manages common
+ * processing headers some of which are based on STOMP headers
+ * (e.g. destination, content-type, etc).
-		if (nativeHeaders.containsKey(STOMP_CONTENT_LENGTH_HEADER)) {
-			List<String> values = nativeHeaders.get(STOMP_CONTENT_LENGTH_HEADER);
-			String value = (values != null ? values.get(0) : null);
-			return Integer.valueOf(value);
-		}
-		return null;
+		List<String> values = nativeHeaders.get(STOMP_CONTENT_LENGTH_HEADER);
+		return (!CollectionUtils.isEmpty(values) ? Integer.valueOf(values.get(0)) : null);",9,condition,Efficient STOMP content-length header check,"Issue: SPR-14747
",
a6ff95a69c765b029ce0dca960345cc4360f5a58,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java,Add_Condition,"+		if (attribute == null) {
+			return ResolvableType.NONE;
+		}
-		return ResolvableType.NONE;
+		throw new IllegalArgumentException(""Invalid value type for attribute '"" +
+				FactoryBean.OBJECT_TYPE_ATTRIBUTE + ""': "" + attribute.getClass().getName());",6,condition,Restore restrictive getTypeForFactoryBeanFromAttributes check,"See gh-29799
See gh-30987
",
a711ed59f614e27471bab1e8b518fe165dbf5a4e,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java,Add_Condition,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
+import org.hibernate.cfg.Environment;
+import org.springframework.core.NativeDetector;
+ * @author Sebastien Deleuze
+	static {
+		if (NativeDetector.inNativeImage()) {
+			System.setProperty(Environment.BYTECODE_PROVIDER, Environment.BYTECODE_PROVIDER_NAME_NONE);
+		}
+	}
+",8,condition,Set hibernate.bytecode.provider to none on native image,"Closes gh-29140
",
a7789db0673f6997233a6af361b23d14bf54eea0,spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java,Condition_Change,"-			if (this.streamDriver instanceof StaxDriver) {
-				writer = ((StaxDriver) this.streamDriver).createStaxWriter(streamWriter);
+			if (this.streamDriver instanceof StaxDriver staxDriver) {
+				writer = staxDriver.createStaxWriter(streamWriter);",4,condition,Polishing,,
a7fe6b8f5c74dd6ea0e531b3ba1e90a455ee15dd,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/ResponseCookie.java,Condition_Change,"-				if (lenient) {
+				if (lenient && !StringUtils.isEmpty(domain)) {",2,condition,Avoid NPE in ResponseCookie on null domain,"See gh-24663
",
a832c98cedc56690ad606b53f497814370792d12,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java,Add_Condition,"+		if (SAFE_METHODS.contains(getRequest().getMethod())) {
+			return false;
+		}
-		if (SAFE_METHODS.contains(getRequest().getMethod()) || !ifMatchHeaders.hasMoreElements()) {
+		if (!ifMatchHeaders.hasMoreElements()) {",5,condition,Polish contribution,"See gh-29460
",
a8b7a5e037e6d2452a81b3050923096e2be51f75,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java,Add_Condition,"-			ClientRequest.Builder requestBuilder = this.inserter != null ?
-					initRequestBuilder().body(this.inserter) :
-					initRequestBuilder();
+			ClientRequest.Builder requestBuilder = initRequestBuilder();
+			if (this.inserter != null) {
+				builder.body(this.inserter);
+			}",7,condition,Refine initRequestBuilder in DefaultWebClient,"Closes gh-30254
",
aa49949d7ad09944db4284b957d754e8189ecc74,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java,Condition_Change,"+import org.springframework.util.ClassUtils;
-					if (beanInstance != null && !beanMethod.getReturnType().isInstance(beanInstance)) {
+					if (beanInstance != null && !ClassUtils.isAssignableValue(beanMethod.getReturnType(), beanInstance)) {",3,condition,Bean type mismatch check accepts assignable values according to ClassUtils,"Issue: SPR-12905
",
aa4e56b251521610999d72fb8c962575bb8bc27a,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,Condition_Change,"+	private final SourceClass objectSourceClass = new SourceClass(Object.class);
+
-		if (classType == null) {
-			return new SourceClass(Object.class);
+		if (classType == null || classType.getName().startsWith(""java.lang.annotation"")) {
+			return this.objectSourceClass;
-		if (className == null) {
-			return new SourceClass(Object.class);
+		if (className == null || className.startsWith(""java.lang.annotation"")) {
+			return this.objectSourceClass;",10,condition,Optimize @Configuration class parsing a little,"Update `ConfigurationClassParser` to skip `java.lang.annotation` types
which were often processed but would never provide useful results. Also
use a single shared immutable `SourceClass` instance to represent
`Object.class`.

Closes gh-22563
",
aa4f09d080049d808abffff007457d83a9a61987,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/DataBinder.java,Condition_Change,"+import java.util.Collection;
-				if (value == null && !BeanUtils.isSimpleValueType(param.nestedIfOptional().getNestedParameterType())) {
+				if (value == null && shouldCreateObject(param)) {
+	private static boolean shouldCreateObject(MethodParameter param) {
+		Class<?> type = param.nestedIfOptional().getNestedParameterType();
+		return !(BeanUtils.isSimpleValueType(type) ||
+				Collection.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type) || type.isArray());
+	}
+",9,condition,Refine decision to create object for constructor injection,"Closes gh-31488
",
ab48b88f919f2c9f8ab4880be5d82b0d55052779,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationBeanRegistrationAotProcessor.java,Add_Condition,"+				else if (ex instanceof TypeNotPresentException) {
+					logger.debug(""Skipping validation constraint hint inference for bean "" +
+							registeredBean.getBeanName() + "" due to a TypeNotPresentException at validator level: "" + ex.getMessage());
+				}
-					logger.error(""Skipping validation constraint hint inference for bean "" +
+					logger.warn(""Skipping validation constraint hint inference for bean "" +",6,condition,Refine BeanValidationBeanRegistrationAotProcessor logging,"This commit prints a log message at debug level without
a stacktrace for TypeNotPresentException and uses
warn level instead of error level for other exceptions
since the processing of such bean will just be skipped.

Closes gh-31147
",
ab5aea5a1346cf489e8c727c3d4ee563352b3787,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java,Condition_Change,"-	/** Java 8's java.util.Optional.empty() */
-	private static Object javaUtilOptionalEmpty = null;
-
+
+	/** Java 8's java.util.Optional.empty() */
+	private static Object javaUtilOptionalEmpty = null;
+
-		} catch (Exception ex) {
+		}
+		catch (Exception ex) {
-		if (targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {
+		if (javaUtilOptionalEmpty != null && targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {",10,condition,Defensively check javaUtilOptionalEmpty,"Issue: SPR-11888
",
abb8a93e2fa3e91286d72518dbb5f88c219834ef,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java,Condition_Change,"-	private String subscriptionDestinationPrefix = ""/user/queue/"";
-
-		this.subscriptionDestinationPrefix = this.destinationPrefix + ""queue/"";
-	/**
-	 * Return the prefix used to identify user destinations for (un)subscribe messages.
-	 * <p>By default ""/user/queue/"".
-	 */
-	public String getSubscriptionDestinationPrefix() {
-		return this.subscriptionDestinationPrefix;
-	}
-			if (!checkDestination(destination, this.subscriptionDestinationPrefix)) {
+			if (!checkDestination(destination, this.destinationPrefix)) {",9,condition,Drop separate user dest property for subscriptions,"Before this change DefaultUserDestinationResolver provided a separate
destination prefix property for identifying ""user"" destinations in
subscription requests as opposed to in sent messages. Such a separate
property should not be needed.

Issue: SPR-11263
",
abcfffdde9aa833c1ce493525e9d2b9e4f15c46c,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-		if (jaxb2Present && !jackson2Present) {
+		if (jaxb2Present && !jackson2XmlPresent) {",2,condition,Allow JAXB to be registered next to plain Jackson,"Issue: SPR-14336
",
ac11acb532803ad557c2739549b9ac5e00695f12,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java,Add_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+ * @author Sam Brannen
+		// Nothing to sort?
+		if (postProcessors.size() <= 1) {
+			return;
+		}",3,condition,Optimize sorting in PostProcessorRegistrationDelegate,"Closes gh-24776
",
ac4525ddf8b280759c0d3ba63d3569dda64a2e3a,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
+		else if (""MariaDB"".equals(source)) {
+			name = ""MySQL"";
+		}",3,condition,Detect MariaDB as MySQL (for mariadb-java-client 2.4+ compatibility),"Closes gh-22344
",
ac9ca412c8ea974a83015cc4dff19fe43fa51c58,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/UrlResource.java,Add_Condition,"+import org.springframework.util.Base64Utils;
+ * @author Denis Kostin
+
+		if (this.url.getUserInfo() != null) {
+			String basicAuth = ""Basic "" + Base64Utils.encodeToString(url.getUserInfo().getBytes());
+			con.setRequestProperty(""Authorization"", basicAuth);
+		}",6,condition,Add Basic Authorization for UrlResource,"See gh-1822
",
ad6d183a0614adaa0bb1493a9500a4a9b412c1e2,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java,Remove_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-		else if (sourceElementType.getType().isAssignableFrom(targetElementType.getType())) {
+		if (sourceElementType.getType().isAssignableFrom(targetElementType.getType())) {
-		else {
-			// no
-			return false;
-		}
+		// no
+		return false;",6,condition,Remove unneeded conditional logic,"Update `ConversionUtils` to remove conditional logic that isn't
necessary.

Issue: SPR-16968
",
ae43b17fa0f7c6303a53a97803a8a64ce3d42b01,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/JsonViewResponseBodyAdvice.java,Add_Condition,"+
-import org.springframework.util.Assert;
- * {@code @RequestMapping} or {@code @ExceptionHandler} method. The serialization
- * view specified in the annotation will be passed in to the
- * {@code MappingJackson2HttpMessageConverter} which will then use it to
+ * {@code @RequestMapping} or {@code @ExceptionHandler} method.
+ *
+ * <p>The serialization view specified in the annotation will be passed in to
+ * the {@code MappingJackson2HttpMessageConverter} which will then use it to
+ * <p>Note that despite {@code @JsonView} allowing for more than one class to
+ * be specified, the use for a response body advice is only supported with
+ * exactly one class argument. Consider the use of a composite interface.
+ *
-		Assert.isTrue(annotation.value().length != 0, ""No view class in JsonView annotation on "" + returnType);
-		bodyContainer.setSerializationView(annotation.value()[0]);
+		Class<?>[] classes = annotation.value();
+		if (classes.length != 1) {
+			throw new IllegalArgumentException(
+					""@JsonView only supported for response body advice with exactly 1 class argument: "" + returnType);
+		}
+		bodyContainer.setSerializationView(classes[0]);",10,condition,JsonViewResponseBodyAdvice throws IllegalArgumentException in case of >1 view class specified,"Issue: SPR-12270
",
aeb77cf4e1506745db53b4514479368387e72786,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Add_Condition,"-						// Another thread is busy in a singleton factory callback, potentially blocked.
-						// Fallback as of 6.2: process given singleton bean outside of singleton lock.
-						// Thread-safe exposure is still guaranteed, there is just a risk of collisions
-						// when triggering creation of other beans as dependencies of the current bean.
-						if (threadWithLock != null && logger.isInfoEnabled()) {
-							logger.info(""Creating singleton bean '"" + beanName + ""' in thread \"""" +
-									Thread.currentThread().getName() + ""\"" while thread \"""" + threadWithLock.getName() +
-									""\"" holds singleton lock for other beans "" + this.singletonsCurrentlyInCreation);
+						if (threadWithLock != null) {
+							// Another thread is busy in a singleton factory callback, potentially blocked.
+							// Fallback as of 6.2: process given singleton bean outside of singleton lock.
+							// Thread-safe exposure is still guaranteed, there is just a risk of collisions
+							// when triggering creation of other beans as dependencies of the current bean.
+							if (logger.isInfoEnabled()) {
+								logger.info(""Creating singleton bean '"" + beanName + ""' in thread \"""" +
+										Thread.currentThread().getName() + ""\"" while thread \"""" + threadWithLock.getName() +
+										""\"" holds singleton lock for other beans "" + this.singletonsCurrentlyInCreation);
+							}",10,condition,Restore correct threadWithLock check without isInfoEnabled(),"See gh-23501
",
af03fa765785973944bed689250b13c5ea9ff6f7,spring-projects/spring-framework,spring-context-indexer/src/main/java/org/springframework/context/index/processor/StandardStereotypesProvider.java,Condition_Change,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
- * {@code jakarta.*} annotation <i>present</i> on a class or interface.
+ * {@code jakarta.*} or {@code javax.*} annotation <i>present</i> on a class or
+ * interface.
-			if (type.startsWith(""jakarta."")) {
+			if (type.startsWith(""jakarta."") || type.startsWith(""javax."")) {",2,condition,Reinstate support for javax.* annotations in component indexer,"- for consistency with the changes made in e1826d2322

See gh-31090
",
af13580fd52be266df4e10b058c134bf05373d9f,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java,Remove_Condition,"-			for (int i = 0; i < this.argumentValues.length; i++) {
-				this.argumentValues[i] = null;
-			}",3,iteration,Remove unnecessary array initialization,,
b082f546ecf781af7d572c22dc52f0c49760452b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ReflectionUtils.java,Condition_Change,"-				List<Method> defaultMethods = findConcreteMethodsOnInterfaces(clazz);
+				List<Method> defaultMethods = findDefaultMethodsOnInterfaces(clazz);
-	private static List<Method> findConcreteMethodsOnInterfaces(Class<?> clazz) {
+	private static List<Method> findDefaultMethodsOnInterfaces(Class<?> clazz) {
-			for (Method ifcMethod : ifc.getMethods()) {
-				if (ifcMethod.isDefault()) {
+			for (Method method : ifc.getMethods()) {
+				if (method.isDefault()) {
-					result.add(ifcMethod);
+					result.add(method);",10,"condition, iteration",Polishing,,
b0d273e047871a50709535a8af8823a2b892a9ad,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/support/BitsCronField.java,Condition_Change,"-		if (value.indexOf('?') != -1) {
+		if (value.equals(""?"")) {",2,condition,Polishing,,
b0e6091cadeaf29a95ab7d85eebd3c46671b6ac6,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java,Add_Condition,"-			logger.error(""No session for "" + message);
+			if (logger.isDebugEnabled()) {
+				// The broker may not have removed the session yet
+				logger.debug(""No session for "" + message);
+			}",4,condition,"Lower ""no session"" message log level in SubProtocolWSH","Issue: SPR-12247
",
b121c0e2eac898d9762523af01895ca18219126d,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+import javax.servlet.ServletInputStream;
+			ServletInputStream inputStream = ((ServletRequest) getNativeRequest()).getInputStream();
+			if (!(inputStream instanceof CoyoteInputStream)) {
+				// It's possible InputStream can be wrapped, preventing use of CoyoteInputStream
+				return super.readFromInputStream();
+			}
-				ServletRequest request = getNativeRequest();
-				int read = ((CoyoteInputStream) request.getInputStream()).read(byteBuffer);
+				int read = ((CoyoteInputStream) inputStream).read(byteBuffer);",8,condition,Avoid ClassCastException in TomcatHttpHandlerAdapter,"Closes gh-24707
",
b1231de062f58571702e77ad9a3896fdbad092ef,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-	private static int getPropertyNameKeyEnd(String propertyName, int startIndex) {
+	private int getPropertyNameKeyEnd(String propertyName, int startIndex) {
-					// The property name contains opening prefix(es)
+					// The property name contains opening prefix(es)...
-						// No unclosed prefix(es) in the property name (left), this is the suffix we are looking for
+						// No unclosed prefix(es) in the property name (left) ->
+						// this is the suffix we are looking for.
-					} else {
-						// This suffix does not close the initial prefix, but one that occurred within the property name
+					}
+					else {
+						// This suffix does not close the initial prefix but rather
+						// just one that occurred within the property name.
+",6,condition,Fix formatting,"See gh-21855
",
b13f86cf461feaa32f5298a0f12f17e79d7a2a32,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/util/RfcUriParser.java,Remove_Condition,"+					case '.':
+						parser.index(--i);
+						parser.advanceTo(PATH);
+						break;
-						if (c == '.') {
-							parser.index(--i);
-						}",7,condition,Fix failing tests in spring-test after recent changes,"See gh-33639
",
b158110801db32b50243be538165274551a49512,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java,Condition_Change,"-				if (body != null) {
-					throw new HttpMediaTypeNotAcceptableException(producibleTypes);
-				}
+				if (body != null) {
+					throw new HttpMediaTypeNotAcceptableException(producibleTypes);
+				}",6,condition,Fix debug log for no matching acceptableTypes,,
b23cc01cb7981bdaf7274483a69673c519123444,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java,Remove_Condition,"-				Method[] destroyMethods = new Method[destroyMethodNames.length];
+				List<Method> destroyMethods = new ArrayList<>(destroyMethodNames.length);
+						destroyMethods.add(destroyMethod);
-					destroyMethods[i] = destroyMethod;
-				this.destroyMethods = destroyMethods;
+				this.destroyMethods = destroyMethods.toArray(Method[]::new);
-				if (destroyMethod != null) {
-					invokeCustomDestroyMethod(destroyMethod);
-				}
+				invokeCustomDestroyMethod(destroyMethod);",10,condition,"Revise ""Ignore nonexistent default-destroy-method in XML config""","This commit revises the fix in c811428512ffd04d41e558dbbc672382079ced2c.

Closes gh-30301
",
b27735d4a6ab6f0f17174e2cd1ffae1a41dbc219,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java,Condition_Change,"+					// For Kotlin reflection
+					typeHint.withMembers(MemberCategory.INTROSPECT_DECLARED_METHODS);
-					if (methodName.startsWith(""component"") || methodName.equals(""copy"")) {
+					if (methodName.startsWith(""component"") || methodName.equals(""copy"") || methodName.equals(""copy$default"")) {",3,condition,Refine BindingReflectionHintsRegistrar Kotlin support,"Closes gh-29593
",
b35d44bd4c4f2f12d6c337bc96f53f246df3c4c0,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java,Condition_Change,"-			if (bytesRead < buffer.length) {
+			if (bytesRead == -1) {",2,condition,Fix inputstream reading for HTTP range requests,"Prior to this commit, range requests would be served by
ResourceHttpRequestHandler by partially reading the inputstream of
static resources. In case of resources contained in ZIP/JAR containers,
InputStreams may not fill the entire read buffer when calling
`inputStream.read(byte[])`. This was the case when using Spring Boot's
ZipInflaterInputStream - this would then not read the entire file
content and would close the response without writing the expected body
length indicated in the ""Content-Length"" header.

This commit makes sure that the whole resource is read.

Issue: SPR-13661
",
b6144e5682c966759e7fd16dbac4d4948d332161,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java,Add_Condition,"+import org.springframework.util.StringUtils;
-		close(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));
+		if(!StringUtils.hasText(ex.getMessage())) {
+			close(CloseStatus.SERVER_ERROR);
+		}
+		else {
+			close(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));
+		}",8,condition,Improve setting of WebSocket error status,"See gh-28836
",
b65984a0782c96e1799475ebaed45b5ed4a908c6,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java,Condition_Change,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-		for (ProtocolResolver protocolResolver : this.protocolResolvers) {
+		for (ProtocolResolver protocolResolver : getProtocolResolvers()) {",2,iteration,Consume getProtocolResolvers() rather than internal list,"This commit makes sure that DefaultResourceLoader consistently use
getProtocolResolvers() to access additional protocol resolvers. This
allows subclasses to define how the list is provided.

Closes gh-23564
",
b6e252495a70d716179db1e91397190ac2a0aee9,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java,Condition_Change,"-						if (!subs.containsKey(sessionId) || !subs.get(sessionId).contains(subsId)) {
+						List<String> subsForSession = subs.get(sessionId);
+						if (subsForSession == null || !subsForSession.contains(subsId)) {",3,condition,Protect against NPE in DefaultSubscriptionRegistry,"Follow-up fix on the recent commit:
https://github.com/spring-projects/spring-framework/commit/44c31a

Issue: SPR-15543
",
b8e663c531a0e1e628095cba37a74efaa40a1419,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-	private final Set<Object> earlyProxyReferences = Collections.newSetFromMap(new ConcurrentHashMap<>(16));
+	private final Map<Object, Object> earlyProxyReferences = new ConcurrentHashMap<>(16);
-		if (!this.earlyProxyReferences.contains(cacheKey)) {
-			this.earlyProxyReferences.add(cacheKey);
-		}
+		this.earlyProxyReferences.put(cacheKey, bean);
-			if (!this.earlyProxyReferences.contains(cacheKey)) {
+			if (this.earlyProxyReferences.remove(cacheKey) != bean) {",8,condition,AbstractAutoProxyCreator ignores unused early proxy references,"Closes gh-22370
",
b92515bdee5a3f153183e2f86ee5e378c28b0d1e,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java,Condition_Change,"-			if (this.targetName == null) {
+			if (this.targetName == null && logger.isInfoEnabled()) {",2,condition,Add logger.isInfoEnabled check before logger.info,Closes gh-24667,
b95362a3fd170a5ee16b90b74d4939efde06db02,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Condition_Change,"- * Copyright 2002-2021 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
-			if (StringUtils.startsWithIgnoreCase(request.getContentType(), ""multipart/"")) {
+			String contentType = request.getContentType();
+			if (StringUtils.startsWithIgnoreCase(contentType, ""multipart/"")) {
-				params = (request.getParameterMap().isEmpty() ? """" : ""masked"");
+				// Avoid request body parsing for form data
+				params = (StringUtils.startsWithIgnoreCase(contentType, ""application/x-www-form-urlencoded"") ||
+						!request.getParameterMap().isEmpty() ? ""masked"" : """");",6,condition,Avoid request params access for form data in logRequest,"Close gh-28587
",
baa7b1c6c84f64465cecdf6ad2e2bf90371cbd7b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/AntPathMatcher.java,Remove_Condition,"-				return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) :
-						!path.endsWith(this.pathSeparator));
+				return (pattern.endsWith(this.pathSeparator) == path.endsWith(this.pathSeparator));
-					if (skipped > 0) {
-						return true;
-					}
-					return (pattDir.length() > 0) && isWildcardChar(pattDir.charAt(0));
+					return (skipped > 0 || (pattDir.length() > 0 && isWildcardChar(pattDir.charAt(0))));",8,condition,Simplified match condition checks,"Issue: SPR-15477
",
bac5cd866e3ad685b84be0bcce2bdef573077242,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,Remove_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-				sessionAttrHandler = this.sessionAttributesHandlerCache.get(handlerType);
-				if (sessionAttrHandler == null) {
-					sessionAttrHandler = new SessionAttributesHandler(handlerType, this.sessionAttributeStore);
-					this.sessionAttributesHandlerCache.put(handlerType, sessionAttrHandler);
-				}
+				sessionAttrHandler = this.sessionAttributesHandlerCache.computeIfAbsent(handlerType, type -> new SessionAttributesHandler(type, this.sessionAttributeStore));",6,condition,Simplify getSessionAttributesHandler() method,,
bac68c8d3f9ca4caa70b54c14e0e9805f88f8d34,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java,Remove_Condition,"- *	// ...
- *	&#064;Override
- *	protected void customizeRegistration(ServletRegistration.Dynamic registration) {
- *
- *		// Optionally also set maxFileSize, maxRequestSize, fileSizeThreshold
- *		registration.setMultipartConfig(new MultipartConfigElement(""/tmp""));
- *	}
+ *	 // ...
+ *	 &#064;Override
+ *	 protected void customizeRegistration(ServletRegistration.Dynamic registration) {
+ *     // Optionally also set maxFileSize, maxRequestSize, fileSizeThreshold
+ *     registration.setMultipartConfig(new MultipartConfigElement(""/tmp""));
+ *   }
-		// Same check as in Commons FileUpload...
-		if (!""post"".equalsIgnoreCase(request.getMethod())) {
-			return false;
-		}
-		String contentType = request.getContentType();
-		return StringUtils.startsWithIgnoreCase(contentType, ""multipart/"");
+		return StringUtils.startsWithIgnoreCase(request.getContentType(), ""multipart/"");",6,condition,StandardServletMultipartResolver accepts any HTTP method for multipart,"Issue: SPR-16975
",
bb45fb4538d723ecdc136ceaaba032bcf8cdb42c,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java,Add_Condition,"+				if (!this.lastMessageSucceeded) {
+					// We failed more than once in a row or on startup - sleep before
+					// first recovery attempt.
+					sleepBeforeRecoveryAttempt();
+				}
+		/**
+		 * Apply the back off time once. In a regular scenario, the back off is only applied if we
+		 * failed to recover with the broker. This additional sleep period avoids a burst retry
+		 * scenario when the broker is actually up but something else if failing (i.e. listener
+		 * specific).
+		 */
+		private void sleepBeforeRecoveryAttempt() {
+			BackOffExecution execution = DefaultMessageListenerContainer.this.backOff.start();
+			applyBackOffTime(execution);
+		}
+",9,condition,Restore sleep interval between recovery attempt,"Commit 6a04831 introduced a regression that lead to burst recovery
attempts when the broker is up but the listener is failing for some
reason (the most obvious one being that the destination does not
exist).

Since the sleep period between recovery attempts strategy is more
complex, we can't just sleep for a period of time. But we can create
an execution and apply it once which should work just fine for most
use cases.

Issue: SPR-12183
",
bbc85ea466bda4539caf96990df37dfad5958751,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,Condition_Change,"-		if (getTransactionManager() == null && getBeanFactory() == null) {
+		if (getTransactionManager() == null && this.beanFactory == null) {
-					""Setting the property 'transactionManager' or running in a BeanFactory is required"");
+					""Set the 'transactionManager' property or make sure to run within a BeanFactory "" +
+					""containing a PlatformTransactionManager bean!"");",5,condition,Refined exception message,"Issue: SPR-14609
(cherry picked from commit ab68673)
",
bc1f19ce18e9ad35d8127048737d6e6e9c276eb3,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java,Add_Condition,"-		} catch (Exception ex) {
+		}
+		catch (Exception ex) {
-			else if (requiredType.equals(javaUtilOptionalEmpty.getClass())) {
-				convertedValue = javaUtilOptionalEmpty;
+			else {
+				// convertedValue == null
+				if (javaUtilOptionalEmpty != null && requiredType.equals(javaUtilOptionalEmpty.getClass())) {
+					convertedValue = javaUtilOptionalEmpty;
+				}",9,condition,Defensively check javaUtilOptionalEmpty,"Issue: SPR-11888
",
bc5246938d07820305167e581e7a8ece23ed265e,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
+import org.springframework.util.CollectionUtils;
-		if (logger.isWarnEnabled()) {
+		if (logger.isWarnEnabled() && CollectionUtils.isEmpty(this.locations)) {",3,condition,Fix ResourceHttpRequestHandler empty location log,"Fix ResourceHttpRequestHandler to only log warning when locations
is empty.

Issue: SPR-10780
",
bd8d71be0e6ff0a6cb5cded33b473c6ba8260e9d,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java,Condition_Change,"+		ResolvableType actualElementType;
+			actualElementType = elementType;
-			elementType = (bodyType.toClass() == Object.class && body != null ?
-					ResolvableType.forInstance(body) : bodyType);
+			actualElementType = body != null ? ResolvableType.forInstance(body) : bodyType;
+			elementType = (bodyType.toClass() == Object.class && body != null ? actualElementType : bodyType);
-				if (writer.canWrite(elementType, bestMediaType)) {
+				if (writer.canWrite(actualElementType, bestMediaType)) {",8,condition,canWrite uses actual return value type if known,"Closes gh-22803
",
bd8e682c51a6a383df559717d5352188032afb1b,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/BeanUtils.java,Remove_Condition,"-			Constructor<T> kotlinPrimaryConstructor = KotlinDelegate.findPrimaryConstructor(clazz);
-			if (kotlinPrimaryConstructor != null) {
-				return kotlinPrimaryConstructor;
-			}
+			return KotlinDelegate.findPrimaryConstructor(clazz);",5,condition,Simplify BeanUtils.findPrimaryConstructor(),Closes gh-26519,
be853d466b406b7f6a66420158b5eba1de2fe267,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,Add_Condition,"+		@Override
+		public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass) {
+			for (Annotation annotation : getAnnotations()) {
+				if (annotation.annotationType() == annotationClass) {
+					return true;
+				}
+			}
+			return false;
+		}
+",10,"condition, iteration",AnnotatedElementAdapter explicitly declares isAnnotationPresent method,"Issue: SPR-14872
(cherry picked from commit 17863df)
",
be85bd8e09293169342668f89540a9b668dc48b8,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/OpPlus.java,Condition_Change,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-	
+
-		if (this.exitTypeDescriptor == ""Ljava/lang/String"") {
+		if (""Ljava/lang/String"".equals(this.exitTypeDescriptor)) {
-					case 'F': 
+					case 'F':
-						break;				
+						break;",8,condition,Don't use `==` when comparing strings,"Fix a few places where `==` was accidentally used to compare
strings.

Issue: SPR-16968
",
c052a0259238ee577a00a55abeb771fb967de440,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,Add_Condition,"-			if (ex instanceof RuntimeException &&
-					ex.getCause() != null &&
-					ex.getMessage().startsWith(""Async resource cleanup failed"")) {
-				return ex.getCause();
+			if (ex instanceof RuntimeException && ex.getCause() != null) {
+				String msg = ex.getMessage();
+				if (msg != null && msg.startsWith(""Async resource cleanup failed"")) {
+					return ex.getCause();
+				}",9,condition,Ignore null message when introspecting resource cleanup failure,"Closes gh-30597
",
c0f4d78ef9b9e03836baa31ac3ada0b4c48197e7,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java,Remove_Condition,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-		Integer sqlType = this.sqlTypes.get(paramName);
-		if (sqlType != null) {
-			return sqlType;
-		}
-		return TYPE_UNKNOWN;
+		return this.sqlTypes.getOrDefault(paramName, TYPE_UNKNOWN);",6,condition,Use Map.getOrDefault in getSqlType implementation,"Issue: SPR-15238
",
c1437f9817d9c4ac2ca16eaa4440fc39acfa18ac,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,Add_Condition,"-import java.time.Duration;
-			long restartTime = System.nanoTime();
-			long timeTakenToRestart = Duration.ofNanos(System.nanoTime() - restartTime).toMillis();
-			long timeTakenToRestoreJvm = CRaCMXBean.getCRaCMXBean().getUptimeSinceRestore();
-			logger.info(""Spring-managed lifecycle restart completed in "" + timeTakenToRestart
-					+ "" ms (restored JVM running for "" + timeTakenToRestoreJvm + "" ms)"");
+			if (!checkpointOnRefresh) {
+				logger.info(""Spring-managed lifecycle restart completed (restored JVM running for "" +
+						CRaCMXBean.getCRaCMXBean().getUptimeSinceRestore() + "" ms)"");
+			}",10,condition,Refine CRaC restoration logs,"Closes gh-31462
",
c188f22378ffa060b1be98ffdf6776c3a35513ca,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java,Condition_Change,"- * <li>Collections (list and sets): the n<sup>th</sup> element</li>
+ * <li>Collections (lists and sets): the n<sup>th</sup> element</li>
-			if (targetDescriptor.getMapKeyTypeDescriptor() != null) {
-				key = state.convertValue(key, targetDescriptor.getMapKeyTypeDescriptor());
+			TypeDescriptor mapKeyTypeDescriptor = targetDescriptor.getMapKeyTypeDescriptor();
+			if (mapKeyTypeDescriptor != null) {
+				key = state.convertValue(key, mapKeyTypeDescriptor);",5,condition,Polishing,,
c2101cbcf49feeacb8f7796cdb69eaa0f9814fe6,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,Condition_Change,"-		if (StringUtils.hasLength(qualifier)) {
+		if (StringUtils.hasText(qualifier)) {
-		else if (this.transactionManagerBeanName != null) {
+		else if (StringUtils.hasText(this.transactionManagerBeanName)) {",4,condition,Require non-empty values for TxMgr qualifiers & bean names,,
c23fd784a0d91f5de1e6b5cab82e86b1746fc3b4,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java,Remove_Condition,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-	 * <p><b>NOTE:</b> Exception handling in {@code TaskDecorator} implementations
-	 * is limited to plain {@code Runnable} execution via {@code execute} calls.
-	 * In case of {@code #submit} calls, the exposed {@code Runnable} will be a
-	 * {@code FutureTask} which does not propagate any exceptions; you might
-	 * have to cast it and call {@code Future#get} to evaluate exceptions.
-	private TaskExecutorAdapter getAdaptedExecutor(Executor concurrentExecutor) {
-		if (managedExecutorServiceClass != null && managedExecutorServiceClass.isInstance(concurrentExecutor)) {
-			return new ManagedTaskExecutorAdapter(concurrentExecutor);
-		}
-		TaskExecutorAdapter adapter = new TaskExecutorAdapter(concurrentExecutor);
+	private TaskExecutorAdapter getAdaptedExecutor(Executor originalExecutor) {
+		TaskExecutorAdapter adapter =
+				(managedExecutorServiceClass != null && managedExecutorServiceClass.isInstance(originalExecutor) ?
+						new ManagedTaskExecutorAdapter(originalExecutor) : new TaskExecutorAdapter(originalExecutor));",9,condition,Consistently apply TaskDecorator to ManagedExecutorService as well,"Closes gh-32455
",
c24825ca195a4d4eeb642d603b1db62639cf0024,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Condition_Change,"-		return getSingleton(beanName, true);
+		return getSingleton(beanName, isSingletonCurrentlyInCreation(beanName));
-		if (singletonObject == null) {
+		if (singletonObject == null && allowEarlyReference) {
-				if (singletonObject == null && allowEarlyReference) {
+				if (singletonObject == null) {",6,condition,DefaultSingletonBeanRegistry avoids singletonObjects lock wherever possible for non-singleton factory performance,"Issue: SPR-9819
",
c28a0d562761f7f8f85e7637e40cacdad7fa2390,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java,Add_Condition,"+
+			Class<? extends Annotation> attributeBinderTypeClass = loadClass(""org.hibernate.annotations.AttributeBinderType"", classLoader);
+			if (attributeBinderTypeClass != null) {
+				ReflectionUtils.doWithFields(managedClass, field -> registerForReflection(reflection,
+						AnnotationUtils.findAnnotation(field, attributeBinderTypeClass), ""binder""));
+				ReflectionUtils.doWithMethods(managedClass, method -> registerForReflection(reflection,
+						AnnotationUtils.findAnnotation(method, attributeBinderTypeClass), ""binder""));
+			}",8,condition,Add missing hints for Hibernate `@TenantId`,"Closes gh-32967
",
c2f6a98c907c01596f3a082dd0bc3dcf65fcb927,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/HttpHeaders.java,Condition_Change,"-		if (filename != null) {
+		if (StringUtils.hasText(filename)) {
-		if (contentDisposition != null) {
+		if (StringUtils.hasText(contentDisposition)) {",4,condition,Lenient handling of empty Content-Disposition filename,"Closes gh-25769
",
c3dbaed4ced5dafe736dfe391807ac85bfe6858e,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,Condition_Change,"+				result = synthesizeAnnotation(result, method);
-		return synthesizeAnnotation(result, method);
+		return result;
-			if (result != null) {
+			if (result != null && synthesize) {
+				result = synthesizeAnnotation(result, clazz);
-		return (synthesize ? synthesizeAnnotation(result, clazz) : result);
+		return result;",8,condition,AnnotationUtils caches findAnnotation results in pre-synthesized form,"Issue: SPR-13621
",
c4e8ffece16db679ef4d92d97d7b3e8c748f0b5a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java,Condition_Change,"- * Copyright 2002-2021 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
-		// TODO Remove this conditional inclusion when upgrading to Kotlin 1.5, see https://youtrack.jetbrains.com/issue/KT-44594
-		if (KotlinDetector.isKotlinReflectPresent() && !NativeDetector.inNativeImage()) {
+		if (KotlinDetector.isKotlinReflectPresent()) {",2,condition,Remove outdated NativeDetector check for Kotlin reflection,"See gh-25179
",
c5590ae9e6a3d75feae96f3015a65462c67dbcf8,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java,Add_Condition,"-			catch (AbstractMethodError err) {
-				logger.debug(""JDBC driver does not implement JDBC 4.1 'getObject(int, Class)' method"", err);
-			}
-			catch (SQLFeatureNotSupportedException ex) {
+			catch (SQLFeatureNotSupportedException | AbstractMethodError ex) {
-				logger.debug(""JDBC driver has limited support for JDBC 4.1 'getObject(int, Class)' method"", ex);
+				if (logger.isDebugEnabled()) {
+					logger.debug(""JDBC driver has limited support for 'getObject(int, Class)' with column type: "" +
+							requiredType.getName(), ex);
+				}",10,condition,Log column type for limited support message in getResultSetValue,"Closes gh-32601
",
c56c3045364a93d135309536cc905e56a2eae38d,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/propertyeditors/PathEditor.java,Condition_Change,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-				if (uri.getScheme() != null) {
-					nioPathCandidate = false;
+				String scheme = uri.getScheme();
+				if (scheme != null) {
+					// No NIO candidate except for ""C:"" style drive letters
+					nioPathCandidate = (scheme.length() == 1);
-				throw new IllegalArgumentException(""Failed to retrieve file for "" + resource, ex);
+				throw new IllegalArgumentException(
+						""Could not retrieve file for "" + resource + "": "" + ex.getMessage());",8,condition,PathEditor considers single-letter URI scheme as NIO path candidate,"Closes gh-29881
",
c6c61d64853cbe908caba07c67e7453b45c01f97,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,Add_Condition,"+		else if (checkpointOnRefresh) {
+			throw new IllegalStateException(""Checkpoint on refresh requires a CRaC-enabled JVM and 'org.crac:crac' on the classpath"");
+		}",3,condition,"Refine ""checkpoint on refresh"" error handling","Closes gh-31096
",
c811428512ffd04d41e558dbbc672382079ced2c,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java,Add_Condition,"-				invokeCustomDestroyMethod(destroyMethod);
+				if (destroyMethod != null) {
+					invokeCustomDestroyMethod(destroyMethod);
+				}",4,condition,Ignore nonexistent default-destroy-method in XML config,"Prior to this commit, DisposableBeanAdapter attempted to invoke a
configured default-destroy-method on every bean, including beans that
do not declare the named destroy method, resulting in a
NullPointerException being thrown and logged at WARN level.

This commit addresses this by effectively ignoring any nonexistent
destroy method.

Closes gh-30301
",
c8c0737ce712569a7e03a97dfe7ef11cbbc33e39,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,Remove_Condition,"-		else {
-			this.applicationListeners.add(listener);
-		}
+		this.applicationListeners.add(listener);",4,condition,AbstractApplicationContext.getApplicationListeners() exposes all statically registered listeners,"Issue: SPR-17324
",
c94b6765766358a5816d0818a97e45feef1c8ea8,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/core/SpringNamingPolicy.java,Condition_Change,"-		else if (prefix.startsWith(""java"")) {
+		else if (prefix.startsWith(""java."") || prefix.startsWith(""javax."")) {",2,condition,"Specifically handle ""java.""/""javax."" packages in SpringNamingPolicy","Closes gh-27622
",
c95dfca726aa72ef0c7dc64526b5808f28e258f1,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java,Add_Condition,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
+					if (logger.isInfoEnabled()) {
+						logger.info(""Skipped XML bean definition file due to specified profiles ["" + profileSpec +
+								""] not matching: "" + getReaderContext().getResource());
+					}",4,condition,Log profile-based exclusion of XML bean definition file,"Issue: SPR-10202
",
ca2b3c170c439b775a40fd36bd6b71e2adfe3cf3,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java,Add_Condition,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
+			Class<?> enclosingClass = type.getEnclosingClass();
+			if (enclosingClass != null) {
+				runtimeHints.reflection().registerType(enclosingClass);
+			}",4,condition,Add Kotlin hints for enclosing class,"This is needed by Kotlin reflection in order to be able to list
class members on native.

Closes gh-32472
",
ca7634dfe8389e2be85874628e12fac6dd781466,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Add_Condition,"-					ann = AnnotationUtils.findAnnotation(abd.getBeanClass(), annotationType);
+					Class<?> beanClass = abd.getBeanClass();
+					if (beanClass != beanType) {
+						ann = AnnotationUtils.findAnnotation(beanClass, annotationType);
+					}",5,condition,Avoid duplicate class introspection during findAnnotationOnBean,"Closes gh-22318
",
cac76192e28ccf18faa8d19147011cbde040e3b4,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java,Add_Condition,"- * <p>As of Spring 4.0, this class supports Bean Validation 1.0 and 1.1, with special support
- * for Hibernate Validator 4.x and 5.0 (see {@link #setValidationMessageSource}).
+ * <p><b>As of Spring 4.0, this class supports Bean Validation 1.0 and 1.1, with special support
+ * for Hibernate Validator 4.x and 5.0</b> (see {@link #setValidationMessageSource}).
+		// Allow for custom post-processing before we actually build the ValidatorFactory.
+		postProcessConfiguration(configuration);
+
+	/**
+	 * Post-process the given Bean Validation configuration,
+	 * adding to or overriding any of its settings.
+	 * <p>Invoked right before building the {@link ValidatorFactory}.
+	 * @param configuration the Configuration object, pre-populated with
+	 * settings driven by LocalValidatorFactoryBean's properties
+	 */
+	protected void postProcessConfiguration(Configuration configuration) {
+	}
+
-		ReflectionUtils.invokeMethod(closeMethod, this.validatorFactory);
+		if (closeMethod != null) {
+			ReflectionUtils.invokeMethod(closeMethod, this.validatorFactory);
+		}",10,condition,"Added ""postProcessConfiguration"" template method to LocalValidatorFactoryBean",,
cb095132b14eb61e1dfed8079a459633ea18a256,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/ClassReader.java,Condition_Change,"-            if (mw.cw.cr == this && signature == mw.signature) {
+            if (mw.cw.cr == this &&
+					(signature != null ? signature.equals(mw.signature) : mw.signature == null)) {",3,condition,Defensive String equals comparison in ClassReader,"Issue: SPR-12382
",
ccec75c98daa681727f510fa8e69d9651615d59c,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CollectionFactory.java,Condition_Change,"-		else if (SortedSet.class == collectionType || NavigableSet.class == collectionType) {
+		else if (TreeSet.class == collectionType || SortedSet.class == collectionType || NavigableSet.class == collectionType) {",2,condition,Add missing TreeSet to CollectionFactory.createCollection(),"See gh-28949
",
cd4ce8727e97366cd50281f9ad2dd22922578ac1,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java,Condition_Change,"-
-
-			interceptors.add(new OriginHandshakeInterceptor(allowedOrigins));
+			RootBeanDefinition originHandshakeInterceptor = new RootBeanDefinition(OriginHandshakeInterceptor.class);
+			originHandshakeInterceptor.getPropertyValues().add(""allowedOrigins"", allowedOrigins);
+			interceptors.add(originHandshakeInterceptor);
-			for (Element beanElement : DomUtils.getChildElementsByTagName(parentElement, new String[] {""bean"", ""ref""})) {
+			for (Element beanElement : DomUtils.getChildElementsByTagName(parentElement, ""bean"", ""ref"")) {",8,iteration,WebSocket namespace consistently applies resolvable allowed-origins value,"Issue: SPR-13760
",
cdf6eb95ab1ec041b1512185d2e00b09f433e866,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,Add_Condition,"-				logger.warn(""Exception encountered during context initialization - cancelling refresh attempt"", ex);
+				if (logger.isWarnEnabled()) {
+					logger.warn(""Exception encountered during context initialization - "" +
+							""cancelling refresh attempt: "" + ex);
+				}",5,condition,Reduced warn log entry without stacktrace for startup exceptions,"Issue: SPR-13663
",
cdfcc23b6f1424f04e8273b3aa69fe185fb73dde,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java,Condition_Change,"-			if (logger.isErrorEnabled()) {
-				logger.error(""Failed to invoke @ExceptionHandler method: "" + exceptionHandlerMethod, invocationEx);
+			if (logger.isDebugEnabled()) {
+				logger.debug(""Failed to invoke @ExceptionHandler method: "" + exceptionHandlerMethod, invocationEx);",4,condition,Reduce log level for @ExceptionHandler failure,"Issue: SPR-13932
",
ce1954da1edd64f1280ead0435c7b3923e33f6da,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,Condition_Change,"-			if (!this.knownSuperclasses.containsKey(superclass)) {
+			if (!superclass.startsWith(""java"") && !this.knownSuperclasses.containsKey(superclass)) {",2,condition,Configuration class processing explicitly skips java.* classes since we'll never find @Bean annotations there anyway,"Issue: SPR-11718
(cherry picked from commit c8ea80d)
",
ce43d1b1da4361b6dbbbd9153a86602e891f5155,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java,Condition_Change,"-		if (!((bean instanceof Aware) && (bean instanceof EnvironmentAware || bean instanceof EmbeddedValueResolverAware ||
-				bean instanceof ResourceLoaderAware || bean instanceof ApplicationEventPublisherAware ||
-				bean instanceof MessageSourceAware || bean instanceof ApplicationStartupAware ||
-				bean instanceof ApplicationContextAware))) {
-			return bean;
+		if (bean instanceof Aware) {
+			invokeAwareInterfaces(bean);
-
-		invokeAwareInterfaces(bean);",9,condition,Simplify logic in ApplicationContextAwareProcessor.postProcessBeforeInitialization(),,
ce49354400936778b7a7a1e6ec1a373d2a1fa5cb,spring-projects/spring-framework,spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java,Add_Condition,"+import java.nio.charset.StandardCharsets;
+	private static final MediaType APPLICATION_PLUS_JSON = new MediaType(""application"", ""*+json"");
+
+				else if (mediaType.isCompatibleWith(MediaType.APPLICATION_JSON) ||
+						mediaType.isCompatibleWith(APPLICATION_PLUS_JSON)) {
+						this.characterEncoding = StandardCharsets.UTF_8.name();
+				}",7,condition,Sync MockHttpServletResponse implementations,"See gh-33019
",
ce4eff321cd976df4ba26fe3971642259af891d2,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,Add_Condition,"-		StringBuilder sb = new StringBuilder(inString.length());
+		int capacity = inString.length();
+		if (newPattern.length() > oldPattern.length()) {
+			capacity += 16;
+		}
+		StringBuilder sb = new StringBuilder(capacity);
+
+",8,condition,Optimize StringUtils.replace for larger replacement pattern,"Issue: SPR-15430
",
ceb79c9bee2b734cb6b3eb2e02494e69671cb20e,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java,Condition_Change,"-import org.springframework.messaging.support.AbstractMessageChannel;
+import org.springframework.messaging.support.InterceptableChannel;
-			if (this.clientInboundChannel instanceof AbstractMessageChannel) {
-				((AbstractMessageChannel) this.clientInboundChannel).addInterceptor(0, this.unsentDisconnectInterceptor);
+			if (this.clientInboundChannel instanceof InterceptableChannel) {
+				((InterceptableChannel) this.clientInboundChannel).addInterceptor(0, this.unsentDisconnectInterceptor);
-			if (this.clientInboundChannel instanceof AbstractMessageChannel) {
-				((AbstractMessageChannel) this.clientInboundChannel).removeInterceptor(this.unsentDisconnectInterceptor);
+			if (this.clientInboundChannel instanceof InterceptableChannel) {
+				((InterceptableChannel) this.clientInboundChannel).removeInterceptor(this.unsentDisconnectInterceptor);",10,condition,Use InterceptableChannel in AbstractBrokerMessageHandler,"Issue: SPR-12218
",
cefd74555ada1285ecd8dc174f6dfc68115807f8,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java,Condition_Change,"-		boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();
-		if (!mbd.isSynthetic() && hasInstAwareBpps) {
+		if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {
-		if (hasInstAwareBpps) {
+		if (hasInstantiationAwareBeanPostProcessors()) {",5,condition,Polish contribution,,
cfae40afb456c98b2a11be600096da89b8aacafd,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java,Add_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
+import org.springframework.http.HttpStatus;
+import org.springframework.web.server.ResponseStatusException;
-			return Mono.error(new IllegalStateException(
-					""In a WebFlux application, form data is accessed via ServerWebExchange.getFormData().""));
+			if (logger.isDebugEnabled()) {
+				logger.debug(""Form data is accessed via ServerWebExchange.getFormData() in WebFlux."");
+			}
+			return Mono.error(new ResponseStatusException(HttpStatus.UNSUPPORTED_MEDIA_TYPE));",8,condition,Return 415 for form data with @RequestBody in WebFlux,"Closes gh-26386
",
d1303affc8434537927e5ce0149ba4ae6d21c4f9,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/HttpRange.java,Add_Condition,"-	 * @throws IllegalArgumentException if the sum of all ranges exceeds the
-	 * resource length.
+	 * @throws IllegalArgumentException if the sum of all ranges exceeds the resource length
-			long total = regions.stream().map(ResourceRegion::getCount).reduce(0L, (count, sum) -> sum + count);
+			long total = 0;
+			for (ResourceRegion region : regions) {
+				total += region.getCount();
+			}",5,iteration,Avoid expensive Stream API usage in HttpRange,"See gh-22742
",
d2868f5dd0840c158a5a60fa96c4afd9ce19f777,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/BeanUtils.java,Condition_Change,"+import java.util.HashSet;
-		List<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null);
+		Set<String> ignoreSet = (ignoreProperties != null ? new HashSet<>(Arrays.asList(ignoreProperties)) : null);
-			if (writeMethod != null && (ignoreList == null || !ignoreList.contains(targetPd.getName()))) {
+			if (writeMethod != null && (ignoreSet == null || !ignoreSet.contains(targetPd.getName()))) {",5,condition,Use Set to track ignored properties in BeanUtils.copyProperties(),"Closes gh-30088
",
d2aa6a98f25274b99f48866d83c10cfe3bf00f52,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,Add_Condition,"-import org.springframework.util.ReflectionUtils;
+import org.springframework.util.ReflectionUtils;
-									} else {
+									}
+									else {",5,condition,Polishing,"Closes gh-31846
",
d41ca095abee4e8284139f239d4b5bbf09f694a5,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java,Add_Condition,"+import org.springframework.core.KotlinDetector;
+import org.springframework.util.ReflectionUtils;
+		Class<?> declaringClass = method.getDeclaringClass();
+		if (KotlinDetector.isKotlinType(declaringClass)) {
+			ReflectionUtils.doWithMethods(declaringClass, m -> hints.registerMethod(m, ExecutableMode.INVOKE),
+					m -> m.getName().equals(method.getName() + ""$default""));
+		}",7,condition,Add native support for Kotlin default values in controllers,"Closes gh-33384
",
d43dfc7bae5aa5e81bc51dfb26c1ae1ff1ecc52e,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"-				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR);
+				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR);
+				if (separatorIndex == -1) {
+					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR);
+				}
-					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length());
+					rootEntryPath = urlFile.substring(separatorIndex + 2);  // both separators are 2 chars",7,condition,Properly extract jar file from Tomcat war URL,"Issue: SPR-15485
",
d4495a56542276d6ea9a09d6b61c0e30cb75188c,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java,Condition_Change,"-		if (targetObject == null && this.nullSafe) {
+		if (targetObject == null && isNullSafe()) {
-		if (contextObject.getValue() == null && this.nullSafe) {
+		if (contextObject.getValue() == null && isNullSafe()) {
-		if (this.nullSafe) {
+		if (isNullSafe()) {
-		if (this.nullSafe && CodeFlow.isPrimitive(descriptor)) {
+		if (isNullSafe() && CodeFlow.isPrimitive(descriptor)) {",8,condition,Revise PropertyOrFieldReference since isNullSafe() is not final,,
d494621ee3d2e0d6c706f401028b0bbd62491495,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java,Add_Condition,"-		this.singletonNames.put(beanName, beanDefinition.isSingleton());
+		if (ApplicationListener.class.isAssignableFrom(beanType)) {
+			this.singletonNames.put(beanName, beanDefinition.isSingleton());
+		}",4,condition,avoid store all bean name,,
d52f07aa1b83208dd84b65d2a4ba724b3a0227ff,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java,Add_Condition,"+			headerAccessor.setSessionId(this.sessionId);
+
+			else if (logger.isErrorEnabled() && StompCommand.ERROR == headerAccessor.getCommand()) {
+				logger.error(""Received STOMP ERROR: "" + message);
+			}
-			headerAccessor.setSessionId(this.sessionId);
-",7,condition,Log STOMP ERROR frames at error level,"Issue: SPR-11673
",
d554229981381979d63c3228ae0195a376fa3b18,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java,Condition_Change,"-			final List<String> removedSessionIds = new ArrayList<String>();
+					List<String> removedIds = new ArrayList<String>();
+								removedIds.add(session.getId());
-					if (logger.isDebugEnabled() && !removedSessionIds.isEmpty()) {
-						logger.debug(""Closed "" + removedSessionIds.size() + "" sessions "" + removedSessionIds);
-						removedSessionIds.clear();
+					if (logger.isDebugEnabled() && !removedIds.isEmpty()) {
+						logger.debug(""Closed "" + removedIds.size() + "" sessions: "" + removedIds);",8,condition,Fix incomplete log message,"Commit 48236b from 2014 introduced a logging improvement to avoid
logging each removed session per line and instead log one line at
the end with all removed sessions ids. However that list of removed
session ids wasn't populated. This commit fixes that.

Issue: SPR-14111
",
d5ff2322463c021bb252d9b1889f6f67cfed56b5,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/support/JmsAccessor.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
-		return obtainConnectionFactory().createConnection();
+		ConnectionFactory cf = obtainConnectionFactory();
+		Connection con = cf.createConnection();
+		if (con == null) {
+			throw new jakarta.jms.IllegalStateException(
+					""ConnectionFactory returned null from createConnection(): "" + cf);
+		}
+		return con;",8,condition,Defensive check for null returned from createConnection(),"Closes gh-29706
",
d62522982f39f2610f0d9d26d9908ccb1ea24222,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/ui/ModelMap.java,Condition_Change,"-			for (String key : attributes.keySet()) {
+			for (Map.Entry<String, ?> entry : attributes.entrySet()) {
+				String key = entry.getKey();
-					put(key, attributes.get(key));
+					put(key, entry.getValue());",5,iteration,Performance improvement,"Use entrySet instead of keySet followed by a lookup per key as the
former is more efficient.

Issue: SPR-12363
",
d6a105c15164083f87cce477379ecd6645a5e7b2,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java,Remove_Condition,"-		if (isEmpty() && other.isEmpty()) {
+		if (other.isEmpty()) {
-		else if (other.isEmpty()) {
-			return this;
-		}
-		else if (isEmpty()) {
+		if (isEmpty()) {",7,condition,Polish Conditional Statements,"See gh-31320
",
d6e167d16eb9dd18349922f12b2898b5f920ac13,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java,Condition_Change,"-				else if (logger.isInfoEnabled() && beanFactory.containsSingleton(beanName)) {
-					logger.info(""Cannot enhance @Configuration bean definition '"" + beanName +
+				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {
+					logger.warn(""Cannot enhance @Configuration bean definition '"" + beanName +
-							""return type: Consider declaring such methods as 'static'."");
+							""return type: Consider declaring such methods as 'static' and/or mark the "" +
+							""containing configuration class as 'proxyBeanMethods=false'."");",7,condition,Raise log level to warn when enhancement cannot apply,"Closes gh-31102
",
d781f299c0a38ed9a29001920e811165e2054773,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapter.java,Condition_Change,"-	private final TransactionalEventListener annotation;
-
+	private final boolean fallbackExecution;
+
-		this.annotation = eventAnn;
+		this.fallbackExecution = eventAnn.fallbackExecution();
-		else if (this.annotation.fallbackExecution()) {
-			if (this.annotation.phase() == TransactionPhase.AFTER_ROLLBACK && logger.isWarnEnabled()) {
+		else if (this.fallbackExecution) {
+			if (getTransactionPhase() == TransactionPhase.AFTER_ROLLBACK && logger.isWarnEnabled()) {",10,condition,Use extracted attributes instead of annotation access,"See gh-31034
",
d85c1fbdd5edb6b2ba906f8a20009317ff7faa98,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java,Condition_Change,"-			for (String pattern : hm.getUrlMap().keySet()) {
-				Object handler = hm.getUrlMap().get(pattern);
+			for (String pattern : hm.getHandlerMap().keySet()) {
+				Object handler = hm.getHandlerMap().get(pattern);",4,iteration,Fix initialization issue in ResourceUrlProvider,"Before this change ResourceUrlProvider used getUrlMap to detect
ResourceHttpRequestHandler instances, however the map may contain bean
names as is the case when using <mvc:resources>. Instead it now uses
getHandlerMap.
",
d87465f9e9a802b6ad97fcc9a19d6d4e24c58082,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/EvalTag.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
+import jakarta.el.ELContext;
+ * @author Sam Brannen
-		private final jakarta.servlet.jsp.el.VariableResolver variableResolver;
+		private final ELContext elContext;
+
-			this.variableResolver = pageContext.getVariableResolver();
+			this.elContext = pageContext.getELContext();
-			if (this.variableResolver == null) {
+			if (this.elContext == null) {
-				return this.variableResolver.resolveVariable(name);
+				return this.elContext.getELResolver().getValue(this.elContext, name, null);",10,condition,Use ELContext instead of VariableResolver in JspPropertyAccessor,"The JSP VariableResolver API has been deprecated since JSP 2.1 in favor
of the newer ELContext API.

This commit therefore refactors JspPropertyAccessor to use the
ELContext API.

Closes gh-32383
",
d8f4d37624fc38a8c28d8e427f205b395e290f15,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java,Condition_Change,"-				if ((read = channel.read(byteBuffer)) > 0) {
+				if ((read = channel.read(byteBuffer)) >= 0) {",2,condition,Fixed bug in reading Flux from Channel,"Fixed bug where the returned Flux from DataBufferUtils.read() would be
completed prematurely if the channel was not ready to read, but did
not reach the end of the file either.
",
d91fc8c672614c6394f3ebc2e86c05c5f32607f8,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-			if (this.targetName == null && logger.isInfoEnabled()) {
+			if (this.targetName == null) {
-					""; Can only include Advisor or Advice type beans in interceptorNames chain except for last entry, "" +
-					""which may also be target or TargetSource"", ex);
+					""; can only include Advisor or Advice type beans in interceptorNames chain "" +
+					""except for last entry which may also be target instance or TargetSource"", ex);",6,condition,No log level check unless String concatenation is following,,
d97eabba2fcb4c69d25befdcd4869ac87ebf9167,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java,Add_Condition,"+		// do not cache multipart mime types with random boundaries
+		if (mimeType.startsWith(""multipart"")) {
+			return parseMimeTypeInternal(mimeType);
+		}",3,condition,Do not cache multipart MIME types in cache,"Prior to this commmit, ""mutipart/*"" MIME types would be cached by the
`MimeTypeUtils` LRU cache. Since those MIME types are likely to have
random boundaries in them, they can waste space in the LRU cache.
This is not improving things since we're parsing them anyway.

This commit skips the caching step for all ""multipart"" MIME types.

Fixes gh-24767
",
d9cae339d60cc7f21b6f067fa4d66c5104cdc15c,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java,Condition_Change,"-		Advisor advisor = this.advisors.get(index);
+		Advisor advisor = this.advisors.remove(index);
-			for (int j = 0; j < ia.getInterfaces().length; j++) {
-				removeInterface(ia.getInterfaces()[j]);
+			Class<?>[] interfaces = ia.getInterfaces();
+			for (Class<?> iface : interfaces) {
+				removeInterface(iface);
-		this.advisors.remove(index);",8,iteration,Simplify AdvisedSupport.removeAdvisor(),Closes gh-24205,
daf9a82e8ce3e6e8e795fcb46309cd8bc4a62e52,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-	private boolean isVariableName(String name) {
-		char[] chars = name.toCharArray();
-		if (!Character.isJavaIdentifierStart(chars[0])) {
+	private static boolean isVariableName(String name) {
+		if (!Character.isJavaIdentifierStart(name.charAt(0))) {
-		for (int i = 1; i < chars.length; i++) {
-			if (!Character.isJavaIdentifierPart(chars[i])) {
+		for (char ch: name.toCharArray()) {
+			if (!Character.isJavaIdentifierPart(ch)) {",9,"condition, iteration",Simplify AbstractAspectJAdvice.isVariableName(),,
db1010f9c9f0ff665c6657e9ae8205421cc6eb71,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java,Add_Condition,"+import org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter;
- * adding support for XML and JSON-based parts.
+ * adding support for XML, JSON, Smile, CBOR, Protobuf and Yaml based parts when
+ * related libraries are present in the classpath.
+	private static final boolean jackson2CborPresent;
+
+		jackson2CborPresent = ClassUtils.isPresent(""com.fasterxml.jackson.dataformat.cbor.CBORFactory"", classLoader);
+		if (jackson2CborPresent) {
+			addPartConverter(new MappingJackson2CborHttpMessageConverter());
+		}
+",8,condition,Add CBOR support to AllEncompassingFormHttpMessageConverter,"Closes gh-32428
",
db2601d6e25a427368500ffcb8d274319222ec92,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,Condition_Change,"-			if (logger.isDebugEnabled()) {
-				logger.debug(""Ignoring bean creation exception on FactoryBean type check: "" + ex);
+			if (logger.isWarnEnabled()) {
+				logger.warn(""Bean creation exception on FactoryBean type check: "" + ex);",4,condition,AbstractBeanFactory logs bean creation exception on FactoryBean type check at warn level,"Issue: SPR-12397
",
db596d23dea7a8f35b52581d92b00a18c3f45335,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java,Condition_Change,"-			if (this.resultHandler != null) {
-				this.resultHandler.handleResult(this.result);
-			}
+		}
+		if (this.resultHandler != null) {
+			this.resultHandler.handleResult(this.result);",6,condition,Fix deadlock issue in DeferredResult,"Previously DeferredResult locked around the setting of the result
including handling up to the part of submitting a dispatch. This
can cause a deadlock if a timeout occurs at the same time since
the Tomcat timeout thread has its own locking that permits only
one thread to do timeout or dispatch processing.

The fix reduces the locking to cover only the attempt to set the
DeferredResult but not the dispatching.

Issue: SPR-10485
",
dbbdd044cdd5439e4066b71af34324670a274514,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/CollectionUtils.java,Remove_Condition,"-		for (Object elem : arr) {
-			collection.add((E) elem);
-		}
+		Collections.addAll(collection, (E[])arr);",4,iteration,Use Collections.addAll instead of Collection.addAll,"See gh-24636
",
dc59e50561eeaedbc6f7a50d8703d627be2c6847,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/MethodParameter.java,Add_Condition,"-		paramType = ResolvableType.forMethodParameter(this, null, 1).resolve();
+		if (getContainingClass() != getDeclaringClass()) {
+			paramType = ResolvableType.forMethodParameter(this, null, 1).resolve();
+		}",4,condition,Avoid unnecessary use of ResolvableType within MethodParameter,"Closes gh-23792
",
dcc8dcdff81dd76cfcb7df8c6f1d61b4a3d4f207,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java,Add_Condition,"+			long contentLength = getHeaders().getContentLength();
+			if (contentLength != -1) {
+				this.servletResponse.setContentLengthLong(contentLength);
+			}",4,condition,Set content length on ServletHttpResponse,"Prior to this commit, the `ServletServerHttpResponse` would copy headers
from the `HttpHeaders` map and calls methods related to headers exposed
as properties (content-type, character encoding).

Unlike its reactive variant, this would not set the content length.
Depending on the Servlet container implementation, this could cause
duplicate Content-Length response headers in the actual HTTP response.

This commit aligns both implementations and ensures that the
`setContentLengthLong` method is called if necessary so that the Servlet
container can ensure a single header for that.

Fixes gh-26330
",
ddb41172331ef015e67826a5a1cece1c44d4153f,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateExceptionTranslator.java,Add_Condition,"+import javax.persistence.PersistenceException;
+
+import org.springframework.orm.jpa.EntityManagerFactoryUtils;
- * instances to Spring's {@link DataAccessException} hierarchy.
+ * instances to Spring's {@link DataAccessException} hierarchy. As of Spring 4.3.2 and
+ * Hibernate 5.2, it also converts standard JPA {@link PersistenceException} instances.
+ * @see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible(RuntimeException)
-		return null;
+		if (ex instanceof PersistenceException && ex.getCause() instanceof HibernateException) {
+			return convertHibernateAccessException((HibernateException) ex.getCause());
+		}
+		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);",8,condition,HibernateExceptionTranslator converts JPA exceptions as well (for Hibernate 5.2),"Issue: SPR-14455
",
de069d06d852e6fa2e8e4ca9d442168729af6588,spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java,Remove_Condition,"-	protected JAXBContext getJaxbContext() {
+	/**
+	 * Return the JAXBContext used by this marshaller, lazily building it if necessary.
+	 */
+	public JAXBContext getJaxbContext() {
-		if (this.supportJaxbElementClass && JAXBElement.class.isAssignableFrom(clazz)) {
-			return true;
-		}
-		return supportsInternal(clazz, this.checkForXmlRootElement);
+		return ((this.supportJaxbElementClass && JAXBElement.class.isAssignableFrom(clazz)) ||
+				supportsInternal(clazz, this.checkForXmlRootElement));",9,condition,"Made ""getJaxbContext()"" method public","Issue: SPR-10282
",
defc1d31574ea6b3faa5ed84c4aa23c808b0c7cf,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java,Remove_Condition,"-			// Only bother with flushFromCaches if the Introspector actually cached...
-			if (!shouldIntrospectorIgnoreBeaninfoClasses) {
-				// Immediately remove class from Introspector cache, to allow for proper
-				// garbage collection on class loader shutdown - we cache it here anyway,
-				// in a GC-friendly manner. In contrast to CachedIntrospectionResults,
-				// Introspector does not use WeakReferences as values of its WeakHashMap!
-				Class<?> classToFlush = beanClass;
-				do {
-					Introspector.flushFromCaches(classToFlush);
-					classToFlush = classToFlush.getSuperclass();
-				}
-				while (classToFlush != null);
-			}
-",9,"condition, iteration",Drop Introspector.flushFromCaches calls completely,"According to the JDK's documentation and changelog, the Introspector itself safely handles weak references as of JDK 6 update 21 (which is what we require for Spring 4.0).

Issue: SPR-11356
",
df51ff03862c6a299f2ff243828ec23608899311,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,Add_Condition,"-		primitiveWrapperTypeMap.forEach((key, value) -> {
-			primitiveTypeToWrapperMap.put(value, key);
-			registerCommonClasses(key);
-		});
+		// Map entry iteration is less expensive to initialize than forEach with lambdas
+		for (Map.Entry<Class<?>, Class<?>> entry : primitiveWrapperTypeMap.entrySet()) {
+			primitiveTypeToWrapperMap.put(entry.getValue(), entry.getKey());
+			registerCommonClasses(entry.getKey());
+		}",8,iteration,Revert to Map entry iteration for less expensive static initialization,"Issue: SPR-17169
",
df8412bded77faadd60d62dc5c78ca8b2b44a481,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-		if (logger.isDebugEnabled()) {
-			logger.debug(""Closing due to exception for "" + session, exception);
+		if (logger.isErrorEnabled()) {
+			logger.error(""Closing session due to exception for "" + session, exception);",4,condition,ExceptoinWebSocketHandlerDecorator uses ERROR level,"Issue: SPR-15537
",
dfc370c368cd45863c41ab65ca09a87f6b4a1250,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Condition_Change,"-			if (isJarResource(rootDirResource)) {
-				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern));
-			}
-			else if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {
+			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {
+			else if (isJarResource(rootDirResource)) {
+				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern));
+			}",8,condition,PathMatchingResourcePatternResolver's findPathMatchingResources needs to check for VFS before checking isJarResource,"Issue: SPR-11887
",
e00a882333ed06c682a59f92aa45657434b03df1,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java,Add_Condition,"+		else {
+			callback.succeed();
+		}",3,condition,Complete Jetty frame callback when opcode is not PONG,"The onWebSocketFrame method should complete callback.
For more details, see https://github.com/jetty/jetty.project/issues/11088.

Closes gh-31869
",
e0734aede82efc80c5ab334d5559abcc5787957b,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-	 * BeanPostProcessor that detects beans which implement the ApplicationListener interface.
-	 * This catches beans that can't reliably be detected by getBeanNamesForType.
+	 * {@code BeanPostProcessor} that detects beans which implement the {@code ApplicationListener}
+	 * interface. This catches beans that can't reliably be detected by {@code getBeanNamesForType}
+	 * and related operations which only work against top-level beans.
+	 *
+	 * <p>With standard Java serialization, this post-processor won't get serialized as part of
+	 * {@code DisposableBeanAdapter} to begin with. However, with alternative serialization
+	 * mechanisms, {@code DisposableBeanAdapter.writeReplace} might not get used at all, so we
+	 * defensively mark this post-processor's field state as {@code transient}.
-		private final AbstractApplicationContext applicationContext;
+		private transient final AbstractApplicationContext applicationContext;
-		private final Map<String, Boolean> singletonNames = new ConcurrentHashMap<String, Boolean>(256);
+		private transient final Map<String, Boolean> singletonNames = new ConcurrentHashMap<String, Boolean>(256);
-			if (beanDefinition.isSingleton()) {
+			if (this.applicationContext != null && beanDefinition.isSingleton()) {
-			if (bean instanceof ApplicationListener) {
+			if (this.applicationContext != null && bean instanceof ApplicationListener) {",8,condition,ApplicationListenerDetector explicitly prevents serialization of its ApplicationContext reference,"Issue: SPR-14214
",
e21d94f91bfdfe8e3d7df43c2823425d096e0770,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java,Condition_Change,"-		for (Supplier<? extends Mono<Void>> actions : this.commitActions) {
-			commit = commit.concatWith(actions.get());
+		for (Supplier<? extends Mono<Void>> action : this.commitActions) {
+			commit = commit.concatWith(action.get());",4,iteration,Polish,"Closes gh-22472
",
e2b1dcbaca1cc618281d1308a5c24c28d4a04020,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java,Condition_Change,"-			TypedValue value = this.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences);
-			if (this.ref.cachedReadAccessor instanceof CompilablePropertyAccessor) {
-				CompilablePropertyAccessor accessor = (CompilablePropertyAccessor) this.ref.cachedReadAccessor;
-				this.ref.exitTypeDescriptor = CodeFlow.toDescriptor(accessor.getPropertyType());
+			TypedValue value =
+					this.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences);
+			PropertyAccessor accessorToUse = this.ref.cachedReadAccessor;
+			if (accessorToUse instanceof CompilablePropertyAccessor) {
+				this.ref.exitTypeDescriptor =
+						CodeFlow.toDescriptor(((CompilablePropertyAccessor) accessorToUse).getPropertyType());",10,condition,AccessorLValue reliably downcasts to CompilablePropertyAccessor in concurrent scenarios,"Issue: SPR-14850
",
e2ccd55d146c245ee3e6d46783e3c288999894ff,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java,Remove_Condition,"-		Method[] methods = this.sortedMethodsCache.get(clazz);
-		if (methods == null) {
-			methods = clazz.getMethods();
+		return this.sortedMethodsCache.computeIfAbsent(clazz, key -> {
+			Method[] methods = key.getMethods();
-			this.sortedMethodsCache.put(clazz, methods);
-		}
-		return methods;
+			return methods;
+		});",10,condition,ReflectivePropertyAccessor uses computeIfAbsent for cache computation,"Issue: SPR-16882
",
e38c020535dc5d6b326d5e22f8a59dc35ba7361a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,Condition_Change,"-				if (anns[i] != otherAnns[i]) {
+				if (!annotationEquals(anns[i], otherAnns[i])) {
+	private boolean annotationEquals(Annotation ann, Annotation otherAnn) {
+		// Annotation.equals is reflective and pretty slow, so let's check identity and proxy type first.
+		return (ann == otherAnn || (ann.getClass() == otherAnn.getClass() && ann.equals(otherAnn)));
+	}
+",6,condition,TypeDescriptor efficiently matches equal annotations as well,"Issue: SPR-15060
",
e3bb06c8783ca45633ee361bb637cc3236471479,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java,Condition_Change,"-		if (this.method.getParameters().length == 0) {
+		if (this.method.getParameterTypes().length == 0) {",2,condition,Avoid Java8 API,,
e4539d9f4003bee0f3cd31dd70b87a32ffb95884,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-			if (methodParam.getParameterAnnotation(RequestBody.class).required()) {
+			if (checkRequired(methodParam)) {
+	protected boolean checkRequired(MethodParameter methodParam) {
+		return methodParam.getParameterAnnotation(RequestBody.class).required();
+	}
+",6,condition,Add protected method for required RequestBody,,
e45d33f9de595d7348f3b4695960cb26bd9255c0,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java,Add_Condition,"+			if (!isRunning() || this.stopCallback != null) {
+				// Not started, already stopped, or previous stop attempt in progress
+				// -> return immediately, no stop process to control anymore.
+				callback.run();
+				return;
+			}",4,condition,DefaultMessageListenerContainer immediately invokes stop callback when not running,"Issue: SPR-14233
",
e48ec4fcd333a3f2149f8966b367e51322d9ff90,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,Condition_Change,"-					if (checkGetParameterType) {
+					if (checkGetParameterType &&
+							!(jdbcDriverName.startsWith(""Oracle"") && dbmd.getDriverMajorVersion() >= 12)) {
+						// Register JDBC driver with no support for getParameterType, except for the
+						// Oracle 12c driver where getParameterType fails for specific statements only
+						// (so an exception thrown above does not indicate general lack of support).",3,condition,StatementCreatorUtils always tries getParameterType on Oracle 12c driver,"Issue: SPR-13825
",
e53c2c6331be891b19bf90fc8cc0d2c194d88615,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,Condition_Change,"-			if (lastDotIndex != -1) {
+			int previousDotIndex = name.lastIndexOf(PACKAGE_SEPARATOR, lastDotIndex -1);
+			if (lastDotIndex != -1 && previousDotIndex != 1 && Character.isUpperCase(name.charAt(previousDotIndex + 1))) {",3,condition,Reduce nested class lookups in ClassUtils,"Prior to this commit, `ClassUtils#forName` would always attempt to
resolve the given class name as a nested type. For example, searching
for `org.example.Spring` would try to resolve:

* `org.example.Spring`
* if not available, try `org.example$Spring` as well

Java classes usually start with uppercase letters, so this additional
lookup can be costly and not very useful.

This commit only attempts nested class lookups when the previous segment
starts with an uppercase. So `org.example.Spring.Issue` will look for
`org.example.Spring$Issue`, but `org.example.Spring` will not.

Closes gh-31258
",
e5475d698a8a861a03a18c24de16e3e4f0d22f72,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java,"Add_Condition, Condition_Change","- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-				for (Iterator<Class<?>> it = this.customEditors.keySet().iterator(); it.hasNext() && editor == null;) {
-					Class<?> key = it.next();
+				for (Map.Entry<Class<?>, PropertyEditor> entry : this.customEditors.entrySet()) {
+					if (editor != null) {
+						break;
+					}
+					Class<?> key = entry.getKey();
-						editor = this.customEditors.get(key);
+						editor = entry.getValue();",9,"condition, iteration",Iterate over Map's entrySet() instead of keySet() in PropertyEditorRegistrySupport,"Closes gh-27591
",
e565d2cabb01539933195b0d1bc3b55992fb9c84,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java,Condition_Change,"-				if (this.ignoreUnresolvablePlaceholders && (this.environment instanceof ConfigurableEnvironment)) {
-					ConfigurableEnvironment configurableEnvironment = (ConfigurableEnvironment) this.environment;
+				if (this.ignoreUnresolvablePlaceholders &&
+						(this.environment instanceof ConfigurableEnvironment configurableEnvironment)) {",4,condition,"Apply ""instanceof pattern matching"" in PropertySourcesPlaceholderConfigurer","See gh-27947
",
e7f89f87c14bb65a83518508a791dc68e681ddd4,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,Condition_Change,"-		if (parts.length >= 2) {
+		if (parts.length > 2) {",2,condition,Fix off-by-one error in parseLocaleString,"Fix off-by-one error in StringUtils.parseLocaleString()

Issue: SPR-10364
",
e83d495cbba0796b1f2269b9ad7a02ffac1ca5a8,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
-				if (resolvedAlias.equals(resolvedName)) {
+				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {",2,condition,SimpleAliasRegistry prevents NPE for alias resolved to null,"Issue: SPR-13016
",
e8486e2afe6e49f5597313da8a4e4f37e2029bc2,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/TypePath.java,Add_Condition,"+                if (i < n && typePath.charAt(i) == ';') {
+                    i += 1;
+                }
-     * argument index in decimal form.
+     * argument index in decimal form followed by ';'.
-                result.append(getStepArgument(i));
+                result.append(getStepArgument(i)).append(';');",5,condition,Tracking ASM 5.0.4 development: Fix for ASM issue 317539,"Issue: SPR-12255
",
e870c9a39251898f0747f9a591595134bbd16278,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExecutionChain.java,Add_Condition,"- * Copyright 2002-2010 the original author or authors.
+ * Copyright 2002-2012 the original author or authors.
+import org.springframework.web.context.request.async.AbstractDelegatingCallable;
-					chain.addDelegatingCallable(asyncInterceptor.getAsyncCallable(request, response, this.handler));
+					AbstractDelegatingCallable callable = asyncInterceptor.getAsyncCallable(request, response, this.handler);
+					if (callable != null) {
+						chain.addDelegatingCallable(callable);
+					}",6,condition,Reduce logging in HandlerExecutionChain,"Before this change the HandlerExecitionChain logged errors each time a
an AsyncHandlerInterceptor returned a null async Callable, a condition
which is acceptable.

SPR-9524
",
e87e03c539b13a709a4019369a396949db3ac4e8,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java,Remove_Condition,"-		if (configBeanDefs.isEmpty()) {
+		if (configBeanDefs.isEmpty() || IN_NATIVE_IMAGE) {
-		if (IN_NATIVE_IMAGE) {
-			throw new BeanDefinitionStoreException(""@Configuration classes need to be marked as "" +
-					""proxyBeanMethods=false. Found: "" + configBeanDefs.keySet());
-		}",6,condition,Refine ConfigurationClassPostProcessor behavior in native images,"This commit refines ConfigurationClassPostProcessor behavior in
native images by skipping configuration classes enhancement
instead of raising an error.

See spring-projects-experimental/spring-graalvm-native#248 for
more details.

Closes gh-26236
",
e9413b93c6d24a250cc3d67c94f9cd87aef2836a,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java,Condition_Change,"-						if (rootCause instanceof BeanCurrentlyInCreationException) {
-							BeanCreationException bce = (BeanCreationException) rootCause;
+						if (rootCause instanceof BeanCurrentlyInCreationException bce) {",3,condition,"Apply ""instanceof pattern matching"" in BeanFactoryAdvisorRetrievalHelper",,
e9819b7535841a27586edfcbe83c5ab1adf47339,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
+		if (mediaType.isCompatibleWith(MediaType.APPLICATION_FORM_URLENCODED)) {
+			return Mono.error(new IllegalStateException(
+					""In a WebFlux application, form data is accessed via ServerWebExchange.getFormData().""));
+		}
+",5,condition,Raise ISE if @RequestBody is used for form data,"Closes gh-22486
",
ec4e6e0b0e84d11f9e5abaf092d5bcb7410d8a52,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,Condition_Change,"-		else if (sqlType == Types.VARCHAR || sqlType == Types.LONGVARCHAR ||
-				(sqlType == Types.CLOB && isStringValue(inValue.getClass()))) {
+		else if (sqlType == Types.VARCHAR || sqlType == Types.NVARCHAR ||
+				sqlType == Types.LONGVARCHAR || sqlType == Types.LONGNVARCHAR ||
+				((sqlType == Types.CLOB || sqlType == Types.NCLOB) && isStringValue(inValue.getClass()))) {",5,condition,"StatementCreatorUtils populates NVARCHAR, LONGNVARCHAR, NCLOB via setString as well","Issue: SPR-11938
",
eca87b87de8445feab00dd4e98a634ece6c80e20,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java,Condition_Change,"-			if (!candidateParameter.equals(genericParameter.toClass())) {
+			if (!ClassUtils.resolvePrimitiveIfNecessary(candidateParameter).equals(ClassUtils.resolvePrimitiveIfNecessary(genericParameter.toClass()))) {",2,condition,Improve Kotlin support in BridgeMethodResolver#findBridgedMethod,"This commit adds support for Kotlin non-nullable type which resolves
to primitive Java types in BridgeMethodResolver#findBridgedMethod.

Closes gh-26585
",
ecce7520fb2cb56494d78dcc6adadb446d51ace7,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java,Condition_Change,"-			for (Element converter : DomUtils.getChildElementsByTagName(convertersElement, ""bean"")) {
-				BeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(converter);
-				beanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(converter, beanDef);
-				messageConverters.add(beanDef);
+			for (Element beanElement : DomUtils.getChildElementsByTagName(convertersElement, new String[] { ""bean"", ""ref"" })) {
+				Object object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);
+				messageConverters.add(object);",7,iteration,Support HttpMessageConverter refs in mvc namespace,"Issue: SPR-9469
",
ececf32c052082724ab86b5d2b567ffc7c137b67,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,Condition_Change,"-		}
-		if (result != null) {
-			findAnnotationCache.put(cacheKey, result);
+			if (result != null) {
+				findAnnotationCache.put(cacheKey, result);
+			}
+",7,condition,Revert unintentional change in AnnotationUtils,,
edbc1e92129f659b9c59722611065befa705e2fe,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java,Remove_Condition,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-	private volatile Boolean commitAfterNoMessageReceived;
-
-				// However, don't do this on Tibco since this may lead to a deadlock there.
-	 * This is a good idea on any JMS provider other than Tibco, which is what
-	 * this default implementation checks for.
+	 * This is a good idea on any modern-day JMS provider.
-		if (this.commitAfterNoMessageReceived == null) {
-			Session target = ConnectionFactoryUtils.getTargetSession(session);
-			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith(""com.tibco.tibjms."");
-		}
-		return this.commitAfterNoMessageReceived;
+		return true;",8,condition,Avoid outdated Tibco workaround in shouldCommitAfterNoMessageReceived,"Issue: SPR-14697
",
eef9bc899f859445bbcf93980c7df2df02ed97b3,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java,Condition_Change,"-	protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model,
-			ServerWebExchange exchange) {
+	protected Mono<Map<String, Object>> getModelAttributes(
+			@Nullable Map<String, ?> model, ServerWebExchange exchange) {
-			if (model.containsKey(SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE)) {
+			if (model != null && model.containsKey(SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE)) {
-			Map<String, Object> attributes = new HashMap<>(model);
+			Map<String, Object> attributes = (model != null ? new HashMap<>(model) : new HashMap<>());",8,condition,Avoid NPE in FreeMarkerView.getModelAttributes() in spring-webflux,"This commit declares the model method parameter as @Nullable and adds
defensive guards against a null model argument.

Closes gh-23105
",
ef6aef91077901a5ed532ec3e7a55f5e0e554080,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java,Condition_Change,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-		else if (editor != null && candidate instanceof String) {
+
+		if (editor != null && candidate instanceof String) {",3,condition,Allow PropertyEditor conversion as fallback for enums,"Issue: SPR-16082
",
f07fc76cf30cbfb6ae71134b653f26af9649ea1b,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java,Condition_Change,"-				if (StringUtils.hasLength(scheme) && !StringUtils.hasLength(host)) {
-					throw new IllegalArgumentException(""["" + uri + ""] is not a valid URI"");
+				if (StringUtils.hasLength(scheme) && scheme.startsWith(""http"") && !StringUtils.hasLength(host)) {
+					throw new IllegalArgumentException(""["" + uri + ""] is not a valid HTTP URL"");",4,condition,Limit scheme/host check in fromUriString to HTTP URLs,"Closes gh-26258
",
f1345aadf5879659c186a1dac7915f47d6c1cd14,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Condition_Change,"-			BeanDefinition beanDefinition = this.beanDefinitionMap.get(beanName);
-			if (!beanDefinition.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) {
+			BeanDefinition bd = this.beanDefinitionMap.get(beanName);
+			if (bd != null && !bd.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) {
-				// Ensure bd is non-null due to potential concurrent modification
-				// of the beanDefinitionMap.
+				// Ensure bd is non-null due to potential concurrent modification of beanDefinitionMap.",4,condition,Defensively access existing beanDefinitionMap entries,"See gh-22263
",
f1cbbd2aa80476dc570d3bdf23d589a9a2544a37,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionBeanRegistrationAotProcessor.java,Remove_Condition,"-			if (proxyInterfaces.length == 0) {
-				return;
-			}",3,condition,Remove redundant array length check,"Closes gh-33655
",
f27304d785b47f5390230e7ccde028a37989d5ee,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java,Remove_Condition,"-		if (targetType == null) {
+		if (targetType == null || (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics())) {
-		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {
-			return descriptor.getDependencyType().isAssignableFrom(targetType.getRawClass());
-		}
+		// Full check for complex generic type match...",5,condition,"Avoid repeated assignability check for raw class on fallback match, since AutowireCandidateResolver is only being called for basic type matches to begin with","Issue: SPR-9965
",
f29ffb37f71e09bc1ec98633a87b49875b611f8b,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java,Condition_Change,"-	private static final Method getPushBuilderMethod =
-			ClassUtils.getMethodIfAvailable(HttpServletRequest.class, ""getPushBuilder"");
+	private static final Method newPushBuilderMethod =
+			ClassUtils.getMethodIfAvailable(HttpServletRequest.class, ""newPushBuilder"");
-				(getPushBuilderMethod != null && getPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) ||
+				(newPushBuilderMethod != null && newPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) ||
-		else if (getPushBuilderMethod != null && getPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) {
-			Object pushBuilder = ReflectionUtils.invokeMethod(getPushBuilderMethod, request);
+		else if (newPushBuilderMethod != null && newPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) {
+			Object pushBuilder = ReflectionUtils.invokeMethod(newPushBuilderMethod, request);",10,condition,Compatibility with Servlet 4.0 b05,"Issue: SPR-15379
",
f2e898d35de7d6bd8c24100d631dad9148edb2e8,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ObjectUtils.java,Condition_Change,"-	 * exception types, as declared in a throws clause.
+	 * exception types, as declared in a {@code throws} clause.
-			return !optional.isPresent();
+			return optional.isEmpty();
-			if (!optional.isPresent()) {
+			if (optional.isEmpty()) {
-	 * <li>{@code""Optional.empty""} if {@code obj} is an empty {@link Optional}</li>
-	 * <li>{@code""Optional[<concise-string>]""} if {@code obj} is a non-empty {@code Optional},
-	 * where {@code <concise-string>} is the result of invoking {@link #nullSafeConciseToString}
-	 * on the object contained in the {@code Optional}</li>
+	 * <li>{@code ""Optional.empty""} if {@code obj} is an empty {@link Optional}</li>
+	 * <li>{@code ""Optional[<concise-string>]""} if {@code obj} is a non-empty {@code Optional},
+	 * where {@code <concise-string>} is the result of invoking this method on the object
+	 * contained in the {@code Optional}</li>",4,condition,Polish,,
f31eb2dcf9f03148907ea49c209144753c96573a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"+
+		// Skip scanning the module path when running in a native image.
+		if (NativeDetector.inNativeImage()) {
+			return result;
+		}
+",5,condition,Skip scanning the module path when running in a native image,"Prior to this commit, the following exception was thrown when using the
PathMatchingResourcePatternResolver to scan for class path resources
using the `classpath*:` prefix within a native image.

com.oracle.svm.core.jdk.UnsupportedFeatureError: JRT file system is disabled
com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89)
jdk.internal.module.SystemModuleFinders$SystemImage.reader(SystemModuleFinders.java:139)
jdk.internal.module.SystemModuleFinders$ModuleContentSpliterator.<init>(SystemModuleFinders.java:527)
jdk.internal.module.SystemModuleFinders$SystemModuleReader.list(SystemModuleFinders.java:502)
org.springframework.core.io.support.PathMatchingResourcePatternResolver.lambda$findAllModulePathResources$6(PathMatchingResourcePatternResolver.java:819)

This commit addresses this by not attempting to scan the module path
when running in a GraalVM native image.

Closes gh-29183
",
f3884084f27d9058d6a56cf27d695b373e203e7c,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java,Add_Condition,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-		if (location.startsWith(CLASSPATH_URL_PREFIX)) {
+		if (location.startsWith(""/"")) {
+			return getResourceByPath(location);
+		}
+		else if (location.startsWith(CLASSPATH_URL_PREFIX)) {",5,condition,"Optimized DefaultResourceLoader's getResource implementation for ""/..."" paths, not relying on URL parsing exceptions for such a common case anymore","Issue: SPR-8283
",
f3cb331e4efde2a36f0dfe4be94105f55db2c29b,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java,Remove_Condition,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-		Method method = findGetterForProperty(propertyName, clazz, target instanceof Class);
-		if (method == null && target instanceof Class) {
-			method = findGetterForProperty(propertyName, target.getClass(), false);
+		boolean targetIsaClass = (target instanceof Class);
+		Method method = findGetterForProperty(propertyName, clazz, targetIsaClass);
+		if (method == null && targetIsaClass) {
+			// Fallback for getter instance methods in java.lang.Class.
+			method = findGetterForProperty(propertyName, Class.class, false);
-		if (method == null && target instanceof Class) {
-			method = findSetterForProperty(propertyName, target.getClass(), false);
-		}
+		// In contrast to findGetterForProperty(), we do not look for setters in
+		// java.lang.Class as a fallback, since Class doesn't have any public setters.",10,condition,Optimize find[Getter|Setter]ForProperty() in ReflectivePropertyAccessor,,
f3dce4bb9ab84beaad5345a3690dbdaffc8009f9,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,Add_Condition,"-					if (!method.getDeclaringClass().isRecord() && method.getParameterCount() == 0) {
+					if (method.getParameterCount() == 0) {
+						if (method.getDeclaringClass().isRecord()) {
+							// Annotations on the compact constructor arguments made available on accessors, ignoring.
+							return;
+						}",5,condition,"Polish ""Ignore @Value on record property""","See gh-31433
",
f425a993e7be82ffdbdda24370925a34c42925f2,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java,Add_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+				if (!session.isOpen()) {
+					logger.trace(""Dropped inbound WebSocket message due to closed session"");
+					return;
+				}",4,condition,Ignore missing STOMP decoder if session closed,"Closes gh-24842
",
f4a73b79b844486da5d39f4c0b7b997c72eb56ca,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java,Add_Condition,"+				else {
+					continue;
+				}",3,condition,Avoid CacheAspectSupport#findInCaches fall through to reactive handler,"Prior to this commit if the return type is a CompletableFuture but a
cache get returns null, the execution falls through to the
reactiveCachingHandler.

This commit ensures that evaluation instead continues onto the next
cache (if any).

Closes gh-33371
",
f4e23fe204588a744b111b8c7f6bbd1dbeda97b0,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java,Add_Condition,"+import org.springframework.aot.AotDetector;
+
- * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} for checking
- * debug information in the class file.
+ * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} (when not using
+ * AOT-processed optimizations) for checking debug information in the class file.
-		addDiscoverer(new LocalVariableTableParameterNameDiscoverer());
+		if (!AotDetector.useGeneratedArtifacts()) {
+			addDiscoverer(new LocalVariableTableParameterNameDiscoverer());
+		}",6,condition,Do not use LocalVariableTableParameterNameDiscoverer in AOT mode,"Closes gh-29531
",
f781c459b43eeac60188cf6a71508ff0cc8c9229,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,Condition_Change,"-		PropertyEditorRegistrySupport registrySupport =
-				(registry instanceof PropertyEditorRegistrySupport ? (PropertyEditorRegistrySupport) registry : null);
-		if (registrySupport != null) {
-			registrySupport.useConfigValueEditors();
+		if (registry instanceof PropertyEditorRegistrySupport) {
+			((PropertyEditorRegistrySupport) registry).useConfigValueEditors();",6,condition,Simplify AbstractBeanFactory.registerCustomEditors(),"This commit avoids an unnecessary non-null check in
registerCustomEditors().

Closes gh-26022
",
f8b611444072bea0a2755ba73b4dd15fe33098e5,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java,Add_Condition,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
+ * @author Juergen Hoeller
+		else if (bf.containsBean(qualifier)) {
+			// Fallback: target bean at least found by bean name.
+			return bf.getBean(qualifier, beanType);
+		}",3,condition,BeanFactoryAnnotationUtils consistently applies bean name fallback when no BeanDefinition present,"Issue: SPR-11915
",
f9aae8dd5a9a325fa9cb3f1a3b5e9081bbe91e65,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-
-
+
-			if (index > minNrOfArgs) {
+			if (index + 1 > minNrOfArgs) {",5,condition,Consistently determine minimum number of arguments from specified index,"Closes gh-25130
",
f9b319d3ba9d3141fd5edc4fde558daebd2c596f,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java,Condition_Change,"-		if (replyMessage != null && (originalReplyChannelHeader!= null || originalErrorChannelHeader != null)) {
+		if (replyMessage != null) {",2,condition,Revert Incorrect MessagingTemplate Change,"The change to ""optimize"" the template by not rebuilding the reply
message when the original header channels was null was incorrect.

We need to null out those headers if they were originally null.

Issue: SPR-15991
",
f9cffcce0544b648e002251518e319dbdcfaec41,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java,Add_Condition,"+		int batchSize = pss.getBatchSize();
+		if (batchSize == 0) {
+			return new int[0];
+		}
-				int batchSize = pss.getBatchSize();
-					return batchSize > 0 ? ps.executeBatch() : new int[] {};
+					return ps.executeBatch();",7,condition,"Polish ""Avoid calling executeBatch() with an empty batch""","See gh-27154
",
f9d2641fd59a39b149277c707dd277922c3aa5d7,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Condition_Change,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-	private static Class<?> javaxInjectProviderClass;
+	private static Class<?> jakartaInjectProviderClass;
-			javaxInjectProviderClass =
+			jakartaInjectProviderClass =
-			javaxInjectProviderClass = null;
+			jakartaInjectProviderClass = null;
-		else if (javaxInjectProviderClass == descriptor.getDependencyType()) {
+		else if (jakartaInjectProviderClass == descriptor.getDependencyType()) {",8,condition,Update field name to reflect switch to Jakarta,,
f9df8c738a4eb9fff292f58a82be7ba09e1c3097,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java,Add_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-			checkOnDataAvailable();
+			// Protect from infinite recursion in Undertow, where we can't check if data
+			// is available, so all we can do is to try to read.
+			// Generally, no need to check if we just came out of readAndPublish()...
+			if (!oldState.equals(State.READING)) {
+				checkOnDataAvailable();
+			}",4,condition,Avoid inifinite recursion in UndertowServerHttpRequest,"Undertow does not provide a way to check if data is available to read
but instead we have to try to read and see if any data is returned.
This makes it impossible to implement checkOnDataAvailable without
trying to read and that can lead to infinite recursion like this:

...
UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156)
AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:177)
AbstractListenerReadPublisher.access$900(AbstractListenerReadPublisher.java:47)
AbstractListenerReadPublisher$State$4.onDataAvailable(AbstractListenerReadPublisher.java:319)
AbstractListenerReadPublisher.onDataAvailable(AbstractListenerReadPublisher.java:85)
UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156)

This commit prevent the call to checkOnDataAvailable() when switching
states from READING->DEMAND which implies we exited the readAndPublish
loop because there was no more data to read.

Issue: SPR-16545
",
fb4ad2f3ba0bf0d968a49a05efd8fd41f3e2509d,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Condition_Change,"+		if (alreadySeen == null) {
+			alreadySeen = new HashSet<>();
+		}
+		alreadySeen.add(beanName);
-			if (alreadySeen == null) {
-				alreadySeen = new HashSet<>();
-			}
-			alreadySeen.add(beanName);",8,condition,Simplify DefaultSingletonBeanRegistry.isDependent(),"Move `alreadySeen` handling out of for-loop.

Closes gh-30839
",
fc8bd64f34d7e34d25144051b1161363a2d31477,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ObjectUtils.java,Remove_Condition,"-			if (optional.isEmpty()) {
-				return null;
-			}
-			Object result = optional.get();
+			Object result = optional.orElse(null);",5,condition,Simplify ObjectUtils#unwrapOptional,"This commit replaces optional.isEmpty() and optional.get() with
optional.orElse(null) for better efficiency and readability.

Closes gh-33612
",
fcbe5fa73fd473827f73e516f9819510260d1116,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,Condition_Change,"-						if (logger.isInfoEnabled() && implementsInterface(method, ifcs)) {
-							logger.info(""Unable to proxy interface-implementing method ["" + method + ""] because "" +
+						if (logger.isWarnEnabled() && implementsInterface(method, ifcs)) {
+							logger.warn(""Unable to proxy interface-implementing method ["" + method + ""] because "" +",4,condition,Log attempt at proxying final methods to WARN instead of INFO,"See gh-29773
",
fd18c00e50a048c5d357033e61d402f0b01002e8,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java,Add_Condition,"+		else if (synchs.size() == 1) {
+			return Collections.singletonList(synchs.iterator().next());
+		}",3,condition,Optimize for single TransactionSynchronization,"Optimize TransactionSynchronizationManager.getSynchronizations() to
avoid sorting and ArrayList creation in case of a single
TransactionSynchronization.

See gh-27335
",
fd69ee541e288687f04adb6446ac1b41a9bf415b,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java,Add_Condition,"-			(ConnectionHolder) TransactionSynchronizationManager.getResource(this.dataSource);
+				(ConnectionHolder) TransactionSynchronizationManager.getResource(this.dataSource);
-			DataSourceUtils.releaseConnection(con, this.dataSource);
+			if (txObject.isNewConnectionHolder()) {
+				DataSourceUtils.releaseConnection(con, this.dataSource);
+				txObject.setConnectionHolder(null, false);
+			}",7,condition,DataSourceTransactionManager resets ConnectionHolder on doBegin failure,"Issue: SPR-12280
",
fdf88c9795269c3e551bc3202e6eaead8cfa3752,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java,Add_Condition,"+import io.netty.channel.ChannelPipeline;
+import reactor.ipc.netty.NettyPipeline;
+
+		// TODO: workaround for https://github.com/reactor/reactor-netty/issues/22
+		ChannelPipeline pipeline = this.inbound.context().channel().pipeline();
+		String name = NettyPipeline.OnChannelReadIdle;
+		if (pipeline.context(name) != null) {
+			pipeline.remove(name);
+		}
+",9,condition,Workaround for onReadIdle issue in Reactor TcpClient,"https://github.com/reactor/reactor-netty/issues/22
",
fee63fdfb854c072ebfe23db1d7e949647320fd4,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java,Condition_Change,"- * no redelivery in case of exception thrown.
+ * best-effort redelivery in case of exception thrown.
+
+
-		else {
+		else if (isClientAcknowledge(session)) {
-			else {
+			else if (isClientAcknowledge(session)) {",6,condition,Message listener containers only call Session.recover() in client acknowledge mode,"Issue: SPR-13056
",
ff8655846d9c6903f16730efc1650a4ae55866b9,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,Condition_Change,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-		if (info == null) {
+		if (info == null || info.transactionStatus == null) {
-		return currentTransactionInfo().transactionStatus;
+		return info.transactionStatus;",4,condition,TransactionAspectSupport.currentTransactionStatus() reliably throws NoTransactionException,"Issue: SPR-9144
",
