commit,repo,file,change_type,diff,change_count,condition_type,commit_subject,commit_body,note,linked_issues,linked_issues_count,issue_titles,issue_bodies,issue_states,issue_comments_count,issue_comments
000b8a699ceefd0a362bb307e01261617b4dbf51,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/client/DefaultRestClientBuilder.java,Add_Condition,"+import org.springframework.http.client.ReactorClientHttpRequestFactory;
+	private static final boolean reactorNettyClientPresent;
+
+		reactorNettyClientPresent = ClassUtils.isPresent(""reactor.netty.http.client.HttpClient"", loader);
+		else if (reactorNettyClientPresent) {
+			return new ReactorClientHttpRequestFactory();
+		}",7,condition,Auto-detect Reactor Netty client in RestClient,"Closes gh-33635
",,33635,1,['RestClient should auto-detect ReactorClientHttpRequestFactory'],"['Reactor Netty client support was added in #30835, but it looks like `DefaultRestClientBuilder` was never updated after that to pick it up if available on the classpath.']",['closed'],[0],[]
009d2a5efd456a37c29fd984be3087f09082c325,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/env/SystemEnvironmentPropertySource.java,Remove_Condition,"-		if (actualName == null) {
-			// at this point we know the property does not exist
-			return null;
-		}",3,condition,Remove unnecessary null check in SysEnvPropSource,"Remove unnecessary null check and dead code from
SystemEnvironmentPropertySource.

Issue: SPR-10318
",,14952,1,['Remove unnecessary null check in SystemEnvironmentPropertySource [SPR-10318]'],"['**[Wujek](https://jira.spring.io/secure/ViewProfile.jspa?name=wujek.srujek@gmail.com)** opened **[SPR-10318](https://jira.spring.io/browse/SPR-10318?redirect=false)** and commented\n\nThe following code is to be found in `SystemEnvironmentPropertySource.getProperty`:\n\n```java\n        @Override\n\tpublic Object getProperty(String name) {\n\t\tAssert.notNull(name, ""property name must not be null"");\n\t\tString actualName = resolvePropertyName(name);\n\t\tif (actualName == null) {\n\t\t\t// at this point we know the property does not exist\n\t\t\treturn null;\n\t\t}\n...\n```\n\nSo, the `resolvePropertyName` method is called to get `actualName`, but it has the following JavaDoc part:\n\n> Never returns {`@code` null}.\n\nand the code actually reflects this. This is also a private method, so can\'t be overridden in subclasses. In this case, the null check in `getProperty` is completely unnecessary and actually dead code.\n\nI am not sure how this should be fixed - the resolve... method made protected or the check just deleted - so no pull request, no patch, sorry :(\n\n---\n\n**Affects:** 3.2.1\n\n**Issue Links:**\n- #14604 UnsupportedOperationException when accessing Environment with active SecurityManager\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/009d2a5efd456a37c29fd984be3087f09082c325\n']",['closed'],[2],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nGood spot. I have removed the dead code. If `resolvePropertyName` ever becomes protected we can reintroduce it.\n', '**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** commented\n\nThanks, both. Note that changes made for #14604 created the ""dead code"" situation in the first place. Prior to those changes, `#resolvePropertyName` could have returned `null` in certain cases.\n']"
010e8a303b1caf3b80e244fc5e4aebc23d854118,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java,Condition_Change,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-		if (!cookies.isEmpty()) {
-			this.builder.header(HttpHeaders.COOKIE, cookies.values().stream()
-					.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining("";"")));
+		if (cookies.isEmpty()) {
+			return;
+		this.builder.header(HttpHeaders.COOKIE, cookies.values().stream()
+				.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining("";"")));",7,condition,Polishing contribution,"Closes gh-32799
",,32799,1,['Do not send Cookie header in reactive JdkClientHttpRequest if no cookies added'],['Prevent cookies to be set to empty in the HTTP request if no cookie is present.\r\nThe `Cookie` header should not be sent if no cookie is set in the HTTP message.'],['closed'],[0],[]
01c8de0111806d8f9346f332b22ece9dd9fef618,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/target/AbstractBeanFactoryBasedTargetSourceCreator.java,Remove_Condition,"-			DefaultListableBeanFactory internalBeanFactory = this.internalBeanFactories.get(beanName);
-			if (internalBeanFactory == null) {
-				internalBeanFactory = buildInternalBeanFactory(this.beanFactory);
-				this.internalBeanFactories.put(beanName, internalBeanFactory);
-			}
-			return internalBeanFactory;
+			return this.internalBeanFactories.computeIfAbsent(beanName, k -> buildInternalBeanFactory(this.beanFactory));",7,condition,Simplify getInternalBeanFactoryForBean,"This commit simplifies getInternalBeanFactoryForBean() in
AbstractBeanFactoryBasedTargetSourceCreator via
Map::computeIfAbsent.

Closes gh-27234",,27234,1,['Simplify getInternalBeanFactoryForBean'],['This pull request simplifies `getInternalBeanFactoryForBean` in `AbstractBeanFactoryBasedTargetSourceCreator` and makes its intent more obvious.\r\n\r\nThe problem in https://github.com/spring-projects/spring-framework/issues/25801#issuecomment-698346498 does not apply to this patch since the mapping function in this patch does not modify/access the map itself.\r\n\r\nThis patch was generated automatically by the static analysis tool [Logifix](https://github.com/lyxell/logifix) as part of a research project.'],['closed'],[1],['This has been merged into `main`.\r\n\r\nThanks for your first contribution to the Spring Framework.']
01df63b9cdd12f89763874a14cc50e0c4f8a7e4d,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/support/SimpleJmsHeaderMapper.java,Condition_Change,"-			Set<Map.Entry<String, Object>> entries = headers.entrySet();
-			for (Map.Entry<String, Object> entry : entries) {
+			for (Map.Entry<String, Object> entry : headers.entrySet()) {",3,iteration,Delete unnecessary variable,"See gh-27101
",,27101,1,['Delete unnecessary variable'],['I review the PRs of @stsypanov in order to learn some code tips. \r\n\r\nI found the code of https://github.com/spring-projects/spring-framework/pull/23053 may be simpler.'],['closed'],[0],[]
0268e762980f302e251a92743dd6724403660399,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/ExtendedEntityManagerCreator.java,Add_Condition,"-				Set<Class<?>> ifcs = new LinkedHashSet<>(4);
-				ifcs.add(key);
-				ifcs.add(EntityManagerProxy.class);
-				return ClassUtils.toClassArray(ifcs);
+				if (EntityManagerProxy.class.equals(key)) {
+					return new Class<?>[] {key};
+				}
+				return new Class<?>[] {key, EntityManagerProxy.class};",8,condition,Improve mapping function in ExtendedEntityManagerCreator.createProxy(),"Closes gh-27456
",,27456,1,['Improve mapping function in ExtendedEntityManagerCreator.createProxy()'],['As soon as there are up to two items in the resulting array we can populate it explicitly which is faster and memory-saving.'],['closed'],[1],['This has been merged into `5.3.x` and `main`.\r\n\r\nThanks']
02b539c5f50b59d9f5605c21e42d53f0c8e23ae1,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassBeanDefinitionReader.java,Add_Condition,"+import org.springframework.core.SpringProperties;
+ * @author Sebastien Deleuze
+	/**
+	 * Boolean flag controlled by a {@code spring.xml.ignore} system property that instructs Spring to
+	 * ignore XML, i.e. to not initialize the XML-related infrastructure.
+	 * <p>The default is ""false"".
+	 */
+	private static final boolean shouldIgnoreXml = SpringProperties.getFlag(""spring.xml.ignore"");
+	
+
+				else if (shouldIgnoreXml) {
+					throw new UnsupportedOperationException(""XML support disabled"");
+				}",8,condition,Leverage spring.ignore.xml flag to avoid XmlBeanDefinitionReader,"Closes gh-25338
",,25338,1,['Leverage spring.ignore.xml flag to avoid XmlBeanDefinitionReader'],"['This issue is a follow up of #25151, it avoids using `XmlBeanDefinitionReader` in `ConfigurationClassBeanDefinitionReader` when `spring.xml.ignore` is `true` in order to avoid triggering XML usage in GraalVM native images.']",['closed'],[0],[]
030bc224e30699a91e33e27a6d9782803afbd0d4,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java,Condition_Change,"-			if (!this.inputStream.isFinished() && this.inputStream.isReady()) {
+			if (this.inputStream.isReady() && !this.inputStream.isFinished()) {",2,condition,Invert the check for ServletInputStream.isReady(),"When checking whether there is still request body the first method
that should be checked is ServletInputStream.isReady() and then
ServletInputStream.isFinished(). ServletInputStream.isReady() is the active
method whereas the ServletInputStream.isFinished() is not.
It is important to call ServletInputStream.isReady() because if it returns
false it will schedule a dispatch and if the request body is already read it will
send onAllDataRead event.

Issue: SPR-16521
",,21064,1,['JSON with missing quote leads to hanging [SPR-16521]'],"['**[Veit Guna](https://jira.spring.io/secure/ViewProfile.jspa?name=vguna)** opened **[SPR-16521](https://jira.spring.io/browse/SPR-16521?redirect=false)** and commented\n\nHi.\n\nI\'m currently creating a REST service based on Spring Boot 2.0.0.RC1, Webflux and Spring Security using Tomcat embedded container. During integration testing via WebTestClient, some strange error occurred.\n\nIn this TestNG testcase, a broken JSON body is send to the server. When using `WebTestClient` it happens, that this blocks indefinetely - until timeout, not returning the expected parsing error response created by Spring. The call looks like this:\n\n```\n@Test\npublic void testBrokenJson() {\n    client.post()\n            .uri(""/resourcea/1/resourceb/2/test"")\n            .body(BodyInserters.fromObject(""{\\""status\\"": \\""noClosingQuote}""))\n            .exchange()\n            .expectStatus().isBadRequest()\n            .expectBody(Void.class);\n}\n```\n\nThe funny part comes now: if I simply give another broken JSON like this in the payload instead:\n\n```\n{""status"": notquoted }\n```\n\nI get the expected error response.\n\nAnother fun part: when sending the same blocking payload via Postman, it returns the expected response.\n\nI could drill it down having something todo with Spring Security. If I take it out of the mix, it seems to work as expected. Not sure though, where the root cause comes from. Since it\'s working with Postman, I tend to think it\'s the `WebTestClient`.\n\nI attached a test project that shows that behavior. Maybe it helps.\n\n\n---\n\n**Affects:** 5.0.3\n\n**Attachments:**\n- [test.zip](https://jira.spring.io/secure/attachment/25405/test.zip) (_6.81 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/030bc224e30699a91e33e27a6d9782803afbd0d4, https://github.com/spring-projects/spring-framework/commit/6959e66b25785b4ad056791517411b5fb762ab9f, https://github.com/spring-projects/spring-framework/commit/a6d527e57aedd94a2e23cc8d35572076dbf0e417\n']",['closed'],[10],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nOn the server side, in all cases, the Jackson non-blocking parser reads all the input and then waits for more (and for the closing quote). From there if we receive a Servlet 3.1 `ReadListener#onAllDataRead()` notification, then the Jackson parser knows the input finished and throws ""JsonEOFException: Unexpected end-of-input: was expecting rest of token"". Otherwise the server hangs.\n\nSo this is unrelated to the WebTestClient which hangs because the server isn\'t responding (and you can see that from the logging output too). The reason a command line tool like curl works is because it sets the content-length and that doesn\'t lead to the same issue.\n\nThe trigger seems to be Spring Security switching threads, in which case the `onAllDataRead` callback is never received. [Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg) I see you submitted a PR to detect of end of input when `ServletInputStream.read()` returns -1, which would work around the lack of notification, but I still don\'t understand why we don\'t get that notification in the first place? I\'ve looked over the Servlet API for non-blocking I/O, and I can\'t find anything to explain this. So isn\'t this an issue that needs to be fixed in Tomcat? I did check that switching to Jetty does work.\n\nI didn\'t try yet but I suspect it might be easy to reproduce this by creating a simple Servlet with a ReadListener that reads the same input off the Servlet container thread.\n', ""**[Veit Guna](https://jira.spring.io/secure/ViewProfile.jspa?name=vguna)** commented\n\nThanks Rossen for taking your time having a look at this!\n\nThe problem with Tomcat was just something I encountered when trying to reproduce an error with Jetty regarding the same problematic payload and throwing `Connection closed prematurely` like this:\n\n```\nreactor.core.Exceptions$ReactiveException: java.io.IOException: Connection closed prematurely\n\tat reactor.core.Exceptions.propagate(Exceptions.java:326)\n\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:124)\n\tat reactor.core.publisher.Mono.block(Mono.java:1186)\n\tat org.springframework.test.web.reactive.server.DefaultWebTestClient$DefaultRequestBodyUriSpec.exchange(DefaultWebTestClient.java:282)\n\tat foo.bar.rbs.rest.resource.GenericRestContractIT.testBrokenJson(GenericRestContractIT.java:36)\n\tat sun.reflect.GeneratedMethodAccessor35.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:104)\n\tat org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:205)\n\tat org.springframework.test.context.testng.AbstractTestNGSpringContextTests.run(AbstractTestNGSpringContextTests.java:180)\n\tat org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:217)\n\tat org.testng.internal.Invoker.invokeMethod(Invoker.java:641)\n\tat org.testng.internal.Invoker.invokeTestMethod(Invoker.java:851)\n\tat org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1177)\n\tat org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:129)\n\tat org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:112)\n\tat org.testng.internal.thread.ThreadUtil$2.call(ThreadUtil.java:64)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n\tSuppressed: java.lang.Exception: #block terminated with an error\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:126)\n\t\t... 20 more\nCaused by: java.io.IOException: Connection closed prematurely\n\tat reactor.ipc.netty.http.client.HttpClientOperations.onInboundClose(HttpClientOperations.java:262)\n\tat reactor.ipc.netty.channel.ChannelOperationsHandler.channelInactive(ChannelOperationsHandler.java:110)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224)\n\tat io.netty.channel.ChannelInboundHandlerAdapter.channelInactive(ChannelInboundHandlerAdapter.java:75)\n\tat io.netty.handler.codec.http.HttpContentDecoder.channelInactive(HttpContentDecoder.java:205)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224)\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelInactive(CombinedChannelDuplexHandler.java:420)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInputClosed(ByteToMessageDecoder.java:377)\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelInactive(ByteToMessageDecoder.java:342)\n\tat io.netty.handler.codec.http.HttpClientCodec$Decoder.channelInactive(HttpClientCodec.java:282)\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelInactive(CombinedChannelDuplexHandler.java:223)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224)\n\tat io.netty.handler.logging.LoggingHandler.channelInactive(LoggingHandler.java:167)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231)\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelInactive(AbstractChannelHandlerContext.java:224)\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelInactive(DefaultChannelPipeline.java:1407)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:245)\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelInactive(AbstractChannelHandlerContext.java:231)\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelInactive(DefaultChannelPipeline.java:925)\n\tat io.netty.channel.AbstractChannel$AbstractUnsafe$8.run(AbstractChannel.java:822)\n\tat io.netty.util.concurrent.AbstractEventExecutor.safeExecute(AbstractEventExecutor.java:163)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor.runAllTasks(SingleThreadEventExecutor.java:404)\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:463)\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:886)\n\t... 1 more\n```\n\nSadly I can't reproduce it in that test project. My guess is that it might be related (?).\n"", ""**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** commented\n\n> So isn't this an issue that needs to be fixed in Tomcat?\n\nI also think so. I'm working on it.\n\nHowever I think that from performance point of view it is better to react on **-1** instead of waiting for container's event.\n"", '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nOkay fair enough that we should react on -1 rather than wait. I\'m scheduling for 5.0.5.\n\n[Veit Guna](https://jira.spring.io/secure/ViewProfile.jspa?name=vguna), no worries and thanks for taking the time to report the issue! Let\'s keep this ticket focused on the hanging issue. You can create a new one with a fresh description for the ""Connection closed prematurely"".\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis should be resolved now. In addition to fixing the hanging issue, I've also committed a second a fix to ensure the JsonEOFException is treated as a 400 error (instead of 500) so that the test in the sample application is now green.\n"", ""**[Veit Guna](https://jira.spring.io/secure/ViewProfile.jspa?name=vguna)** commented\n\nThat are excellent news, thanks guys for the quick fix! Yeah, I'm coming back regarding Jetty, when I can reproduce it in a test project.\n"", ""**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** commented\n\nHi,\n\n> So isn't this an issue that needs to be fixed in Tomcat?\n\nI worked on that. It appeared that there is an issue in Spring Framework that needs to be fixed.\nhttps://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/server/reactive/ServletServerHttpRequest.java#L266\n\nThe implementation should check first the active method **isReady** and then **isFinished** as the last is not active.\n\nIn the scenario above in case the request body is read, the current implementation will not invoke **isReady** and thus Tomcat will not schedule a dispatch, and **onAllDataRead** event will never be called.\n\nHere is a PR https://github.com/spring-projects/spring-framework/pull/1722\n\nThe scenario is working with Jetty because it behaves a bit different and there is no read that returns **-1**\n\nLogs with Jetty\n\n```\n2018-03-07 16:55:56.534 TRACE 37568 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : UNSUBSCRIBED -> SUBSCRIBING\n2018-03-07 16:55:56.536 TRACE 37568 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : Signal request(32)\n2018-03-07 16:55:56.536 TRACE 37568 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : SUBSCRIBING -> DEMAND\n2018-03-07 16:55:56.536 TRACE 37568 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : I/O event onDataAvailable\n2018-03-07 16:55:56.536 TRACE 37568 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : DEMAND -> READING\n2018-03-07 16:55:56.536 TRACE 37568 --- [     parallel-1] o.s.h.s.r.ServletServerHttpRequest       : InputStream read returned 27 bytes\n2018-03-07 16:55:56.536 TRACE 37568 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : Data item read, publishing..\n2018-03-07 16:55:56.541 TRACE 37568 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : Signal request(1)\n2018-03-07 16:55:56.541 TRACE 37568 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : No more data to read\n2018-03-07 16:55:56.541 TRACE 37568 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : READING -> DEMAND\n2018-03-07 16:55:56.542 TRACE 37568 --- [tp1044965465-21] etServerHttpRequest$RequestBodyPublisher : I/O event onAllDataRead\n2018-03-07 16:55:56.542 TRACE 37568 --- [tp1044965465-21] etServerHttpRequest$RequestBodyPublisher : DEMAND -> COMPLETED\n2018-03-07 16:55:56.544 TRACE 37568 --- [tp1044965465-21] etServerHttpRequest$RequestBodyPublisher : Signal cancel()\n2018-03-07 16:55:56.544 TRACE 37568 --- [tp1044965465-21] etServerHttpRequest$RequestBodyPublisher : Signal cancel()\n```\n\nLogs with Tomcat\n\n```\n2018-03-07 16:58:40.237 TRACE 37574 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : UNSUBSCRIBED -> SUBSCRIBING\n2018-03-07 16:58:40.239 TRACE 37574 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : Signal request(32)\n2018-03-07 16:58:40.239 TRACE 37574 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : SUBSCRIBING -> DEMAND\n2018-03-07 16:58:40.240 TRACE 37574 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : I/O event onDataAvailable\n2018-03-07 16:58:40.240 TRACE 37574 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : DEMAND -> READING\n2018-03-07 16:58:40.240 TRACE 37574 --- [     parallel-1] tpHandlerAdapter$TomcatServerHttpRequest : read:27\n2018-03-07 16:58:40.240 TRACE 37574 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : Data item read, publishing..\n2018-03-07 16:58:40.244 TRACE 37574 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : Signal request(1)\n2018-03-07 16:58:40.244 TRACE 37574 --- [     parallel-1] tpHandlerAdapter$TomcatServerHttpRequest : read:-1\n2018-03-07 16:58:40.244 TRACE 37574 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : No more data to read\n2018-03-07 16:58:40.245 TRACE 37574 --- [     parallel-1] etServerHttpRequest$RequestBodyPublisher : READING -> DEMAND\n2018-03-07 16:58:42.307  INFO 37574 --- [       Thread-3] onfigReactiveWebServerApplicationContext : Closing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@42a15bdc: startup date [Wed Mar 07 16:58:37 EET 2018]; root of context hierarchy\n2018-03-07 16:58:42.375 TRACE 37574 --- [nio-8080-exec-2] etServerHttpRequest$RequestBodyPublisher : I/O event onError: java.lang.IllegalStateException: Async operation timeout.\n2018-03-07 16:58:42.375 TRACE 37574 --- [nio-8080-exec-2] etServerHttpRequest$RequestBodyPublisher : DEMAND -> COMPLETED\n2018-03-07 16:58:42.380 TRACE 37574 --- [nio-8080-exec-2] etServerHttpRequest$RequestBodyPublisher : Signal cancel()\n2018-03-07 16:58:42.380 TRACE 37574 --- [nio-8080-exec-2] etServerHttpRequest$RequestBodyPublisher : Signal cancel()\n```\n\n"", ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\n[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg), thanks for this finding!\n\n> Yeah, I'm coming back regarding Jetty, when I can reproduce it in a test project.\n\n[Veit Guna](https://jira.spring.io/secure/ViewProfile.jspa?name=vguna), I didn't quite catch, did you mean it still doesn't work for Jetty? If so can you verify again once the [current build](https://build.spring.io/browse/SPR-PUB-5868) completes.\n"", ""**[Veit Guna](https://jira.spring.io/secure/ViewProfile.jspa?name=vguna)** commented\n\nExactly. Running it with Jetty doesn't lockup like Tomcat, but reproduces connection errors from time to time. This is where I started my journey. Actually without Tomcat. I thought this was netty related and created a ticket there initially:\n\nhttps://github.com/reactor/reactor-netty/issues/291\n\nWhile trying to isolate and reproduce in a separate project, I couldn't. But realized, that Tomcat had lockups instead. I thought this might be related and focussed on it - since it was easier to reproduce. I _think_ I checked 5.0.5 with Jetty as well after the fix. But let me doublecheck next week to make sure.\n"", '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\n> I think I checked 5.0.5 with Jetty as well after the fix.\n\nThere are two fixes now. See the discussion above with [Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg) and her pull request that processed 5 days ago.\n']"
03468fd9ed2e9b07c672897ef6fd98a0224228bd,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java,Add_Condition,"-		mergedHolder = new PropertiesHolder(mergedProps, -1);
+		long latestTimestamp = -1;
+					if (propHolder.getFileTimestamp() > latestTimestamp) {
+						latestTimestamp = propHolder.getFileTimestamp();
+					}
+		mergedHolder = new PropertiesHolder(mergedProps, latestTimestamp);",6,condition,ReloadableResourceBundleMessageSource sets file timestamp on merged holder,"Issue: SPR-14583
",,19152,1,['Method getMergedProperties in ReloadableResourceBundleMessageSource does not set fileTimestamp [SPR-14583]'],"['**[Igor Stepanov](https://jira.spring.io/secure/ViewProfile.jspa?name=stepio.ua)** opened **[SPR-14583](https://jira.spring.io/browse/SPR-14583?redirect=false)** and commented\n\nHello Spring team,\n\nI\'d like to use ReloadableResourceBundleMessageSource to implement REST service to access localized content. And to achieve best performance, I\'d like to support caching with ""if-modified-since"". So the idea is to rely on PropertiesHolder.getFileTimestamp() method to understand if some of the underlying property files was updated or not.\n\nI\'ve extended ReloadableResourceBundleMessageSource and call next method:\n\n```java\nprotected PropertiesHolder getMergedProperties(Locale locale) {\n     PropertiesHolder mergedHolder = this.cachedMergedProperties.get(locale);\n     if (mergedHolder != null) {\n          return mergedHolder;\n     }\n     Properties mergedProps = newProperties();\n     mergedHolder = new PropertiesHolder(mergedProps, -1);\n     String[] basenames = StringUtils.toStringArray(getBasenameSet());\n     for (int i = basenames.length - 1; i >= 0; i--) {\n          List<String> filenames = calculateAllFilenames(basenames[i], locale);\n          for (int j = filenames.size() - 1; j >= 0; j--) {\n               String filename = filenames.get(j);\n               PropertiesHolder propHolder = getProperties(filename);\n               if (propHolder.getProperties() != null) {\n                        mergedProps.putAll(propHolder.getProperties());\n               }\n          }\n     }\n     PropertiesHolder existing = this.cachedMergedProperties.putIfAbsent(locale, mergedHolder);\n     if (existing != null) {\n          mergedHolder = existing;\n     }\n     return mergedHolder;\n}\n```\n\nHowever in current implementation property fileTImestamp is initialized with -1 and never gets updated, so it\'s not really useful. What do you think about updating it with latest fileTimestamp of the PropertiesHolder instances which are merged into this one?\n\nMoreover, what about adding some setPropertiesChangedCallback() method to make it possible to subscribe to the file updates? In my case this change will allow to push changes to consumer through some message bus and prevent repeated checking through REST interface.\n\n---\n\n**Affects:** 4.3.2\n\n**Issue Links:**\n- #16791 Race condition in ReloadableResourceBundleMessageSource since 4.1.0\n- #15133 ReloadableResourceBundleMessageSource locks properties hashmap and fails under load.\n- #17265 ResourceBundleMessageSource should allow for custom PropertyResourceBundle subclass\n- #14948 Allow adding resources to ReloadableResourceBundleMessageSource\n\n']",['closed'],[4],"[""**[Igor Stepanov](https://jira.spring.io/secure/ViewProfile.jspa?name=stepio.ua)** commented\n\nAs the first stage I'd like to know just your opinion - if this is really a good idea and worth implementing, or maybe you know a better approach for such use case.\n\nThanks!\n"", '**[Igor Stepanov](https://jira.spring.io/secure/ViewProfile.jspa?name=stepio.ua)** commented\n\nThanks for attending #JavaDayKyiv, `@jhoeller`! Hope you\'ve also enjoyed the visit and was not too annoyed with all the attention from the grateful Spring users (including me, of course).\n\nAs discussed, this issue still matters for me, and actually it can be decomposed into two parts:\n1. Just return the correct timestamp in `PropertiesHolder.getFileTimestamp()`.\n2. Add some callback to allow some ""reacting"" when it\'s detected that properties are modified.\n\nFirst one is simple and looks more like a bug - the method does not return the data, which is promised according to the signature. Second one is a bit more complex, but actually fits well the reactive idea of Spring 5.\n\nIn my case I\'ve implemented a separate micro-service as a server-side holder for i18n content. And it would be rather efficient to allow this service push the updated data to subscribers upon actual content update instead of periodic pulling.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe're setting the file timestamp on the merged holder as of 4.3.4 now, simply to the latest timestamp of the original holders.\n\nAs for reacting to changed properties: Effectively, the existing protected `loadProperties` method is only ever called when a new or modified resource has been detected. So by overriding that method, calling `super.loadProperties` first, you could reliably react to property file updates already before letting the base class proceed...\n"", '**[Igor Stepanov](https://jira.spring.io/secure/ViewProfile.jspa?name=stepio.ua)** commented\n\nThanks, for the fix, will try the new release.\n\nAlso got the idea about `loadProperties` - yeah, this should do the job.\n']"
03b409f891f8ae3e2e22fc347695d07211cf5b8e,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java,Remove_Condition,"-		for (Advisor advisor : advisors) {
-			proxyFactory.addAdvisor(advisor);
-		}
-
+		
+		proxyFactory.addAdvisors(advisors);
+",7,iteration,Use dedicated addAdvisors,"See gh-1469
",,1469,1,['replace for  with addAdvisors method'],['replace the code \r\nfor (Advisor advisor : advisors) {\r\n\t\t\tproxyFactory.addAdvisor(advisor);\r\n\t\t}\r\nwith\r\nproxyFactory.addAdvisors(advisors)'],['closed'],[2],"['@IAMTJW Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1469)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1469) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@IAMTJW Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1469)!']"
03d6350e4b3c7e23e3cc84bf3f261f2c53b5b1e9,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java,Condition_Change,"-		if (providedArgs == null || parameter.hasParameterAnnotations()) {
+		if (providedArgs == null) {",2,condition,Fix issue with resolution of WebDataBinder argument,"There is usually not need to put annotations on a WebDataBinder
argument in an `@InitBinder` method. However, the presence of any
annotation prevented the successful resolution of the argument.
This fix addresses the issue.

Issue: SPR-8946
",,13586,1,"['If you annotate any parameter in a @InitBinder method, it fails at runtime. [SPR-8946]']","[""**[Ulon](https://jira.spring.io/secure/ViewProfile.jspa?name=monzonj)** opened **[SPR-8946](https://jira.spring.io/browse/SPR-8946?redirect=false)** and commented\n\nGiven the following init binder method:\n\n    @InitBinder()\n    protected void initBinder(WebDataBinder binder) {\n        .....\n    }\n\nif you annotate the binder parameter with, let's say, `@Nonnull` annotation (very useful for IDE inspection or unit testing) spring MVC is not capable to correctly resolve the parameter\n\n    @InitBinder()\n    protected void initBinder(@Nonnull WebDataBinder binder) {\n        .....\n    }\n\nException:\n\njava.lang.IllegalStateException: No suitable resolver for argument [0] [type=org.springframework.web.bind.WebDataBinder]\n\n\n---\n\n**Affects:** 3.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03d6350e4b3c7e23e3cc84bf3f261f2c53b5b1e9, https://github.com/spring-projects/spring-framework/commit/229537288a721ea1f73d7fee5ce9dd60ec46c23e\n""]",['closed'],[2],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThe presence of annotations on the WebDataBinder argument should not have any effect. Does it work without the annotation? I assume it does in which case consider reproducing the issue by following these [instructions](https://github.com/SpringSource/spring-framework-issues#readme). What version of Spring do you have? Attaching a more complete stack trace would also be helpful.\n', '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis was indeed an issue just as described.\n']"
044ea17bf935d651c269baad966d58f8fcf6c9aa,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java,Condition_Change,"-		if (reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.Deferred"", classLoader)) {
+		if (this.reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.Deferred"", classLoader)) {
-		if (reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.flow.Flow"", classLoader)) {
+		if (this.reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.flow.Flow"", classLoader)) {",4,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
050e79e45ed0cdab1a4e3f522e2e9b601a13d94d,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java,Add_Condition,"-	 * Check if the path has a file extension and whether the extension is either
-	 * {@link #WHITELISTED_EXTENSIONS whitelisted} or
-	 * {@link ContentNegotiationManager#getAllFileExtensions() explicitly
-	 * registered}. If not add a 'Content-Disposition' header with a safe
-	 * attachment file name (""f.txt"") to prevent RFD exploits.
+	 * Check if the path has a file extension and whether the extension is
+	 * either {@link #WHITELISTED_EXTENSIONS whitelisted} or explicitly
+	 * {@link ContentNegotiationManager#getAllFileExtensions() registered}.
+	 * If not, and the status is in the 2xx range, a 'Content-Disposition'
+	 * header with a safe attachment file name (""f.txt"") is added to prevent
+	 * RFD exploits.
+		try {
+			int status = response.getServletResponse().getStatus();
+			if (status < 200 || status > 299) {
+				return;
+			}
+		}
+		catch (Throwable ex) {
+			// Ignore
+		}
+",9,condition,Skip Content-Disposition header if status != 2xx,"Issue: SPR-13588
",,18165,1,['Skip Content-Disposition header when status != 2xx [SPR-13588]'],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-13588](https://jira.spring.io/browse/SPR-13588?redirect=false)** and commented\n\nThe fix to protect against RFD exploits (#18124) introduced a `""Content-Disposition:attachment;filename=f.txt""` response header for `@ResponseBody` methods where the URL appears to have an extension that is neither whitelisted by default nor explicitly registered by the application.\n\nThe URL checked for extensions is always the original URL even in the case of a forwarded request. In the case of an ERROR dispatch, Servlet containers are expected to set up the same request attributes as for forwarded requests.\n\nSince Spring Boot relies on ERROR dispatches, a request with an unknown extension that results in an error can be rendered with a Content-Disposition header. This doesn\'t appear to cause issues in the browser but we should explore whether we can drop the header in such cases.\n\nNote this issue was originally reported under [Spring Boot ticket #4220](https://github.com/spring-projects/spring-boot/issues/4220#issuecomment-148917466).\n\n---\n\n**Affects:** 3.2.15, 4.1.8, 4.2.2\n\n**Issue Links:**\n- #18190 Skip Content-Disposition header when requestUri is the context and/or the servlet path (_**""is duplicated by""**_)\n- #18164 Content-Disposition header causes download in browser for Spring Boot Actuator endpoints\n- #18124 Protect against RFD exploits\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a8798970639033f5cdcf979c4ee7174ba00157f2, https://github.com/spring-projects/spring-framework/commit/050e79e45ed0cdab1a4e3f522e2e9b601a13d94d\n\n**Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)\n']",['closed'],[3],"[""**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** commented\n\nI'm not sure this is the best idea since the error page might contain reflected input.\n"", '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI guess the question is whether the download behavior is different for status 4xx and 5xx. That includes the content types for which specific browsers may force a download (section 2.3.1 in the RFD paper) and/or the hyperlink ""download"" attribute. If an error status precludes a download, then presumably there is no need for a content-disposition header.\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nBrowsers I tested with (Firefox, Chrome, IE 7/8/9) don't seem to switch to download when status is 4xx or 5xx. In Firefox/Chrome the presence of a Content-Disposition header actually seems to be treated as an error. In Firefox it shows as 404 ([this ticket](https://bugzilla.mozilla.org/show_bug.cgi?id=364354) looks relevant). Furthermore it doesn't make sense to have Content-Disposition with 3xx either so the final fix checks if response is in 2xx range.\n""]"
052bbcc53031bd48dc76d070ba862f5293618600,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,"Add_Condition, Condition_Change","+		Class<?>[] parameterTypes = null;
-			Class<?>[] ifcs = current.getInterfaces();
-			for (Class<?> ifc : ifcs) {
+			if (parameterTypes == null) {
+				// Since Method#getParameterTypes() clones the array, we lazily retrieve
+				// and cache parameter types to avoid cloning the array multiple times.
+				parameterTypes = method.getParameterTypes();
+			}
+			for (Class<?> ifc : current.getInterfaces()) {
-					return ifc.getMethod(method.getName(), method.getParameterTypes());
+					return ifc.getMethod(method.getName(), parameterTypes);",9,"condition, iteration",Cache parameter types array in ClassUtils.findInterfaceMethodIfPossible(),,,,0,N/A,N/A,N/A,N/A,N/A
05521027800ef2a49342ac7ef2e5cd1304a080bf,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+	/** Maximum number of suppressed exceptions to preserve. */
+	private static final int SUPPRESSED_EXCEPTIONS_LIMIT = 100;
+
+
-	/** List of suppressed Exceptions, available for associating related causes. */
+	/** Collection of suppressed Exceptions, available for associating related causes. */
-	 * Register an Exception that happened to get suppressed during the creation of a
+	 * Register an exception that happened to get suppressed during the creation of a
+	 * <p>The default implementation preserves any given exception in this registry's
+	 * collection of suppressed exceptions, up to a limit of 100 exceptions, adding
+	 * them as related causes to an eventual top-level {@link BeanCreationException}.
+	 * @see BeanCreationException#getRelatedCauses()
-			if (this.suppressedExceptions != null) {
+			if (this.suppressedExceptions != null && this.suppressedExceptions.size() < SUPPRESSED_EXCEPTIONS_LIMIT) {",5,condition,Enforce limit for storing suppressed exceptions,"Closes gh-24902
",,24902,1,['Put a limit on the size of DefaultSingletonBeanRegistry#suppressedExceptions'],"['Spring 5.1.8\r\n\r\nWhilst converting a particularly complex ball-of-mud legacy application from XML config to `@Configuration`-style config, I am finding that diagnosing circular references that trigger `BeanCurrentlyInCreationException`s causes an `OutOfMemoryError` before any actual exception is thrown during context initialisation. This doesn\'t happn with the pure XML-based config, only when I mix Java and XML styles.\r\n\r\nWhen I look at the `hprof` file, 96% of the 2.5GB heap is retained by the `DefaultSingletonBeanRegistry#suppressedExceptions` field, which is full of massively-nested `BeanCreationException`s  - 12592 of them, in this case.\r\n\r\nIt woul make sense to me if the `suppressedExceptions` field were to have a size limiter added, to prevent it growing so large. It\'s only there for diagnostics, and 12000+ exceptons isn\'t going to help anyone. I on\'t know what a sensible size imit would be, but more than a few dozen would seem to be unecessary and unhelpful.\r\n\r\nIn my case, the limiter would at least allow the context init to fail ""gracefully"". I don\'t know what it is about my set up, but its much too complex for me to post as a test case, sorry.\r\n']",['closed'],[0],[]
05683fed7a3f9b51c4a251363504b0aef12826d3,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,Condition_Change,"-		if (beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {
+		if (!IN_NATIVE_IMAGE && beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {",2,condition,Skip LoadTimeWeaverAwareProcessor with native images,,,,0,N/A,N/A,N/A,N/A,N/A
05b15812bbffc86cd3ee4c664e2eccfb4ec0092b,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/RootBeanDefinition.java,Condition_Change,"-		if (attribute instanceof Constructor<?>[]) {
-			return (Constructor<?>[]) attribute;
+		if (attribute instanceof Constructor<?>[] constructors) {
+			return constructors;",4,condition,Apply instanceof pattern matching in RootBeanDefinition,"Closes gh-32520
",,32520,1,['Apply instanceof pattern matching in `RootBeanDefinition`'],['This pull request applies the instanceof pattern matching in the RootBeanDefinition class. This enhancement will improve code readability.'],['closed'],[3],"['Hi @FelixDes,\r\n\r\nIn the future, please do your best to collect multiple related changes in a PR, since we generally do not like to merge PRs that effectively change a single line of code for style-related reasons.', 'This has been merged into `main`.\r\n\r\nThanks', ""Thanks a lot for your advice. I'm very glad to see that my PR has been accepted.""]"
05d616240ad08f69926368f5549b6472c27a0d5c,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java,Add_Condition,"+		else if (contentType != null && contentType.isCompatibleWith(MediaType.APPLICATION_JSON)) {
+			// Matching to AbstractJackson2HttpMessageConverter#DEFAULT_CHARSET
+			return StandardCharsets.UTF_8;
+		}",3,condition,StringHttpMessageConverter defaults to UTF-8 for JSON,"Issue: SPR-17568
",,22100,1,['StringHttpMessageConverter should assume charset UTF-8 for application/json [SPR-17568]'],"['**[Thomas Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasmey)** opened **[SPR-17568](https://jira.spring.io/browse/SPR-17568?redirect=false)** and commented\n\nWhen using ""`@RequestBody` String jsonString"" for an `@Controller`\'s `@RequestMapping` and the body is send as application/json with UTF-8 encoding, Spring uses StringHttpMessageConverter to convert the message, as the content-type will be application/json without any explicit encoding, so the StringHttpMessageConverter will fall back to the default encoding ISO-8859-1 which may is in accordance with the HTTP spec but not with RFC7159, which says: ""The default encoding is UTF-8"" (chapter 8.1)\n\n\xa0\n\nSo the suggestion would be to add an exception in the StringHttpMessageConverter to use UTF-8 charset for application/json.\n\n\xa0\n\n\xa0\n\n\n---\n\n**Affects:** 5.1.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/05d616240ad08f69926368f5549b6472c27a0d5c\n']",['closed'],[2],"[""**[Thomas Meyer](https://jira.spring.io/secure/ViewProfile.jspa?name=thomasmey)** commented\n\nWhen using Jersey as client it's especially problematic as Jersey's StringMessageProvider (https://github.com/jersey/jersey/blob/master/core-common/src/main/java/org/glassfish/jersey/message/internal/StringMessageProvider.java\xa0) uses default encoding UTF-8 for content-type application/json.\n"", '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis is also supported by the current HTTP 1.1 spec [RFC 7231](https://tools.ietf.org/html/rfc7231#appendix-B):\n\n> The default charset of ISO-8859-1 for text media types has been\r\n> removed; the default is now whatever the media type definition says.\n\nWe can update `StringHttpMessageConverter` to check for `application/*+json` and use UTF-8, which is what `AbstractJackson2HttpMessageConverter` does by default.\n']"
0634555424a8742bbe95333c49975437af6eacf8,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/PatternsRequestCondition.java,Condition_Change,"+	@Override
+	@Override
-		boolean endsWithSlash = pattern.endsWith(""/"");
-			if (!endsWithSlash && this.pathMatcher.match(pattern + ""/"", lookupPath)) {
+			if (!pattern.endsWith(""/"") && this.pathMatcher.match(pattern + ""/"", lookupPath)) {
+	@Override",6,condition,Delay check if pattern ends with slash,"This is a minor fix with no actual impact.

Issue: SPR-10504
",,14998,1,['Unnecessary check in PatternsRequestCondition.getMatchingPattern [SPR-10504]'],"['**[Alex Pogrebnyak](https://jira.spring.io/secure/ViewProfile.jspa?name=alex.spring@reflexion.net)** opened **[SPR-10504](https://jira.spring.io/browse/SPR-10504?redirect=false)** and commented\n\nOn line 259 in `org.springframework.web.servlet.mvc.condition.PatternsRequestCondition` shipped with version 3.2.2 this block from `getMatchingPattern` function has unnecessary code.\n\n```java\nboolean endsWithSlash = pattern.endsWith(""/"");\nif (this.useTrailingSlashMatch) {\n    if (!endsWithSlash && this.pathMatcher.match(pattern + ""/"", lookupPath)) {\n        return pattern +""/"";\n    }\n}\n```\n\n`endsWithSlash` initialization should be moved inside `if` statement as it is not used anywhere else in the function\n\n\n---\n\n**Affects:** 3.2.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4bb0916202ac19c20f77cc9883d0746660036389, https://github.com/spring-projects/spring-framework/commit/0634555424a8742bbe95333c49975437af6eacf8\n']",['closed'],[0],[]
0637864b3909ab13727cb228258b778a265da8d9,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,Condition_Change,"-		A annotation = clazz.getDeclaredAnnotation(annotationType);
-		if (annotation != null) {
-			return annotation;
+		if (isAnnotationDeclaredLocally(annotationType, clazz)) {
+			return clazz.getAnnotation(annotationType);
-			annotation = findAnnotation(ifc, annotationType, visited);
+			A annotation = findAnnotation(ifc, annotationType, visited);
-				annotation = findAnnotation(ann.annotationType(), annotationType, visited);
+				A annotation = findAnnotation(ann.annotationType(), annotationType,
+						visited);",10,condition,Ensure AnnotationUtils is compatible with Java 6,"The previous commit introduced a dependency on
Class.getDeclaredAnnotation() which is a Java 8 API.

This commit refactors AnnotationUtils.findAnnotation(Class, Class, Set)
to use Class.getAnnotation() in conjunction with
isAnnotationDeclaredLocally() in order to achieve the same desired
behavior.

Issue: SPR-11475
",,16100,1,['Favor more locally declared composed annotations over inherited annotations in AnnotationUtils [SPR-11475]'],"['**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-11475](https://jira.spring.io/browse/SPR-11475?redirect=false)** and commented\n\n#### Status Quo\n\nThe implementations of both `AnnotationUtils` and `AnnotatedElementUtils` (and possibly `AbstractRecursiveAnnotationVisitor` as well) currently favor _inherited_ annotations and _inherited_ composed annotations over composed annotations that are declared closer to the starting class passed to the `findAnnotation()` and `getAnnotationAttributes()` methods.\n\nGiven a class hierarchy with a depth of at least three, if the lowest level (e.g., `Level3`) is not directly annotated but `Level2` (a direct superclass of `Level3`) is directly annotated with `@ComposedAnno` (which is meta-annotated with `@Anno`) and `Level1` (a direct superclass of `@Level2`) is directly annotated with either `@Anno` or a composed annotation that is meta-annotated with `@Anno`, if the `@ComposedAnno` annotation is not declared as `@Inherited`, then any attributes declared via `@Anno` on `@ComposedAnno` (present on class `Level2`) will be _shadowed_ by those declared via `@Anno` on class `Level1`.\n\nThis behavior is very non-intuitive and would likely be considered a _bug_ by any developers who encounter it.\n\n---\n\n#### Concrete Example\n\nGiven...\n\n```java\n@Component(value = ""composed1"")\n@Retention(RetentionPolicy.RUNTIME)\n@Inherited\n@interface Composed1 {}\n\n@Component(value = ""composed2"")\n@Retention(RetentionPolicy.RUNTIME)\n@interface Composed2 {}\n\n@Composed1\nclass Level1 {}\n\n@Composed2\nclass Level2 extends Level1 {}\n\nclass Level3 extends Level2 {}\n```\n\nIf we execute the following unit test, one would likely expect that ""composed2"" should be found, since the immediate superclass is annotated with `@Composed2`; however, with the current implementation ""composed1"" will be found since `@Composed1` is declared as `@Inherited` and therefore _shadows_ `@Composed2`. As such, the test fails on the last line.\n\n```java\n@Test\npublic void findAnnotationFavorsInheritedComposedAnnotationsOverMoreLocallyDeclaredComposedAnnotations() {\n    Component component = AnnotationUtils.findAnnotation(Level3.class, Component.class);\n    assertNotNull(component);\n    assertEquals(""composed2"", component.value());\n}\n```\n\n---\n\n#### Proposal\n\nRefactor the affected implementations of `AnnotationUtils` and `AnnotatedElementUtils` so that _more locally declared_ composed annotations are favored over inherited annotations and inherited composed annotations.\n\nThis can likely be achieved by using the `getDeclaredAnnotation()` and `getDeclaredAnnotations()` methods in `java.lang.Class` instead of the `getAnnotation()` and `getAnnotations()` which are currently being used in these utility classes.\n\nNote that `MetaAnnotationUtils` already uses `getDeclaredAnnotations()`.\n\n---\n\n#### Deliverables\n\n1. [x] Refactor `AnnotationUtils` to use `getDeclaredAnnotation()` and `getDeclaredAnnotations()` where appropriate.\n2. [ ] Refactor `AnnotatedElementUtils` to use `getDeclaredAnnotation()` and `getDeclaredAnnotations()` where appropriate.\n\n---\n\n**Affects:** 4.0 GA\n\n**Issue Links:**\n- #16221 Favor more locally declared composed annotations over inherited annotations (_**""is depended on by""**_)\n- #16219 Annotations on superclasses are detected by StandardAnnotationMetadata\n- #16960 Favor more locally declared composed annotations over interface annotations in AnnotationUtils\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a2f1169e820c76df7f06f2b2b921b184b8775b45, https://github.com/spring-projects/spring-framework/commit/0f5a27c3545275bbd7c196124c51f6e66da6d164, https://github.com/spring-projects/spring-framework/commit/1d30bf83a0d6f303ce38526286b90172c3c596c6, https://github.com/spring-projects/spring-framework/commit/0637864b3909ab13727cb228258b778a265da8d9, https://github.com/spring-projects/spring-framework/commit/90b938aa8faf68d433dea19b4688eeac9d8a1416\n']",['closed'],[5],"[""**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\nResolved as described in the comments for [GitHub commit 0f5a27c](https://github.com/spring-projects/spring-framework/commit/0f5a27c3545275bbd7c196124c51f6e66da6d164):\n\n> **Favor 'local' annotations over inherited ones**\n> \n> Prior to this commit, the implementations of findAnnotation() in\n> AnnotationUtils and getAnnotationAttributes() in AnnotatedElementUtils\n> favored inherited annotations and inherited composed annotations over\n> composed annotations that are declared closer to the starting class\n> passed to these methods.\n> \n> This commit addresses this issue as follows:\n> \n> - Refactored AnnotationUtils to use getDeclaredAnnotation() and\n>   getDeclaredAnnotations() instead of getAnnotation() and\n>   getAnnotations() where appropriate.\n> \n> - AnnotatedElementUtils.doProcess() supports a traverseClassHierarchy\n>   flag to control whether the class hierarchy should be traversed,\n>   using getDeclaredAnnotations() instead of getAnnotations() if the\n>   flag is true.\n> \n> - Overhauled Javadoc in AnnotatedElementUtils.\n\n"", '**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\nReopening in light of the issues raised in #16219.\n', '**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\nChanged subject to indicate that this issue only concerns itself with `AnnotationUtils`.\n', '**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\nThe aforementioned changes have been partially reverted. See the comments in #16219 for details.\n', '**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\nResolving as _Complete_ again.\n\nFurther work will be continued in #16221.\n']"
0720f9e9786a79503420a5c39f079f5d19aa8736,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java,Condition_Change,"-				if (!(result.get(0) instanceof Separator)) {
+				if (result.isEmpty() || !(result.get(0) instanceof Separator)) {",2,condition,Fix an eventual IndexOutOfBoundsException in RequestPredicates,,,,0,N/A,N/A,N/A,N/A,N/A
0728e32e7f3b93e49dfc8c7af20b489b12b3e663,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java,Add_Condition,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-					this.columnLabelMap.put(rsmd.getColumnLabel(i), i);
+					String key = rsmd.getColumnLabel(i);
+					// Make sure to preserve first matching column for any given name,
+					// as defined in ResultSet's type-level javadoc (lines 81 to 83).
+					if (!this.columnLabelMap.containsKey(key)) {
+						this.columnLabelMap.put(key, i);
+					}",5,condition,ResultSetWrappingSqlRowSet preserves first matching column per name (as defined in ResultSet's javadoc),"Issue: SPR-11786
",,16408,1,['JDBC findColumn gives wrong result in case of duplicate column labels [SPR-11786]'],"['**[Teun Hoogendoorn](https://jira.spring.io/secure/ViewProfile.jspa?name=th76)** opened **[SPR-11786](https://jira.spring.io/browse/SPR-11786?redirect=false)** and commented\n\nConsider the following query:\n\nTable foo1 contains 1 column named fooname.\nTable foo2 ALSO contains 1 column named fooname.\n\nSELECT * FROM foo1, foo2\n\n(result: fooname, fooname)\n\nfindColumn(""fooname"") should return the FIRST and not the SECOND (LAST) index of fooname.\n\nThis bug is introduced in Spring JDBC since the implementation ResultSetWrappingSqlRowSet uses a HashMap.\n\nThe code should check for existence of the key in the map and not override the value if the key exists.\n\nSee: http://docs.oracle.com/javase/8/docs/api/java/sql/ResultSet.html\nQUOTE: When a getter method is called with a column name and several columns have the same name, the value of the first matching column will be returned.\n\n\n\n---\n\n**Affects:** 3.2.8, 4.0.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8a28645dd66ca080cf9294db0aa328b88d737c55, https://github.com/spring-projects/spring-framework/commit/0728e32e7f3b93e49dfc8c7af20b489b12b3e663, https://github.com/spring-projects/spring-framework/commit/3ae6c0f4011efee7c42473bd1807fab05afde089\n\n**Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)\n']",['closed'],[2],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis fix is available in the latest 3.2.9 and 4.0.5 snapshots now. Please give it a try and let us know whether it works for you...\n\nJuergen\n', ""**[Teun Hoogendoorn](https://jira.spring.io/secure/ViewProfile.jspa?name=th76)** commented\n\nI've tested with spring-jdbc-3.2.9.BUILD-20140515.132116-16.jar and it is working correctly now.\n\nThanks for the fast response!\n\nTeun Hoogendoorn\n""]"
07a1aea9c73ef9859b7405c7c7d8e1905427e229,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Condition_Change,"-			if (result instanceof Object[] array) {
+			if (result instanceof Object[] array && array.length > 1) {",2,condition,Skip array sort when the length of array not greater than 1,"Closes gh-30934
",,30934,1,['Skip array sort when the length of array not greater than 1'],"[""Performance optimization(`org.springframework.beans.factory.support.DefaultListableBeanFactory#resolveMultipleBeans`):\r\n\r\nFor the sorting condition of `Collection`  is  `result instanceof List<?> list && list.size() > 1`, when the size of collection isn't greater than 1, it will skip sorting.\r\n\r\nSimilarly, skip array sort when the length of array not greater than 1.\r\n""]",['closed'],[1],['This has been merged into `6.0.x` and `main`.\r\n\r\nThanks']
085565a771270f7a124186e7691381534018dd03,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java,Add_Condition,"+import org.hibernate.bytecode.enhance.spi.EnhancementContext;
+
+					@Override
+					public void pushClassTransformer(EnhancementContext enhancementContext) {
+						if (!NativeDetector.inNativeImage()) {
+							super.pushClassTransformer(enhancementContext);
+						}
+					}",8,condition,Skip class transformer in PersistenceUnitInfoDescriptor for native images,"In order to restore native support with Hibernate 6.2, this
change updates the PersistenceUnitInfoDescriptor instance
created by SpringHibernateJpaPersistenceProvider in order to
skip the class transformer for native images.

Closes gh-30492
",,30492,1,['Skip class transformer in `PersistenceUnitInfoDescriptor` for native images'],"['Due to [this change](https://github.com/hibernate/hibernate-orm/commit/800873c43d44bc954cef8f4abb11bfe4719570a8) in Hibernate 6.2, Bytebuddy class enhancement is now invoked via `SpringHibernateJpaPersistenceProvider` -> `PersistenceUnitInfoDescriptor` - > `EnhancingClassTransformerImpl` -> `BytecodeProviderInitiator.buildDefaultBytecodeProvider()`, breaking Hibernate integration when compiling to native images.\r\n\r\nThis change updates the `PersistenceUnitInfoDescriptor` instance created by `SpringHibernateJpaPersistenceProvider` in order to skip the class transformer with native.\r\n\r\nFootprint optimization will require completing #29549 is is outside of the scope of this change.']",['closed'],[8],"['See also related issues:\r\n- https://github.com/oracle/graalvm-reachability-metadata/pull/286\r\n- https://github.com/spring-projects/spring-boot/issues/35423', 'Hi @sdeleuze if I use Spring Framework 6.0.10-SNAPSHOT should this issue be resolved? Or is there more to it?', ""I opened oracle/graalvm-reachability-metadata#297 a little while ago, as this fix on its own doesn't seem to fix the issue."", '@edeandrea using Spring Framework 6.0.10-SNAPSHOT should be enough, provided the maven-native-plugin uses the latest available reachability metadata version (0.3.1 at the time of writing).\r\n\r\nSee my comment https://github.com/spring-projects/spring-boot/issues/35659#issuecomment-1566804157 for more details.', ""Thank you @davidbilge but that unfortunately didn't work."", ""> Thank you @davidbilge but that unfortunately didn't work.\r\n\r\nDid you try to use a specific version (0.3.1) of the reachability metadata in your pom.xml?\r\n\r\n"", 'Yes I did. I opened https://github.com/oracle/graalvm-reachability-metadata/issues/297 for it.', 'We are going to release GraalVM metadata `0.3.2` and Native Build Tools `0.9.23` that contains all Hibernate 6.2 fixes.']"
0933734fbb5dae4c523b3bc0fcfb30a927ddc209,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java,Remove_Condition,"-	 * <p><b>Do not raise the number of concurrent consumers for a topic.</b>
-	 * This would lead to concurrent consumption of the same message,
-	 * which is hardly ever desirable.
+	 * <p><b>Do not raise the number of concurrent consumers for a topic,
+	 * unless vendor-specific setup measures clearly allow for it.</b>
+	 * With regular setup, this would lead to concurrent consumption
+	 * of the same message, which is hardly ever desirable.
-	@Override
-	protected void validateConfiguration() {
-		super.validateConfiguration();
-		synchronized (this.lifecycleMonitor) {
-			if (isSubscriptionDurable() && this.concurrentConsumers != 1) {
-				throw new IllegalArgumentException(""Only 1 concurrent consumer supported for durable subscription"");
-			}
-		}
-	}
-",10,condition,DefaultMessageListenerContainer allows for concurrent subscription consumers on WebLogic/ActiveMQ,"Issue: SPR-10037
",,14671,1,['Concurrent Consumers Not Allowed for Durable Subscription [SPR-10037]'],"['**[Ales Bukovsky](https://jira.spring.io/secure/ViewProfile.jspa?name=alesbukovsky)** opened **[SPR-10037](https://jira.spring.io/browse/SPR-10037?redirect=false)** and commented\n\nWhile using DefaultMessageListenerContainer for durable subscription listener within Grails 2.1.1 application, the exception is thrown if number of concurrent consumers is increased above 1. This is described in documentation and makes sense in ""vanilla"" JMS configuration.\n\nMost JMS providers however account one way or another for high-availability solution where multiple listeners share the same subscription. For example: ActiveMQ provides concept of virtual destinations and Weblogic has sharable connection factory for this very purpose. Since the solution for shared access to a single subscription is in these cases provided by lower level (vendor-specific) implementation, concurrent consumer restrictions on teh container level effectively prevents the application from using it.\n\nThe simplest solution appears to be the container class extension that bypasses/consumes the corresponding exception. The problem is that a generic invalid argument error is being thrown and the only way to ensure it is the correct one is to actually parse exception message (which is not a good design).\n\nIt would be greatly appreciated if the container class actually provides a simple and clean way to suppress the concurrent consumer restriction should the developer explicitly wish so.\n\n\n---\n\n**Affects:** 3.1.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4058f693e56d149c33f85b69a60d924e3275ff60, https://github.com/spring-projects/spring-framework/commit/0933734fbb5dae4c523b3bc0fcfb30a927ddc209\n\n**Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)\n']",['closed'],[1],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've simply lifted that restriction, not checking the currentConsumers setting against the subscriptionDurable flag anymore. This means it's up to the JMS provider to detect that case and throw a corresponding exception later when we're trying to create additional consumers.\n\nJuergen\n""]"
09da10cc6c585995f4623793aa2b2f6a38b5284d,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java,Add_Condition,"+		@Nullable
+		private Subscription subscription;
+
+			this.subscription = subscription;
+			Subscription subscription = this.subscription;
+			if (subscription != null) {
+				subscription.cancel();
+			}",8,condition,Propagate the cancel signal to the downstream,"Issue: SPR-17609
",,22141,1,['ChannelSendOperator does not propagate cancel signal to the server  [SPR-17609]'],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-17609](https://jira.spring.io/browse/SPR-17609?redirect=false)** and commented\n\nThis is a follow-up to #22038 in which writing with `Content-Length: 0` and `byte[0]` was causing hanging. The issue was fixed in 5.1.3 by using `response.setComplete()` instead of writing an empty byte array. However the underlying issue of hanging with `Content-Length: 0` and `byte[0]` remains.\n\nAfter further investigation, there is an issue in `ChanelSendOperator` in that it currently only cancels the upstream write `Publisher`. So in a case where a cancel happens after the first signal (onNext, onError, onComplete) is emitted, and therefore after the server write Subscriber is hooked in, in that scenario only the upstream write Publisher is notified to stop sending, but the server write Subscriber is not aware.\n\nIn addition to the sample in #22038 there is also a sample in https://github.com/reactor/reactor-netty/issues/518.\n\n---\n\n**Affects:** 5.1.3\n\n**Issue Links:**\n- #22038 HTTP GET from Chrome with WebFlux Rest Controller never completes\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/09da10cc6c585995f4623793aa2b2f6a38b5284d\n\n**Backported to:** [5.0.12](https://github.com/spring-projects/spring-framework/milestone/193?closed=1)\n']",['closed'],[0],[]
0a92d84778dcb03dd5bf2860f2d997d1db2687f4,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/hibernate5/SessionFactoryUtils.java,Add_Condition,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
-				session.close();
+				if (session.isOpen()) {
+					session.close();
+				}",4,condition,Check open status before close call (aligned with EntityManagerFactoryUtils),"Closes gh-27972
",,27972,1,['Inconsistent behaviour in spring-orm between EntityManagerFactoryUtils.closeEntityManager() and SessionFactoryUtils.closeSession()'],"['Whereas `EntityManagerFactoryUtils.closeEntityManager()` will check if EntityManager is open before trying to close it, `SessionFactoryUtils.closeSession()` doesn\'t check if session is open.\r\n\r\nAs a consequence, if EntityManager is closed when entering `closeEntityManager()`, nothing will happen,\r\nwhereas if Session is closed when entering `closeSession()`, a log ERROR will be generated (because of ""org.hibernate.SessionException: Session was already closed"") (tested with Spring 5.2 + Hibernate 5.1).\r\n\r\nMaybe we could have a common behaviour between both classes ?\r\n\r\nSee related commit for EntityManagerFactoryUtils : https://github.com/spring-projects/spring-framework/commit/928f5423af2f64ca9578801adaa8c9612500b952\r\n\r\n---\r\n\r\nContext : \r\n- module spring-orm\r\n  - class `org.springframework.orm.jpa.EntityManagerFactoryUtils`\r\n  - class `org.springframework.orm.hibernate5.SessionFactoryUtils`']",['closed'],[1],['Thanks @jhoeller 👍 ']
0a94dce41dd032d5f6c153863c52b2dcd1dd0e91,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/method/HandlerMethod.java,Condition_Change,"-import java.util.List;
+import java.util.Collection;
+import java.util.Map;
-						if (merged.stream().anyMatch(VALID_PREDICATE) && List.class.isAssignableFrom(type)) {
+						if (merged.stream().anyMatch(VALID_PREDICATE) &&
+								(Collection.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type))) {",6,condition,Improve HandlerMethod check when method validation applies,"Method validation needs to be used for a container such as a List or
Map, but until now we were only checking for a List container.
Moreover, in gh-31530 we improved method validation to also cover
any Collection.

This change aligns with HandlerMethod check for when method validation
applies with the underlying ability of method validation.
",,31530,1,['Improve method validation support for errors on elements within a container'],"['Expands on the validation behaviour added as part of the work for https://github.com/spring-projects/spring-framework/issues/30645, motivated by an issue with Sets containing an object with nested Lists, introduced in https://github.com/spring-projects/spring-framework/issues/29825. The adapter should now better handle nested objects for types beyond those of List or Map.']",['closed'],[2],"['For additional context, see https://github.com/spring-projects/spring-framework/issues/30645#issuecomment-1783969150. In short, currently we support `List` and `Map` containers. The goal is to also support arrays and sets, and other container types for which there is a registered Jakarta `ValueExtractor`.', 'Thanks for the report and changes. Element container handling is not only improved but also simpler.']"
0b1639d9635d31adfb6e6280776decf5fc91ec9f,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-	 * Set the fetch size for this JdbcTemplate. This is important for processing
-	 * large result sets: Setting this higher than the default value will increase
-	 * processing speed at the cost of memory consumption; setting this lower can
-	 * avoid transferring row data that will never be read by the application.
-	 * <p>Default is -1, indicating to use the JDBC driver's default
-	 * (i.e. to not pass a specific fetch size setting on the driver).
+	 * Set the fetch size for this JdbcTemplate. This is important for processing large
+	 * result sets: Setting this higher than the default value will increase processing
+	 * speed at the cost of memory consumption; setting this lower can avoid transferring
+	 * row data that will never be read by the application.
+	 * <p>Default is -1, indicating to use the JDBC driver's default configuration
+	 * (i.e. to not pass a specific fetch size setting on to the driver).
+	 * <p>Note: As of 4.3, negative values other than -1 will get passed on to the
+	 * driver, since e.g. MySQL supports special behavior for {@code Integer.MIN_VALUE}.
-	 * Set the maximum number of rows for this JdbcTemplate. This is important
-	 * for processing subsets of large result sets, avoiding to read and hold
-	 * the entire result set in the database or in the JDBC driver if we're
-	 * never interested in the entire result in the first place (for example,
-	 * when performing searches that might return a large number of matches).
-	 * <p>Default is -1, indicating to use the JDBC driver's default
-	 * (i.e. to not pass a specific max rows setting on the driver).
+	 * Set the maximum number of rows for this JdbcTemplate. This is important for
+	 * processing subsets of large result sets, avoiding to read and hold the entire
+	 * result set in the database or in the JDBC driver if we're never interested in
+	 * the entire result in the first place (for example, when performing searches
+	 * that might return a large number of matches).
+	 * <p>Default is -1, indicating to use the JDBC driver's default configuration
+	 * (i.e. to not pass a specific max rows setting on to the driver).
+	 * <p>Note: As of 4.3, negative values other than -1 will get passed on to the
+	 * driver, in sync with {@link #setFetchSize}'s support for special MySQL values.
-		if (fetchSize >= 0) {
+		if (fetchSize != -1) {
-		if (maxRows >= 0) {
+		if (maxRows != -1) {",4,condition,JdbcTemplate passes negative values other than -1 on to the driver (for MySQL's special values),"Issue: SPR-14028
",,18600,1,['Adding ability to read result sets row-by-row for MySql driver [SPR-14028]'],"['**[Uladzimir Zhuraulevich](https://jira.spring.io/secure/ViewProfile.jspa?name=zhurlik)** opened **[SPR-14028](https://jira.spring.io/browse/SPR-14028?redirect=false)** and commented\n\nIn org.springframework.jdbc.core.JdbcTemplate:\n\n> protected void applyStatementSettings(Statement stmt) throws SQLException {\n> int fetchSize = getFetchSize();\n> if (fetchSize >= 0) {\n> stmt.setFetchSize(fetchSize);\n> }\n> int maxRows = getMaxRows();\n> if (maxRows >= 0) {\n> stmt.setMaxRows(maxRows);\n> }\n> DataSourceUtils.applyTimeout(stmt, getDataSource(), getQueryTimeout());\n> }\n\nThere is no ability to set streaming mode for fetching row-by-row.\nLook at ResultSet here http://dev.mysql.com/doc/connector-j/en/connector-j-reference-implementation-notes.html\n\n\n---\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0b1639d9635d31adfb6e6280776decf5fc91ec9f\n']",['closed'],[1],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAs of 4.3, `JdbcTemplate` passes negative values other than -1 on to the driver. -1 is defined to have special semantics in `JdbcTemplate` itself, namely using the JDBC driver's own configuration (not setting any specific value on our end).\n""]"
0b580d194d2390c4cb860f337e146b90ba16c6f2,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/AbstractEntityManagerFactoryBean.java,Add_Condition,"-						throw new PersistenceException(message + ""; nested exception is "" + causeString, cause);
+						ex = new PersistenceException(message + ""; nested exception is "" + causeString, cause);
+			if (logger.isErrorEnabled()) {
+				logger.error(""Failed to initialize JPA EntityManagerFactory: "" + ex.getMessage());
+			}",5,condition,Early log entry for async EntityManagerFactory initialization failure,"Closes gh-26093
",,26093,1,['EntityManagerFactory startup failure in deferred mode is only available on first use'],"['Hello everyone!\r\nRecently I observed a strange behavior while starting a simple project with Spring-boot + Hibernate that confuse me a lot. \r\nI wrote a simple JPA entity and tried to start the project, but no entity wrote to a database. After long time searching why I accidentally had seen that the app after around 1-2 minute of correct working shut down with exit code 0 and the answer of my question appeared in a console:  **nested exception is org.hibernate.MappingException: Could not instantiate id generator [entity-name=null]**\r\nBut why the app keeps silent before that moment and doesn`t show me any information about entity creation process? I think this is not trivial and confusing.\r\n\r\nMy application.properties for reproduction\r\n\r\n```\r\nspring.session.store-type=jdbc\r\nspring.datasource.driver-class-name=org.postgresql.Driver\r\nspring.jpa.database-platform=org.hibernate.dialect.PostgreSQL10Dialect\r\nspring.datasource.url= jdbc:postgresql://localhost:5432/***\r\nspring.datasource.username=***\r\nspring.datasource.password=***\r\nspring.jpa.properties.hibernate.default_schema=demo\r\nspring.jpa.generate-ddl=true\r\nspring.jpa.hibernate.ddl-auto=create\r\n```\r\n\r\nAnd a simple JPA entity with error:\r\n```\r\n@Entity\r\npublic class Item {\r\n    @Id\r\n    public Long id;\r\n\r\n    @ElementCollection\r\n    @CollectionTable(name = ""IMAGE"")\r\n    @Column(name = ""FILENAME"")\r\n    @CollectionId(\r\n            columns = @Column(name = ""IMAGE_ID""),\r\n            type = @Type(type = ""long""),\r\n            generator = ""SEQUENCE"" <<<<< NOT CORRECT\r\n    )\r\n    protected List<String> images = new ArrayList<>();\r\n}\r\n```\r\nNow if you try to start a project then you will not see any error message for almost a one or two minutes and you doesn`t get what the problem. When you fix the error the entity writes to DB without problems\r\n\r\nSrping-boot version: v2.3.5.RELEASE']",['closed'],[5],"["">  But why the app keeps silent before that moment and doesn`t show me any information about entity creation process?\r\n\r\nI don't know but given what you've shared and the exception it is also unclear why you think this is a problem in Spring Boot. If you want support, please take the time to share a small sample that reproduces the problem. You can do so by attaching a zip to this issue or share a link to a GitHub repository."", '@snicoll \r\nBut it`s almost all that you need to reproduce. I am attaching a zip with all project to this message:\r\n[simple-demo-app.zip](https://github.com/spring-projects/spring-boot/files/5536737/simple-demo-app.zip)', ""> But it`s almost all that you need to reproduce\r\n\r\nSorry but guessing what the missing pieces are can lead to wasted efforts. I can reproduce the problem and it's yet another instance of a deadlock due to deferred bootstrap. \r\n\r\nYou can workaround the problem for now by adding the following to your project's configuration:\r\n\r\n```\r\nspring.data.jpa.repositories.bootstrap-mode=default\r\n```"", 'So this isn\'t a deadlock as I suspected initially. If you\'re not using deferred mode for JPA, the JPA instructor is initialised in the main thread and leads to the following:\r\n\r\n```\r\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name \'entityManagerFactory\' defined in class path resource [org/springframework/boot/autoconfigure/orm/jpa/HibernateJpaConfiguration.class]: Invocation of init method failed; nested exception is javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.MappingException: Could not instantiate id generator [entity-name=null]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1794) ~[spring-beans-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:594) ~[spring-beans-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:516) ~[spring-beans-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:324) ~[spring-beans-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:322) ~[spring-beans-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) ~[spring-beans-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1109) ~[spring-context-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:869) ~[spring-context-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:551) ~[spring-context-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:143) ~[spring-boot-2.3.6.RELEASE.jar:2.3.6.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:758) ~[spring-boot-2.3.6.RELEASE.jar:2.3.6.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:750) ~[spring-boot-2.3.6.RELEASE.jar:2.3.6.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:405) ~[spring-boot-2.3.6.RELEASE.jar:2.3.6.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-2.3.6.RELEASE.jar:2.3.6.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1237) ~[spring-boot-2.3.6.RELEASE.jar:2.3.6.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) ~[spring-boot-2.3.6.RELEASE.jar:2.3.6.RELEASE]\r\n\tat com.example.demo.DemoApplication.main(DemoApplication.java:14) ~[classes/:na]\r\nCaused by: javax.persistence.PersistenceException: [PersistenceUnit: default] Unable to build Hibernate SessionFactory; nested exception is org.hibernate.MappingException: Could not instantiate id generator [entity-name=null]\r\n\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:403) ~[spring-orm-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:378) ~[spring-orm-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341) ~[spring-orm-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1853) ~[spring-beans-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1790) ~[spring-beans-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\t... 17 common frames omitted\r\nCaused by: org.hibernate.MappingException: Could not instantiate id generator [entity-name=null]\r\n\tat org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.createIdentifierGenerator(DefaultIdentifierGeneratorFactory.java:124) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\tat org.hibernate.mapping.SimpleValue.createIdentifierGenerator(SimpleValue.java:355) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\tat org.hibernate.persister.collection.AbstractCollectionPersister.<init>(AbstractCollectionPersister.java:455) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\tat org.hibernate.persister.collection.BasicCollectionPersister.<init>(BasicCollectionPersister.java:59) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45) ~[na:na]\r\n\tat java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490) ~[na:na]\r\n\tat org.hibernate.persister.internal.PersisterFactoryImpl.createCollectionPersister(PersisterFactoryImpl.java:152) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\tat org.hibernate.persister.internal.PersisterFactoryImpl.createCollectionPersister(PersisterFactoryImpl.java:140) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\tat org.hibernate.metamodel.internal.MetamodelImpl.initialize(MetamodelImpl.java:225) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\tat org.hibernate.internal.SessionFactoryImpl.<init>(SessionFactoryImpl.java:301) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\tat org.hibernate.boot.internal.SessionFactoryBuilderImpl.build(SessionFactoryBuilderImpl.java:469) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\tat org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:1259) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\tat org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:58) ~[spring-orm-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365) ~[spring-orm-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\tat org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:391) ~[spring-orm-5.2.11.RELEASE.jar:5.2.11.RELEASE]\r\n\t... 21 common frames omitted\r\nCaused by: org.hibernate.MappingException: no entity name\r\n\tat org.hibernate.id.Assigned.configure(Assigned.java:45) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\tat org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.createIdentifierGenerator(DefaultIdentifierGeneratorFactory.java:118) ~[hibernate-core-5.4.23.Final.jar:5.4.23.Final]\r\n\t... 37 common frames omitted\r\n```\r\n\r\nIt seems that when using deferred mode, the bean creating fails in the background and is not reported to the main thread. @jhoeller, does that ring a bell. \r\n\r\nIt is possible to make this application fail by injecting the `EntityManager` anywhere, for instance:\r\n\r\n```\r\n@Bean\r\npublic ApplicationRunner useEntityManager(EntityManager entityManager) {\r\n\treturn args -> entityManager.contains(""test"");\r\n}\r\n```\r\n\r\n', ""@DredderGun this sample app doesn't interact with the `EntityManagerFactory` and that doesn't sound very realistic. On first use you'd get the exception as I've indicated in my previous comment.\r\n\r\nThat said, there is a case to log this sooner. I am now going to transfer this issue to the Spring Framework issue tracker as there's nothing we can do in Spring Boot about this. Thanks for the report.""]"
0bd923b0a77f5da1d98018dc0c1301a1242e5f56,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/aot/hint/ExecutableHint.java,Condition_Change,"+import org.springframework.util.Assert;
-	 * @return the modes
+	 * @return the mode
-			if (this.mode == null || !this.mode.includes(mode)) {
+			Assert.notNull(mode, ""'mode' must not be null"");
+			if ((this.mode == null || !this.mode.includes(mode))) {",4,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
0c2b787cb5e7159ec40f6e5d9bb33a063e866b2d,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/MethodWriter.java,Condition_Change,"-            if (code.length > 65536) {
+            if (code.length > 65535) {",2,condition,ASM fix #317578,"http://forge.ow2.org/tracker/?func=detail&aid=317578&group_id=23&atid=100023
",,317578,1,N/A,N/A,N/A,N/A,N/A
0cc877ad0fb6dd5775b21b56fc773c577fd2d489,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/MethodReference.java,Condition_Change,"-		if (executorToCheck.get() instanceof ReflectiveMethodExecutor) {
+		if (executorToCheck != null && executorToCheck.get() instanceof ReflectiveMethodExecutor) {",2,condition,MethodReference accesses cached executor in a thread-safe manner,"Issue: SPR-12269
",,16874,1,"[""MethodReference isn't thread-safe [SPR-12269]""]","[""**[Bryan Turner](https://jira.spring.io/secure/ViewProfile.jspa?name=bturner)** opened **[SPR-12269](https://jira.spring.io/browse/SPR-12269?redirect=false)** and commented\n\nIn `MethodReference`, `cachedExecutor` is declared `volatile`. That implies that this class is expected to be used by multiple threads, but almost none of the methods that access that field do so safely.\n\nWe're ending up in this method due to Spring Security using SpEL expressions for permission checks. Under light load, the system works fine. Under heavier load, we're seeing `NullPointerException` stacks that are topped like this:\n\n```\n2014-09-27 21:01:04,386 ERROR [threadpool:thread-28592]  c.a.s.i.c.StateTransferringExecutor Error while processing asynchronous task\njava.lang.NullPointerException: null\n        at org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:86) ~[MethodReference.class:4.1.0.RELEASE]\n        at org.springframework.expression.spel.ast.SpelNodeImpl.getTypedValue(SpelNodeImpl.java:126) ~[SpelNodeImpl.class:4.1.0.RELEASE]\n        at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:296) ~[SpelExpression.class:4.1.0.RELEASE]\n```\n\nA look at `MethodReference` on line 86 shows:\n\n```\nTypedValue result = getValueInternal(evaluationContext, value, targetType, arguments);\nif (cachedExecutor.get() instanceof ReflectiveMethodExecutor) {\n     ReflectiveMethodExecutor executor = (ReflectiveMethodExecutor) cachedExecutor.get();\n```\n\nThis has 2 problems:\n1. There's no `null` check, but there are multiple other codepaths that can set `cachedExecutor` to `null`\n2. Even if there was, a la `CachedMethodExecutor.isCompilable`, they won't actually _protect_ anything; they're just a race condition.\n\nSince `cachedExecutor` is `volatile`, all of the code that uses it, if they need to touch it multiple times, needs to first assign it to a local variable to freeze its state and then access the local variable instead. Otherwise it will always be susceptible to race conditions. This appears to be missing in:\n* `MethodReference.getValueInternal(ExpressionState)`\n* `MethodValueRef.getValue()`\n* `CachedMethodExecutor.isCompilable()`\n* `CachedMethodExecutor.generateCode()` (This method only touches `cachedExecutor` once, but that's only because it's not `null` checking)\n\n`MethodReference.getCachedExecutor` has exactly the type of code it seems like every method should have:\n\n```\nCachedMethodExecutor executorToCheck = this.cachedExecutor;\nif (executorToCheck != null && executorToCheck.isSuitable(value, target, argumentTypes)) {\n```\n\n\n\n---\n\n**Affects:** 4.1 GA\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0cc877ad0fb6dd5775b21b56fc773c577fd2d489, https://github.com/spring-projects/spring-framework/commit/c508a70c153c4809bd68071c0fff8fe596b8d918\n""]",['closed'],[3],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch - revised for 4.1.1 now. Please give the upcoming 4.1.1 snapshot a try if you have the chance...\n\nJuergen\n', ""**[Bryan Turner](https://jira.spring.io/secure/ViewProfile.jspa?name=bturner)** commented\n\nJuergen,\n\nThanks for the remarkably quick turnaround! I really appreciate it.\n\nIt looks like the new code in `updateExitTypeDescriptor` still isn't quite right, though:\n\n```\nprivate void updateExitTypeDescriptor() {\n    CachedMethodExecutor executorToCheck = this.cachedExecutor;\n    if (executorToCheck.get() instanceof ReflectiveMethodExecutor) {\n        Method method = ((ReflectiveMethodExecutor) executorToCheck.get()).getMethod();\n        this.exitTypeDescriptor = CodeFlow.toDescriptor(method.getReturnType());\n    }\n}\n```\n\nIt seems like this needs a `executorToCheck != null` before the `executorToCheck.get()`.\n\nThanks again!\nBryan Turner\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch - fixed now!\n\nJuergen\n']"
0d4ef4eafe7031781707f296af755387f30bcf88,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/config/DeprecatedBeanWarner.java,Condition_Change,"-		if (StringUtils.hasLength(resourceDescription)) {
+		if (StringUtils.hasText(resourceDescription)) {",2,condition,Omit empty resource description in DeprecatedBeanWarner's log message,"Closes gh-32647
",,32647,1,"[""Omit empty resource description in `DeprecatedBeanWarner`'s log message""]","['In this context, the hasText() method seems more appropriate. This is because considering cases where the resourceDescription string contains only whitespace ensures clearer logging, as it accounts for scenarios where the string is not empty but consists solely of whitespace characters.']",['closed'],[2],"['This has been merged into `main`.\r\n\r\nThanks', '> This has been merged into `main`.\r\n> \r\n> Thanks\r\n\r\nThanks! @sbrannen ']"
0eb73c130c4006b631edb6df6adebe1330fc07a7,spring-projects/spring-framework,spring-context-indexer/src/main/java/org/springframework/context/index/processor/TypeHelper.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-		if (type instanceof DeclaredType) {
-			DeclaredType declaredType = (DeclaredType) type;
+		if (type instanceof DeclaredType declaredType) {",3,condition,"Apply ""instanceof pattern matching"" Eclipse clean-up in spring-context-indexer",,,,0,N/A,N/A,N/A,N/A,N/A
0ef29b204b94ab2aec9333338a2035a11c8d81fb,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/GenericBeanDefinition.java,Add_Condition,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-		return ""Generic bean: "" + super.toString();
+		StringBuilder sb = new StringBuilder(""Generic bean"");
+		if (this.parentName != null) {
+			sb.append("" with parent '"").append(this.parentName).append(""'"");
+		}
+		sb.append("": "").append(super.toString());
+		return sb.toString();",7,condition,GenericBeanDefinition's toString() takes parent definition into account,"Issue: SPR-9671
",,14305,1,['Overriding bean definition message does not take parent definition into account [SPR-9671]'],"[""**[Radim Kolar](https://jira.spring.io/secure/ViewProfile.jspa?name=hsn)** opened **[SPR-9671](https://jira.spring.io/browse/SPR-9671?redirect=false)** and commented\n\nIt seems like this message contains just bean definition values, not real values merged with parent bean definition. It would be more useful if parent bean definition will be merged because for example lazyInit will be different.\n\n2012-08-07 13:51:39,096 INFO [main] org.springframework.beans.factory.support.DefaultListableBeanFactory: Overriding bean definition for bean 'pluginmanager': replacing [Generic bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [nutch/conf/common/pluginmanager.xml]] with [Generic bean: class [null]; scope=; abstract=false; lazyInit=false; autowireMode=0; dependencyCheck=0; autowireCandidate=true; primary=false; factoryBeanName=null; factoryMethodName=null; initMethodName=null; destroyMethodName=null; defined in class path resource [nutch/conf/fetch/pluginmanager.xml]]\n\n\n---\n\n**Affects:** 3.1.2\n\n**Attachments:**\n- [pluginmanager.xml](https://jira.spring.io/secure/attachment/20146/pluginmanager.xml) (_594 bytes_)\n- [pluginmanager.xml](https://jira.spring.io/secure/attachment/20145/pluginmanager.xml) (_469 bytes_)\n- [pluginmanager-skeleton.xml](https://jira.spring.io/secure/attachment/20147/pluginmanager-skeleton.xml) (_694 bytes_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b13c5b237897ba2e77a9d9aa90b28d12fff89e5f, https://github.com/spring-projects/spring-framework/commit/0ef29b204b94ab2aec9333338a2035a11c8d81fb, https://github.com/spring-projects/spring-framework/commit/bed739ce925d6fd88b5fab55403d523d3a3bc53e\n\n**Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)\n""]",['closed'],[1],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAt that point of processing, bean definitions aren't being merged yet, and I would be odd to do so just for logging purposes. However, you do have a point that the parent bean isn't even mentioned in that log output: As a consequence, I've revised GenericBeanDefinition's toString() implementation correspondingly, being similar to ChildBeanDefinition's output now.\n\nJuergen\n""]"
0f36569d75b814a43b081d5a8036534fc1090d62,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/config/FreeMarkerConfigurerBeanDefinitionParser.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-			if (locations.isEmpty()) {
-				locations.add(""/WEB-INF/"");
-			}",3,condition,Remove dead fallback code,,,,0,N/A,N/A,N/A,N/A,N/A
0f70ac74cd07228bcf67db925b1c01c6b17fc092,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/server/standard/AbstractTyrusRequestUpgradeStrategy.java,Condition_Change,"-				if (constructor.getParameterCount() == 9) {
+				if (constructor.getParameterTypes().length == 9) {",2,condition,Polish,"Constructor.getParameterCount is JDK8+ only!
",,,0,N/A,N/A,N/A,N/A,N/A
10838a636fbbd4a95ac3652bc7209e98c6a11f6c,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java,Add_Condition,"-		if (msg != null && msg.contains(""size"") && msg.contains(""exceed"")) {
-			throw new MaxUploadSizeExceededException(-1, ex);
+		if (msg != null) {
+			msg = msg.toLowerCase();
+			if (msg.contains(""size"") && msg.contains(""exceed"")) {
+				throw new MaxUploadSizeExceededException(-1, ex);
+			}",7,condition,Correctly identify MaxUploadSizeExceededException in StandardMultipartHttpServletRequest,"This commit correctly identifies MaxUploadSizeExceededException in
StandardMultipartHttpServletRequest by converting keywords in the
exception message to lowercase before checking for their presence, for
compatibility with Jetty 9.4.x.

Closes gh-28759
",,28759,1,['Correctly identify MaxUploadSizeExceededException through keywords in message from Jetty 9.4.x'],"['MaxUploadSizeExceededException is recognized based on the exception message containing the words ""size"" and ""exceed"". Jetty server throws a message  [""Request exceeds maxRequestSize..."".](https://github.com/eclipse/jetty.project/blob/064682b4ce57282e49a80a64b6d7a7a66fb47b28/jetty-util/src/main/java/org/eclipse/jetty/util/MultiPartInputStreamParser.java#L641)  Shouldn\'t such message also be treated as a MaxUploadSizeExceededException? \r\n\r\nThe proposed change addresses the issue regarding handling errors for too large file uploads when using the Jetty 9.4.x server. Now it is possible that MultipartException is thrown instead of MaxUploadSizeExceededException when the file exceeds the size limit. ']",['closed'],[1],"['This has been merged into `5.3.x` and `main`.\r\n\r\nThanks, and congratulations on submitting your first PR to the Spring Framework! 👍 ']"
1222ca38fb46a5c461fa41d2d4383469d10a2ede,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/client/RestTemplate.java,Add_Condition,"-		this.messageConverters.clear();
-		this.messageConverters.addAll(messageConverters);
+		// Take getMessageConverters() List as-is when passed in here
+		if (this.messageConverters != messageConverters) {
+			this.messageConverters.clear();
+			this.messageConverters.addAll(messageConverters);
+		}",6,condition,RestTemplate accepts getMessageConverters() List on setMessageConverters again,"Issue: SPR-11962
",,16578,1,"[""Backward compatibility issue in RestTemplate's messageConverters after SPR-11351 [SPR-11962]""]","[""**[Boaz](https://jira.spring.io/secure/ViewProfile.jspa?name=boaz)** opened **[SPR-11962](https://jira.spring.io/browse/SPR-11962?redirect=false)** and commented\n\nHi,\n\nWe've recently upgraded our Spring version from 3.2.6 to 3.2.9 and we've encountered a backwards compatibility issue.\nUsually we use `RestTemplate` with it's default set of `messageConverters`, but in some places we add custom message converters to the existing collection of message converters, it looks as follows:\n\n```\nRestTemplate restTemplate = new RestTemplate();\nList<HttpMessageConverter<?>> converters = restTemplate.getMessageConverters();\nconverters.add(new SomeCustomMadeConverter());\nrestTemplate.setMessageConverters(converters);\n```\n\nIn version 3.2.9 (after merging the fix for #15976in commit 425e5a066e3769cc304ce6cd34971a6c38b9a4bb) the `setMessageConverters` method changed from this:\n\n```\nthis.messageConverters = messageConverters;\n```\n\nto this:\n\n```\nthis.messageConverters.clear();\nthis.messageConverters.addAll(messageConverters);\n```\n\nCausing us to loose all the converters instead of adding one and, of course -\n\n```\nIllegalArgumentException: 'messageConverters' must not be empty\n```\n\nWe did an innocent mistake and expected to get from the `getMessageConverters` method a copy of the list (and not have a reference to the inner works of the `RestTemplate`) without consulting the source code.\nIt's clear that other developers might have directly added to that list without calling `setMessageConverters` afterwards, so some flows won't be backward compatible. But I do think that returning a copy of a list in `getMessageConverters` is better then returning the list itself, especially since spring does `this.messageConverters.clear();` in the set.\n\n---\n\n**Affects:** 3.2.9, 4.0.5\n\n**Issue Links:**\n- #15976 Provide alternative RestTemplate constructor to avoid default MessageConverter creation\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/60d3a7f3002757b07174ac6ca2ec12f5c30bc58b, https://github.com/spring-projects/spring-framework/commit/a45d49c8572aca6c5f49d606635897472b8fbbf9, https://github.com/spring-projects/spring-framework/commit/1222ca38fb46a5c461fa41d2d4383469d10a2ede\n\n**Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)\n""]",['closed'],[2],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nRestTemplate accepts the `getMessageConverters()` List on `setMessageConverters` again, simply by checking whether the incoming List reference is identical to the internal one. That should restore backwards compatibility with all previously working scenarios.\n\nJuergen\n', ""**[Boaz](https://jira.spring.io/secure/ViewProfile.jspa?name=boaz)** commented\n\nYou're right of course, thanks for the quick fix!\n""]"
1273c90a645a4fcc79719f14b4dc500106dfac2b,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java,Condition_Change,"- * {@code <task:annotation-driven>} XML element, and also by the @{@link EnableScheduling}
- * annotation.
+ * {@code <task:annotation-driven>} XML element, and also by the
+ * @{@link EnableScheduling} annotation.
- * <p>Auto-detects any {@link SchedulingConfigurer} instances in the container,
- * allowing for customization of the scheduler to be used or for fine-grained control
- * over task registration (e.g. registration of {@link Trigger} tasks.
+ * <p>Autodetects any {@link SchedulingConfigurer} instances in the container,
+ * allowing for customization of the scheduler to be used or for fine-grained
+ * control over task registration (e.g. registration of {@link Trigger} tasks.
-		if (!this.nonAnnotatedClasses.contains(bean.getClass())) {
+		Class<?> targetClass = AopUtils.getTargetClass(bean);
+		if (!this.nonAnnotatedClasses.contains(targetClass)) {
-			Class<?> targetClass = AopUtils.getTargetClass(bean);
-				this.nonAnnotatedClasses.add(bean.getClass());
+				this.nonAnnotatedClasses.add(targetClass);",6,condition,ScheduledAnnotationBeanPostProcessor uses target class as cache key in case of proxy,"Issue: SPR-12709
",,17306,1,['@Scheduled no longer works in case of multiple proxied target classes implementing the same interface [SPR-12709]'],"['**[Trent Summerfield](https://jira.spring.io/secure/ViewProfile.jspa?name=tsummerfield)** opened **[SPR-12709](https://jira.spring.io/browse/SPR-12709?redirect=false)** and commented\n\nWe had a number of `@Scheduled` tasks stop firing after upgrading spring 3.2.x. I have tracked down the problem to changes introduced by #16803\n\nWe have a point cut set as such\n\n```java\n@Pointcut(""execution(* com.example.Processor.process())"")}}\n```\n\nwhere Processor is a simple interface\n\n```java\npublic interface Processor {\n    void process();\n}\n```\n\nThe implementing class looks like\n\n```java\n@Component\npublic class ProcessorImpl implements Processor {\n\n    @Override\n    @Scheduled(cron = ""*/2 * * * * *"")\n    public void process() {\n        System.out.println(""It works!"");\n    }\n}\n```\n\nThis works as expected in 3.2.11, printing ""It works!"" every 2 seconds. However the scheduled task fails to fire since 3.2.12. I have tested this with aspectj versions 1.7.4 and 1.8.5 and both fail to work.\n\nI have confirmed that reverting commit `37da70629f68b07d83d5c57abb74cecb7ecb358b`, introduced by #16803, fixes this problem.\n\n---\n\n**Affects:** 3.2.12, 3.2.13\n\n**Issue Links:**\n- #16803 Scheduled/JmsListenerAnnotationBeanPostProcessor needlessly scans every scoped instance\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1273c90a645a4fcc79719f14b4dc500106dfac2b, https://github.com/spring-projects/spring-framework/commit/3b8d8782851fe447db3b40f09444f428e1e7f5c3, https://github.com/spring-projects/spring-framework/commit/f8a8ecd8feafadc2863e0f5fab766543c4f4044c\n\n**Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)\n\n1 votes, 7 watchers\n']",['closed'],[8],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis arguably wasn't ever meant to work: If an interface-based proxy hides underlying annotations, we're usually not discovering them for external invocation purposes... since it's not even guaranteed that the annotated method is visible through the interface. We have a few such inconsistencies in the framework, unfortunately, where invalid variants worked by accident.\n\nAs a general rule, you'll have to declare service-level annotations such that they are visible on the outer facade of a bean. So either declaring the annotation on the interface method or switching your proxy mode to target-class should do the job. Can you confirm that those options do address your problem? Just making sure that I'm not missing something...\n\nJuergen\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nActually, on review, we do have specific support for `@Scheduled` methods hidden behind proxies, explicitly checking whether a corresponding method exists on the proxy and accepting such a scenario then. So even if I wouldn't recommend such an arrangement, it is a backwards compatibility issue since it has been explicitly supported before.\n\nIn fact, it still is explicitly supported. The problem rather seems to be in the caching of non-annotated classes: Since we're using the bean class as a key, proxies implementing the same interface will only be evaluated once - even if backed by different target classes. Could this be the case in your application? Some Processor implementations featuring an `@Scheduled` annotation while others don't?\n\nFixing this should be straightforward: Using the target class as a key in case of a proxy bean. I'm going to have a look at this for 4.1.5 (to be released next week) but I'm afraid a 3.2.x backport is still far out (since the 3.2.14 maintenance release isn't planned before mid 2015)...\n\nJuergen\n"", ""**[Trent Summerfield](https://jira.spring.io/secure/ViewProfile.jspa?name=tsummerfield)** commented\n\nThanks for looking at this. In the meantime we'll be hoisting the `@Scheduled` tasks up to a bean above the proxy to work around this. Once you have the fix committed on the 3.2.x branch let me know and I would be happy to build it from source and confirm it is fixed.\n\nTrent\n"", ""**[Trent Summerfield](https://jira.spring.io/secure/ViewProfile.jspa?name=tsummerfield)** commented\n\n> Could this be the case in your application? Some Processor implementations featuring an `@Scheduled` annotation while others don't?\n\nYes this is exactly our situation. Processor and the aspect provide logging but not all processors are  `@Scheduled` some are called through controllers or other means.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAlright, chances are high that my local fix towards the target class as cache key will resolve your problem then. I'll backport it to the 3.2.x branch tomorrow; no need to build from source, since our CI build for the 3.2.x branch produces a snapshot for each push.\n\nAs for a potential 3.2.14 release date, we can advance it to mid May when 4.2 RC1 and 4.1.6 are scheduled to go live. For the time being, I can only offer a fix in 4.1.5 which is going out any day now. The main 'problem' is that we have hardly any other fixes which apply to 3.2.14 yet, and we're only going to release it with a few more issues resolved.\n\nBTW, any specific reason why you're still on 3.2.x? Any showstoppers for an upgrade to 4.1.x? Just wondering, since we intend to let 3.2.x reach its end-of-life by the end of this year...\n\nJuergen\n"", '**[Trent Summerfield](https://jira.spring.io/secure/ViewProfile.jspa?name=tsummerfield)** commented\n\nNo we have multiple applications on spring 4.1.x and are happy with it. But we also have the dusty old ball of mud application that is still on 3.2.x. If I know it is being end-of-life then I can push through the upgrade.\n\nTrent\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nTrent, this is finally available in a 3.2.14 snapshot now:\n\n```xml\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-context</artifactId>\n        <version>3.2.14.BUILD-SNAPSHOT</version>\n    </dependency>\n</dependencies><repositories>\n    <repository>\n        <id>spring-snapshots</id>\n        <name>Spring Snapshots</name>\n        <url>http://repo.spring.io/snapshot</url>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n```\n\nPlease give it a try if you have the chance, ideally before the 4.1.5 release (scheduled for Friday)!\n\nJuergen\n', '**[Trent Summerfield](https://jira.spring.io/secure/ViewProfile.jspa?name=tsummerfield)** commented\n\nJust confirmed this does indeed fix the problem. Thanks for the quick response to this, I appreciate it.\n']"
1278459ad536126a7c707e4b69a0a359f54bb556,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ReactorHttpHandlerAdapter.java,Add_Condition,"+ * @author Rossen Stoyanchev
-public class ReactorHttpHandlerAdapter
-		implements BiFunction<HttpServerRequest, HttpServerResponse, Mono<Void>> {
+public class ReactorHttpHandlerAdapter implements BiFunction<HttpServerRequest, HttpServerResponse, Mono<Void>> {
-
-			logger.error(""Invalid URL "" + ex.getMessage(), ex);
+			if (logger.isWarnEnabled()) {
+				logger.warn(""Invalid URL for incoming request: "" + ex.getMessage());
+			}",8,condition,ReactorHttpHandlerAdapter logs bad request at warn level only,"Issue: SPR-16524
",,21067,1,['[Reactor Netty] Incorrect error level logging for client bad request [SPR-16524]'],"['**[Nathan Kooij](https://jira.spring.io/secure/ViewProfile.jspa?name=nathankooij)** opened **[SPR-16524](https://jira.spring.io/browse/SPR-16524?redirect=false)** and commented\n\nOn line 65 of ReactorHttpHandlerAdapter a bad request is logged as an error, when it should be logged as a warning instead.\n\nExample:\n`ERROR 6 --- \\[ctor-http-nio-1\\] o.s.h.s.r.ReactorHttpHandlerAdapter      () : Invalid URL Illegal character in path at index \\[...\\]`\n\n\n---\n\n**Affects:** 5.0.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1278459ad536126a7c707e4b69a0a359f54bb556\n']",['closed'],[1],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point, this should only be warning. Fixed for 5.0.5 now.\n']"
14bc0d6469d8fa887f6829c7ef827fc227349ead,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Condition_Change,"-		// Look for pre-cached root dir resources, either a direct match
-		// or for a parent directory in the same classpath locations.
+		// Look for pre-cached root dir resources, either a direct match or
+		// a match for a parent directory in the same classpath locations.
-			// No direct match -> search for parent directory match.
+			// No direct match -> search for a common parent directory match
+			// (cached based on repeated searches in the same base location,
+			// in particular for different root directories in the same jar).
-			if (rootDirResources == null & StringUtils.hasLength(commonPrefix)) {
+			if (rootDirResources == null && StringUtils.hasLength(commonPrefix)) {
-					// Replace existing subdirectory cache entry with common parent directory.
+					// Replace existing subdirectory cache entry with common parent directory,
+					// avoiding repeated determination of root directories in the same jar.",2,condition,Fix typo in condition check,"See gh-21190
",,21190,1,['Reduce the effect of different base package configuration on component scanning performance and make the effect more intuitive [SPR-16649]'],"[""**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-16649](https://jira.spring.io/browse/SPR-16649?redirect=false)** and commented\n\nThe base package configuration that's used for component scanning can have a significant impact on the time that the scan can take. In some cases the impact of narrowing the scan can be counter-intuitive as it actually takes longer to scan fewer packages. I've attached a small sample that reproduces the behaviour that I'll describe below.\n\nIn a large application (200 packages, each with 50 classes) scanning all 200 packages takes 601ms when those packages are available directly on the filesystem:\n\n```\n$ ./gradlew run -Ppackages=single\n\n> Task :run\nScanning single took 601ms\n\n\nBUILD SUCCESSFUL in 10s\n2 actionable tasks: 2 executed\n```\n\nIf the scanning is narrowed to the 100 packages that are of interest, the time taken decreases to 403ms:\n\n```\n./gradlew run -Ppackages=multi\n\n> Task :run\nScanning multi took 403ms\n\n\nBUILD SUCCESSFUL in 1s\n2 actionable tasks: 1 executed, 1 up-to-date\n```\n\nHalving the number of packages that are scanned has reduced the time taken by roughly a third.\n\nIf the application is packaged as a jar file, the time taken to scan all 200 packages increases slightly to 657ms:\n\n```\n$ ./gradlew distZip && unzip build/distributions/component-scanning-performance.zip -d build/distributions && build/distributions/component-scanning-performance/bin/component-scanning-performance single\n\nBUILD SUCCESSFUL in 2s\n4 actionable tasks: 3 executed, 1 up-to-date\nArchive:  build/distributions/component-scanning-performance.zip\n   creating: build/distributions/component-scanning-performance/\n   creating: build/distributions/component-scanning-performance/lib/\n  inflating: build/distributions/component-scanning-performance/lib/component-scanning-performance.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-context-5.0.4.RELEASE.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-aop-5.0.4.RELEASE.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-beans-5.0.4.RELEASE.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-expression-5.0.4.RELEASE.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-core-5.0.4.RELEASE.jar\n  inflating: build/distributions/component-scanning-performance/lib/spring-jcl-5.0.4.RELEASE.jar\n   creating: build/distributions/component-scanning-performance/bin/\n  inflating: build/distributions/component-scanning-performance/bin/component-scanning-performance\n  inflating: build/distributions/component-scanning-performance/bin/component-scanning-performance.bat\nScanning single took 657ms\n```\n\nIf we then narrow the scan to focus on the 100 packages of interest, the time taken for the scan increases significantly to 1084ms:\n\n```\n$ build/distributions/component-scanning-performance/bin/component-scanning-performance multi\nScanning multi took 1084ms\n```\n\nOn the surface, I find it unintuitive that narrowing the packages that need to be scanned takes longer when the packages are in a jar file. This problem is exacerbated by the fact that the scan is faster when the scan is narrowed when the packages are on the file system. This means that, for optimal scanning performance, you may need one configuration during development and test and another in production.\n\nThe scan's slower in the jar file case as, when a package exists in a jar file, the whole jar is scanned. This means that when the scan is narrowed by providing 100 sub-packages rather than a single parent package, the whole jar is scanned 100 times rather than once. Would it be possible to provide an entry point to scanning that takes multiple base packages? Then, if multiple base packages resolve to the same jar, the jar could be scanned once to find matches across all the base packages.\n\n\n---\n\n**Affects:** 4.3.14, 5.0.4\n\n**Attachments:**\n- [component-scanning-performance.zip](https://jira.spring.io/secure/attachment/25436/component-scanning-performance.zip) (_4.67 MB_)\n\n0 votes, 5 watchers\n""]",['closed'],[1],"[""I've introduced custom root directory and jar caching in `PathMatchingResourcePatternResolver` now, bringing scanning performance for all individual subpackages to the same level as a single scan for the root package. No new API necessary (aside from a `clearCache()` method for the application context to call on refresh completion), and the caching applies to any individual scanning attempts against the same `PathMatchingResourcePatternResolver` instance (usually the shared one in the context).""]"
153fd82946c350a0c42be2dbd13774d5ee9ffc0c,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java,Add_Condition,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
+import org.apache.commons.logging.Log;
-				if (ex.getMessage().startsWith(event.getClass().getName())) {
+				String msg = ex.getMessage();
+				if (msg != null && msg.startsWith(event.getClass().getName())) {
-					LogFactory.getLog(getClass()).debug(""Non-matching event type for listener: "" + listener, ex);
+					Log logger = LogFactory.getLog(getClass());
+					if (logger.isDebugEnabled()) {
+						logger.debug(""Non-matching event type for listener: "" + listener, ex);
+					}",9,condition,SimpleApplicationEventMulticaster defensively handles ClassCastException without message,"Issue: SPR-15145
",,19711,1,['SimpleApplicationEventMulticaster should not rely on ClassCastException having a message [SPR-15145]'],"['**[Mariusz Luciow](https://jira.spring.io/secure/ViewProfile.jspa?name=mariusz.luciow)** opened **[SPR-15145](https://jira.spring.io/browse/SPR-15145?redirect=false)** and commented\n\nSimpleApplicationEventMulticaster in [this commit](https://github.com/spring-projects/spring-framework/commit/13001b9affad668479ebdb924f2bd491745232a8#diff-2434dcbaad29ced6a104bb6523c4f67e) driven by #19412 changed the **ClassCastException** catch logic to:\n\n```java\ncatch (ClassCastException ex) {\n  if (ex.getMessage().startsWith(event.getClass().getName())) {\n    // Possibly a lambda-defined listener which we could not resolve the generic event type for\n    LogFactory.getLog(getClass()).debug(""Non-matching event type for listener: "" + listener, ex);\n  } else {\n    throw ex;\n  }\n}\n```\n\nNote that if **ex.getMessage()** returns NULL whole method will throw NPE.\n\nTo speed up execution of methods that frequently throw exceptions, the C2 compiler generates code that uses a pre-built exception (pre-built at compile time). The pre-built exception does not contain neither a stack trace nor a message detailing the exception.\n\nThis means that after some time the compiler can replace normal ClassCastException with empty one, without message nor stack trace.\n\nMore detailed explanation of this behaviour can be found here:\n* [openjdk jira](https://bugs.openjdk.java.net/browse/JDK-8169685?focusedCommentId=14024750&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14024750)\n* [oracle release notes](http://www.oracle.com/technetwork/java/javase/relnotes-139183.html)\n\nThere should be a check in place to ensure that message is not null.\n\n---\n\n**Affects:** 4.3.5\n\n**Reference URL:** https://github.com/spring-projects/spring-framework/commit/13001b9affad668479ebdb924f2bd491745232a8#diff-2434dcbaad29ced6a104bb6523c4f67e\n\n**Issue Links:**\n- #19412 SimpleApplicationEventMulticaster should not generally suppress ClassCastException\n- #20393 SimpleApplicationEventMulticaster does not deal with lambda-defined listeners when ErrorHandler is set\n- #20981 Lambda error detection might not work on JDK 9\n- #21630 Classification of ClassCastExceptions doesn\'t work in JDK 11 (OpenJDK)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/976d32fc5943a11668b12e83621feaa197677ec4, https://github.com/spring-projects/spring-framework/commit/153fd82946c350a0c42be2dbd13774d5ee9ffc0c, https://github.com/spring-projects/spring-framework/commit/64d4afad9f3cd06d5b911aab9d0656974310a79c, https://github.com/spring-projects/spring-framework/commit/0655d73f8e249b5f053cc10fe36f2d258acad104\n']",['closed'],[3],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch! Fixed in master and to be backported to 4.3.6.\n', '**[Mariusz Luciow](https://jira.spring.io/secure/ViewProfile.jspa?name=mariusz.luciow)** commented\n\nHi Juergen,\n\nI\'m not convinced if the check you\'ve made is a good idea:\n\n```java\ncatch (ClassCastException ex) {\n  String msg = ex.getMessage();\n  if (msg != null && msg.startsWith(event.getClass().getName())) {\n    // Possibly a lambda-defined listener which we could not resolve the generic event type for\n    Log logger = LogFactory.getLog(getClass());\n    if (logger.isDebugEnabled()) {\n      logger.debug(""Non-matching event type for listener: "" + listener, ex);\n    }\n  } else {\n    throw ex;\n  }\n}\n```\n\nCurrent behaviour will work only until compiler decides to start throwing pre-build exception. After that the catch logic will completely change, throwing exception instead of swallowing it, which may be even harder to debug.\nHonestly I\'m not sure if this issue can be solved here. Maybe Spring should prohibit registration of **ApplicationListener<?>** and throw exceptions during startup instead? For example, the correct way to register listener could look like this, if possible:\n\n```java\n@Bean\n@EventListener(ContextRefreshedEvent.class)\nApplicationListener<ContextRefreshedEvent> contextRefreshedEventApplicationListener() {\n    return System.err::print;\n}\n```\n\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point. It's actually closer to our intentions if we turn that check into `(msg == null || msg.startsWith(event.getClass().getName()))`, rather over-swallowing than under-swallowing, closer to how we had it originally. If there is some unrelated `ClassCastException` involved, developers are going to notice it on first appearance anyway. I'll do that right away.\n\nAs for other ways of identifying lambda-defined listeners, we got a few related JIRA tickets already. For the time being, we cannot change the rules there since we're in the middle of the 4.3.x line. I'm afraid we can only fine-tune the current approach.\n""]"
157df861f94dd7244a505c479bf6ba4ae8f1bf41,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java,Condition_Change,"-			// Any other than the original exception is unintended here,
+			// Any other than the original exception (or its cause) is unintended here,
-			if (invocationEx != exception && logger.isWarnEnabled()) {
+			if (invocationEx != exception && invocationEx != exception.getCause() && logger.isWarnEnabled()) {",2,condition,Do not warn also if cause is re-thrown,"Closes gh-23233
",,23233,1,['ExceptionHandlerExceptionResolver warns when re-throwing the exception cause'],"['https://github.com/spring-projects/spring-framework/blob/3d913b813412c38e1a235b23e1e61adf39711175/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java#L412\r\n\r\nIf an `@ExceptionHandler` method matches and rethrows a cause of the root exception, it will always log this warning. Instead, the warning should only be logged if the exception differs from the one bound to the ExceptionHandler method\'s parameter.\r\n\r\nInstead, this code should do something like this:\r\n```java\r\n        Throwable evaluatedException = null;\r\n        try {\r\n            if (logger.isTraceEnabled()) {\r\n                logger.trace(""Invoking @ExceptionHandler method: "" + exceptionHandlerMethod);\r\n            }\r\n            Throwable cause = exception.getCause();\r\n            if (cause != null) {\r\n                // Expose cause as provided argument as well\r\n                evaluatedException = cause;\r\n                exceptionHandlerMethod.invokeAndHandle(webRequest, mavContainer, exception, cause, handlerMethod);\r\n            }\r\n            else {\r\n                // Otherwise, just the given exception as-is\r\n                evaluatedException = exception;\r\n                exceptionHandlerMethod.invokeAndHandle(webRequest, mavContainer, exception, handlerMethod);\r\n            }\r\n        }\r\n        catch (Throwable invocationEx) {\r\n            // Any other than the original exception is unintended here,\r\n            // probably an accident (e.g. failed assertion or the like).\r\n            if (invocationEx != evaluatedException && logger.isWarnEnabled()) {\r\n                logger.warn(""Failed to invoke @ExceptionHandler method: "" + exceptionHandlerMethod, invocationEx);\r\n            }\r\n            // Continue with default processing of the original exception...\r\n            return null;\r\n        }\r\n```\r\n\r\nI\'m testing on Spring 4.3.24, but the code appears to be the same.\r\n']",['closed'],[1],"['Both the top level exception and the cause are made available, so we should be checking both. The exception handler method could be re-throwing either one.']"
15c97b753ef32cd4bf000148f9dddbfc89ddab47,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/DefaultServerHttpRequestBuilder.java,Condition_Change,"-		if (this.uri.getUserInfo() != null || this.uri.getHost() != null) {
+		if (this.uri.getRawUserInfo() != null || this.uri.getHost() != null) {
-			if (this.uri.getUserInfo() != null) {
-				uriBuilder.append(this.uri.getUserInfo()).append('@');
+			if (this.uri.getRawUserInfo() != null) {
+				uriBuilder.append(this.uri.getRawUserInfo()).append('@');
-		if (this.uri.getFragment() != null) {
-			uriBuilder.append('#').append(this.uri.getFragment());
+		if (this.uri.getRawFragment() != null) {
+			uriBuilder.append('#').append(this.uri.getRawFragment());",10,condition,Revised URI building in http.server (consistently use raw attributes),"Issue: SPR-16434
",,20980,1,['ServerHttpRequest.mutate does not preserve encoded chars if path modified [SPR-16434]'],"['**[Spencer Gibb](https://jira.spring.io/secure/ViewProfile.jspa?name=sgibb)** opened **[SPR-16434](https://jira.spring.io/browse/SPR-16434?redirect=false)** and commented\n\nIn the spring cloud gateway, I used `ServerHttpRequest.mutate()` quite often. A few users noticed that encoded query parameters would get decoded before sending downstream causing unintended side effects. I have my own implementation of `ServerHttpRequest.Builder` to work around the issue, but it seems like a simple enhancement could change that.\n\nAdding `ServerHttpRequest build(encoded)` similar to `UriComponentsBuilder.build(encoded)` would fix the issue for me.\n\nMy implementation (once there is an encoded field), would look like:\n\n```java\n\n    private URI getUriToUse() {\n        if (this.uriPath == null) {\n            return this.uri;\n        }\n        try {\n            return UriComponentsBuilder.fromUri(this.uri)\n                    .replacePath(uriPath)\n                    .build(encoded).toUri();\n        }\n        catch (RuntimeException ex) {\n            throw new IllegalStateException(""Invalid URI path: \\"""" + this.uriPath + ""\\"""");\n        }\n    }\n```\n\n\n\n---\n\n**Affects:** 5.0.3\n\n**Reference URL:** https://github.com/spring-cloud/spring-cloud-gateway/issues/147\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/15c97b753ef32cd4bf000148f9dddbfc89ddab47, https://github.com/spring-projects/spring-framework/commit/8a56cd0e8b05ce1517b346f654af5ff707c54282, https://github.com/spring-projects/spring-framework/commit/f4de8615aa300f1fbb082b7880236e3fb460d4f8\n']",['closed'],[3],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nYes this looks like an issue. The intent was to provide fully encoded path information. This is why the [Javadoc says](https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/http/server/reactive/ServerHttpRequest.Builder.html#path-java.lang.String-) the ""raw path"".\n\nSo there is no need for a flag. It\'ll just be: `UriComponentsBuilder.fromUri(uri).path(uriPath).build(true).toUri()`\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nSince this change unfortunately caused a package cycle between `http.server` and `web.util` (not the first time this happens and not the first time for `UriComponentsBuilder` either), I've revised this change to some local URI building which essentially duplicates code from `HierarchicalUriComponents.toUriString()` in order to break the cycle. We might extract some common code at some point but for the time being the duplication doesn't seem to be too bad either.\n"", '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThanks [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller).\n']"
16410cad4de1042c1c9641890b16fa3d49cc8b33,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java,Condition_Change,"-		while (value < minimumValue && value < minimumValue) {
+		while (value < minimumValue && value < maximumValue) {",2,iteration,Fix ConcurrentReferenceHashMap max constraints,"Update calculateShift to respect the maximum upper bound as well as the
minimum value.

Issue: SPR-11720
",,16342,1,"[""ConcurrentReferenceHashMap doesn't limit upper concurrency level [SPR-11720]""]",['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11720](https://jira.spring.io/browse/SPR-11720?redirect=false)** and commented\n\nThe `calculateShift` method contains a bug which means that the maximum concurrency level is not respected.\n\n---\n\n**Affects:** 4.0.3\n\n**Issue Links:**\n- #21532 ConcurrentReferenceHashMap does not enforce visibility of cached EntrySet\n\n**Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)\n'],['closed'],[2],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nhttps://github.com/spring-projects/spring-framework/pull/513\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis seems to be merged into all branches in the meantime...\n\nJuergen\n']"
1678eaaed04c3b9557e26089ca7dd5952976a4b6,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Condition_Change,"-		if (logger.isInfoEnabled()) {
-			logger.info(""Destroying singletons in "" + this);
+		if (logger.isDebugEnabled()) {
+			logger.debug(""Destroying singletons in "" + this);",4,condition,Turn down logging in DefaultSingletonBeanRegistry,"Reduce INFO level destroy logging to DEBUG

Issue: SPR-10758
",,15384,1,['Turn down logging in DefaultListableBeanFactory [SPR-10758]'],['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10758](https://jira.spring.io/browse/SPR-10758?redirect=false)** and commented\n\nThe INFO log level in `DefaultListableBeanFactory` displays all beans. This can be a little verbose and would perhaps work better as DEBUG\n\n\n---\nNo further details from [SPR-10758](https://jira.spring.io/browse/SPR-10758?redirect=false)'],['closed'],[0],[]
168a5159b8ae176950c3ea5bfb7df98b3774a79b,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-				if (logger.isDebugEnabled()) {
-					logger.debug(""Non-matching event type for listener: "" + listener, ex);
+				if (logger.isTraceEnabled()) {
+					logger.trace(""Non-matching event type for listener: "" + listener, ex);",4,condition,Log ClassCastException from lambda-defined listener at trace level,"Closes gh-22834
",,22834,1,['Consider logging classcast exceptions caused by lambdas at trace level'],"[""See https://github.com/spring-projects/spring-boot/issues/16631 for background.\r\n\r\nCurrently lambda based listeners get debug logging if they don't accept the argument type. For example:\r\n\r\n```\r\njava.lang.ClassCastException: class org.springframework.boot.context.event.ApplicationReadyEvent cannot be cast to class org.springframework.boot.devtools.classpath.ClassPathChangedEvent (org.springframework.boot.context.event.ApplicationReadyEvent and org.springframework.boot.devtools.classpath.ClassPathChangedEvent are in unnamed module of loader 'app')\r\n\tat org.springframework.context.event.SimpleApplicationEventMulticaster.doInvokeListener(SimpleApplicationEventMulticaster.java:172)\r\n```\r\n\r\nI wonder if trace level logging might be more appropriate.""]",['closed'],[0],[]
1694691b791d9f86e735a9d31fc6820bd8f3c55c,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClientBuilder.java,Add_Condition,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
+import org.springframework.http.client.reactive.JdkClientHttpConnector;
-		throw new IllegalStateException(""No suitable default ClientHttpConnector found"");
+		else {
+			return new JdkClientHttpConnector();
+		}",5,condition,Default to JDK HttpClient if no others present,"Closes gh-23432
",,23432,1,['JDK 11 HttpClient integration with WebClient'],['This a simple implementation of ClientHttpResponse that levrage\r\nJDK 11 HttpClient.\r\n\r\nCloses gh-21014'],['closed'],[15],"['@Julien-Eyraud Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23432)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23432) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@Julien-Eyraud Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=23432)!', 'Cross-linking to #17778 that this depends on.', '@Julien-Eyraud amazing feature :) would be awesome to resolve conflicts and see this merged...', ""@rdsubhas I won't fix merge until https://github.com/spring-projects/spring-framework/issues/17778 is fixed"", ""I've created a Spring Boot starter using the code from this PR: https://github.com/candrews/java-httpclient-webclient-spring-boot-starter.\r\n\r\nIt provides a really simple way to configure WebClient to use Java 11's HttpClient; just add the dependency (which I've published to [Maven Central](https://search.maven.org/artifact/com.integralblue/java-httpclient-webclient-spring-boot-starter)) to your project and you're done.\r\n\r\nHopefully, it helps those of us who really would like this feature hold out until it lands in Spring itself :)"", 'So, is this still happening?', ""I don't know I can update the PR to fix conflict and change the target branch. It's up to the maintainer now."", 'The `main` branch is on JDK 17 now, so we can move forward with this.', ""I've rebase my branch on main. I've updated the JdkClientHttpResponse#getCookies with a duplicate from JettyClientHttpResponse#parseSameSite. I didn't know where to but it to use a common code. I also updated the documentation."", 'I just saw your JdkClientHttpConnector pullrequest. \r\nPlease add it here as default if no other is on the classpath org.springframework.web.reactive.function.client.DefaultWebClientBuilder.initConnector()\r\ninstead of throwing an Exception\r\n throw new IllegalStateException(""No suitable default ClientHttpConnector found"");\r\n\r\nA problem is that child classes of AbstractWebClientReactiveOAuth2AccessTokenResponseClient\r\nAlways creates a new Webclient with: \r\nprivate WebClient webClient = WebClient.builder().build(); \r\nwhich invokes the DefaultWebClientBuilder.initConnector() leading to the IllegalStateException. \r\n\r\nOr at least add a Constructor to AbstractWebClientReactiveOAuth2AccessTokenResponseClient which takes a preinitialized WebClient instead of creating a new one.\r\n\r\nSincerely\r\nRolf\r\n\r\n\r\n\r\n', ""It's an interesting point @rk99d339. I'll wait for maintainer feedback. I hope I'll be able to merge soon."", ""Hi @rstoyanchev do you think I can have a review soon ? Or this will be discard ? What do you think about rk99d339's comment ?"", ""Yes, I'm reviewing this and should have an update soon."", ""This is now in `main`. I've also made sure the JDK client is used by default when no others are present.""]"
1763bfbad04704f4a38290f371119a3544f7546b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/xml/XmlValidationModeDetector.java,Condition_Change,"- * Copyright 2002-2007 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-		return (content.indexOf(DOCTYPE) > -1);
+		return content.contains(DOCTYPE);
-		return (openTagIndex > -1 && content.length() > openTagIndex && Character.isLetter(content.charAt(openTagIndex + 1)));
+		return (openTagIndex > -1 && (content.length() > openTagIndex + 1) &&
+				Character.isLetter(content.charAt(openTagIndex + 1)));
-		if (line.indexOf(START_COMMENT) == -1 && line.indexOf(END_COMMENT) == -1) {
+		if (!line.contains(START_COMMENT) && !line.contains(END_COMMENT)) {",7,condition,Fixed content length check in XmlValidationModeDetector,"Issue: SPR-11477
",,16102,1,['XmlValidationModeDetector: length of a string is always greater than index of any of its characters [SPR-11477]'],"['**[Rajeev Bahuguna](https://jira.spring.io/secure/ViewProfile.jspa?name=rbahuguna)** opened **[SPR-11477](https://jira.spring.io/browse/SPR-11477?redirect=false)** and commented\n\nThe method org.springframework.util.xml.XmlValidationModeDetector::hasOpeningTag should have this:\nreturn (openTagIndex > -1 && content.length() > (openTagIndex+1) && Character.isLetter(content.charAt(openTagIndex + 1)));\n\nin place of the current:\nreturn (openTagIndex > -1 && content.length() > openTagIndex && Character.isLetter(content.charAt(openTagIndex + 1)));\n\n\n---\n\n**Affects:** 3.2.8, 4.0.2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1763bfbad04704f4a38290f371119a3544f7546b, https://github.com/spring-projects/spring-framework/commit/69c54a053cc2e2141e94b58923aec0f16151a842\n\n**Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)\n']",['closed'],[0],[]
17edbec0351f35aaea61f876fe617e6bbe40b58a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/env/AbstractEnvironment.java,Remove_Condition,"-				for (String profile : parentDefaultProfiles) {
-					this.defaultProfiles.add(profile);
-				}
+				Collections.addAll(this.defaultProfiles, parentDefaultProfiles);",4,iteration,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
1815a6a7ebafb184b1f08de6245898b19de19c6a,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,Add_Condition,"-	private static final boolean completionStagePresent = ClassUtils.isPresent(""java.util.concurrent.CompletionStage"",
-			RequestMappingHandlerAdapter.class.getClassLoader());
+	private static final boolean completionStagePresent = ClassUtils.isPresent(
+			""java.util.concurrent.CompletionStage"", RequestMappingHandlerAdapter.class.getClassLoader());
-
-		mav = invokeHandlerMethod(request, response, handlerMethod);
+		else {
+			mav = invokeHandlerMethod(request, response, handlerMethod);
+		}",9,condition,RequestMappingHandlerAdapter properly invokes handler method in synchronizeOnSession mode again,"Issue: SPR-13999
",,18572,1,['Regression: RequestMappingHandlerAdapter with synchronizeOnSession=true calls invokeHandlerMethod twice [SPR-13999]'],"['**[Isto Nikula](https://jira.spring.io/secure/ViewProfile.jspa?name=iston)** opened **[SPR-13999](https://jira.spring.io/browse/SPR-13999?redirect=false)** and commented\n\nFirst call on line 726, second 731.\n\nhttps://github.com/spring-projects/spring-framework/blob/4.2.x/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java#L723;L731\n\n---\n\n**Affects:** 4.2.5\n\n**Issue Links:**\n- #18555 Regression: `@ResponseBody` with Map result returns JSON array twice in case of synchronizeOnSession=true (_**""is duplicated by""**_)\n- #18708 Handler method is called twice when synchronizeOnSession is true in RequestMappingHandlerAdaptor (_**""is duplicated by""**_)\n- #18440 ResponseEntity CacheControl ignored / extended by RequestMappingHandlerAdapter\n\n']",['closed'],[1],['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis turns out to be a regression caused by the revised HTTP header handling introduced in 4.2.5 (#18440). Fixed for 4.2.6 now.\n\nJuergen\n']
18c46713185744c477814959f1043d918300a0d8,spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/jaxb/ClassPathJaxb2TypeScanner.java,Condition_Change,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
-			if (filter.match(reader, factory)) {
+			if (filter.match(reader, factory) && !reader.getClassMetadata().isInterface() ) {",2,condition,JAXB scan skips annotated interfaces,"Issue: SPR-13221
",,17812,1,['JaxbMarshaller scan should skip annotated interfaces [SPR-13221]'],"['**[Kiril Nugmanov](https://jira.spring.io/secure/ViewProfile.jspa?name=cyniclt)** opened **[SPR-13221](https://jira.spring.io/browse/SPR-13221?redirect=false)** and commented\n\nSpring JAXB marshaller (`org.springframework.oxm.jaxb.Jaxb2Marshaller`)  incorrectly scans packages with JAXB annotations.\n\nProblems is when package is being scanned used `org.springframework.oxm.jaxb.ClassPathJaxb2TypeScanner` which checks if class has following annotations:\n* XmlRootElement\n* XmlType\n* XmlSeeAlso\n* XmlEnum\n* XmlRegistry\n\nSo if you generating client from WSDL - webservice interface will have an anotation `XmlSeeAlso.`\n\nWhis annotatio leads to the error\n\n```java\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name \'marshaller\' defined in class path resource [application.xml]: Invocation of init method failed; nested exception is org.springframework.oxm.UncategorizedMappingException: Unknown JAXB exception; nested exception is com.sun.xml.internal.bind.v2.runtime.IllegalAnnotationsException: 1 counts of IllegalAnnotationExceptions\norg.cynic.test.client.Service is an interface, and JAXB can\'t handle interfaces.\n\tthis problem is related to the following location:\n\t\tat org.cynic.test.client.Service\n```\n\n```xml\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<beans xmlns=""http://www.springframework.org/schema/beans""\n       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\n       xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"">\n\n    <bean id=""marshaller"" class=""org.springframework.oxm.jaxb.Jaxb2Marshaller"">\n        <property name=""packagesToScan"" value=""org.cynic.test.client""/>\n    </bean>\n</beans>\n```\n\nThe only dirty fix is to downgrade JAXB binding version from 2.1 to 2.0\nFor more details why this annotation is being generated on interfaces see this [post](http://stackoverflow.com/questions/7092390/omitting-xmlseealso-from-xjc-output)\n\nSolution  should be following: `org.springframework.oxm.jaxb.ClassPathJaxb2TypeScanner` must ignore annotated interfaces (even if there is default implementation for Java 8)\n\nI can create pull request (after discussion).\n\n\n---\n\n**Affects:** 4.1.7\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/18c46713185744c477814959f1043d918300a0d8\n']",['closed'],[0],[]
194b4cedfbf9f947797d97af851c8e718c2aa91e,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/filter/UrlHandlerFilter.java,Condition_Change,"+import org.springframework.http.server.PathContainer;
-				if (!entry.getKey().canHandle(request)) {
+				if (!entry.getKey().canHandle(request, path)) {
-		boolean canHandle(HttpServletRequest request);
+		boolean canHandle(HttpServletRequest request, RequestPath path);
-		public boolean canHandle(HttpServletRequest request) {
-			return request.getRequestURI().endsWith(""/"");
+		public boolean canHandle(HttpServletRequest request, RequestPath path) {
+			List<PathContainer.Element> elements = path.elements();
+			return (!elements.isEmpty() && elements.get(elements.size() - 1).value().equals(""/""));",10,condition,Use parsed path for checks in UrlHandlerFilter,"See gh-32830
",,32830,1,['Create WebFlux equivalent filter to handle URLs with trailing slashes '],"['The `UrHandlerFilter` under #31366 is for use with Spring MVC and the Servlet API. This issue is to create the same for use with WebFlux, which will have the same functionality but for the WebFlux API. ']",['closed'],[0],[]
1958ae3a625dbf7761cd4f6a530c9cd8543a19eb,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java,Condition_Change,"-			if (logger.isTraceEnabled()) {
-				logger.trace(""Message broker is not active. Ignoring: "" + message);
+			if (logger.isDebugEnabled()) {
+				logger.debug(""Message broker is not active. Ignoring: "" + message);
-					if (logger.isTraceEnabled()) {
-						logger.trace(""Ignoring client message received "" + message +
+					if (logger.isDebugEnabled()) {
+						logger.debug(""Ignoring client message received "" + message +",8,condition,Update log level,"Issue: SPR-11673
",,16296,1,['no msg when cannot authorize against external queue [SPR-11673]'],"['**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11673](https://jira.spring.io/browse/SPR-11673?redirect=false)** and commented\n\nSo i tried putting in the following lines in my code to pass a fake password:\n\n```\n StompBrokerRelayRegistration registration = config.enableStompBrokerRelay(""/topic"");\n        registration.setRelayHost(""xxxx.com"");\n        registration.setSystemPasscode(""hello"");\n        registration.setClientPasscode(""hello"");\n\n```\n\nthe funny thing is the logs still just show this:\n\n```\n16:24:47,103  INFO reactor-tcp-io-2 netty.NettyTcpClient:304 - CONNECT: [id: 0x0db8042b, /192.168.1.15:49980 => xxxx.com/162.242.220.165:61613]\n```\n\nof course there is no data transfer cause the msg queue itself wont allow authentication with a non-existent password, but nothing in the logs by spring shows we had a bad authentication\n\n\n---\n\n**Affects:** 4.0.3\n']",['closed'],[2],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI see this for the ""system"" connection at startup (DEBUG level):\n\n```\n10:21:58 [reactor-tcp-io-1] StompDecoder - Decoded [Payload byte[32]][Headers={stompCommand=ERROR, nativeHeaders={content-type=[text/plain], message=[Bad CONNECT], content-length=[32], version=[1.0,1.1,1.2]}, simpMessageType=OTHER, contentType=text/plain, id=31149240-3fb5-63b8-15fd-11166e51e9f2, timestamp=1398867718551}]\n```\n\nAnd then this for client connections later (TRACE level):\n\n```\n10:22:31 [clientInboundChannel-2] StompBrokerRelayMessageHandler - Message broker is not active. Ignoring message id=7ac7d601-e1a9-587b-5dbc-a78dd0ac73dd\n```\n\nI made changes so that:\n\n(a) any STOMP ERROR frame received from the broker is logged at **error** level\n(b) any client CONNECT frame ignored when the broker is inactive is logged at **error** level\n(c) any other client message ignored when the broker is inactive is logged at **debug** level\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI'm marking this resolved. The messages should now appear as expected.\n""]"
19a1477228b8ed75926a15358e3253eb7ffa492e,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,Condition_Change,"-					else if (nonSyntheticConstructors == 2 && primaryConstructor != null && defaultConstructor != null) {
+					else if (nonSyntheticConstructors == 2 && primaryConstructor != null
+							&& defaultConstructor != null && !primaryConstructor.equals(defaultConstructor)) {",3,condition,Fix Kotlin bean w/ default + secondary ctors handling,"This commit polishes SPR-16022 fix in order to handle correctly
the case when primary and default constructors are the same when
a secondary constructor is defined.

Issue: SPR-16289
",,"20571, 20836",2,"['Avoid implicit autowiring with Kotlin secondary constructors [SPR-16022]', 'BeanCreationException when using c-namespace, Kotlin class with default constructor and annotation configuration [SPR-16289]']","['**[Alexander Chernikov](https://jira.spring.io/secure/ViewProfile.jspa?name=sashache)** opened **[SPR-16022](https://jira.spring.io/browse/SPR-16022?redirect=false)** and commented\n\nLooks similar to #20561, which is marked fixed in 5.0, but I observe this with 5.0.0.RELEASE, so creating new issue for a case.\n\nDummy Kotlin bean class:\n\n```kotlin\nclass KotlinCtor(val intVal: Int) {\n    constructor(p: String) : this(p.length)\n    constructor(p0: Int, p1: String) : this(p0 + p1.length)\n}\n```\n\nDummy beans in spring.xml:\n\n```xml\n...\n    <bean class=""temp.KotlinCtor"" name=""ctor0"">\n        <constructor-arg value=""0""/>\n    </bean>\n    <bean class=""temp.KotlinCtor"" name=""ctor1"">\n        <constructor-arg value=""a""/>\n    </bean>\n    <bean class=""temp.KotlinCtor"" name=""ctor2"">\n        <constructor-arg value=""2""/>\n        <constructor-arg value=""b""/>\n    </bean>\n...\n```\n\nAdd configuration:\n\n```kotlin\n@Configuration @ImportResource(""spring.xml"")\nopen class KotlinAnnotator\n```\n\nDummy application, this time in Java:\n\n```java\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\n\npublic class Main {\n    public static void main(String[] args) {\n        ClassPathXmlApplicationContext context = new ClassPathXmlApplicationContext(""spring.xml"");\n//        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(KotlinAnnotator.class);\n    }\n}\n```\n\nExecute this main() method: no problem.\nComment out XML context creation, uncomment annotation context creation, execute and fail:\n\n```\nWARNING: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name \'ctor1\' defined in class path resource [spring.xml]: Unsatisfied dependency expressed through constructor parameter 0: Could not convert argument value of type [java.lang.String] to required type [int]: Failed to convert value of type \'java.lang.String\' to required type \'int\'; nested exception is java.lang.NumberFormatException: For input string: ""a""\nException in thread ""main"" org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name \'ctor1\' defined in class path resource [spring.xml]: Unsatisfied dependency expressed through constructor parameter 0: Could not convert argument value of type [java.lang.String] to required type [int]: Failed to convert value of type \'java.lang.String\' to required type \'int\'; nested exception is java.lang.NumberFormatException: For input string: ""a""\n\tat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:691)\n\tat org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:192)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1269)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1126)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:756)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)\n\tat org.springframework.context.annotation.AnnotationConfigApplicationContext.<init>(AnnotationConfigApplicationContext.java:88)\n\tat temp.Main.main(Main.java:9)\n```\n\n---\n\n**Affects:** 5.0 GA\n\n**Issue Links:**\n- #20561 AutowiredAnnotationBeanPostProcessor picks ""wrong"" constructor for Kotlin class\n- #20836 BeanCreationException when using c-namespace, Kotlin class with default constructor and annotation configuration\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19a1477228b8ed75926a15358e3253eb7ffa492e, https://github.com/spring-projects/spring-framework/commit/edf82325557f05f482b0b9c0333d99908c8f1378\n', '**[Alexander Chernikov](https://jira.spring.io/secure/ViewProfile.jspa?name=sashache)** opened **[SPR-16289](https://jira.spring.io/browse/SPR-16289?redirect=false)** and commented\n\n#20571 is fixed in Spring 5.0.2.\nHowever, I\'ve found minor sub-case when using c-namespace.\n\nDummy Kotlin:\n\n```\npackage cr.spr16022\n\nimport org.springframework.context.annotation.Configuration\nimport org.springframework.context.annotation.ImportResource\nimport org.springframework.context.support.ClassPathXmlApplicationContext\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext\n\nclass KotlinCtor(val intVal: Int) {\n    constructor(p: String) : this(p.length)\n}\n\nclass KotlinQtor() {\n    constructor(p: String) : this()\n}\n\n@Configuration @ImportResource(""cr.xml"") class KotlinAnnotator\n\nobject Main {\n    @JvmStatic fun main(args: Array<String>) {\n        val contextXml = ClassPathXmlApplicationContext(""cr.xml"")\n//        val contextAnn = AnnotationConfigApplicationContext(KotlinAnnotator::class.java)\n    }\n}\n```\n\nBeans definition:\n\n```xml\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<beans xmlns=""http://www.springframework.org/schema/beans""\n       xmlns:c=""http://www.springframework.org/schema/c""\n       xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\n       xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"">\n\n    <bean class=""cr.spr16022.KotlinCtor"" name=""ctor0s"" c:p=""a""/>\n    <bean class=""cr.spr16022.KotlinQtor"" name=""qtor0s"" c:p=""a""/>\n</beans>\n```\n\nRun this dummy main(): no problems.\nUncomment contextAnn declaration and initialization, re-run: fail:\n\n```\nWARNING: Exception encountered during context initialization - cancelling refresh attempt: org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'qtor0s\' defined in class path resource [cr.xml]: Could not resolve matching constructor (hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)\nException in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'qtor0s\' defined in class path resource [cr.xml]: Could not resolve matching constructor (hint: specify index/type/name arguments for simple parameters to avoid type ambiguities)\n\tat org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:243)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1270)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1127)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:545)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:502)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:312)\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:228)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:310)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:200)\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:758)\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:868)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)\n\tat org.springframework.context.annotation.AnnotationConfigApplicationContext.<init>(AnnotationConfigApplicationContext.java:88)\n\tat cr.spr16022.Main.main(KotlinCtor.kt:22)\n\nProcess finished with exit code 1\n```\n\n---\n\n**Affects:** 5.0.2\n\n**Issue Links:**\n- #20571 Avoid implicit autowiring with Kotlin secondary constructors\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19a1477228b8ed75926a15358e3253eb7ffa492e\n']","['closed', 'closed']","[9, 1]","['**[Alexander Chernikov](https://jira.spring.io/secure/ViewProfile.jspa?name=sashache)** commented\n\nThank you, works for me in 5.0.3.\n']"
19a9bc4747028e68d0fc9ce71c302488cfbfa978,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/server/session/InMemoryWebSessionStore.java,Remove_Condition,"-
-			if (InMemoryWebSessionStore.this.sessions.remove(currentId) == null) {
-				return Mono.error(new IllegalStateException(
-						""Failed to change session id: "" + currentId +
-								"" because the Session is no longer present in the store.""));
-			}
+			InMemoryWebSessionStore.this.sessions.remove(currentId);",7,condition,Remove unnecessary assertion,"Issue: SPR-16201
",,20749,1,['InMemoryWebSession.changeSessionId reports error if the session does not exist [SPR-16201]'],"['**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-16201](https://jira.spring.io/browse/SPR-16201?redirect=false)** and commented\n\nIf a user invokes `InMemoryWebSession.changeSessionId` before the session has been created, an error is reported stating:\n\n```\njava.lang.IllegalStateException: Failed to change session id: 4854375d-1713-468b-9e4c-61fe282de0bc because the Session is no longer present in the store.\n\t\tat org.springframework.web.server.session.InMemoryWebSessionStore$InMemoryWebSession.changeSessionId(InMemoryWebSessionStore.java:214)\n\t\tat org.springframework.security.web.server.csrf.WebSessionServerCsrfTokenRepository.lambda$saveToken$1(WebSessionServerCsrfTokenRepository.java:64)\n\t\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:118)\n\t\t... 36 more\n```\n\nI think the method should support changing the id even if the session is new.\n\nAs it currently stands an additional problem is that it appears there is no way to determine if this operation is safe.\n\n\n---\n\n**Affects:** 5.0.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/19a9bc4747028e68d0fc9ce71c302488cfbfa978\n']",['closed'],[0],[]
1acf5a742436d2e8460a880c11dd4946d2ca3555,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/DatabasePopulatorUtils.java,Remove_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+		catch (ScriptException ex){
+			throw ex;
+		}
-			if (ex instanceof ScriptException) {
-				throw (ScriptException) ex;
-			}",6,condition,Use dedicated catch block for ScriptException,Closes gh-24383,,24383,1,['Use dedicated catch block for ScriptException'],['It can be that.'],['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks']
1b1682eacd9c8aabbb86f24dc9c54070f3dd18b4,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java,Condition_Change,"-		if (!c1.isInterface() && c1 != Object.class) {
-			// Try early initialization for overridden methods on subclasses
+		if (!c1.isInterface() && c1 != Object.class && !Factory.class.isAssignableFrom(c2)) {
+			// Try early initialization for overridden methods on specifically purposed subclasses",2,condition,Narrow early initialization of CGLIB method proxies (for AOT processing),"Do not trigger early initialization on Factory classes (e.g. AOP proxies)

See gh-29107
",,29107,1,['CGLIB proxies are not used at runtime on `@Configuration` classes in AOT mode'],"['Consider the following configuration class:\r\n\r\n```java\r\n@Configuration\r\npublic class MyConfiguration {\r\n\t@Bean\r\n\tA a() { return new A(); }\r\n\r\n\t@Bean\r\n\tB b() { return new B(this.a()); }\r\n\t\r\n\tstatic class A {\r\n\t\tpublic A() { System.out.println(""A constructor""); }\r\n\t}\r\n\r\n\tstatic class B {\r\n\t\tpublic B(A a) { System.out.println(""B constructor""); }\r\n\t}\r\n}\r\n```\r\n\r\nOn JVM in regular mode, it prints:\r\n\r\n```\r\nA constructor\r\nB constructor\r\n```\r\n\r\nOn JVM in AOT mode or native, while it seems CGLIB proxies are generated correctly at build time,  but they seems not used since it prints:\r\n\r\n```\r\nA constructor\r\nA constructor\r\nB constructor\r\n```\r\n\r\nThe code generated AOT maybe needs to be updated to leverage those CGLIB proxies.']",['closed'],[2],"[""We need to swap the creation of the raw class to the cglib proxy. I was hoping I could avoid having to change code generation for this but it turns out that there isn't a way to achieve this using an instance supplier. \r\n\r\nI've a proposal in [3b8bcdf](https://github.com/snicoll/spring-framework/commit/3b8bcdfe281b606a1ce8ee354b0cef56913ccfcd).\r\n\r\nThis is blocked by https://github.com/spring-projects/spring-boot/issues/32304 and, to some extent, https://github.com/spring-projects/spring-framework/issues/29141"", 'I have it working but I think it needs a bit more work to test it correctly. ']"
1b1ba479125ecd1051d14742d89f492376176130,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java,Condition_Change,"-		for (char ch: name.toCharArray()) {
-			if (!Character.isJavaIdentifierPart(ch)) {
+		for (int i = 1; i < name.length(); i++) {
+			if (!Character.isJavaIdentifierPart(name.charAt(i))) {",4,"condition, iteration",Avoid char array creation in AbstractAspectJAdvice.isVariableName(),"See gh-26100
",,26100,1,['Avoid char array creation in AbstractAspectJAdvice.isVariableName()'],['This PR changes to avoid `char` array creation in `AbstractAspectJAdvice.isVariableName()`.'],['closed'],[1],"['Well spotted, thanks again @izeye.']"
1b93ea97ac4fb7011e4afb026bb32d0c589aa198,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java,Add_Condition,"+				// retrying in case of concurrent reads on the same key
+				if (this.queue.remove(key)) {
+					this.queue.add(key);
+					return this.cache.get(key);
+				}",4,condition,Fix concurrent reads issue in MimeTypeUtils cache,"As of gh-22340, `MimeTypeUtils` has a built-in LRU cache implementation
for caching parsed MIME types and avoiding excessive garbage creation at
runtime.
This implementation, when hit with highly concurrent reads on the same
media type (the cache key), can create multiple keys for the same MIME
type string. This duplication leads to the cache filling up and evicting
entries. When the cache fetches a duplicate key, it is then not
associated with a value and the cache can return a `null` value, which
is forbidden by the API contract.

This commit adds another cache check within the write lock: this avoids
creating duplicate entries in the cache and `null` return values.

Fixes gh-23211
",,"23211, 22340",2,"['MimeTypeUtils.parseMimeType returns null MIME type in case of high concurrency', 'Avoid MimeType garbage creation']","[""**Affects:** 5.5.0.M2 + (Problem observed in 5.5.0.M2, probably in any release after 2/5/2019)\r\n---\r\nI am getting an NPE on line MediaType.java:550 of spring-web-5.2.0.M2.jar (currently line 563 in master) because the cache is apparently returning a null type from MimeTypeUtils.parseMimeType().\r\n```\r\n\tpublic static MimeType parseMimeType(String mimeType) {\r\n\t\treturn cachedMimeTypes.get(mimeType);\r\n\t}\r\n```\r\nand the method below doesn't account for a null return from the LRU cache ```cachedMimeTypes```\r\n```\r\n\tpublic static MediaType parseMediaType(String mediaType) {\r\n\t\tMimeType type;\r\n\t\ttry {\r\n\t\t\ttype = MimeTypeUtils.parseMimeType(mediaType);\r\n\t\t}\r\n\t\tcatch (InvalidMimeTypeException ex) {\r\n\t\t\tthrow new InvalidMediaTypeException(ex);\r\n\t\t}\r\n\t\ttry {\r\n\t\t\treturn new MediaType(type.getType(), type.getSubtype(), type.getParameters()); //NPE\r\n\t\t}\r\n\t\tcatch (IllegalArgumentException ex) {\r\n\t\t\tthrow new InvalidMediaTypeException(mediaType, ex.getMessage());\r\n\t\t}\r\n\t}\r\n```\r\nThe ConcurrentLruCache in MimeTypeUtils must have a bug b/c that is the only way null type could be getting returned. The ConcurrentLruCache.get(key) method does returns in two places and one of them is returning a null. The return in the write lock block looks safe but the return in the read lock block could return null if the internal queue has the same key in it twice at which point the internal cache map wouldn't have the value anymore and then a null could be returned.\r\n```\r\n\t\tpublic V get(K key) {\r\n\t\t\tthis.lock.readLock().lock();\r\n\t\t\ttry {\r\n\t\t\t\tif (this.queue.remove(key)) {\r\n\t\t\t\t\tthis.queue.add(key);\r\n\t\t\t\t\treturn this.cache.get(key);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\tfinally {\r\n\t\t\t\tthis.lock.readLock().unlock();\r\n\t\t\t}\r\n\t\t\tthis.lock.writeLock().lock();\r\n\t\t\ttry {\r\n\t\t\t\tif (this.queue.size() == this.maxSize) {\r\n\t\t\t\t\tK leastUsed = this.queue.poll();\r\n\t\t\t\t\tif (leastUsed != null) {\r\n\t\t\t\t\t\tthis.cache.remove(leastUsed);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tV value = this.generator.apply(key);\r\n\t\t\t\tthis.queue.add(key);\r\n\t\t\t\tthis.cache.put(key, value);\r\n\t\t\t\treturn value;\r\n\t\t\t}\r\n\t\t\tfinally {\r\n\t\t\t\tthis.lock.writeLock().unlock();\r\n\t\t\t}\r\n\t\t}\r\n```\r\nAssume two threads go through read lock block at same time, one of them will remove the key and add it back to front of queue, the other thread will fall through and wait for the write lock. Once the thread gets the write lock it will also add the key to the queue and now the key will be in the queue twice. Eventually the duplicate key might work its way to least used and get removed from the cache. At that point, all subsequent requests for that key will return null because the queue still has the key but the hash map doesn't have the value. \r\n\r\nThis is pretty serious b/c once it starts happening for a particular mime type, I think the application needs to be restarted. "", 'While profiling Spring web applications (MVC and WebFlux), it seems that `MimeType` (through `MediaType`) is creating a significant amount of garbage that could be avoided.\r\n\r\n- [x] Caching the `toString()` result of `MimeType` instances, since it cannot change and this method is called many times on hot paths\r\n- [x] `MediaType.parseMediaType` is called multiple times, for each request; this could be backed by a simple LRU cache implementation to avoid re-parsing known media types\r\n- [ ] `MimeTypeUtils.parseMimeType` parsing code can be improved; a draft implementation shows +40% throughput and -10% allocation.\r\n- [x] `MimeTypeUtils` and `MediaType` both have static sections where well-known types are parsed; changing those from `APPLICATION_JSON = MimeType.valueOf(APPLICATION_JSON_VALUE);` to `APPLICATION_JSON = new MimeType(""application"", ""json"");` leads to a bit of duplication but consistently reduces garbage and CPU usage at startup time (approx. 10ms).']","['closed', 'closed']","[2, 0]",[]
1c01f575c2d3407e5c3c18a58d19ee00f5420249,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,Add_Condition,"-				members.add(asSourceClass(memberClassName));
+				try {
+					members.add(asSourceClass(memberClassName));
+				}
+				catch (IOException ex) {
+					// Let's skip it if it's not resolvable - we're just looking for candidates
+					if (logger.isDebugEnabled()) {
+						logger.debug(""Failed to resolve member class ["" + memberClassName +
+								""] - not considering it as a configuration class candidate"");
+					}
+				}",10,condition,ConfigurationClassParser ignores unresolvable member classes,"Issue: SPR-13115
",,17706,1,['FileNotFoundException when implementing a nested interface with groovy closure in a @Component [SPR-13115]'],"[""**[Tadas Krivickas](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaskay)** opened **[SPR-13115](https://jira.spring.io/browse/SPR-13115?redirect=false)** and commented\n\n```java\norg.springframework.beans.factory.BeanDefinitionStoreException: Failed to parse configuration class [org.springframework.issues.DogService]; nested exception is java.io.FileNotFoundException: class path resource [org/springframework/issues/DogService$Wuffing$1.class] cannot be opened because it does not exist\n\tat org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:179)\n...\nCaused by: java.io.FileNotFoundException: class path resource [org/springframework/issues/DogService$Wuffing$1.class] cannot be opened because it does not exist\n\tat org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:172)\n\tat org.springframework.core.type.classreading.SimpleMetadataReader.<init>(SimpleMetadataReader.java:50)\n\tat org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:98)\n\tat org.springframework.core.type.classreading.CachingMetadataReaderFactory.getMetadataReader(CachingMetadataReaderFactory.java:102)\n\tat org.springframework.core.type.classreading.SimpleMetadataReaderFactory.getMetadataReader(SimpleMetadataReaderFactory.java:93)\n\tat org.springframework.context.annotation.ConfigurationClassParser.asSourceClass(ConfigurationClassParser.java:596)\n\tat org.springframework.context.annotation.ConfigurationClassParser$SourceClass.getMemberClasses(ConfigurationClassParser.java:758)\n\tat org.springframework.context.annotation.ConfigurationClassParser.processMemberClasses(ConfigurationClassParser.java:314)\n\tat org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:246)\n\tat org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:229)\n\tat org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:196)\n\tat org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:165)\n\tat org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:306)\n\tat org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:239)\n\tat org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:254)\n\tat org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:94)\n\tat org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:606)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:462)\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:686)\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:320)\n\tat org.springframework.boot.test.SpringApplicationContextLoader.loadContext(SpringApplicationContextLoader.java:103)\n\tat org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContextInternal(DefaultCacheAwareContextLoaderDelegate.java:68)\n\tat org.springframework.test.context.DefaultCacheAwareContextLoaderDelegate.loadContext(DefaultCacheAwareContextLoaderDelegate.java:86)\n\tat org.springframework.test.context.DefaultTestContext.getApplicationContext(DefaultTestContext.java:72)\n\tat org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:117)\n\tat org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:83)\n\tat org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:212)\n\tat org.spockframework.spring.SpringTestContextManager.prepareTestInstance(SpringTestContextManager.java:49)\n\tat org.spockframework.spring.SpringInterceptor.interceptSetupMethod(SpringInterceptor.java:42)\n\tat org.spockframework.runtime.extension.AbstractMethodInterceptor.intercept(AbstractMethodInterceptor.java:28)\n\tat org.spockframework.runtime.extension.MethodInvocation.proceed(MethodInvocation.java:87)\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.execute(JUnit4Provider.java:283)\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.executeWithRerun(JUnit4Provider.java:173)\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.executeTestSet(JUnit4Provider.java:153)\n\tat org.apache.maven.surefire.junit4.JUnit4Provider.invoke(JUnit4Provider.java:128)\n\tat org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:203)\n\tat org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:155)\n\tat org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:103)\n```\n\nI've observed that this can be fixed in two ways:\n1. Moving the interface outside of class to package\n2. Replacing `@Component` with `@javax.inject.Named`\n\nOther notes:\n- Does not occur in an analogous situation using java, by implementing a private nested interface via lambda expression.\n\nPull request to reproduce: https://github.com/spring-projects/spring-framework-issues/pull/98\n\n\n---\n\n**Affects:** 4.1.6\n\n**Reference URL:** https://github.com/spring-projects/spring-framework-issues/pull/98\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework-issues/pull/98, and commits https://github.com/spring-projects/spring-framework/commit/1c01f575c2d3407e5c3c18a58d19ee00f5420249, https://github.com/spring-projects/spring-framework/commit/ef9910c3c48cc56b655f189a4362cbc8907b7e61\n\n3 votes, 5 watchers\n""]",['closed'],[4],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nCould you post the nested stacktrace please, for the actual point where the `FileNotFoundException` is being raised?\n\nJuergen\n', '**[Tadas Krivickas](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaskay)** commented\n\nAdded in description.\n', '**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\n[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) there is a sample project [available here](https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-13115)\n', '**[Tadas Krivickas](https://jira.spring.io/secure/ViewProfile.jspa?name=tadaskay)** commented\n\nChecked with 4.2.0-SNAPSHOT, the issue is fixed. Thanks!\n']"
1c24dc1f27fda6736c5a7b123f0476a1bc124a94,spring-projects/spring-framework,spring-test/src/main/java/org/springframework/mock/web/MockHttpServletResponse.java,Condition_Change,"-			StringBuilder sb = new StringBuilder(this.contentType);
-			if (!this.contentType.toLowerCase().contains(CHARSET_PREFIX) && this.charset) {
-				sb.append("";"").append(CHARSET_PREFIX).append(this.characterEncoding);
+			String value = this.contentType;
+			if (this.charset && !this.contentType.toLowerCase().contains(CHARSET_PREFIX)) {
+				value = value + ';' + CHARSET_PREFIX + this.characterEncoding;
-			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, sb.toString(), true);
+			doAddHeaderValue(HttpHeaders.CONTENT_TYPE, value, true);",8,condition,Simplify String concatenation,,,,0,N/A,N/A,N/A,N/A,N/A
1cb2dfa45963321e530ff53d2d582642ed1d2294,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/AbstractErrors.java,Condition_Change,"-		if (nestedPath.length() > 0 && !nestedPath.endsWith(NESTED_PATH_SEPARATOR)) {
+		if (!nestedPath.isEmpty() && !nestedPath.endsWith(NESTED_PATH_SEPARATOR)) {",2,condition,enh: use isEmpty() instead of length(),,,,0,N/A,N/A,N/A,N/A,N/A
1db9faf24838b5df83238e36312e9f721f11fa80,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,Add_Condition,"+				if (bean instanceof SmartLifecycle) {
+					latch.countDown();
+				}",3,condition,Avoid shutdown timeout in case of exception on stop,"Closes gh-33442
",,33442,1,['Errors thrown from SmartLifeycle#stop results in (unnecessary) waiting for the shutdown timeout'],"['When the stop method of a SmartLifecycle bean throws an error, the DefaultLifecycleProcessor always waits until the timeout is hit. Which is unnecessary as no cleanup is performed and delays the shutdown.\r\n\r\nImho when [calling the stop()](https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java#L384) method the DefaultLifecycleProcessor should also do a `latch.countDown` in case an exception is thrown.\r\n\r\n(In our case we had a stop method which was interacting with the database. When we did some DB failover testing, this method has thrown some exception and the shutdown got delayed) ']",['closed'],[0],[]
1dfe737d0e57e8634d3bf48a9e49b001bd106cc3,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ResolvableType.java,Add_Condition,"-						if (forClass(clazz).hasGenerics()) {
+						if (clazz.getTypeParameters().length > 0) {
-			return getSuperType().hasUnresolvableGenerics();
+			Class<?> superclass = resolved.getSuperclass();
+			if (superclass != null && superclass != Object.class) {
+				return getSuperType().hasUnresolvableGenerics();
+			}",7,condition,Avoid ResolvableType creation for interface/superclass check,"See gh-30713
",,30713,1,['`ResolvableType.hasUnresolvableGenerics()` should cache its result'],"[""As part of restoring lenient matching for events with unresolvable generics in #30712, it turns out that we're calling `ResolvableType.hasUnresolvableGenerics()` on the given event type quite often. It seems sensible to cache it within `ResolvableType` itself, also to the benefit of our conditional type converter matching etc.""]",['closed'],[0],[]
1e003a1c90fe7f5aa91f99a34fa5be53a43ad6d8,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java,Remove_Condition,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-		SimpMessageHeaderAccessor accessor = MessageHeaderAccessor.getAccessor(message, SimpMessageHeaderAccessor.class);
-		if (accessor == null) {
-			throw new IllegalStateException(
-					""No header accessor (not using the SimpMessagingTemplate?): "" + message);
-		}
-",6,condition,Remove unnecessary assertion,"Issue: SPR-14279
",,18851,1,"[""SimpleBrokerMessageHandler makes an assertion about the type of the MessageHeaderAccessor, but doesn't seem to care [SPR-14279]""]","[""**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-14279](https://jira.spring.io/browse/SPR-14279?redirect=false)** and commented\n\nThere's an assertion here: https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/simp/broker/SimpleBrokerMessageHandler.java#L227. It says that the type of the accessor must be SimpMessageHeaderAccessor. But then the accessor is never actually used, so I'm wondering if the assertion is redundant.\n\nIt causes issues if anyone adds a ChannelInterceptor which manipulates headers, which seems like a perfectly valid thing to do, independent of whether you are a websocket client or not.\n\n---\n\n**Affects:** 4.2.6\n\n**Reference URL:** https://github.com/spring-cloud/spring-cloud-sleuth/issues/276\n\n**Issue Links:**\n- #19357 StompSubProtocolHandler makes the same assumption about header accessor as SimpleBrokerMessageHandler used to\n\n**Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)\n""]",['closed'],[2],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis is probably a left-over from before the static accessor methods were added to the MessageHeaderAccessor hierarchy that we can probably remove.\n', '**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** commented\n\nCould this be back ported to 4.2 please?\n']"
1e07468d20c49baeb441425c7d0df053cb5d3cd1,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,Condition_Change,"-				if (!Modifier.isStatic(mod)) {
+				if (!Modifier.isStatic(mod) && !Modifier.isPrivate(mod)) {
-					else if (!Modifier.isPublic(mod) && !Modifier.isProtected(mod) && !Modifier.isPrivate(mod) &&
+					else if (!Modifier.isPublic(mod) && !Modifier.isProtected(mod) &&",4,condition,Prevent warning about final private methods in CglibAopProxy,"Issue: SPR-15820
",,20375,1,['[Kotlin] Warning message about private final methods. [SPR-15820]'],"['**[Dariusz Bacinski](https://jira.spring.io/secure/ViewProfile.jspa?name=dbacinski)** opened **[SPR-15820](https://jira.spring.io/browse/SPR-15820?redirect=false)** and commented\n\nRecently in Kotlin version 1.1.2 there was a change regarding opening (making not final) Koltin classes . Now private methods are not being opened. This is actual change:\n\nhttps://github.com/JetBrains/kotlin/commit/5d4cefcc30615284b1b28d0fe0653f738371c167\n\nUnfortunately Spring is very verbose regarding printing warning into logs about final methods. Which leads to a warning about private final methods like this:\n\n""INFO  org.springframework.aop.framework.CglibAopProxy  - Final method [private final ...] cannot get proxied via CGLIB: Calls to this method will NOT be routed to the target instance and might lead to NPEs against uninitialized fields in the proxy instance.""\n\nhttps://github.com/spring-projects/spring-framework/blob/0d0b879a2313b73bf85abfe45ff0a59897aa6a3e/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java#L262\n\nAs discussed with Sebastien Deleuze `@koltinlang` Slack this should be checked only for public and protected methods.\n\n\n\n---\n\n**Affects:** 5.0 RC2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e07468d20c49baeb441425c7d0df053cb5d3cd1\n']",['closed'],[0],[]
1e0e477833c90d13d60b4f8ed0649ab7bb3e1541,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.java,Condition_Change,"-		if (dataSource instanceof DataSource) {
-			return (DataSource) dataSource;
+		if (dataSource instanceof DataSource result) {
+			return result;
-		else if (dataSource instanceof String) {
-			return this.dataSourceLookup.getDataSource((String) dataSource);
+		else if (dataSource instanceof String name) {
+			return this.dataSourceLookup.getDataSource(name);",8,condition,"Apply ""instanceof pattern matching"" in AbstractRoutingDataSource","Closes gh-28011
",,28011,1,"['Apply ""instanceof pattern matching"" in AbstractRoutingDataSource']",[None],['closed'],[2],"['This has been merged into `main` in 1e0e477833c90d13d60b4f8ed0649ab7bb3e1541 and polished in 04fbfddb13e45a729a93d88c5aee8092bff2ca9c.\r\n\r\nThanks\r\n\r\n----\r\n\r\nIn the future, please refrain from submitting PRs for such small changes. \r\n\r\nWe prefer that people collect several related changes and submit a single PR for all of them. Otherwise, we end up spending a lot of time managing individual PRs.', '> In the future, please refrain from submitting PRs for such small changes.\r\n> \r\n> We prefer that people collect several related changes and submit a single PR for all of them. Otherwise, we end up spending a lot of time managing individual PRs.\r\n\r\n\r\n👌🏻\r\nYesterday, I wrote a test about `AbstractRoutingDataSource`, reviewed the code, and submitted PRs for the changes. Sorry for the small changes.\r\n\r\nI will try to submit big revisions in the future.']"
1e9ab53095ed601850d2fd780bffd8bee5919487,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/propertyeditors/CharacterEditor.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-	 * <p>The ""allowEmpty"" parameter controls whether an empty String is
-	 * to be allowed in parsing, i.e. be interpreted as the {@code null}
-	 * value when {@link #setAsText(String) text is being converted}. If
-	 * {@code false}, an {@link IllegalArgumentException} will be thrown
-	 * at that time.
+	 * <p>The ""allowEmpty"" parameter controls whether an empty String is to be
+	 * allowed in parsing, i.e. be interpreted as the {@code null} value when
+	 * {@link #setAsText(String) text is being converted}. If {@code false},
+	 * an {@link IllegalArgumentException} will be thrown at that time.
-		else if (text.length() != 1) {
-			throw new IllegalArgumentException(""String ["" + text + ""] with length "" +
-					text.length() + "" cannot be converted to char type"");
+		else if (text.length() == 1) {
+			setValue(Character.valueOf(text.charAt(0)));
-			setValue(new Character(text.charAt(0)));
+			throw new IllegalArgumentException(""String ["" + text + ""] with length "" +
+					text.length() + "" cannot be converted to char type: neither Unicode nor single character"");
-		setValue(new Character((char) code));
+		setValue(Character.valueOf((char) code));",10,condition,CharacterEditor uses Character.valueOf(char) and throws a more descriptive exception,"Issue: SPR-12386
",,16994,1,['Improvement of CharacterEditor.setAsText() and setAsUnicode() [SPR-12386]'],"[""**[Kang Baek-Kyu](https://jira.spring.io/secure/ViewProfile.jspa?name=overmindx)** opened **[SPR-12386](https://jira.spring.io/browse/SPR-12386?redirect=false)** and commented\n\nThe java.lang.Character.valueOf(char c) returns a Character instance representing the specified char value. If a new Character instance is not required, this method should generally be used in preference to the constructor Character(char), as this method is likely to yield significantly better space and time performance by caching frequently requested values.\n\nThis method will always cache values in the range '\\u0000' to '\\u007F', inclusive, and may cache other values outside of this range.\n\nSo I changed source like this\n\nsetValue(new Character(text.charAt(0)));\n-> setValue(Character.valueOf(text.charAt(0)));\n\nsetValue(new Character((char)code));\n-> setValue(Character.valueOf((char) code));\n\n\n---\n\n**Affects:** 4.1.1\n\n**Reference URL:** https://github.com/spring-projects/spring-framework/pull/683\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/1e9ab53095ed601850d2fd780bffd8bee5919487\n""]",['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch! I've applied this as part of a general `CharacterEditor` revision.\n\nJuergen\n"", '**[Kang Baek-Kyu](https://jira.spring.io/secure/ViewProfile.jspa?name=overmindx)** commented\n\nThanks Juergen!\n']"
1ed1167153fe3717e72e3a064bcde934304416fe,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java,Condition_Change,"- * Copyright 2002-2014 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
-				for (ExceptionListener listener : this.delegates) {
+				// Iterate over temporary copy in order to avoid ConcurrentModificationException,
+				// since listener invocations may in turn trigger registration of listeners...
+				for (ExceptionListener listener : new LinkedHashSet<ExceptionListener>(this.delegates)) {",2,iteration,Avoid ConcurrentModificationException in SingleConnectionFactory's AggregatedExceptionListener,"Issue: SPR-13421
",,18000,1,['ConcurrentModificationException in SingleConnectionFactory$AggregatedExceptionListener [SPR-13421]'],"['**[Mike Noordermeer](https://jira.spring.io/secure/ViewProfile.jspa?name=miken)** opened **[SPR-13421](https://jira.spring.io/browse/SPR-13421?redirect=false)** and commented\n\nThe `SingleConnectionFactory$AggregatedExceptionListener` objects contains a list of delegates in a `LinkedHashSet`, protected by the `SingleConnectionFactory.connectionMonitor` lock object.\n\nIf you configure a `SingleConnectionFactory` with `reconnectOnException = true`, and use it in a `SimpleMessageListenerContainer`, the following will happen on a `JMSException`:\n\n1. `SingleConnectionFactory$AggregatedExceptionListener.onException()` is called, and starts looping over the `delegates Set`\n2. At a certain point in time, it will call `SimpleMessageListenerContainer.onException()`, which calls `refreshSharedConnection()`, `createSharedConnection()`, `prepareSharedConnection()`, `connection.setExceptionListener()`\n3. This modifies the `delegates` list (from the same thread, so the locking does not help)\n4. A `ConcurrentModificationException` will be thrown in `SingleConnectionFactory$AggregatedExceptionListener.onException()`\n\nFull exception message:\n\n```\nException in thread ""ActiveMQ Connection Executor: tcp://localhost/127.0.0.1:61616@52892"" java.util.ConcurrentModificationException\n\tat java.util.LinkedHashMap$LinkedHashIterator.nextNode(LinkedHashMap.java:711)\n\tat java.util.LinkedHashMap$LinkedKeyIterator.next(LinkedHashMap.java:734)\n\tat org.springframework.jms.connection.SingleConnectionFactory$AggregatedExceptionListener.onException(SingleConnectionFactory.java:670)\n\tat org.apache.activemq.ActiveMQConnection$5.run(ActiveMQConnection.java:2004)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\n```\n\nThe list of delegates should probably be copied before iteration, or the `SimpleMessageListenerContainer` should not re-add itself as listener.\n\n---\n\n**Affects:** 4.1.7, 4.2.1\n\n**Issue Links:**\n- #15030 Memory leak with SimpleMessageListenerContainer and ChainedExceptionListener on Single/CachingConnectionFactory\n- #20294 JMS Integration with Tibco causes deadlock while using DefaultMessageListenerContainer\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f562eb5ff6e4b0d7408b23977104238d8970da20, https://github.com/spring-projects/spring-framework/commit/1ed1167153fe3717e72e3a064bcde934304416fe\n\n**Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)\n']",['closed'],[1],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch! Fixed for 4.2.2 now, and to be backported to 4.1.8.\n\nFeel free to give the upcoming `4.2.2.BUILD-SNAPSHOT` an early try...\n\nJuergen\n']"
1f13516528a5884a1182649566a33f6dd0cc4e68,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,Condition_Change,"-			// Optimize for Mono
-			if (Mono.class.isAssignableFrom(method.getReturnType())) {
+			// For Mono and suspending functions not returning kotlinx.coroutines.flow.Flow
+			if (Mono.class.isAssignableFrom(method.getReturnType()) || (KotlinDetector.isSuspendingFunction(method) && !COROUTINES_FLOW_CLASS_NAME.equals(new MethodParameter(method, -1).getParameterType().getName()))) {",2,condition,Fix @Transactional support on suspending function,"With this commit, @Transactional on suspending functions
returning a value now commits the transaction properly.

Closes gh-25998
",,25998,1,['@Transactional on suspending function returning a value always rollbacks'],['**Affects:** 5.3.0'],['closed'],[5],"['Could you please provide a repro project ?', 'The Repro:https://github.com/lujijiang/app-demo.git \r\nMaster branch is ok with use transactionalOperator, you can checkout issue code from branch  @TransactionalTest', 'You can test with post to http://localhost:8080/savePerson ,and the data is \r\n```json\r\n{\r\n    ""name"":""lily"",\r\n    ""age"":100\r\n}\r\n```', 'I have been able to reproduce it, it only happens when the suspending function returns a value. In that case the reactive transaction is always rollbacked because of a concellation. See https://github.com/sdeleuze/demo-coroutines-tx for a detailed repro.', 'Great, waiting to be fixed.']"
204a50ee6c9c77ec1f6be479af2e979991130da1,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java,Remove_Condition,"-		// For backwards compatibility
-		MediaType mediaType = getMediaType(resource);
-		if (mediaType != null) {
-			return mediaType;
-		}",4,condition,Fix compile issue,,,,0,N/A,N/A,N/A,N/A,N/A
21267e56b7b4645e145422ee918eb75fab250f56,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/method/ControllerAdviceBean.java,Add_Condition,"+	/**
+	 * Declared as {@code Object} since this may be a reference to a
+	 * {@code String} representing the bean name or a reference to the actual
+	 * bean instance.
+	 */
+	/**
+	 * A reference to the resolved bean instance, potentially lazily retrieved
+	 * via the {@code BeanFactory}.
+	 */
+	private Object resolvedBean;
+
+			this.resolvedBean = bean;
+	 * <p>As of Spring Framework 5.2, once the bean instance has been resolved it
+	 * will be cached, thereby avoiding repeated lookups in the {@code BeanFactory}.
-		return (this.bean instanceof String ? obtainBeanFactory().getBean((String) this.bean) : this.bean);
+		if (this.resolvedBean == null) {
+			// this.bean must be a String representing the bean name if
+			// this.resolvedBean is null.
+			this.resolvedBean = obtainBeanFactory().getBean((String) this.bean);
+		}
+		return this.resolvedBean;",10,condition,Cache resolved bean instance in ControllerAdviceBean,"Prior to this commit, the resolveBean() method in ControllerAdviceBean
looked up the @ControllerAdvice bean instance in the ApplicationContext
by name for every web request that involved lookups for global methods
annotated with @ExceptionHandler, @InitBinder, and @ModelAttribute.

This commit avoids the need for such repeated lookups in the
ApplicationContext by caching the resolved @ControllerAdvice bean
instance within ControllerAdviceBean once it has been resolved.
",,,0,N/A,N/A,N/A,N/A,N/A
215e5f5682cd9aaf9c95105f3d2069298a364a0e,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,Add_Condition,"-				sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex);
+				try {
+					sqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex);
+				}
+				catch (SQLException ex) {
+					if (logger.isDebugEnabled()) {
+						logger.debug(""JDBC getParameterType call failed - using fallback method instead: "" + ex);
+					}
+				}",9,condition,Defensively call getParameterType (which might fail for certain statements),"Issue: SPR-15977
",,20528,1,"['""Parameter metadata not available for the given statement"" SQL Exception after upgrading to Spring 5.0 RC4 [SPR-15977]']","['**[Bogdan Dumitrescu](https://jira.spring.io/secure/ViewProfile.jspa?name=bogdanbux)** opened **[SPR-15977](https://jira.spring.io/browse/SPR-15977?redirect=false)** and commented\n\nScenario:\n\n- execute a prepared statement using JdbcTemplate inserting a row into MySQL 5.5:\n\njdbcTemplate.update(""insert into users (id, name, description) values (?, ?, ?)"", id, name, description);\n\n- condition to reproduce: one of the arguments of the prepared statement is null. The column definition in MySQL corresponding to the null argument accepts null values.\n\nWhen trying to execute the above with Spring 5.0 RC4 we are getting a ""java.sql.SQLException: Parameter metadata not available for the given statement"".\n\nThe same code executes fine when using the 4.3.11.RELEASE of spring-jdbc.\n\nUsing version 5.1.44 of mysql-connector-java, we\'re seeing the same behaviour on the following MySQL versions:\n\nVer 14.14 Distrib 5.5.53\nVer 14.14 Distrib 5.7.18-15\n\n---\n\n**Affects:** 5.0 RC4\n\n**Attachments:**\n- [stacktrace.txt](https://jira.spring.io/secure/attachment/25108/stacktrace.txt) (_3.65 kB_)\n\n**Issue Links:**\n- #18399 Raise JDBC driver feature baseline to JDBC 4.0+\n- #20687 Doc: ParameterMetaData.getParameterType performance on Oracle 12c\n\n']",['closed'],[4],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nCould you post the stacktrace for the underlying `SQLException` as well, please? I'm pretty sure this is a side effect of #18399 but it'd be great to know where exactly it originates... It's probably in `StatementCreatorUtils.setNull` but it'd be great to double-check.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've reintroduced a catch block around our `getParameterType` call in `StatementCreatorUtils.setNull` which I'm pretty sure is the root cause here. Spring Framework 4.x had a defensive catch block there against older JDBC drivers which implicitly covered this but got removed in the JDBC baseline upgrade for 5.0. Now it's not about general lack of support for `getParameterType` but rather just about failing for specific statements, so it should be sufficient to simply locally catch and log the `SQLException` and proceed with our fallback code path.\n\nTo be committed and backported tomorrow. It would nevertheless be great to verify that this matches your particular case...\n"", ""**[Bogdan Dumitrescu](https://jira.spring.io/secure/ViewProfile.jspa?name=bogdanbux)** commented\n\nFirst of all, thank you for fixing this so quickly!\n\nI've added the stack trace from the underlying SQLException, just for completeness. We were using mysql-connector 5.1.36 for this stack trace, but we reproduced the error after upgrading to 5.1.44 as well.\n\nI'll test your fix as it's backported and let you know. Thanks again!\n"", '**[Bogdan Dumitrescu](https://jira.spring.io/secure/ViewProfile.jspa?name=bogdanbux)** commented\n\nI can confirm that with the latest 5.0 snapshot build our problem is solved - the row with null values is successfully saved to the database. Thank you!\n']"
2172b99fee345f0068e9d1851bf5ed6d0ba36633,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java,Add_Condition,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
-import org.springframework.util.StringUtils;
-		if(!StringUtils.hasText(ex.getMessage())) {
-			close(CloseStatus.SERVER_ERROR);
+		if (logger.isDebugEnabled()) {
+			logger.debug(""WebSocket session completed with error"", ex);
-		else {
-			close(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));
+		else if (logger.isInfoEnabled()) {
+			logger.info(""WebSocket session completed with error: "" + ex.getMessage());
+		close(CloseStatus.SERVER_ERROR);",10,condition,Polishing contribution,"Closes gh-28836
",,28836,1,['Avoid IllegalArgumentException when setting WebSocket error status'],"[""Fixing internal error, when the message of an exception doesn't contain any text.\r\n\r\nIn my application, this probably caused a memory leak. (Which I will retest with a fork, but it will take some time because the issue happened very infrequently)\r\n\r\nThis is how it looks in the log:\r\n```\r\njava.lang.IllegalArgumentException: Reason must not be empty\r\n\tat org.springframework.util.Assert.hasText(Assert.java:289) ~[spring-core-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.CloseStatus.withReason(CloseStatus.java:184) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.onError(AbstractListenerWebSocketSession.java:250) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat reactor.core.publisher.StrictSubscriber.onError(StrictSubscriber.java:106) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:544) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onError(FluxDoFinally.java:119) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:192) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:259) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:842) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:588) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:863) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:990) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:258) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:903) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.onError(MonoSubscribeOn.java:152) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.SinkEmptyMulticast$VoidInner.error(SinkEmptyMulticast.java:247) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.SinkEmptyMulticast.tryEmitError(SinkEmptyMulticast.java:88) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.SinkEmptySerialized.tryEmitError(SinkEmptySerialized.java:65) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.onError(AbstractListenerWebSocketSession.java:245) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat reactor.core.publisher.StrictSubscriber.onError(StrictSubscriber.java:106) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:544) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:258) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat org.springframework.http.server.reactive.WriteResultPublisher$State.publishError(WriteResultPublisher.java:277) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.WriteResultPublisher.publishError(WriteResultPublisher.java:99) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State.onError(AbstractListenerWriteProcessor.java:479) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onError(AbstractListenerWriteProcessor.java:132) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat reactor.core.publisher.StrictSubscriber.onError(StrictSubscriber.java:106) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher$State.onError(AbstractListenerReadPublisher.java:497) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher.onError(AbstractListenerReadPublisher.java:145) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.handleError(AbstractListenerWebSocketSession.java:208) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter.onError(StandardWebSocketHandlerAdapter.java:120) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.onError(WsHttpUpgradeHandler.java:234) ~[tomcat-embed-websocket-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.upgradeDispatch(WsHttpUpgradeHandler.java:161) ~[tomcat-embed-websocket-9.0.64.jar!/:na]\r\n\tat org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:60) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:59) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]\r\n```""]",['closed'],[3],"['I think we could switch to a very generic message instead.', 'Any suggestions? Then I will change the PR accordingly.', ""I've left it as a status-only response since the status code itself communicates the nature. I've also added logging with the exception message at INFO and the full stacktrace at DEBUG.""]"
224e36948412b258a9e8f4336aa06e5f3645220b,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Condition_Change,"-
+	/**
+	 * Common prefix that DispatcherServlet's default strategy attributes start with.
+	 */
+        private static final String DEFAULT_STRATEGIES_PREFIX = ""org.springframework.web.servlet"";
+	
-			throw new IllegalStateException(""Could not load 'DispatcherServlet.properties': "" + ex.getMessage());
+			throw new IllegalStateException(""Could not load '"" + DEFAULT_STRATEGIES_PATH + ""': "" + ex.getMessage());
-				if (this.cleanupAfterInclude || attrName.startsWith(""org.springframework.web.servlet"")) {
+				if (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {",8,condition,Reuse constant in DispatcherServlet,"See gh-1398
",,1398,1,['Do not use hard coded strings'],[''],['closed'],[1],"['Merged, thanks!']"
2270df515b040d8612c691acc0102d1a224bcd82,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"+			String urlString = url.toString();
+			String cleanedPath = StringUtils.cleanPath(urlString);
+			if (!cleanedPath.equals(urlString)) {
+				// Prefer cleaned URL, aligned with UrlResource#createRelative(String)
+				try {
+					return new UrlResource(ResourceUtils.toURI(cleanedPath));
+				}
+				catch (URISyntaxException | MalformedURLException ex) {
+					// Fallback to regular URL construction below...
+				}
+			}",9,condition,Enforce cleaned URL for root resource from ClassLoader,"Closes gh-32828
",,32828,1,['Inconsistent use of cleaned URLs in PathMatchingResourcePatternResolver'],"['We have written our own plugin framework for Spring Boot where plugins (additional jar files) are loaded in their own PluginApplicationContext (derived from GenericApplicationContext) with their own PluginClassLoader (derived from URLClassLoader). Our plugin framework supports dynamic loading and unloading of plugins. \r\n\r\nWhen a plugin is loadded, the jar file is copied with a unique temporary name to our work directory before loading the it with our PluginCalssLoader and creating the PluginApplicationContext. \r\n\r\nWhen a plugin is unloaded, the PluginApplicationContext  is closed, the PluginClassLoader is closed and the temporary jar file is deleted.\r\n\r\nEverything works fine with Spring Boot 3.1 up to Spring Boot 3.1.11. But when we switch to Spring Boot 3.2 (even Spring Boot 3.2.5), the unloading does now work properly. The temporary jar file cannot be deleted anymore because the classloader is not freed. \r\n\r\nWhat can be the reason for this issue? What has changed between the releases?\r\n\r\nKind regards\r\nJörg']",['closed'],[10],"[""This may be due to https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.2-Release-Notes#nested-jar-support but that's only a guess. To be more specific, we'd need to know much more about what you're doing, how your running the application, and so on.\r\n\r\nIf you would like us to spend some more time investigating, please spend some time providing a complete yet minimal sample that reproduces the problem. You can share it with us by pushing it to a separate repository on GitHub or by zipping it up and attaching it to this issue. as we don't know enough about what you're doing and how you're running the Spring Boot application.\r\n\r\n"", 'Hi Andy,\r\n\r\nI\'ve put together a small sample which demonstrates the issue (attached zip). I\'ve reduced our plugin framework to only the relevant parts and removed everything else like dependency management, resource loading and everything else. While assembling the demo, I\'ve seen that there must have been something changed in the request mapping stuff of the Spring Framework. As long as I do not add @Controller classes to my plugins, they are unloaded sucessfully in Spring Boot 3.2. If I add @Controller classes to my plugins, they are unloaded successfully in Spring Boot 3.1.11 but not anymore in Spring Boot 3.2.5.\r\n\r\nIf you unzip the enclosed zip, you have 5 projects and a runtime folder:\r\n\r\n1. **demo**:  the main Spring Boot application, containing the plugin framework implementation\r\n2. **demo-layout**: the custom layout we use for packaging plugin jars\r\n3. **demo-plugin**: the parent BOM which is used by all plugin projects\r\n4. **demo-plugin1**: a simple demo plugin with one simple controller\r\n5. **demo-plugin2**: a simple demo plugin with one simple controller\r\n6. **runtime**: the runtime folder which contains everything to start the demo\r\n \r\nAfter you have extracted the zip, please execute the build-all.bat in the root folder. It builds everything and copies the targets to the correct folders. The plugin jars are copied to the plugins folder, everything else to the lib folder. Afterwards please execute the startServer.bat in runtime\\bin. It should start the small web application and you should be able to see that two plugins are activated when you open ""localhost:8081/list-plugins"" in a browser. When you now enter the url ""localhost:8081/deactivate-plugin?pluginId=demo-plugin1"" you should see a line ""Deleted file ..\\work\\demo-plugin1-1.0.0.0-<timestamp>.jar. That means the plugin class loader is completely unloaded and the jar could be deleted (the expected behaviour).\r\n\r\nNow please change the Spring Boot version to 3.2.5 in demo\\pom.xml, demo-layout\\pom.xml and demo-plugin\\pom.xml and recompile and restart everything. If you again deactivate the plugin, you will see that the output is now ""Unable to delete... "" allthough nothing has changed in our code. \r\n\r\nSo the problem must be in the Spring Framework and I need your help if I have to change something in our code.\r\n\r\nKind regards\r\nJörg\r\n[test-project.zip](https://github.com/spring-projects/spring-boot/files/15275106/test-project.zip)\r\n', 'Hi Andy,\r\n\r\nI have attached a demo zip and some instructions to reproduce the issue to the Github thread.\r\nAny help would be great because at some time we have to switch to Spring Boot 3.2.\r\n\r\nKind regards\r\nJörg\r\n', ""Thanks for the sample. I think I've managed to reproduce the behavior that you have described with a file handle being leaked but it is hard to be certain as the sample is Windows-specific and I use macOS for my day-to-day work. macOS (like Linux) also doesn't prevent a file from being deleted when it's open but I can see the leaked file handle using `lsof`.\r\n\r\nThe underlying cause of the problem is two URLs that are different but point to the same resource. They look something like this:\r\n\r\n- `file:/Users/awilkinson/Downloads/test-project/runtime/bin/../work/demo-plugin1-1.0.0.0-3486320809144453673.jar`\r\n- `file:/Users/awilkinson/Downloads/test-project/runtime/work/demo-plugin1-1.0.0.0-3486320809144453673.jar`\r\n\r\nThis difference results in the jar being opened twice but only closed once. As result there are two open file handles for the plugin jar when it is activated and one remains once it has been deactivated.\r\n\r\nI first suspected that this was due to the [new nested jar support](https://github.com/spring-projects/spring-boot/wiki/Spring-Boot-3.2-Release-Notes#nested-jar-support) but switching to the `CLASSIC` loader does not help. In fact, it makes things worse as there are three open file handles once the plugin has been activated and two remain once it has been deactivated. I also tried running `DemoApplication` in my IDE so that a Spring Boot's nested jar supported isn't used and the problem still occurs.\r\n\r\nGiven that the problem occurs without Spring Boot's nested jar support and only occurs when a component is found by classpath scanning of the plugin, I next suspected it was due to a change in Spring Framework and this appears to be the case. With the `demo` project updated to set the `spring-framework.version` property to 6.0.19 and rebuilt, the problem no longer occurs. Note that this downgrade requires running the app with `-Dspring.autoconfigure.exclude=org.springframework.boot.autoconfigure.task.TaskSchedulingAutoConfiguration` as the task scheduling auto-configuration requires Spring Framework 6.2.x. We'll transfer this issue to the Framework team so that they can investigate.\r\n\r\nIn the meantime, the problem can be worked around by using a canonical directory for the `workDir` in `PluginLoader`:\r\n\r\n```\r\nFile workDir = new File(PluginConstants.WORK_DIR).getCanonicalFile();\r\n```\r\n\r\nThis removes the `bin/../` from the first URL so it's then matched by the second.\r\n\r\n"", ""Some notes for the Framework team that may help. The TL;DR is that I think that https://github.com/spring-projects/spring-framework/commit/934231729123f57542f9bd974ec39a4222c7af22 is the cause of the regression as it calls `StringUtils.cleanPath` which 6.0 does not do.\r\n\r\nOther observations that led me to this conclusion follow:\r\n\r\nThe two different URLs are used in close proximity to each other within `scanCandidateComponents`. When the first with the `bin/../` is used, the stack is as follows:\r\n\r\n```\r\nUrlJarFiles.getOrCreate(boolean, URL) line: 72\t\r\nJarUrlConnection.connect() line: 289\t\r\nJarUrlConnection.getJarFile() line: 99\t\r\nPathMatchingResourcePatternResolver.doFindPathMatchingJarResources(Resource, URL, String) line: 683\t\r\nPathMatchingResourcePatternResolver.findPathMatchingResources(String) line: 586\t\r\nPathMatchingResourcePatternResolver.getResources(String) line: 334\t\r\nPluginApplicationContext(AbstractApplicationContext).getResources(String) line: 1511\t\r\nPluginApplicationContext(GenericApplicationContext).getResources(String) line: 262\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).scanCandidateComponents(String) line: 457\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).findCandidateComponents(String) line: 351\t\r\nClassPathBeanDefinitionScanner.doScan(String...) line: 277\t\r\nClassPathBeanDefinitionScanner.scan(String...) line: 255\t\r\nPluginApplicationContext.scan(String...) line: 44\t\r\nStandardPluginRegistry.doLoadPlugin(StandardPlugin) line: 243\t\r\nStandardPluginRegistry.loadPlugin(StandardPlugin) line: 229\t\r\nStandardPluginRegistry.loadPlugins() line: 206\t\r\nStandardPluginRegistry.afterSingletonsInstantiated() line: 156\t\r\nDefaultListableBeanFactory.preInstantiateSingletons() line: 986\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 962\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).refresh() line: 624\t\r\nAnnotationConfigServletWebServerApplicationContext(ServletWebServerApplicationContext).refresh() line: 146\t\r\nSpringApplication.refresh(ConfigurableApplicationContext) line: 754\t\r\nSpringApplication.refreshContext(ConfigurableApplicationContext) line: 456\t\r\nSpringApplication.run(String...) line: 334\t\r\nSpringApplication.run(Class<?>[], String[]) line: 1354\t\r\nSpringApplication.run(Class<?>, String...) line: 1343\t\r\nDemoApplication.main(String[]) line: 49\t\r\n```\r\n\r\nWhen the second URL without the `bin/../` is used, the stack is as follows:\r\n\r\n```\r\nUrlJarFiles.getOrCreate(boolean, URL) line: 72\t\r\nJarUrlConnection.connect() line: 289\t\r\nJarUrlConnection.getInputStream() line: 195\t\r\nUrlResource.getInputStream() line: 232\t\t\r\nSimpleMetadataReader.getClassReader(Resource) line: 54\t\r\nSimpleMetadataReader.<init>(Resource, ClassLoader) line: 48\t\r\nCachingMetadataReaderFactory(SimpleMetadataReaderFactory).getMetadataReader(Resource) line: 103\t\r\nCachingMetadataReaderFactory.getMetadataReader(Resource) line: 122\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).scanCandidateComponents(String) line: 470\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).findCandidateComponents(String) line: 351\t\r\nClassPathBeanDefinitionScanner.doScan(String...) line: 277\t\r\nClassPathBeanDefinitionScanner.scan(String...) line: 255\t\r\nPluginApplicationContext.scan(String...) line: 44\t\r\nStandardPluginRegistry.doLoadPlugin(StandardPlugin) line: 243\t\r\nStandardPluginRegistry.loadPlugin(StandardPlugin) line: 229\t\r\nStandardPluginRegistry.loadPlugins() line: 206\t\r\nStandardPluginRegistry.afterSingletonsInstantiated() line: 156\t\r\nDefaultListableBeanFactory.preInstantiateSingletons() line: 986\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 962\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).refresh() line: 624\t\r\nAnnotationConfigServletWebServerApplicationContext(ServletWebServerApplicationContext).refresh() line: 146\t\r\nSpringApplication.refresh(ConfigurableApplicationContext) line: 754\t\r\nSpringApplication.refreshContext(ConfigurableApplicationContext) line: 456\t\r\nSpringApplication.run(String...) line: 334\t\r\nSpringApplication.run(Class<?>[], String[]) line: 1354\t\r\nSpringApplication.run(Class<?>, String...) line: 1343\t\r\nDemoApplication.main(String[]) line: 49\t\r\n```\r\n\r\nA URL in the second form can be seen in trace-level logging from `ClassPathBeanDefinitionScanner`:\r\n\r\n```\r\n2024-05-15T11:16:48.334+01:00 TRACE 33513 --- [           main] o.s.c.a.ClassPathBeanDefinitionScanner   : Scanning URL [jar:file:/Users/awilkinson/Downloads/test-project/runtime/work/demo-plugin1-1.0.0.0-16251652149578762890.jar!/com/example/demo/plugin1/DemoController.class]\r\n```\r\n\r\nUpon downgrading to Framework 6.0.19, this logging changes and the URL's in the first form with the `bin/../`:\r\n\r\n```\r\n2024-05-15T11:18:15.196+01:00 TRACE 33560 --- [           main] o.s.c.a.ClassPathBeanDefinitionScanner   : Scanning URL [jar:file:/Users/awilkinson/Downloads/test-project/runtime/bin/../work/demo-plugin1-1.0.0.0-14759968729258928182.jar!/com/example/demo/plugin1/DemoController.class]\r\n```\r\n\r\n6.1 is cleaning the path when going from a URL for a root dir resource to a URL for a specific resource that matches the sub-pattern. `createRelative` is called on a `UrlResource` with the URL `jar:file:/Users/awilkinson/Downloads/test-project/runtime/bin/../work/demo-plugin1-1.0.0.0-12436866063543419511.jar!/com/example/demo/plugin1/` with a `relativePath` of `DemoController.class`. This results in a `UrlResource` with the URL `jar:file:/Users/awilkinson/Downloads/test-project/runtime/work/demo-plugin1-1.0.0.0-12436866063543419511.jar!/com/example/demo/plugin1/DemoController.class` due to path cleaning that's now performed in `ResourceUtils.toURL(String)`.\r\n"", 'It looks like `ClassLoader.getResources` itself returns a uncleaned path with a `../` segment there, and our `convertClassLoaderURL` method turns it into a `UrlResource(URL)` due to a jar location - whereas it would turn it into a `FileSystemResource` with a clean path in case of a file location. So we should consistently use cleaned URL paths even for the jar location case there, I suppose.', 'This should be resolved based on my understanding above, consistently cleaning URLs from the ClassLoader.\r\n@wilkinsona please give the upcoming 6.1.7 snapshot a try with Boot in such a scenario!', ""Unfortunately, the sample is broken as before when using 6.1.7-SNAPSHOT although the exact behavior has changed. Now, the first URL that's used does not contain `bin/../`. The stack at this point is as follows:\r\n\r\n```\r\nUrlJarFiles.getOrCreate(boolean, URL) line: 72\t\r\nJarUrlConnection.connect() line: 289\t\r\nJarUrlConnection.getJarFile() line: 99\t\r\nPathMatchingResourcePatternResolver.doFindPathMatchingJarResources(Resource, URL, String) line: 694\t\r\nPathMatchingResourcePatternResolver.findPathMatchingResources(String) line: 597\t\r\nPathMatchingResourcePatternResolver.getResources(String) line: 334\t\r\nPluginApplicationContext(AbstractApplicationContext).getResources(String) line: 1511\t\r\nPluginApplicationContext(GenericApplicationContext).getResources(String) line: 263\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).scanCandidateComponents(String) line: 457\t\r\nClassPathBeanDefinitionScanner(ClassPathScanningCandidateComponentProvider).findCandidateComponents(String) line: 351\t\r\nClassPathBeanDefinitionScanner.doScan(String...) line: 277\t\r\nClassPathBeanDefinitionScanner.scan(String...) line: 255\t\r\nPluginApplicationContext.scan(String...) line: 44\t\r\nStandardPluginRegistry.doLoadPlugin(StandardPlugin) line: 243\t\r\nStandardPluginRegistry.loadPlugin(StandardPlugin) line: 229\t\r\nStandardPluginRegistry.loadPlugins() line: 206\t\r\nStandardPluginRegistry.afterSingletonsInstantiated() line: 156\t\r\nDefaultListableBeanFactory.preInstantiateSingletons() line: 986\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 962\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).refresh() line: 624\t\r\nAnnotationConfigServletWebServerApplicationContext(ServletWebServerApplicationContext).refresh() line: 146\t\r\nSpringApplication.refresh(ConfigurableApplicationContext) line: 754\t\r\nSpringApplication.refreshContext(ConfigurableApplicationContext) line: 456\t\r\nSpringApplication.run(String...) line: 335\t\r\nSpringApplication.run(Class<?>[], String[]) line: 1363\t\r\nSpringApplication.run(Class<?>, String...) line: 1352\t\r\nDemoApplication.main(String[]) line: 49\t\r\n```\r\n\r\nThe second URL that's used now does contain `bin/../`. The stack at this point is as follows:\r\n\r\n```\r\nUrlJarFiles.getOrCreate(boolean, URL) line: 72\t\r\nJarUrlConnection.connect() line: 289\t\r\nJarUrlConnection.getInputStream() line: 195\t\r\nPluginClassLoader(URLClassLoader).getResourceAsStream(String) line: 296\t\r\nClassPathResource.getInputStream() line: 209\t\r\nSimpleMetadataReader.getClassReader(Resource) line: 54\t\r\nSimpleMetadataReader.<init>(Resource, ClassLoader) line: 48\t\r\nCachingMetadataReaderFactory(SimpleMetadataReaderFactory).getMetadataReader(Resource) line: 103\t\r\nCachingMetadataReaderFactory.getMetadataReader(Resource) line: 122\t\r\nCachingMetadataReaderFactory(SimpleMetadataReaderFactory).getMetadataReader(String) line: 81\t\r\nConfigurationClassParser.asSourceClass(String, Predicate<String>) line: 630\t\r\nConfigurationClassParser.asSourceClass(ConfigurationClass, Predicate<String>) line: 579\t\r\nConfigurationClassParser.processConfigurationClass(ConfigurationClass, Predicate<String>) line: 244\t\r\nConfigurationClassParser.parse(AnnotationMetadata, String) line: 197\t\r\nConfigurationClassParser.parse(Set<BeanDefinitionHolder>) line: 165\t\r\nConfigurationClassPostProcessor.processConfigBeanDefinitions(BeanDefinitionRegistry) line: 417\t\r\nConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(BeanDefinitionRegistry) line: 290\t\r\nPostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(Collection<BeanDefinitionRegistryPostProcessor>, BeanDefinitionRegistry, ApplicationStartup) line: 349\t\r\nPostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory, List<BeanFactoryPostProcessor>) line: 118\t\r\nPluginApplicationContext(AbstractApplicationContext).invokeBeanFactoryPostProcessors(ConfigurableListableBeanFactory) line: 788\t\r\nPluginApplicationContext(AbstractApplicationContext).refresh() line: 606\t\r\nStandardPluginRegistry.doLoadPlugin(StandardPlugin) line: 246\t\r\nStandardPluginRegistry.loadPlugin(StandardPlugin) line: 229\t\r\nStandardPluginRegistry.loadPlugins() line: 206\t\r\nStandardPluginRegistry.afterSingletonsInstantiated() line: 156\t\r\nDefaultListableBeanFactory.preInstantiateSingletons() line: 986\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 962\t\r\nAnnotationConfigServletWebServerApplicationContext(AbstractApplicationContext).refresh() line: 624\t\r\nAnnotationConfigServletWebServerApplicationContext(ServletWebServerApplicationContext).refresh() line: 146\t\r\nSpringApplication.refresh(ConfigurableApplicationContext) line: 754\t\r\nSpringApplication.refreshContext(ConfigurableApplicationContext) line: 456\t\r\nSpringApplication.run(String...) line: 335\t\r\nSpringApplication.run(Class<?>[], String[]) line: 1363\t\r\nSpringApplication.run(Class<?>, String...) line: 1352\t\r\nDemoApplication.main(String[]) line: 49\t\r\n```\r\n\r\nAn interesting change here is that, in the second use of the URL, it's now coming from a `ClassPathResource`. With 6.1.6, the second use of the URL was coming from a `UrlResource`.\r\n\r\nI think this explains why the sample continues to be broken as the class loader has the URL `file:/Users/awilkinson/Downloads/test-project/runtime/bin/../work/demo-plugin1-1.0.0.0-12470862329384363385.jar` on its path. The work around that I described above (using the canonical path when working with the files that populate the plugin's classpath) continues to work as both sides are then using the cleaned path. "", ""Thanks for the detailed analysis, @wilkinsona! Unfortunately it gets really involved from here since `ClassPathResource` delegates to `ClassLoader.getResourceAsStream(String)` which *internally* resolves a URL that it then obtains the stream for. We don't control those internal URLs at all unless we change the access path to `ClassLoader.getResource(String)`, cleaning the returned URL and then manually opening a stream for it. Since that might bypass optimizations in custom `ClassLoader` implementations, I'm not inclined to go there.\r\n\r\nSo for the time being, `PathMatchingResourcePatternResolver` exposes a consistent set of URLs in its results which is a sensible measure in general. Any subsequent direct class path access, be it from `ClassPathResource` or through direct `ClassLoader` usage, will still internally use the original URL though. From that perspective, it seems necessary to enforce clean URLs in the `PluginClassLoader` itself if it expects to have the same resource accessed in a uniform way (in order to be able to release each resource in a consistent fashion)."", ""I really appreciate your help on this issue. I've changed our PluginClassLoader to use the getCanonicalFile() method and everything works fine now, even in our full blown plugin framework which supports a lot more than the simple demo project.\r\n\r\nThank you again for your help. We can now finally switch to the latest Spring Boot version and no longer have to worry about the end of the 3.1 version.\r\n\r\nKind regards\r\nJörg""]"
22db1ac14635eb6599eff1708f02a4f7a2cb63eb,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java,Add_Condition,"+import org.springframework.core.CoroutinesUtils;
+import org.springframework.core.KotlinDetector;
+ * @author Sebastien Deleuze
-		int count = method.getParameterCount();
+		int count = (KotlinDetector.isSuspendingFunction(method) ? method.getParameterCount() - 1 : method.getParameterCount());
+			if (KotlinDetector.isSuspendingFunction(this.method)) {
+				return CoroutinesUtils.invokeSuspendingFunction(this.method, bean, args);
+			}",7,condition,Add Coroutines support for `@EventListener`,"Closes gh-28343
",,28343,1,['Add Coroutines support for `@EventListener`'],"['<!--\r\n!!! For Security Vulnerabilities, please go to https://spring.io/security-policy !!!\r\n-->\r\n**Affects:** Any\r\n\r\n---\r\n<!--\r\nThanks for taking the time to create an issue. Please read the following:\r\n\r\n- Questions should be asked on Stack Overflow.\r\n- For bugs, specify affected versions and explain what you are trying to do.\r\n- For enhancements, provide context and describe the problem.\r\n\r\nIssue or Pull Request? Create only one, not both. GitHub treats them as the same.\r\nIf unsure, start with an issue, and if you submit a pull request later, the\r\nissue will be closed as superseded.\r\n-->\r\nSpring introduced first-class support to kotlin and coroutines and while almost everything works flawlessly I really miss the support for coroutines in the `@EventListener`.\r\n\r\nI used in the past [spring-kotlin-coroutine ](https://github.com/konrad-kaminski/spring-kotlin-coroutine)however this project is not updated for 3 years so I wonder if such support could be added to core Spring.']",['closed'],[7],"['It would be really helpful, do you have any working implementation that could replace it for now?', 'The original [Spring Kotlin Corutines](https://github.com/konrad-kaminski/spring-kotlin-coroutine) has great Kotlin Coroutines support, unfortunately it is discontinued. A lot of features are not support in current Spring framework although Spring has supported Kotlin for years.\r\n\r\nI used Kotlin Coroutines/Spring Boot in my project, and I found there are still some problems when using Coroutines in events, cache, schedule/async and Spring Security DSL config. I had to wrap the corourtines codes with a `runBlocking` to use it in the existing facilities of Spring.', 'Spring supports Coroutines where it support reactive types, and since #21831 supports that use case, we should indeed support this use case.', '@sdeleuze I would like get the following cases working in a Spring/Kotlin Coroutines project.\r\n\r\n1. Allow a `suspend` `main` fun for the application entry.\r\n2. Coroutines version of `ApplicationEventListener`, `@EventListener` on a `suspend` fun or a fun returns a Kotlin `Flow`.\r\n3. Make cache annotations work on any `suspend` fun or `Flow` return type.\r\n4. Make it work in Spring Security Kotlin DSL `http{}`(similar to `route`, there is `coRoute` for coroutines)\r\n5. provides a coroutines versions of CommandLineRunner, ApplicationRunner, ReactiveAuditorAware, ReactiveEntityCallback, etc.', ""From my point of view, Spring should not support `suspend` everywhere, but I fully understand it is not always easy to draw the line between what should be supported and what should not. Notice that this question is not specific to Kotlin Coroutines, but is also true for our Reactive support.\r\n\r\nSpring should provides Coroutines support where Reactive types are supported. For example, we recently added support for Reactive/Coroutines to `@Scheduled` (see #29924).\r\n\r\nFor event listeners, we indeed support Reactive types on event listeners so it would make sense to support Coroutines as well (see https://github.com/spring-projects/spring-framework/issues/27515 related issue even if more focused on transactional support).\r\n\r\nSo let's try to make that happen early in 6.1.x release cycle (tentatively planned for RC2 but that may be postponed depending on my bandwidth)."", 'Great to see schedule, cache, event listener to get Reactive/Coroutines support in Spring 6.1.', '@sdeleuze awesome work! Super thanks!']"
231433f5406453069aa125329be042d5e32ddff0,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ReflectionUtils.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
-			throw new IllegalStateException(""Unexpected reflection exception - "" + ex.getClass().getName() + "": ""
-					+ ex.getMessage());
+			throw new IllegalStateException(
+					""Unexpected reflection exception - "" + ex.getClass().getName() + "": "" + ex.getMessage());
-				if (name.equals(method.getName())
-						&& (paramTypes == null || Arrays.equals(paramTypes, method.getParameterTypes()))) {
+				if (name.equals(method.getName()) &&
+						(paramTypes == null || Arrays.equals(paramTypes, method.getParameterTypes()))) {",8,condition,Polishing (cherry picked from commit 6021822),,,,0,N/A,N/A,N/A,N/A,N/A
239b7086c676321b48b1b094704b4995417a188b,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Condition_Change,"-        private static final String DEFAULT_STRATEGIES_PREFIX = ""org.springframework.web.servlet"";
-	
+	private static final String DEFAULT_STRATEGIES_PREFIX = ""org.springframework.web.servlet"";
+
-			if (this.cleanupAfterInclude || attrName.startsWith(""org.springframework.web.servlet"")) {
+			if (this.cleanupAfterInclude || attrName.startsWith(DEFAULT_STRATEGIES_PREFIX)) {",6,condition,"Polish ""Reuse constant in DispatcherServlet""","Closes gh-1398
",,1398,1,['Do not use hard coded strings'],[''],['closed'],[1],"['Merged, thanks!']"
24aae2e104f9e8eb1f21e79959ab00cb7fdcc49f,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java,Add_Condition,"-						this.factoryBeanObjectCache.put(beanName, object);
+						if (containsSingleton(beanName)) {
+							this.factoryBeanObjectCache.put(beanName, object);
+						}",4,condition,Defensive containsSingleton cache guard within getObjectFromFactoryBean,"Issue: SPR-16625
",,21166,1,['FactoryBeanRegistrySupport atomicity issues [SPR-16625]'],"['**[László Magyar](https://jira.spring.io/secure/ViewProfile.jspa?name=magyarl)** opened **[SPR-16625](https://jira.spring.io/browse/SPR-16625?redirect=false)** and commented\n\nWithin org.springframework.beans.factory.support.FactoryBeanRegistrySupport found some issues with atomic operation.\nPlease check PR.\n\n---\n\n**Affects:** 4.3.14, 5.0.4\n\n**Issue Links:**\n- #21119 SimpleAliasRegistry registerAlias not atomic\n- #21161 Consistent thread-safe iteration in DefaultSingletonBeanRegistry\n- #21168 Address race condition within spring that causes about-to-be-created-bean exceptions\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1749\n\n**Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)\n']",['closed'],[5],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch, this may indeed lead to race conditions in on-the-fly removal during live operations. I've revised the code accordingly, inspired by your pull request but somewhat more extensively: including `factoryBeanInstanceCache` in `AbstractAutowireCapableBeanFactory`, and with a new `clearSingletonCache()` template method that reduces the scope of the singleton lock. Also, the extra `containsSingleton` check isn't actually necessary once all removal attempts happen consistently within the singleton lock since the `factoryBeanObjectCache` will always be in sync.\n"", ""**[László Magyar](https://jira.spring.io/secure/ViewProfile.jspa?name=magyarl)** commented\n\nJuergen, please check my other created ticket and it's PR, it is related to this maybe.\nIt's number #21161.\nPlease check the synchronized wrapper usage when adding elements to containedBeanMap and dependentBeanMap, also the synchronization when iterating over these collections.\nIn my opinion it is required.\n"", ""**[László Magyar](https://jira.spring.io/secure/ViewProfile.jspa?name=magyarl)** commented\n\nI've checked the code.\nThe extra containsSingleton check was because maybe between the returned true, and the synchronization some thread removed this bean from singletons.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI see, your concern there is effectively the singleton nature of the given `FactoryBean` instance: If it gets replaced by a non-singleton `FactoryBean` definition at runtime, we might accidentally decide to cache the instance in case of such a race condition... Even if the instance won't get reused later on when no singleton is found when reentering this code, we won't clean it up either since `removeSingleton` assumes it has cleaned it up already on singleton removal.\n\nInitially I only looked at it from the perspective of receiving an outdated instance there which is guaranteed to not happen with the synchronized removal from both data structures in `removeSingleton` now. I'll revisit it from the perspective of a hot replacement with a non-singleton, as outlined above. However, this is a very unusual scenario since replacements are expected to be of the same kind in quite a few spots across the core container.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI\'ve added another `containsSingleton` guard but only right before putting into the `factoryBeanObjectCache` where we need to make sure we\'re not adding to it when no singleton exists anymore at that point. All other conditions are being enforced through consistent synchronization in the meantime, and we keep the ""happy path"" free from an extra check here.\n']"
25e6a2da646c9a465fabf1c73796a1ae01886857,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java,Remove_Condition,"-
-				Principal user = getUser(session);
-				if (user != null) {
-					headerAccessor.setUser(user);
-				}
-
+				headerAccessor.setUser(getUser(session));
+							Principal user = headerAccessor.getUser();
+							Principal user = getUser(session);",9,condition,StompSubProtocolHandler consistently accesses current user,"Issue: SPR-15822
",,20377,1,['Setting user header on CONNECT message stopped working [SPR-15822]'],"['**[Jeff](https://jira.spring.io/secure/ViewProfile.jspa?name=domain)** opened **[SPR-15822](https://jira.spring.io/browse/SPR-15822?redirect=false)** and commented\n\nWe followed instructions in Token-Based Authentication in Spring doc at http://docs.spring.io/spring/docs/5.0.0.M5/spring-framework-reference/html/websocket.html#websocket-stomp-authentication-token-based, in order to set the user header on the CONNECT Message. In Spring framework 4.3.9, it works well. After migrating to 5.0.0 RC2, we found it stopped working. After some investigation, we tend to believe it is a bug in 5.0.0 RC2 as well as RC3.\n\n[5.0.0 RC2 behavior]   - bad\nIn method handleMessageFromClient() in StompSubProtocolHandler class, Principal is retrieved from session. Of course, at this point, the Principal is null. And then, Spring attempts to put Principal to stompAuthentications. Since it is null, nothing would be put into stompAuthentications.\n\n    \t\t\tPrincipal user = getUser(session);\n    \t\t\tif (user != null) {\n    \t\t\t\theaderAccessor.setUser(user);\n    \t\t\t}\n    \t\t\t...\n    \t\t\ttry {\n    \t\t\t\tSimpAttributesContextHolder.setAttributesFromMessage(message);\n    \t\t\t\tboolean sent = outputChannel.send(message);\n    \n    \t\t\t\tif (sent) {\n    \t\t\t\t\tif (isConnect) {\n    \t\t\t\t\t\tif (user != null && user != session.getPrincipal()) {\n    \t\t\t\t\t\t\tthis.stompAuthentications.put(session.getId(), user);\n    \t\t\t\t\t\t}\n    \t\t\t\t\t}\n\n[4.3.9 behavior]   - good\nSpring tries to retrieve Principal from STOMP header, and then put it into stompAuthentications.\n\n    if (sent) {\n             if (isConnect) {\n                      Principal user = headerAccessor.getUser();\n                      if (user != null && user != session.getPrincipal()) {\n                               this.stompAuthentications.put(session.getId(), user);\n                      }\n             }\n\nThis commit (https://github.com/spring-projects/spring-framework/commit/f813712f5b413b354560cd7cc006352e9defa9a3#diff-7bc1370febf168db39f9b3a608f68fe8) caused this regression. FYI.\n\n---\n\n**Affects:** 5.0 RC2, 5.0 RC3\n\n**Issue Links:**\n- #20099 Introduce null-safety of Spring Framework API\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/25e6a2da646c9a465fabf1c73796a1ae01886857\n']",['closed'],[1],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch: We need to re-retrieve the user at that point, which got accidentally dropped during that nullability refactoring. Restored for 5.0 RC4 now.\n']"
2624b909060e0967e16771de7a35261decd5a4a9,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,Add_Condition,"- * Copyright 2002-2011 the original author or authors.
+ * Copyright 2002-2012 the original author or authors.
+			if (method == null) {
+				// annotations like @Inject, @Value and @Resource don't have a method
+				// (attribute) named ""required"" -> default to required status
+				return true;
+			}
-			// required by default
+			// an exception was thrown during reflective invocation of the required
+			// attribute -> default to required status",3,condition,Avoid NPE in AutowiredAnnotationBeanPostProcessor,"Prior to this change, AABPP#determineRequiredStatus never checked the
return value of ReflectionUtils#findMethod when searching for a
'#required' attribute. This call returns null for annotations such as
@Inject, @Value and @Resource, and subsequently causes a
NullPointerException to be thrown when ReflectionUtils#invokeMethod is
called. The NPE is caught immediately and #determineRequiredStatus
returns defaulting to true, but this this approach is inefficient. It
is also problematic for users who have set breakpoints on NPE -- they
end up debugging into Spring internals, which is a false positive.

This commit checks the return value of of ReflectionUtils#findMethod,
and in the case of null, eagerly returns true.  There is no change to
external behavior, simply a more efficient and debugging-friendly
implementation.

Existing test cases already cover this change, given that it is purely
a refactoring.

Issue: SPR-9316
",,13954,1,['caught NullPointerException in AutowiredAnnotationBeanPostProcessor.determineRequiredStatus [SPR-9316]'],"['**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-9316](https://jira.spring.io/browse/SPR-9316?redirect=false)** and commented\n\nAutowiredAnnotationBeanPostProcessor.determineRequiredStatus uses ReflectionUtils.findMethod to look up a method named ""required"". If there is no such method then ReflectionUtils.findMethod returns null. However AutowiredAnnotationBeanPostProcessor.determineRequiredStatus never checks for null instead it directly passes the method to ReflectionUtils.invokeMethod which throws a NullPointerException which is then caught in a catch (Exception ex) block in AutowiredAnnotationBeanPostProcessor.determineRequiredStatus.\n\nAnnoations that don\'t have a method named ""required"" include `@Inject` `@Value` `@Resource`.\n\nThis is not so nice for several reasons:\n* when you debug one of your own NullPointerExceptions and set an exception breakpoint on NullPointerException you end up in Spring code\n* it uses NullPointerExceptions and catching them as part of normal control flow\n* filling in the stack trace of an exception is slow\n\n---\n\n**Affects:** 3.1.1\n\n**Issue Links:**\n- #14001 AutowiredAnnotationBeanPostProcessor.determineRequiredStatus(Annotation) throws NullPointerException if method wasnt found. (_**""is duplicated by""**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26ee0c4842ca83dec213b5422d0af18ba2e3ce6c, https://github.com/spring-projects/spring-framework/commit/2624b909060e0967e16771de7a35261decd5a4a9, https://github.com/spring-projects/spring-framework/commit/46bdb2de077063663f0daae85431ebe5c430edc8\n']",['closed'],[2],"['**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** commented\n\nPull request is there https://github.com/SpringSource/spring-framework/pull/64\n', ""**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** commented\n\n> ```\n> commit 2624b909060e0967e16771de7a35261decd5a4a9 (SPR-9316)\n> Author: Philippe Marschall <philippe.marschall@gmail.com>\n> Date:   Mon Apr 9 13:00:32 2012 +0200\n> \n>     Avoid NPE in AutowiredAnnotationBeanPostProcessor\n>     \n>     Prior to this change, AABPP#determineRequiredStatus never checked the\n>     return value of ReflectionUtils#findMethod when searching for a\n>     '#required' attribute. This call returns null for annotations such as\n>     @Inject, @Value and @Resource, and subsequently causes a\n>     NullPointerException to be thrown when ReflectionUtils#invokeMethod is\n>     called. The NPE is caught immediately and #determineRequiredStatus\n>     returns defaulting to true, but this this approach is inefficient. It\n>     is also problematic for users who have set breakpoints on NPE -- they\n>     end up debugging into Spring internals, which is a false positive.\n>     \n>     This commit checks the return value of of ReflectionUtils#findMethod,\n>     and in the case of null, eagerly returns true.  There is no change to\n>     external behavior, simply a more efficient and debugging-friendly\n>     implementation.\n>     \n>     Existing test cases already cover this change, given that it is purely\n>     a refactoring.\n>     \n>     Issue: SPR-9316\n> ```\n\n""]"
262c702da4588e5f467fd24774357113379666b2,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/type/classreading/CachingMetadataReaderFactory.java,Add_Condition,"+		else if (this.metadataReaderCache != null) {
+			// Shared resource cache -> reset to local cache.
+			setCacheLimit(DEFAULT_CACHE_LIMIT);
+		}
+			this.cacheLimit = cacheLimit;",4,condition,CachingMetadataReaderFactory releases shared cache Map on clearCache(),"LocalResourceCache properly initializes cacheLimit on construction.

Issue: SPR-17527
",,22059,1,['CachingMetadataReaderFactory does not release shared resource cache after context refresh [SPR-17527]'],"['**[Philippe Julien](https://jira.spring.io/secure/ViewProfile.jspa?name=philjulien)** opened **[SPR-17527](https://jira.spring.io/browse/SPR-17527?redirect=false)** and commented\n\norg.springframework.core.type.classreading.CachingMetadataReaderFactory.clearCache() was modified in Spring 5 to only clear the metaDataReaderCache of the LocalResourceCache instance type. When created with the constructor that takes a ResourceLoader as an argument, CachingMetadataReaderFactory will keep a strong reference on the Map that it got from the DefaultResourceLoader. This would be fine if DefaultResourceLoader.clearResourceCaches(), that is called after a context refresh, cleared the resourceCaches and the inner map that it contains, but this is not the case. So CachingMetadataReaderFactory.metaDataReaderCache remain in memory after context refresh.\n\nIn our application this increased the memory footprint by about 100mb after we updated to Spring 5.\n\nA possible fix would be for CachingMetadataReaderFactory.clearCache() to set its metadataReaderCache to null if it\'s not an instance of LocalResourceCache.\n\n---\n\n**Affects:** 5.0.10, 5.1.2\n\n**Issue Links:**\n- #22058 CachingMetadataReaderFactory metadataReaderCache isn\'t cleaned up after context refresh when using the resource loader cache (_**""is duplicated by""**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/23d104936390da07eedc832b5b64ecee1cdf8634, https://github.com/spring-projects/spring-framework/commit/262c702da4588e5f467fd24774357113379666b2\n\n**Backported to:** [5.0.11](https://github.com/spring-projects/spring-framework/milestone/192?closed=1)\n']",['closed'],[3],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWell spotted! While `DefaultResourceLoader.clearResourceCaches()` could clear all the `Map` values individually, it seems sensible to let go of the shared cache reference in `CachingMetadataReaderFactory.clearCache()`. I'm considering to reset it to an empty local cache instead of `null` at that point, still being able to perform local caching in case of further use of the `CachingMetadataReaderFactory` instance.\r\n,\n"", ""**[Philippe Julien](https://jira.spring.io/secure/ViewProfile.jspa?name=philjulien)** commented\n\nWhile you are looking at CachingMetadataReaderFactory. It seems odd that the constructor of LocalResourceCache isn't setting the object's cacheLimit field. I can open a new issue about this if you prefer.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIndeed, that constructor needs to set the `cacheLimit` field as well. I've addressed both issues in one pass for 5.1.3 and will also backport the changes to 5.0.11 ASAP. Thanks for raising this stuff!\n""]"
26acb4887d5e8521e4f7d1bb23994e1992904996,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/config/YamlProcessor.java,Condition_Change,"- * Copyright 2002-2014 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
-import java.io.InputStream;
+import java.io.Reader;
+import org.yaml.snakeyaml.reader.UnicodeReader;
-			InputStream stream = resource.getInputStream();
+			Reader reader = new UnicodeReader(resource.getInputStream());
-				for (Object object : yaml.loadAll(stream)) {
+				for (Object object : yaml.loadAll(reader)) {
-				stream.close();
+				reader.close();",9,iteration,YamlProcessor explicitly closes UnicodeReader,"Issue: SPR-13173
",,17765,1,['YAML Processor leaves StreamDecoder open [SPR-13173]'],"['**[Erik Salter](https://jira.spring.io/secure/ViewProfile.jspa?name=an1310)** opened **[SPR-13173](https://jira.spring.io/browse/SPR-13173?redirect=false)** and commented\n\nWhen the YAMLProcessor is closed, it is still leaving a reference to a StreamDecoder instance open.  (See UnicodeReader::init())   While Spring’s YamlProcessor closes the underlying input stream, the StreamDecoder (and thus the reference to the YAML and all its loaded references) remain open until the YAML reference is eventually GC’d.\n\nThe issue comes in when these references are promoted from new to the old generation.  The references are then only collected on a FGC.  In the interim, the application can have many open handles (we counted 900+ on a production system that only had 2 FGC cycles)\n\nAttached is a snapshot after the YAMLProcessor closes the stream.\n\n---\n\n**Affects:** 4.1.3\n\n**Reference URL:** #17093\n\n**Attachments:**\n- [yaml.png](https://jira.spring.io/secure/attachment/22921/yaml.png) (_70.46 kB_)\n\n**Issue Links:**\n- #17093 Need a defensive close() in YamlProcessor\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26acb4887d5e8521e4f7d1bb23994e1992904996, https://github.com/spring-projects/spring-framework/commit/3d131c9f3ceed70700dfe79eb7431708e74f7b0c\n']",['closed'],[1],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIt looks like we'll have to avoid the `Yaml.load(InputStream)` method altogether, using a `loadFromReader` call with a custom `UnicodeReader` handle which we're able to close afterwards...\n\nThis is arguably a bug in that `Yaml` class itself. However, if we can work around so easily, let's try to do that.\n\nJuergen\n""]"
26d143868f912bcd8fe4b8cc66135928807526f8,spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java,Add_Condition,"-
-
+
-	private ConverterRegistry converterRegistry;
+	private ConverterRegistry converterRegistry = (ConverterRegistry) this.converterLookup;
+		if (converterLookup instanceof ConverterRegistry) {
+			this.converterRegistry = (ConverterRegistry) converterLookup;
+		}
+	@SuppressWarnings(""deprecation"")
+		// The referenced XStream constructor has been deprecated as of 1.4.5.
+		// We're preserving this call for broader XStream 1.4.x compatibility.",9,condition,Compatibility with XStream 1.4.5,"XStream 1.4.5 doesn't check a given ConverterLookup for a ConverterRegistry implementation anymore, so we have to manually perform that check and assignment.

Issue: SPR-11147
",,15774,1,"[""XStreamMarshaller doesn't set the converterRegistry field with XStream 1.4.5 [SPR-11147]""]","[""**[Tomas Repel](https://jira.spring.io/secure/ViewProfile.jspa?name=trepel)** opened **[SPR-11147](https://jira.spring.io/browse/SPR-11147?redirect=false)** and commented\n\nWhen using XStreamMarshaller, I get following error\n\n```\nXStream marshalling ended with exception org.springframework.oxm.MarshallingFailureException: XStream marshalling exception;\nnested exception is com.thoughtworks.xstream.converters.ConversionException: No converter specified for class springtest.xmlmarshalling.Data\n```\n\nAfter some debugging, I think the problem is that XStreamMarshaller's converterRegistry field is not initialized (it remains NULL, unlike the converterLookup field just a line above) and when the XStream object is being created in constructXStream() method, the NULL value causes that no converter is registered.\n\nLet me know if you need more details or example war to reproduce this.\n\n\n---\n\n**Affects:** 4.0 RC2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/26d143868f912bcd8fe4b8cc66135928807526f8\n""]",['closed'],[3],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nIs this a problem that you are also seeing in 3.2.x or is it a 4.0 regression?\n\nIf you could submit a [repro project](https://github.com/spring-projects/spring-framework-issues) for this, that would be very useful.\n', '**[Tomas Repel](https://jira.spring.io/secure/ViewProfile.jspa?name=trepel)** commented\n\nI believe this is regression for Spring 4.0. PR for reproducer: https://github.com/spring-projects/spring-framework-issues/pull/63\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis seems to be an XStream 1.4.5 specific problem. Before, XStream checked the given ConverterLookup object whether it also implements ConverterRegistry...\n\nthis.converterRegistry = converterRegistry != null\n? converterRegistry\n: (converterLookup instanceof ConverterRegistry\n? (ConverterRegistry)converterLookup\n: null);\n\nBut as of 1.4.5, it just assigns the converterRegistry reference as provided. We'll fix this for Spring 4.0 GA, hopefully compatible with XStream 1.4.x and also 1.4.5 then.\n""]"
27942644804732378806a6a560be6b321f74c0ce,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/socket/server/upgrade/JettyRequestUpgradeStrategy.java,Condition_Change,"-				this.running = true;
+					this.running = true;
-				this.running = false;
+						this.running = false;
-		if (this.servletContext != null) {
+		if (isRunning()) {
-			if (this.servletContext == null) {
+			if (!isRunning()) {",8,condition,Fix JettyRequestUpgradeStrategy initialization bug,"Closes gh-23313
",,23313,1,"[""Reactive JettyRequestUpgradeStrategy returns 'No WebSocketServerFactory available' on startup with simultaneous handshakes""]","[""After the server application has started the initial burst of WebSocket handshake requests some will fail with a 500 with the error 'No WebSocketServerFactory available', afterwards it's fine. \r\n\r\nThe problem is caused by the following code in class `org.springframework.web.reactive.socket.server.upgrade.JettyRequestUpgradeStrategy` in the `startLazily` method.\r\n \r\n```java\r\nif (this.servletContext != null) {\r\n\treturn;\r\n}\r\n\r\nsynchronized (this.lifecycleMonitor) {\r\n\tif (this.servletContext == null) {\r\n\t\tthis.servletContext = request.getServletContext();\r\n\t\tstart();\r\n\t}\r\n}\r\n```\r\n\r\nIf the above code is executed concurrently the code will early out when the servlet context is no longer null. But the `start()` method has not been (entirely) invoked causing exceptions for the requests already being executed untill the `start()` method has also been completed.""]",['closed'],[0],[]
279777b2f3a43ed96eb8151f07b76f38672cc78f,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java,Condition_Change,"-	 * @return the mirrorSets the attribute mirror sets.
+	 * @return the attribute mirror sets
-					if (lastValue != null &&
-							!ObjectUtils.nullSafeEquals(lastValue, value)) {
+					if (lastValue != null && !ObjectUtils.nullSafeEquals(lastValue, value)) {",3,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
27e9db8c8c30a941bbbc4ceae6a18bd2124ea527,spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java,Condition_Change,"+				boolean isJdk7 = (org.springframework.core.JdkVersion.getMajorJavaVersion() >= org.springframework.core.JdkVersion.JAVA_17);
-					if (isJdk6 && classArgument.isArray()) {
-						return (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) ||
-								supportsInternal(classArgument, false));
+					if (isJdk7 && classArgument.isArray()) {
+						return (classArgument.getComponentType() == Byte.TYPE);
-						return (classArgument.getComponentType() == Byte.TYPE);
+						return (isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) ||
+								supportsInternal(classArgument, false));",9,condition,Fix regression in Jaxb2Marshaller regarding JdkVersion,"Issue: SPR-13312
",,17897,1,['Deprecate JdkVersion (for optimistic compatibility with newer JDK generations) [SPR-13312]'],"['**[Michał Sobkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=perceptron8)** opened **[SPR-13312](https://jira.spring.io/browse/SPR-13312?redirect=false)** and commented\n\nAfter hitting something similar to #16518 (with legacy code using Spring 2.5), I\'d like to suggest some refactoring. There **will be** similar bugs in the future because of how org.springframework.core.JdkVersion is designed. It breaks when you use JVM which was not included in constants.\n\nIf full version information is needed at runtime (which I doubt), see\norg.apache.maven.artifact.versioning.ComparableVersion as an example of how to handle versioning properly. However, if checking runtime compatibility is the only thing needed (which is the case, I think), it can be done in a much simpler way.\n\nI attached my own helper, JvmVersion. It provides everything that is necessary ""to allow for automatically adapting to the present platform\'s capabilities"". I know that there were no enums before Java 5, but, well, Java 5 is over 10 years old, Spring 4 requires Java 6. As you can see, JvmVersion delegates to Package#isCompatibleWith(String) - so you don\'t have to handle system properties or dot notation manually - it just works. You could refactor existing code and deprecate JdkVersion to avoid new bugs. It would make me very proud of myself ;-)\n\nSorry for not creating pull request - it\'s just one file... Hope you will find it useful anyway.\n\nPS. See standardReflectionAvailable property in org.springframework.core.DefaultParameterNameDiscoverer (Spring 4.2) as an example of what can go wrong.\n\n---\n\n**Affects:** 4.2 GA\n\n**Attachments:**\n- [JvmVersion.java](https://jira.spring.io/secure/attachment/22966/JvmVersion.java) (_406 bytes_)\n\n**Issue Links:**\n- #18412 Upgrade to AspectJ 1.9 beta 3 (for build compatibility with JDK 9 build 95+)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/acb44f9d46fa80bfc69c69f107780f900c31a606, https://github.com/spring-projects/spring-framework/commit/e0f012f32d923b2e2c858c92075bf10d208ef89a, https://github.com/spring-projects/spring-framework/commit/27e9db8c8c30a941bbbc4ceae6a18bd2124ea527, https://github.com/spring-projects/spring-framework/commit/5e9a96817bf6f55f982746774c4c76671785f5cd, https://github.com/spring-projects/spring-framework/commit/bec3b0fa1a69e251340b9abe0a34ef3fafb67335\n']",['closed'],[6],"['**[Michał Sobkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=perceptron8)** commented\n\nI forgot about example usage. Here it is:\n\n```java\nif (JvmVersion.JAVA_1_8.isCompatibleWithRuntime()) {\n  // ...\n}\n```\n\n', '**[Michał Sobkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=perceptron8)** commented\n\nLinks to mentioned classes / methods:\n\n* https://maven.apache.org/ref/3.1.0/maven-artifact/apidocs/org/apache/maven/artifact/versioning/ComparableVersion.html\n* https://docs.oracle.com/javase/8/docs/api/java/lang/Package.html#isCompatibleWith-java.lang.String-\n* https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java\n* https://github.com/spring-projects/spring-framework/blob/master/spring-core/src/main/java/org/springframework/core/JdkVersion.java\n\n', ""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nI am not sure I understand the link between your issue and #16518. You're not expecting us to recognize a JDK version that a) did not exist when we released that version of the framework and b) does not work at all with said version.\n\nWhat's a point of being able to recognize Java 8 using Spring 2.5 if you can't effectively run a Spring 2.5-based app with Java 8?\n"", '**[Michał Sobkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=perceptron8)** commented\n\nMy point is that nothing should prevent you from running Spring 2.5 with Java 8 or using Spring 4.2 optional features designed for Java 8 with Java 10.\nThe link between my issue and #16518 is as follows: JdkVersion was buggy, #16518 appeared because of that, nothing changed, there was no conclusions, JdkVersion is still buggy.\n\na) I\'m not expecting you to recognize JDK versions that didn\'t exist when framework was released. It\'s rather what you are trying to do. Obviously, you can\'t create constant for versions that are not yet known (let them be static, enums, whatever). I\'m trying to show you that code based on JdkVersion won\'t work properly on future JVMs, just because it has no constant for future JVMs - it can\'t - and that\'s the point! Instead of comparing constants, you should test if one of _known_ versions is compatible with the _current_ runtime - but without creating constant for _current_. That\'s all you need - I suppose - and JvmVersion does exactly and only that (it has just one method, it can\'t be simpler). If you really need more, please try to develop something similar to ComparableVersion from maven.\n\nb) If it doesn\'t work because you use language features that was not present at the time of releasing framework in that framework (enums, try-withresources, lambdas, modules, value-based classes, ...), it\'s ok. I don\'t mind. You can\'t do anything with that. But if it breaks because something like bug or bad design, that\'s another story.\n\nSuppose Spring 4.2 is binary compatible with Java 10. It\'s likely to be true as Java versions are expected to be binary backwards-compatible. Now look at:\n1) https://github.com/spring-projects/spring-framework/blob/v4.2.0.RELEASE/spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java#L35 and\n2) https://github.com/spring-projects/spring-framework/blob/v4.2.0.RELEASE/spring-core/src/main/java/org/springframework/core/JdkVersion.java#L87\n   It **will** break, without a doubt. At least one Spring 4.2 feature will not work with Java 10, even if it could, because of a simple bug. Maybe other. This is the only one I\'m aware of. You can prevent similar bugs in the future easily.\n\nBy the way, another source of potential bugs is following assumption:\n3) https://github.com/spring-projects/spring-framework/blob/v4.2.0.RELEASE/spring-core/src/main/java/org/springframework/core/JdkVersion.java#L75\nHow about ""1.10.1.7-r25""? Is it 1.6? 1.7? 1.10? Or maybe it depends?\n\nIt\'s not about Spring 2.5 really. We are switching to String 3.2.9 or Spring 4.2 anyway. It\'s about reliable, error-free code.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIn the end, `JdkVersion` is an outdated class which we should get rid of. In addition to your points (which I generally agree with), JDK 9 is likely to have a different version scheme (""9.x.x"" instead of ""1.9.x), so this whole version string parsing is even more fragile. We need to avoid this completely.\n\nAs a consequence, let me repurpose this issue towards deprecating `JdkVersion`, getting rid of remaining use of `JdkVersion` in our codebase. We generally try to detect the specific API that we\'re trying to use, so `DefaultParameterNameDiscoverer` can simply check for the presence of `java.lang.reflect.Executable` (which is only there on JDK 8+). We\'re doing that in most places already; `DefaultParameterNameDiscoverer` is just one of three remaining `JdkVersion` checks in the entire framework codebase. The goal is for there to be no such checks anymore as of 4.2.1.\n\nJuergen\n', ""**[Michał Sobkiewicz](https://jira.spring.io/secure/ViewProfile.jspa?name=perceptron8)** commented\n\nMakes sense. I'll check 4.2.1 then, just to sleep well, as soon as it's released.\nThank you!\n""]"
289d378aebd4782f422b880702fbd098122a389c,spring-projects/spring-framework,spring-core-test/src/main/java/org/springframework/aot/agent/InstrumentedBridgeMethods.java,Condition_Change,"-					!Modifier.isPublic(constructor.getDeclaringClass().getModifiers()) || !constructor.canAccess(null)) {
+					!Modifier.isPublic(constructor.getDeclaringClass().getModifiers())) {
-			if (!Modifier.isPublic(method.getModifiers())) {
+			if (!Modifier.isPublic(method.getModifiers())
+				|| !Modifier.isPublic(method.getDeclaringClass().getModifiers())) {",5,condition,Polish,"This fixes an additional case where invoked methods are public but the
declaring class is package private.

Fixes gh-29046
",,29046,1,['IllegalAccessException while instrumenting invocation of non-public method with RuntimeHintsAgent'],"['The `RuntimeHintsAgent` agent fails at instrumenting the following case:\r\n\r\n```java\r\n@EnabledIfRuntimeHintsAgent\r\nclass RuntimeHintsAgentTests {\r\n\r\n\t@Test\r\n\tvoid invokePrivateMethod() {\r\n\t\tMethod greet = ReflectionUtils.findMethod(PrivateClass.class, ""greet"");\r\n\t\tRuntimeHintsInvocations invocations = RuntimeHintsRecorder.record(() -> {\r\n\t\t\tgreet.invoke(new PrivateClass());\r\n\t\t});\r\n\t}\r\n\r\n\tclass MyClass {\r\n\r\n\t\tprivate String greet() {\r\n\t\t\treturn ""hello"";\r\n\t\t}\r\n\t\t\r\n\t}\r\n}\r\n``` \r\n\r\nWith this code snippet, the agent fails during the method invocation with an exception like:\r\n\r\n```\r\njava.lang.IllegalAccessException: class org.springframework.aot.agent.InstrumentedBridgeMethods cannot access a member of class org.springframework.sample.RuntimeHintsAgentTests$MyClass with modifiers ""private""\r\n```']",['closed'],[1],['Reopening for cases where methods are public but declaring class is not.']
28e206a9469b603c40bb023c69592570374bc8bb,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/codec/EncoderHttpMessageWriter.java,Add_Condition,"-		return (isStreamingMediaType(contentType) ?
-				message.writeAndFlushWith(body.map(Flux::just)) : message.writeWith(body));
+		if (isStreamingMediaType(contentType)) {
+			return message.writeAndFlushWith(body.map(buffer ->
+					Mono.fromCallable(() -> buffer)
+							.doOnDiscard(PooledDataBuffer.class, PooledDataBuffer::release)));
+		}
+
+		return message.writeWith(body);",9,condition,Apply doOnDiscard for streaming mode,"Use of Flux.just is problematic in that if the Flux is cancelled before
demand, the item may never be read, nor freed. Flux#just does not
even delegate cancellation signals.

Closes gh-22731
",,22731,1,['ProtobufEncoder and ProtobufDecoder buffer leaks'],"['**Affects:** Spring Framework 5.1.5\r\n---\r\n## Issue\r\nAfter upgrading from **2.0.6.RELEASE** version to **2.1.3.RELEASE** I started seeing a lot of memory leaks related to `org.springframework.http.codec.protobuf.ProtobufEncoder#encodeMessage` in logs (see below).\r\n\r\n### Technical details:\r\n* OS: \r\n```\r\nLinux version 2.6.32-573.7.1.el6.x86_64 (mockbuild@c6b8.bsys.dev.centos.org) (gcc version 4.4.7 20120313 (Red Hat 4.4.7-16) (GCC) ) #1 SMP Tue Sep 22 22:00:00 UTC 2015\r\n```\r\n* Java:\r\n```\r\njava version ""1.8.0_181""\r\nJava(TM) SE Runtime Environment (build 1.8.0_181-b13)\r\nJava HotSpot(TM) 64-Bit Server VM (build 25.181-b13, mixed mode)\r\n```\r\n* Protobuf: 3.4.0\r\n* Java system properties:\r\n```\r\n-Dspring.profiles.active=default\r\n-XX:+UseG1GC\r\n-Xmx6G\r\n-Xms6G\r\n-XX:MaxGCPauseMillis=15\r\n-XX:MaxTenuringThreshold=1\r\n-XX:+UnlockExperimentalVMOptions\r\n-XX:G1NewSizePercent=60\r\n-XX:G1MaxNewSizePercent=70\r\n-XX:+UseGCLogFileRotation\r\n-XX:NumberOfGCLogFiles=5\r\n-XX:GCLogFileSize=100M\r\n-XX:+PrintGCApplicationStoppedTime\r\n-XX:+PrintTenuringDistribution\r\n-XX:+PrintGCCause\r\n-XX:+PrintGCDetails\r\n-XX:+PrintGCTimeStamps\r\n-XX:+PrintGC\r\n-XX:+PrintGCDateStamps\r\n-XX:+PrintAdaptiveSizePolicy\r\n```\r\n\r\n### Log example [own classes are hidden with ...]\r\n```\r\n2019-04-03 07:23:43.445 ERROR [reactor-http-epoll-1] ResourceLeakDetector - LEAK: ByteBuf.release() was not called before it\'s garbage-collected. See http://netty.io/wiki/reference-counted-objects.html for mo\r\nre information.\r\nRecent access records: \r\n#1:\r\n        io.netty.buffer.AdvancedLeakAwareByteBuf.writeBytes(AdvancedLeakAwareByteBuf.java:616)\r\n        io.netty.buffer.ByteBufOutputStream.write(ByteBufOutputStream.java:68)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.doFlush(CodedOutputStream.java:2985)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.flush(CodedOutputStream.java:2896)\r\n        com.google.protobuf.AbstractMessageLite.writeTo(AbstractMessageLite.java:87)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.encodeMessage(ProtobufEncoder.java:89)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.lambda$encode$1(ProtobufEncoder.java:78)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:107)\r\n        reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:99)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:102)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1878)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1752)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:64)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)\r\n        reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)\r\n        reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)\r\n        reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)\r\n        reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:185)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:123)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2070)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\r\n        reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoReduceSeed$ReduceSeedSubscriber.onComplete(MonoReduceSeed.java:156)\r\n        reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:794)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:560)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:863)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:957)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onComplete(FluxPeekFuseable.java:578)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription.run(FluxSubscribeOnCallable.java:251)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)\r\n        java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\n        java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n        java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n        java.lang.Thread.run(Thread.java:748)\r\n#2:\r\n        io.netty.buffer.AdvancedLeakAwareByteBuf.writeBytes(AdvancedLeakAwareByteBuf.java:616)\r\n        io.netty.buffer.ByteBufOutputStream.write(ByteBufOutputStream.java:68)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.doFlush(CodedOutputStream.java:2985)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.flushIfNotAvailable(CodedOutputStream.java:2980)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.writeInt32(CodedOutputStream.java:2659)\r\n        com.google.protobuf.CodedOutputStream.writeEnum(CodedOutputStream.java:301)\r\n        com....Result.writeTo(...Result.java:312)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.writeMessageNoTag(CodedOutputStream.java:2783)\r\n        com.google.protobuf.CodedOutputStream$OutputStreamEncoder.writeMessage(CodedOutputStream.java:2759)\r\n        com....Response.writeTo(...Response.java:134)\r\n        com.google.protobuf.AbstractMessageLite.writeTo(AbstractMessageLite.java:86)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.encodeMessage(ProtobufEncoder.java:89)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.lambda$encode$1(ProtobufEncoder.java:78)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:107)\r\n        reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:99)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:102)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1878)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1752)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:64)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)\r\n        reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)\r\n        reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)\r\n        reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)\r\n        reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:185)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:123)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2070)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\r\n        reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoReduceSeed$ReduceSeedSubscriber.onComplete(MonoReduceSeed.java:156)\r\n        reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:794)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:560)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:863)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:957)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onComplete(FluxPeekFuseable.java:578)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription.run(FluxSubscribeOnCallable.java:251)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)\r\n        java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\n        java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n        java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n        java.lang.Thread.run(Thread.java:748)\r\nCreated at:\r\n        io.netty.buffer.PooledByteBufAllocator.newDirectBuffer(PooledByteBufAllocator.java:339)\r\n        io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:185)\r\n        io.netty.buffer.AbstractByteBufAllocator.directBuffer(AbstractByteBufAllocator.java:171)\r\n        io.netty.buffer.AbstractByteBufAllocator.buffer(AbstractByteBufAllocator.java:105)\r\n        org.springframework.core.io.buffer.NettyDataBufferFactory.allocateBuffer(NettyDataBufferFactory.java:65)\r\n        org.springframework.core.io.buffer.NettyDataBufferFactory.allocateBuffer(NettyDataBufferFactory.java:39)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.encodeMessage(ProtobufEncoder.java:82)\r\n        org.springframework.http.codec.protobuf.ProtobufEncoder.lambda$encode$1(ProtobufEncoder.java:78)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:107)\r\n        reactor.core.publisher.FluxJust$WeakScalarSubscription.request(FluxJust.java:99)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.request(FluxPeekFuseable.java:138)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.request(MonoNext.java:102)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1878)\r\n        reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1752)\r\n        reactor.core.publisher.MonoNext$NextSubscriber.onSubscribe(MonoNext.java:64)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onSubscribe(FluxPeekFuseable.java:172)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.FluxJust.subscribe(FluxJust.java:70)\r\n        reactor.core.publisher.FluxMapFuseable.subscribe(FluxMapFuseable.java:63)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.FluxPeekFuseable.subscribe(FluxPeekFuseable.java:86)\r\n        reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40)\r\n        reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44)\r\n        reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60)\r\n        reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onNext(MonoPeekTerminal.java:185)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:73)\r\n        reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onNext(FluxDoFinally.java:123)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2070)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.request(FluxMapFuseable.java:162)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onSubscribe(MonoFlatMap.java:230)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onSubscribe(FluxMapFuseable.java:90)\r\n        reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\r\n        reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoFlatMap$FlatMapInner.onNext(MonoFlatMap.java:241)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onNext(FluxPeekFuseable.java:204)\r\n        reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121)\r\n        reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505)\r\n        reactor.core.publisher.MonoReduceSeed$ReduceSeedSubscriber.onComplete(MonoReduceSeed.java:156)\r\n        reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:794)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:560)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapMain.innerComplete(FluxFlatMap.java:863)\r\n        reactor.core.publisher.FluxFlatMap$FlatMapInner.onComplete(FluxFlatMap.java:957)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableSubscriber.onComplete(FluxPeekFuseable.java:271)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxPeekFuseable$PeekFuseableConditionalSubscriber.onComplete(FluxPeekFuseable.java:578)\r\n        reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onComplete(MonoPeekTerminal.java:321)\r\n        reactor.core.publisher.FluxSubscribeOnCallable$CallableSubscribeOnSubscription.run(FluxSubscribeOnCallable.java:251)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:50)\r\n        reactor.core.scheduler.SchedulerTask.call(SchedulerTask.java:27)\r\n        java.util.concurrent.FutureTask.run(FutureTask.java:266)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180)\r\n        java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293)\r\n        java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)\r\n        java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)\r\n        java.lang.Thread.run(Thread.java:748)\r\n```\r\n']",['closed'],[3],"['@rstoyanchev Hi. Why you added this fix only to 5.1.7? Would be great to get it asap', 'Not sure I understand. 5.1.7 is available. What else could we have done?', '@rstoyanchev yeap, thank you. I was confused about the spring boot version(2.1.7).']"
2950958f35de1a6d5a265017c5111f640b9887aa,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultServerRequest.java,Remove_Condition,"-import java.util.Enumeration;
-			Enumeration<String> attributeNames = this.servletRequest.getAttributeNames();
-			while (attributeNames.hasMoreElements()) {
-				String name = attributeNames.nextElement();
-				this.servletRequest.removeAttribute(name);
-			}
+			List<String> attributeNames = Collections.list(this.servletRequest.getAttributeNames());
+			attributeNames.forEach(this.servletRequest::removeAttribute);",8,iteration,Fix ConcurrentModificationException on Undertow,"This commit fixes a ConcurrentModificationException that occurs when
requesting a nonexistant route.

Closes gh-22698
",,22698,1,['ConcurrentModificationException when serving Servlet.fn request and Undertow'],"['I get this with Undertow (but not Tomcat):\r\n\r\n```\r\nCaused by: java.util.ConcurrentModificationException\r\n\tat java.util.HashMap$HashIterator.nextNode(HashMap.java:1437)\r\n\tat java.util.HashMap$KeyIterator.next(HashMap.java:1461)\r\n\tat io.undertow.servlet.util.IteratorEnumeration.nextElement(IteratorEnumeration.java:44)\r\n\tat org.springframework.web.servlet.function.DefaultServerRequest$ServletAttributesMap.clear(DefaultServerRequest.java:377)\r\n\tat org.springframework.web.servlet.function.RequestPredicates.restoreAttributes(RequestPredicates.java:292)\r\n\tat org.springframework.web.servlet.function.RequestPredicates.access$300(RequestPredicates.java:67)\r\n```\r\n\r\nBasic app:\r\n\r\n```\r\n@SpringBootApplication\r\npublic class ServletApplication {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(ServletApplication.class, args);\r\n\t}\r\n\r\n\t@Bean\r\n\tpublic RouterFunction<?> userEndpoints() {\r\n\t\treturn route().GET(""/hello"", request -> ok().body(""Hello"")).build();\r\n\t}\r\n\r\n}\r\n```\r\n\r\nThe error shows up when you try to visit a non-existent endpoint (e.g. http://localhost:8080/).']",['closed'],[0],[]
2a19b8f7a5f9dcc43831b2f674b76c9bd1fa6d31,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java,Condition_Change,"-		if (ClassUtils.isPresent(""kotlinx.coroutines.Deferred"", classLoader)) {
+		if (reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.Deferred"", classLoader)) {
-		if (ClassUtils.isPresent(""kotlinx.coroutines.flow.Flow"", classLoader)) {
+		if (reactorPresent && ClassUtils.isPresent(""kotlinx.coroutines.flow.Flow"", classLoader)) {",4,condition,Refine Coroutines adapter registration activation,"Closes gh-23087
",,23087,1,['Refine Coroutines adapter registration activation'],"['Coroutines adapter should be registered only when Reactor is available, otherwise it can trigger error when using Spring MVC with Coroutines in the classpath. This issue is a refinement of #19975.']",['closed'],[0],[]
2ac4355ec075fec77a8fbafd635fb4fefba81d4e,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/ClassReader.java,Add_Condition,"+    // SPRING PATCH: leniently handle offset mismatch
+    if (bytecodeOffset >= labels.length) {
+      return new Label();
+    }
+    // END OF PATCH",3,condition,ASM ClassReader leniently handles label offset mismatch (again),"Issue: SPR-17467
",,21999,1,['Type annotations and generic types causing ArrayIndexOutOfBoundsException [SPR-17467]'],"['**[aprantl](https://jira.spring.io/secure/ViewProfile.jspa?name=aprantl1)** opened **[SPR-17467](https://jira.spring.io/browse/SPR-17467?redirect=false)** and commented\n\nWe just tried upgrading our project to from Spring Framework 5.0.8 to 5.1.2 but unfortunately we hit a blocker which seems to be some kind of regression. At least my Google search yielded [a two year old ASM bug report](https://gitlab.ow2.org/asm/asm/issues/317615) which also have been fixed shortly after .\n\nWe are getting an `ArrayIndexOutOfBoundException` when initialising the ApplicationContext or when calling certain methods that make use of type annotations in the method body. Additionally, it seem to be necessary that the affected class inherits from a generic type.\n\nI\'ve attached a small test project that should help reproducing the bug. If you execute the test you should see the error. Downgrading the dependency to Spring Framework 5.0.8 solves the issue.\n\nOur test systems use MacOs und CentOs with JDK 1.8.0_181.\n\n---\n\n**Affects:** 5.1.2\n\n**Attachments:**\n- [project.zip](https://jira.spring.io/secure/attachment/26084/project.zip) (_18.27 kB_)\n\n**Issue Links:**\n- #22029 ArrayIndexOutOfBoundsException when reading metadata for a class that uses javax.validation.NotNull on a local variable (_**""is duplicated by""**_)\n- #18661 Type annotations cause ArrayIndexOutOfBoundsException in ASM ClassReader\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2ac4355ec075fec77a8fbafd635fb4fefba81d4e\n\n1 votes, 3 watchers\n']",['closed'],[3],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis seems to be #18661 coming back indeed since we upgraded to ASM 7.0 for Spring Framework 5.1, with a heavily refactored `ClassReader` where we did not re-apply that old patch of ours. Since ASM refused to fix this itself (which I unfortunately haven't noticed), I've reintroduced a defensive patch to our ASM 7.0 fork for the Spring Framework 5.1.3 release.\n\nThis will be available in the upcoming `5.1.3.BUILD-SNAPSHOT`. Feel free to give it an early try...\n"", '**[aprantl](https://jira.spring.io/secure/ViewProfile.jspa?name=aprantl1)** commented\n\nThanks, that was quick. I successfully tested the fix with the `5.1.3.BUILD-SNAPSHOT`. Looking forward to using the `5.1.3.RELEASE` with Java 11.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood to hear! FYI, Spring Framework 5.1.3 is scheduled for release on Nov 26, with the Spring Boot 2.1.1 release following a day later.\n']"
2bfff7fc376c4c747cc9811c54c0ba320787db11,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"-					return new UrlResource(ResourceUtils.toURI(cleanedPath));
+					// Cannot test for URLStreamHandler directly: URL equality for same String
+					// in order to find out whether original URL uses default URLStreamHandler.
+					if (ResourceUtils.toURL(urlString).equals(url)) {
+						// Plain URL with default URLStreamHandler -> replace with cleaned path.
+						return new UrlResource(ResourceUtils.toURI(cleanedPath));
+					}
+			// Retain original URL instance, potentially including custom URLStreamHandler.",4,condition,Retain original URL instance in case of custom URLStreamHandler,"Closes gh-33199
",,33199,1,['PathMatchingResourcePatternResolver#convertClassLoaderURL drops URLStreamHandler in version 6.1.x'],"[""I'm trying to upgrade to spring version **6.1.x**. Due to the specific nature of a project, we use a custom class loader and custom java.net.URLStreamHandler which handles the opening of the JAR files.\r\n\r\nUp to version `6.0.x` the URL object remains as is in `PathMatchingResourcePatternResolver#convertClassLoaderURL` but since version `6.1.x` the whole URL object is replaced by a new one keeping only the URL string. \r\n\r\nCurrently, there is no method how to keep the `URLStreamHandler` as the framework constructs a new URL. It would be beneficial to have the possibility to turn off this behaviour or somehow pass the handler of the original URL to the new one constructed.  ""]",['closed'],[4],"[""This is actually a regression as of 6.1.7 where we enforce the use of cleaned URLs: #32828\r\n\r\nWe'll see what we can do to retain the original URL in case of a custom `URLStreamHandler`. Do those URLs look like regular jar URLs in every other respect, or is there some indication of being a custom URL (other than internally storing a custom handler)?"", 'The URLs look like regular jar URLs.\r\nWe are required to utilize a custom URLStreamHandler because the JAR file is encrypted and cannot be accessed using the standard method.', ""For the time being, the only way to prevent this URL replacement is for the original URL to expose a pre-cleaned path so that the `StringUtils.cleanPath(urlString).equals(urlString)` condition is met, in which case the original URL is being retained already. Maybe that's something you could revise your custom ClassLoader towards.\r\n\r\nFor 6.1.12, we can try to retain the original URL based on some extra indication that it has a custom handler. However, `URLStreamHandler` usage is pretty opaque, so it is not obvious how we can check for the original URL having such a custom handler. We might be able to do `new URL(originalUrl.toString()).equals(originalUrl)` and see whether this returns `false`, assuming that the associated handler differs then. Would that work in your scenario?\r\n\r\nFWIW our revision in 6.1 is driven by the deprecation of all `URL` constructors in JDK 20: https://docs.oracle.com/en%2Fjava%2Fjavase%2F22%2Fdocs%2Fapi%2F%2F/java.base/java/net/URL.html#constructor-deprecation"", 'The condition `StringUtils.cleanPath(urlString).equals(urlString)` is not met only due to path separators in our case. We will revise the ClassLoader if it is feasible to return the cleaned path.\r\n\r\nHowever, the approach of checking equals seems ok (as it is probably the only option, how to check if the `URL` has a custom `URLStreamHandler`). ']"
2c1afca9c556b63c1645630b1db8d2934d1f2033,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/FormHttpMessageConverter.java,Add_Condition,"+import org.springframework.util.CollectionUtils;
-		formData.forEach((name, values) ->
+		formData.forEach((name, values) -> {
+				if (name == null) {
+					Assert.isTrue(CollectionUtils.isEmpty(values), ""Null name in form data: "" + formData);
+					return;
+				}
-				}));
+				});
+		});",10,condition,Reject null form data names,"...or skip if there are no values either.

Closes gh-22372
",,22372,1,['Keys for form data in FormHttpMessageConverter must not be null'],['Fix for java.lang.IllegalArgumentException'],['closed'],[3],"['@GWhiskas Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22372)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22372) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@GWhiskas Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22372)!', ""I've addressed this slightly differently, thanks.""]"
2c5a1af236e6c90460b2279fd0a871d0fc6c9d6e,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/KotlinReflectionParameterNameDiscoverer.java,Condition_Change,"-		if (!KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {
+		if (ctor.getDeclaringClass().isEnum() || !KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {",2,condition,Leverage Java reflection for Kotlin enums,"As discussed in KT-25165, from a Kotlin POV enum constructors
have no parameter, this is an ""implementation detail""
required for running on the JVM, so it seems relevant to skip
Kotlin reflection in that case and just delegate to Java
reflection.

Issue: SPR-16931
",,21470,1,['Unable to use Kotlin enums with @Validated beans [SPR-16931]'],"['**[Daniel Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=jonesd9)** opened **[SPR-16931](https://jira.spring.io/browse/SPR-16931?redirect=false)** and commented\n\nI have a configuration properties kotlin class with a kotlin enum property. If the class is annotated with `@Validated`\xa0an exception occurs in hibernate-validator\'s `ParameterMetadata`\xa0class due to an `IndexOutOfBoundsException`.\n\nThis seems to happen due to the underlying `ParameterNameDiscoverer`, `KotlinReflectionParameterNameDiscoverer`.\n\nI think this is due to the validator class expecting a 2-parameter constructor (name, ordinal) but `KotlinReflectionParameterNameDiscoverer` returns an empty array.\n\nExample configuration properties class:\n\n```java\n@ConfigurationProperties(""my.prefix"")\n@Validated\ndata class MyProperties(        \n        var enumProp: MyEnum = MyEnum.ONE\n\n) {\n    enum class MyEnum {\n        ONE, TWO\n    }\n} \n```\n\n\n\n---\n\n**Affects:** 5.0.6\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/2c5a1af236e6c90460b2279fd0a871d0fc6c9d6e, https://github.com/spring-projects/spring-framework/commit/73db2081cd734ae6f26b84b10e8a5049631f7b53\n\n**Backported to:** [5.0.11](https://github.com/spring-projects/spring-framework/milestone/192?closed=1)\n']",['closed'],[7],"['**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** commented\n\nIndeed, I have been able to reproduce this issue. Not sure what we do wrong here, it could be a Kotlin reflection bug or a conceptual difference between Java and Kotlin. Any thoughts [Daniel Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=jonesd9)?\n', '**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** commented\n\nI have created\xa0[KT-25165.](https://youtrack.jetbrains.net/issue/KT-25165)\n', ""**[Daniel Jones](https://jira.spring.io/secure/ViewProfile.jspa?name=jonesd9)** commented\n\nSorry, missed the notification from 6 days ago. I'm not really sure other than I remembering getting different results in the debugger if I used Kotlin's reflection API over Java's.\n\nA quick go on the Kotlin REPL in IntelliJ gives me the following differences:\n\nUsing the Kotlin API, this returns an empty array\n\n```java\n// toTypeArray().size == 1\nMyEnum::class.constructors.toTypedArray()[0].parameters\n>> []\n```\n\nUsing the Java API, I get the expected 2-arg constructor\n\n```java\n// declaredConstructors.size == 1\nMyEnum::class.java.declaredConstructors[0]\n>> protected my.package.MyEnum(java.lang.String,int)\n```\n\nSo I think you're on the right track that the issue is with Kotlin.\n"", '**[ruslanys](https://jira.spring.io/secure/ViewProfile.jspa?name=ruslanys)** commented\n\n[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze),\xa0\n\nI\'m sorry for disturbing you, but I have the same issue and tried to solve it.\n\nSo, can we tweak `KotlinReflectionParameterNameDiscoverer` to solve this issue?\n\nIn my perspective, looks that all in our hands and we don\'t need to wait for something from Kotlin.\n\nLooks, like if we add checking for enums, it will solve the issue.\r\nI changed the method with the following and it works for me.\n\n```java\n@Override\r\n@Nullable\r\npublic String[] getParameterNames(Constructor<?> ctor) {\r\n\tif (ctor.getDeclaringClass().isEnum() || !KotlinDetector.isKotlinType(ctor.getDeclaringClass())) {\r\n\t\treturn null;\r\n\t}\r\n\r\n\ttry {\r\n\t\tKFunction<?> function = ReflectJvmMapping.getKotlinFunction(ctor);\r\n\t\treturn (function != null ? getParameterNames(function.getParameters()) : null);\r\n\t}\r\n\tcatch (UnsupportedOperationException ex) {\r\n\t\treturn null;\r\n\t}\r\n}\r\n```\n\nAccording to `PrioritizedParameterNameDiscoverer.getParameterNames(Constructor<?> ctor)` method, `ParameterNameDiscoverer` s will be applied until one of them won\'t return null.\n\nSo, when `KotlinReflectionParameterNameDiscoverer` returns null, then the following `StandardReflectionParameterNameDiscoverer` will be applied and return `""$enum$name"", ""$enum$oridnal""` parameters for default enum and this won\'t cause an error.\n\nAnd looks like Alexander Udalov from JetBrains [had clear clarification](https://youtrack.jetbrains.net/issue/KT-25165#focus=streamItem-27-2939479-0-0): for Kotlin language, Enum doesn\'t have undeclared parameters.\n\nSo, because of this, don\'t you think that for Kotlin Enums we should delegate parameters discovering to Java?\r\nCan we use the suggested approach?\n', ""**[ruslanys](https://jira.spring.io/secure/ViewProfile.jspa?name=ruslanys)** commented\n\nI've added a [PR-1985](https://github.com/spring-projects/spring-framework/pull/1985), please take a look.\n"", '**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** commented\n\nThanks I will have a look asap.\n', '**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** commented\n\nFix in `master` and `5.0.x` branches, I think indeed this is the correct approach. Thanks for your feedback and help on that issue.\n']"
2c7d2f70636691bdbaadcf1eccb87a29fe171b78,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/context/support/ServletContextResource.java,Condition_Change,"-		URL url = getURL();
-		if (ResourceUtils.isFileURL(url)) {
+		URL url = this.servletContext.getResource(this.path);
+		if (url != null && ResourceUtils.isFileURL(url)) {",4,condition,Handle non-existent files in ServletContextResource,"ServletContextResource#getFile now falls back to #getRealPath for
non-existent files

Issue: SPR-8461
",,13107,1,['ServletContextResource getFile should not rely on getRealPath (for WebLogic 10 compatibility) [SPR-8461]'],"['**[Jason Arndt](https://jira.spring.io/secure/ViewProfile.jspa?name=jarndt196)** opened **[SPR-8461](https://jira.spring.io/browse/SPR-8461?redirect=false)** and commented\n\nWhen using the ResourceHttpRequestHandler to serve static resources the ServletContextResource\'s getFile() method that is used doesn\'t work when not deploying exploded.\n\nHere is the scenario:\n\n* wire up in spring config\n  <mvc:resources mapping=""/resources/**"" location=""/resources/"" />\n\n* access http://localhost:7001/myapp/resources/images/img.gif\n\n* DispatcherServlet gets the request and delegates to the ResourceHttpRequestHandler.getResource()\n\n* ResourceHttpRequestHandler uses the ServletContextResource from it\'s list of locations to check ""exists"" and ""readable""\n\n* ServletContextResource says yes it exists\n\n* isReadable() hops to AbstractFileResolvingResource, which determines that is is a ""file system resolution"" and calls getFile() on ServletContextResource.  NOTE: the url that is returned by Weblogic is file:c:/weblogic/tmp/blah/blah/blah/resources/images/img.gif\n\n* The ServletContextResource.getFile() uses WebUtils.getRealPath(), which is returning /resources/images/img.gif and it tries to then create a File object.\n\nI was able to work around this issue by creating and plugging in a custom ServletContextResource class that overrides the getFile() method and does this:\n\n`@Override`\npublic File getFile() throws IOException {\n////////////////////////////////////////////////////\n//TODO: this fixes a Bug in spring...they are using file path resolution, so use it here too...\n//   `@see` AbstractFileResolvingResource.isReadable()\n//String realPath = WebUtils.getRealPath(this.servletContext, this.path);\n//return new File(realPath);\n////////////////////////////////////////////////////////\nURL url = getServletContext().getResource(getPath());\nString realPath = url.getPath();\nreturn new File(realPath);\n}\n\nI have tested this using Weblogic 10.3 deployed exploded, not exploded, and using the eclipse plugin which is basically exploded.\n\n\n---\n\n**Affects:** 3.0.5, 3.1 M1, 3.1 M2\n\n4 votes, 6 watchers\n']",['closed'],[7],"[""**[Jonathan](https://jira.spring.io/secure/ViewProfile.jspa?name=jisajs9)** commented\n\nJason,\n\nI have a subclass of ServletContextResource that overrides the getFile method as described, but I'm not sure how to register it to be used.  Can you provide advice on how to wire it up.\n\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe fixed this for tomorrow\'s 3.1 RC2 and also for the upcoming 3.0.7 release which will go out in late December. The fix is a bit different but will have the same effect: We check for ""file:"" URLs and simply call super.getFile() in that case since AbstractFileResolvingResource has proper code for that purpose already.\n\nFor overriding the default ServletContextResource implementation, you\'d have to override your ApplicationContext\'s getResourceByPath implementation accordingly, returning a custom Resource class instead. Hopefully 3.1 RC2 (or 3.0.7) will be out early enough for your purposes.\n\nJuergen\n', '**[Jonathan](https://jira.spring.io/secure/ViewProfile.jspa?name=jisajs9)** commented\n\nJuergen,  thanks for the updates\n', '**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** commented\n\nWe recently upgraded from Spring 3.0.5 to Spring 3.1 and...  is there any way to get the legacy behavior in `ServletContextResource`?\n\nI\'m running on JBoss 4.2.3 and have `ServletContextResource` with `path = ""/../some.jar""`. In Spring 3.0.5 i could call `ServletContextResource.getFile()` to get a file handle to the jar and later open it. In Spring 3.1 calling `ServletContextResource.getFile()` throws\n\n```\njava.io.FileNotFoundException: ServletContext resource [/../some.jar] cannot be resolved to URL because it does not exist\n\tat org.springframework.web.context.support.ServletContextResource.getURL(ServletContextResource.java:132)\n\tat org.springframework.web.context.support.ServletContextResource.getFile(ServletContextResource.java:147)\n```\n\nThe `getFile()` methods never makes to the legacy part:\n\n```\n...\nelse {\n     String realPath = WebUtils.getRealPath(this.servletContext, this.path);\n     return new File(realPath);\n}\n```\n\n', ""**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** commented\n\nIt may be that the improvement of #9715 no longer works -- correct me if i'm wrong.\n"", '**[Michael Wyraz](https://jira.spring.io/secure/ViewProfile.jspa?name=micw)** commented\n\nThe fix is invalid since it breaks functionality. If the File does not exist, it fails with an exception (in getURL()) instead of returning the path of the non-existent File.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nFixed for 3.2 M1 and 3.1.2, falling back to getRealPath for non-existent files.\n\nJuergen\n']"
2c98c1b81a2bfb6d0d13415a2fd222b642106146,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java,Condition_Change,"-			Object managedResource, ModelMBean modelMBean, ObjectName objectName) {
+			Object managedResource, @Nullable ModelMBean modelMBean, @Nullable ObjectName objectName) {
-		if (managedResource instanceof NotificationPublisherAware) {
+		if (managedResource instanceof NotificationPublisherAware && modelMBean != null && objectName != null) {
-			Assert.state(this.modelMBean != null && this.objectName != null, ""Not initialized"");",5,condition,Relaxed assertion in NotificationPublisherAwareLazyTargetSource,"Issue: SPR-17592
",,22124,1,['Exporting a lazily initialized bean (which implements SelfNaming and is annotated with ManagedResource annotation) gives IllegalStateException [SPR-17592]'],"['**[Lavish Kothari](https://jira.spring.io/secure/ViewProfile.jspa?name=lavishkothari)** opened **[SPR-17592](https://jira.spring.io/browse/SPR-17592?redirect=false)** and commented\n\nI\'m having a bean that is\n* annotated with `ManagedResource`\n* lazily initialized\n* implements `SelfNaming`\n\nI\'m exporting it using spring\'s `AnnotationMBeanExporter`.\n\nAll this works good when I\'m using spring version `4.3.16.RELEASE`, but when I upgraded my spring version to `5.0.5.RELEASE` or `5.1.3.RELEASE` this code started giving me `IllegalStateException`.\n\nMy Bean definition and the spring\'s context.xml looks like this:\n\n\xa0SampleBean.java\n\n```java\npackage com.jmx.trial.dummybeans;\r\n\r\nimport org.springframework.jmx.export.annotation.ManagedResource;\r\nimport org.springframework.jmx.export.naming.SelfNaming;\r\n\r\nimport javax.management.MalformedObjectNameException;\r\nimport javax.management.ObjectName;\r\n\r\n@ManagedResource\r\npublic class SampleBean implements SelfNaming {\r\n    @Override\r\n    public ObjectName getObjectName() throws MalformedObjectNameException {\r\n        return new ObjectName(""com.jmx.trial:name=sampleBean"");\r\n    }\r\n}\r\n```\n\n\xa0\n\napplication-context.xml\n\n```java\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<beans xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\r\n       xmlns=""http://www.springframework.org/schema/beans""\r\n       xsi:schemaLocation=""http://www.springframework.org/schema/beans\r\n        http://www.springframework.org/schema/beans/spring-beans.xsd"">\r\n\r\n    <bean id=""server"" class=""org.springframework.jmx.support.MBeanServerFactoryBean""/>\r\n\r\n    <bean id=""exporter"" class=""org.springframework.jmx.export.annotation.AnnotationMBeanExporter"">\r\n        <property name=""server"" ref=""server""/>\r\n    </bean>\r\n\r\n    <bean id=""sampleBean"" class=""com.jmx.trial.dummybeans.SampleBean"" lazy-init=""true""/>\r\n\r\n</beans>\r\n```\n\nI understand that an extra validation was added [here](https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/jmx/export/MBeanExporter.java#L1115), and this is causing `IllegalStateException` but I\'m not completely sure why that was added.\n\n\xa0\n\nThe stack-trace looks like this:\n\n```java\norg.springframework.jmx.export.UnableToRegisterMBeanException: Unable to register MBean [sampleBean] with key \'sampleBean\'; nested exception is java.lang.IllegalStateException: Not initialized\r\n\r\n    at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:625)\r\n    at org.springframework.jmx.export.MBeanExporter.lambda$registerBeans$2(MBeanExporter.java:551)\r\n    at java.base/java.util.HashMap.forEach(HashMap.java:1336)\r\n    at org.springframework.jmx.export.MBeanExporter.registerBeans(MBeanExporter.java:551)\r\n    at org.springframework.jmx.export.MBeanExporter.afterSingletonsInstantiated(MBeanExporter.java:434)\r\n    at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:863)\r\n    at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:863)\r\n    at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546)\r\n    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:144)\r\n    at org.springframework.context.support.ClassPathXmlApplicationContext.<init>(ClassPathXmlApplicationContext.java:85)\r\n    at com.jmx.trial.MBeanExporterTest.testBeanExportedWithXml(MBeanExporterTest.java:79)\r\n    at com.jmx.trial.MBeanExporterTest.testForLazyAutoDetectWithSelfNaming(MBeanExporterTest.java:44)\r\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n    at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n    at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n    at java.base/java.lang.reflect.Method.invoke(Method.java:566)\r\n    at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\r\n    at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\r\n    at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\r\n    at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\r\n    at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\r\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\r\n    at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\r\n    at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\r\n    at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\r\n    at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\r\n    at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\r\n    at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\r\n    at org.junit.runners.ParentRunner.run(ParentRunner.java:363)\r\n    at org.junit.runner.JUnitCore.run(JUnitCore.java:137)\r\n    at com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:68)\r\n    at com.intellij.rt.execution.junit.IdeaTestRunner$Repeater.startRunnerWithArgs(IdeaTestRunner.java:47)\r\n    at com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:242)\r\n    at com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:70)\r\nCaused by: java.lang.IllegalStateException: Not initialized\r\n    at org.springframework.util.Assert.state(Assert.java:73)\r\n    at org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource.postProcessTargetObject(MBeanExporter.java:1115)\r\n    at org.springframework.aop.target.LazyInitTargetSource.getTarget(LazyInitTargetSource.java:72)\r\n    at org.springframework.jmx.export.MBeanExporter$NotificationPublisherAwareLazyTargetSource.getTarget(MBeanExporter.java:1103)\r\n    at org.springframework.aop.framework.CglibAopProxy$DynamicUnadvisedInterceptor.intercept(CglibAopProxy.java:475)\r\n    at com.jmx.trial.dummybeans.SampleBean$$EnhancerBySpringCGLIB$$9cd1c95b.getObjectName(<generated>)\r\n    at org.springframework.jmx.export.MBeanExporter.getObjectName(MBeanExporter.java:752)\r\n    at org.springframework.jmx.export.MBeanExporter.registerLazyInit(MBeanExporter.java:726)\r\n    at org.springframework.jmx.export.MBeanExporter.registerBeanNameOrInstance(MBeanExporter.java:596)\r\n    ... 33 more\r\n```\n\n\xa0\n\nMy experiments:\n* When I don\'t lazily initialize the `SampleBean`, I don\'t get this `IllegalStateException`.\n* When I annotate SampleBean with `ManagedResource(objectName = ""com.jmx.trial:name=sampleBean"")` and make `SampleBean` _not_ implement `SelfNaming` interface, again I don\'t get `IllegalStateException`\n* When I debug this and place a lot of breakpoints in `MBeanExporter` and `CGLibAopProxy` I don\'t get this exception. (This is specifically interesting that in debug-mode the tests run successfully but in normal run mode the tests fails.)\n\nThough not very sure, but I think implementing `SelfNaming` interface is not a very good idea as the javadocs of `SelfNaming` interface says that:\n\n> This interface is mainly intended for internal usage.\n\nI\'m not sure if it is the problem with using `SelfNaming` interface or I\'m doing something fundamentally wrong. Can you please explain this behavior and point me to the fundamentals that I\'m missing.\n\nPS: some of my findings: (might be unrelated) From [here](https://docs.spring.io/spring/docs/current/spring-framework-reference/integration.html) I found this caution point:\n\n> Do not use interface-based AOP proxies in combination with autodetection of JMX annotations in your bean classes.\n\nI don\'t completely understand this, but is this the rule that I\'m violating?\n\n\xa0\n\nI feel that the `Assert.state` that is getting called in `postProcessTargetObject` should be moved into the method `injectNotificationPublisherIfNecessary` and should be called only if `managedResource instanceof NotificationPublisherAware` is `true`.\n\n---\n\n**Affects:** 5.0.5, 5.1.3\n\n**Reference URL:** https://stackoverflow.com/questions/53711613/exporting-a-lazily-initialized-bean-which-implements-selfnaming-and-is-annotate\n\n**Attachments:**\n- [lazy-autodetect-with-selfNaming.xml](https://jira.spring.io/secure/attachment/26151/lazy-autodetect-with-selfNaming.xml) (_661 bytes_)\n- [LazyBeanExportingTest.java](https://jira.spring.io/secure/attachment/26153/LazyBeanExportingTest.java) (_1.16 kB_)\n- [SampleBean.java](https://jira.spring.io/secure/attachment/26152/SampleBean.java) (_496 bytes_)\n\n**Issue Links:**\n- #20276 Extend null-safety to field level\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e95c1b3153bfa0318d0bbf440bf257ea38e792e5, https://github.com/spring-projects/spring-framework/commit/2c98c1b81a2bfb6d0d13415a2fd222b642106146\n\n**Backported to:** [5.0.12](https://github.com/spring-projects/spring-framework/milestone/193?closed=1)\n']",['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis turns out to be a side effect of our nullability efforts in 5.0. I've effectively relaxed it in `injectNotificationPublisherIfNecessary` itself, simply skipping the callback if there is no state to pass in.\n\nThanks for raising this! Please give the upcoming `5.1.4.BUILD-SNAPSHOT` / `5.0.12.BUILD-SNAPSHOT` a try and let me know whether it works for you now...\n"", '**[Lavish Kothari](https://jira.spring.io/secure/ViewProfile.jspa?name=lavishkothari)** commented\n\n[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) Thanks for a quick response.\n\nI confirm that `5.1.4.BUILD-SNAPSHOT` works good for me.\n']"
2d86f221ce9e4df99aec801ae226ed228f5b64ac,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/codec/json/Jackson2Tokenizer.java,Remove_Condition,"-			if (!this.parser.hasCurrentToken()) {
-				System.out.println(""NO CURRENT TOKEN: "" + token);
-			}",3,condition,Remove println,,,,0,N/A,N/A,N/A,N/A,N/A
2daa0745611f4989a5dc99619dd4aef541288503,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java,Remove_Condition,"-		long count = 0;
-		for (ParamExpression e : expressions) {
-			if (e.getValue() != null && !e.isNegated()) {
-				count++;
-			}
-		}
-		return count;
+		return expressions.stream()
+				.filter(e -> e.getValue() != null && !e.isNegated())
+				.count();",10,"condition, iteration",Use count in ParamsRequestCondition#getValueMatchCount,"See gh-32088
",,32088,1,['Use count in ParamsRequestCondition#getValueMatchCount'],"['\r\nThe `getValueMatchCount` method was refactored to use a `Stream` instead of a `for-each loop`, eliminating the need for the unnecessary local variable `count`. This change was made to reduce the risk of accidental modifications during future maintenance, as the implementation is possible without using a local variable. Additionally, the refactoring was done for enhanced stability and maintainability, especially since there was no need to interrupt the loop under specific conditions.\r\n\r\n\r\n\r\n- [x]  The test code was executed and passed successfully.']",['closed'],[3],"['@Ryan-Dia congratulations for making your first contribution to Spring Framework.', ""@Ryan-Dia the team has discussed this change today and we've decided to revert it. I had missed that the method you've changed is in a hot code path and we explicitly avoid using the Stream API in such places. "", 'Thank you for reviewing the changes I proposed. I understand the decision to revert them, recognizing that the modified method is in a hot code path. I appreciate the feedback and will ensure my future contributions are more closely aligned with these best practices\r\n\r\n\r\n']"
2e5d0470dc0c9766d98d144d5b6bd56248112e46,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/BeanUtils.java,Condition_Change,"-		Set<String> ignoreSet = (ignoreProperties != null ? new HashSet<>(Arrays.asList(ignoreProperties)) : null);
+		Set<String> ignoredProps = (ignoreProperties != null ? new HashSet<>(Arrays.asList(ignoreProperties)) : null);
-			if (writeMethod != null && (ignoreSet == null || !ignoreSet.contains(targetPd.getName()))) {
+			if (writeMethod != null && (ignoredProps == null || !ignoredProps.contains(targetPd.getName()))) {",4,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
2e5d752e15164b331ad48bcdcb61c174f880498c,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java,Condition_Change,"-		for (String beanName : candidateBeans.keySet()) {
+		for (Map.Entry<String, T> entry : candidateBeans.entrySet()) {
+			String beanName = entry.getKey();
-				matchingBean = candidateBeans.get(beanName);
+				matchingBean = entry.getValue();",5,iteration,Better use of key iterator,"This commit uses an EntrySet instead of looping over the keys and
retrieving the value in a separate call.

Issue: SPR-12356
",,16961,1,"['BeanFactoryAnnotationUtils,qualifiedBeanOfType, Inefficient use of keySet iterator. [SPR-12356]']","['**[Min Ho Pak](https://jira.spring.io/secure/ViewProfile.jspa?name=luckybomb)** opened **[SPR-12356](https://jira.spring.io/browse/SPR-12356?redirect=false)** and commented\n\nBeanFactoryAnnotationUtils,qualifiedBeanOfType method use KeySet Iterator.\n\nIt is more efficient to use an iterator on the entrySet of the map, to avoid the Map.get(key) lookup.\n\npull request:\nhttps://github.com/spring-projects/spring-framework/pull/667\n\n---\n\n**Affects:** 4.1.1\n\n**Issue Links:**\n- #17037 MessageHeaderAccessor copyHeaders... tuning\n- #16968 org.springframework.ui.ModelMap.mergeAttributes(Map) makes inefficient use of keySet iterator\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/667, and commits https://github.com/spring-projects/spring-framework/commit/2e5d752e15164b331ad48bcdcb61c174f880498c\n']",['closed'],[1],"['**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nThanks for the PR. You get a point that in that particular case this is more efficient, especially because we are building a map ourselves and we can guarantee its nature.\n']"
2f0970b18401426846b38388927f182b3327bb98,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java,Condition_Change,"-			if (jaxb2Present) {
+			if (jaxb2Present && !jackson2XmlPresent) {",2,condition,Fix an AllEncompassingFormHttpMessageConverter regression,"Restore previous behavior to configure
Jaxb2RootElementHttpMessageConverter when JAXB but not Jackson are present.

Closes gh-25291
",,25291,1,['AllEncompassingFormHttpMessageConverter now uses both JAXB and Jackson by default'],"['**Affects:** 5.3 snapshots\r\n\r\nWhen both JAX-B and Jackson are on the classpath, `AllEncompassingFormHttpMessageConverter` will now configure both `Jaxb2RootElementHttpMessageConverter` and `MappingJackson2XmlHttpMessageConverter`. Previously, the latter was preferred. This change in behaviour was introduced in https://github.com/spring-projects/spring-framework/commit/1e501f2583efd7521fe457453e5f866bcb8c509a as the `jackson2XmlPresent` flag is no longer being checked when deciding if `Jaxb2RootElementHttpMessageConverter` should be configured.']",['closed'],[1],"['Fixed, sorry for the glitch, I missed it. Thanks for your report.']"
2f920e8fb3bf3f45754ebe64a33bf8c0ed84cfa6,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/json/JacksonModulesRuntimeHints.java,Remove_Condition,"-		if (ClassUtils.isPresent(className, classLoader)) {
-			reflectionHints.registerType(TypeReference.of(className),
-					builder -> builder.onReachableType(TypeReference.of(Jackson2ObjectMapperBuilder.class))
-							.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));
-		}
+		reflectionHints.registerTypeIfPresent(classLoader, className,
+				builder -> builder.onReachableType(TypeReference.of(Jackson2ObjectMapperBuilder.class))
+						.withMembers(MemberCategory.INVOKE_DECLARED_CONSTRUCTORS));",8,condition,Polish JacksonModulesRuntimeHints,"Closes gh-29001
",,29001,1,['Refine `JacksonModulesRuntimeHints`'],[None],['closed'],[3],"[""Shouldn't the condition be on a Jackson class? Or the module as it's probably optional. "", 'Good point, I will update accordingly.', 'In fact, maybe the condition is ok with the builder but we should add a classpath check on the related modules since those are instantiated reflectively.']"
2f9d0a7de8e2f1247dd4a34811220106f7359aa5,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java,Condition_Change,"-					while (j < statement.length && !('}' == statement[j])) {
+					while (j < statement.length && '}' != statement[j]) {
-					if (!(statement[position + j] == START_SKIP[i].charAt(j))) {
+					if (statement[position + j] != START_SKIP[i].charAt(j)) {
-								if (!(statement[m + n] == STOP_SKIP[i].charAt(n))) {
+								if (statement[m + n] != STOP_SKIP[i].charAt(n)) {",6,"condition, iteration",simplify boolean NOT operation,,,,0,N/A,N/A,N/A,N/A,N/A
2ff22510d92986ebabd0f7f4667d7ede3f83e01d,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+import org.springframework.util.CollectionUtils;
-		if (earlyEventsToProcess != null) {
+		if (!CollectionUtils.isEmpty(earlyEventsToProcess)) {",3,condition,Avoid earlyApplicationEvents iteration in case of empty Set,"Closes gh-25161
",,25161,1,['Suggest making a Set.size() > 0 judgement for AbstractApplicationContext.earlyApplicationEvents'],['https://github.com/spring-projects/spring-framework/blob/7e2b81729eefe31e9e8b2872b0de0adc1bad2162/spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java#L839'],['closed'],[1],"[""Well spotted! Since we have such emptiness checks in other places already, in particular in hotspot code paths and for collections that tend to be empty at runtime, I've applied our common `CollectionUtils.isEmpty` check here as well now. While it won't make much difference performance-wise, it does avoid allocation of an `Iterator` which is generally worthwhile in such scenarios.""]"
30ebc3b8e2185c56791531507e0f430972f82b51,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationAttributes.java,Remove_Condition,"-	/**
-	 * Store the supplied {@code value} in this map under the specified
-	 * {@code key}, unless a value is already stored under the key.
-	 * @param key the key under which to store the value
-	 * @param value the value to store
-	 * @return the current value stored in this map, or {@code null} if no
-	 * value was previously stored in this map
-	 * @see #get
-	 * @see #put
-	 * @since 4.2
-	 */
-	@Override
-	public Object putIfAbsent(String key, Object value) {
-		Object obj = get(key);
-		if (obj == null) {
-			obj = put(key, value);
-		}
-		return obj;
-	}
-",10,condition,Remove superfluous AnnotationAttributes#putIfAbsent implementation,"Since Java 8, putIfAbsent() is a standard method in java.util.Map. We
therefore no longer need the custom implementation that overrides the
standard implementation in HashMap.
",,,0,N/A,N/A,N/A,N/A,N/A
311b3338145038ea92c693bb2a8babec9580deda,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ResourceBundleMessageSource.java,Remove_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-	 * Return a ResourceBundle for the given basename and code,
-	 * fetching already generated MessageFormats from the cache.
+	 * Return a ResourceBundle for the given basename and Locale,
+	 * fetching already generated ResourceBundle from the cache.
-					localeMap = new ConcurrentHashMap<>();
-					Map<Locale, ResourceBundle> existing = this.cachedResourceBundles.putIfAbsent(basename, localeMap);
-					if (existing != null) {
-						localeMap = existing;
-					}
+					localeMap = this.cachedResourceBundles.computeIfAbsent(basename, bn -> new ConcurrentHashMap<>());",6,condition,Use computeIfAbsent in ResourceBundleMessageSource,"This commit optimizes code in ResourceBundleMessageSource
by using computeIfAbsent instead of putIfAbsent.

In addition, the content of some Javadoc has been adjusted.

Closes gh-25054",,25054,1,['Use computeIfAbsent in ResourceBundleMessageSource'],"['This PR is to optimize code by using `computeIfAbsent` instead of `putIfAbsent`, in addition, the content of some Javadoc has been adjusted.\r\n']",['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks']
321d7b0b061b552aa10e7af099d0610663fab1ef,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/config/ResourcesBeanDefinitionParser.java,Add_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-		CacheControl cacheControl = CacheControl.empty();
+		CacheControl cacheControl;
+		else {
+			cacheControl = CacheControl.empty();
+		}
+",6,condition,Put CacheControl.empty() in else part.,Make sure the constructor of `CacheControl` being invoked only once.,,,0,N/A,N/A,N/A,N/A,N/A
325fb5d97e309a9eb94cfb42a12b136fc7aada16,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/DeferredResultMethodReturnValueHandler.java,Add_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
+import java.util.concurrent.CompletionException;
+				if (ex instanceof CompletionException && ex.getCause() != null) {
+					ex = ex.getCause();
+				}",4,condition,Unwrap CompletionException in return value handler,"See gh-22476
",,22476,1,['Fix CompletableFuture exception handling'],['CompletableFuture exceptions are always wrapped into CompletionException.\r\nWe need to unwrap CompletionException to properly handle exceptions in MVC handlers that return CompletableFuture.\r\nSee https://stackoverflow.com/questions/49676889/spring-controller-advice-does-not-correctly-handle-a-completablefuture-completed\r\n\r\n#22475'],['closed'],[10],"['@sviperll Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22476)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22476) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@sviperll Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22476)!', 'Can we get this merged? FWIW, it looks good to me.', ""I've resolved this in a separate commit also adding a check to ensure the cause is not null. Thanks for submitting a PR and for pointing this out!"", 'Is this fix already part of a release?', 'Yes, Spring Framework 5.1.7', '@bclozel weird, I am using Spring Boot v2.1.9.RELEASE but still have this error (dependency of spring is 5.1.10)', ""I have the same problem, when returning e.g. `CompletableFuture<ResponseEntity<Void>>`from a controller method. The debugger revealed, that the `DeferredResultMethodReturnValueHandler`isn't used in that case, since `ResponseBodyEmitterReturnValueHandler`is kicking in instead."", '@maverick1601, `ResponseBodyEmitterReturnValueHandleris` delegates to `ReactiveTypeHandler` which handles adapts the future via a Reactor-based adapter registered through the `ReactiveAdapterRegistry`. So this comes from Project Rector and I see a fix there https://github.com/reactor/reactor-core/issues/1652 related to this for version 3.3. Spring Framework 5.2 is based on that version of Reactor but you can try independently upgrading Reactor first.\r\n', ""Never mind, I figured, that it works as expected, just not via the `DeferredResultMethodReturnValueHandler`, as you've mentioned. The problem was on my side, testing with a mis-configured `ExceptionHandler`.""]"
327e761536eb23c9db90e93c18a549b6bccca2f8,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/codec/multipart/PartGenerator.java,Add_Condition,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
+import java.nio.charset.Charset;
- * {@link MultipartParser#parse(Flux, byte[], int)}, and produces a flux of {@link Part} objects.
+ * {@link MultipartParser#parse(Flux, byte[], int, Charset)}, and produces a flux of {@link Part} objects.
+				if (!Files.exists(directory)) {
+					Files.createDirectory(directory);
+				}",4,condition,Recreate file storage directory when removed in DefaultPartHttpMessageReader,"Some operating systems delete temp files not just when booting up, but
also during operation. This commit makes sure that the
DefaultPartHttpMessageReader recreates the directory used to store
files in, if it's not there.

Closes gh-26790
",,26790,1,['Make sure file storage directory exists before usage in DefaultPartHttpMessageReader'],"['<!--\r\n!!! For Security Vulnerabilities, please go to https://spring.io/security-policy !!!\r\n-->\r\n**Affects:** \\<Spring Framework version>\r\n5.3.4\r\n---\r\n\r\nwhen i upload a file, it throw an exception\r\n\r\n```\r\njava.io.UncheckedIOException: Could not create temp file in /tmp/spring-multipart\r\n\tat org.springframework.http.codec.multipart.PartGenerator$CreateFileState.createFileState(PartGenerator.java:588)\r\n\tSuppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \r\nError has been observed at the following site(s):\r\n\t|_ checkpoint ⇢ com.nxin.passport.application.support.filter.FormDataParserFilter [DefaultWebFilterChain]\r\n\t|_ checkpoint ⇢ com.nxin.passport.application.support.filter.UrlRewriteFilter [DefaultWebFilterChain]\r\n\t|_ checkpoint ⇢ HTTP POST ""/user/uploadPhoto"" [ExceptionHandlingWebHandler]\r\nStack trace:\r\n\t\tat org.springframework.http.codec.multipart.PartGenerator$CreateFileState.createFileState(PartGenerator.java:588)\r\n\t\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\r\n\t\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1789)\r\n\t\tat reactor.core.publisher.MonoCacheTime.subscribeOrReturn(MonoCacheTime.java:142)\r\n\t\tat reactor.core.publisher.Mono.subscribe(Mono.java:4031)\r\n\t\tat reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.run(MonoSubscribeOn.java:126)\r\n\t\tat reactor.core.scheduler.WorkerTask.call(WorkerTask.java:84)\r\n\t\tat reactor.core.scheduler.WorkerTask.call(WorkerTask.java:37)\r\n\t\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\t\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\r\n\t\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\t\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\t\tat java.base/java.lang.Thread.run(Thread.java:834)\r\nCaused by: java.nio.file.NoSuchFileException: /tmp/spring-multipart/8497015949572241043.multipart\r\n\tat java.base/sun.nio.fs.UnixException.translateToIOException(UnixException.java:92)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:111)\r\n\tat java.base/sun.nio.fs.UnixException.rethrowAsIOException(UnixException.java:116)\r\n\tat java.base/sun.nio.fs.UnixFileSystemProvider.newByteChannel(UnixFileSystemProvider.java:215)\r\n\tat java.base/java.nio.file.Files.newByteChannel(Files.java:370)\r\n\tat java.base/java.nio.file.Files.createFile(Files.java:647)\r\n\tat java.base/java.nio.file.TempFileHelper.create(TempFileHelper.java:137)\r\n\tat java.base/java.nio.file.TempFileHelper.createTempFile(TempFileHelper.java:160)\r\n\tat java.base/java.nio.file.Files.createTempFile(Files.java:867)\r\n\tat org.springframework.http.codec.multipart.PartGenerator$CreateFileState.createFileState(PartGenerator.java:580)\r\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:106)\r\n\tat reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1789)\r\n\tat reactor.core.publisher.MonoCacheTime.subscribeOrReturn(MonoCacheTime.java:142)\r\n\tat reactor.core.publisher.Mono.subscribe(Mono.java:4031)\r\n\tat reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.run(MonoSubscribeOn.java:126)\r\n\tat reactor.core.scheduler.WorkerTask.call(WorkerTask.java:84)\r\n\tat reactor.core.scheduler.WorkerTask.call(WorkerTask.java:37)\r\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)\r\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:304)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)\r\n\tat java.base/java.lang.Thread.run(Thread.java:834)\r\n```\r\n\r\ni found DefaultPartHttpMessageReader has a fileStorageDirectory property control the upload temp directory, it init as system temp dir, in linux, it is /tmp/spring-multipart, but os may sometimes remove the files in /tmp, when the spring-multipart is remove, then the upload action will fail, because the directory only init once at startup, \r\n\r\n![image](https://user-images.githubusercontent.com/5616997/114377903-be5db780-9bb9-11eb-9819-e9d286cc2553.png)\r\n\r\ni have found the way to customize the path,\r\n![image](https://user-images.githubusercontent.com/5616997/114378082-eea55600-9bb9-11eb-8897-c8acd652ce4a.png)\r\n\r\nbut it did not invoke in any place\r\n\r\n![image](https://user-images.githubusercontent.com/5616997/114378217-14325f80-9bba-11eb-8a03-82a24c9b6cee.png)\r\n\r\nplease provide some way to config the path, so i can set a other place to store the tepm data to avoid the issure, the spring mvc config way is below\r\n\r\n![image](https://user-images.githubusercontent.com/5616997/114378476-5360b080-9bba-11eb-89ea-b3f9cd63454e.png)\r\n\r\ncan you provide a similarity one in webflux?']",['closed'],[1],"['The field changed by `setFileStorageDirectory` is definitely used, even though the setter is not called anywhere. So could you please try again and see if it works for you?\r\n\r\nYou are correct that some operating systems are quite aggressive when deleting files in the temporary directory. So I did make some changes to make sure that we re-create the file storage directory if it ends up was deleted  by the operating system.']"
32df079b05d2b1b755c6c84ef4d2bf5238186b71,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,Condition_Change,"+	private static final char WINDOWS_FOLDER_SEPARATOR_CHAR = '\\';
+
-		if (path.indexOf('\\') != -1) {
+		if (path.indexOf(WINDOWS_FOLDER_SEPARATOR_CHAR) != -1) {
-		if (pathToUse.indexOf('.') == -1) {
+		if (pathToUse.indexOf(EXTENSION_SEPARATOR) == -1) {",6,condition,Polish use of constants in StringUtils,"The hardcoded '.' and '\\' literals have been replaced by the use of
EXTENSION_SEPARATOR and WINDOWS_FOLDER_SEPARATOR_CHAR.

Closes gh-33654
",,33654,1,['Polish use of constants in `StringUtils`'],"[""I modified the hardcoded '.' and '\\\\' parts to \r\nEXTENSION_SEPARATOR,\r\nWINDOWS_FOLDER_SEPARATOR_CHAR.\r\n\r\nThe '\\\\' part can be maintained by adding WINDOWS_FOLDER_SEPARATOR_CHAR\r\nto maintain the overall consistency of the code base.\r\n\r\nps. This is my first Spring Framework PR, so even if there are some shortcomings, I will improve it to a good code through future activities.""]",['closed'],[5],"['@J-unStiN Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=33654)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=33654) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@J-unStiN Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=33654)!', ""Hi @J-unStiN,\r\n\r\nCongratulations on submitting your first PR for the Spring Framework! 👍 \r\n\r\nAlthough we generally prefer to make such minor changes ourselves, I will accept this since it's your first PR.\r\n\r\nAlso, please note that we do not add `@author` tags for such minor changes.\r\n\r\nRegards,\r\n\r\nSam"", 'This has been merged into `main`.\r\n\r\nThanks', ""Thank you very very much.\r\n\r\nI will never forget this moment.\r\n\r\nI have another question.\r\n\r\nI don't see any methods in Spring's StirngUtils that check for empty and null values \u200b\u200bvia isBlank, isEmpty. I wonder if it would be okay to create one and post a PR.""]"
33642345a4bebadb6226a8497037e9b8c13af0e1,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,Condition_Change,"-			final boolean infoEnabled = logger.isInfoEnabled();
-			final boolean debugEnabled = logger.isDebugEnabled();
-						if (infoEnabled && implementsInterface(method, ifcs)) {
+						if (logger.isInfoEnabled() && implementsInterface(method, ifcs)) {
-						if (debugEnabled) {
+						if (logger.isDebugEnabled()) {
-					else if (debugEnabled && !Modifier.isPublic(mod) && !Modifier.isProtected(mod) &&
+					else if (logger.isDebugEnabled() && !Modifier.isPublic(mod) && !Modifier.isProtected(mod) &&",8,condition,Lazily check log level within validation conditions,"See gh-24672
",,24672,1,['Reduce String garbage in CglibAopProxy.doValidateClass()'],['Subj + some tiny improvements'],['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks']
33ef9107e068223b53b9f19cf9b7906aabf769e0,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/handler/annotation/support/PayloadMethodArgumentResolver.java,Remove_Condition,"-		if (ClassUtils.isAssignable(targetClass, payloadClass)) {
-			validate(message, parameter, payload);
-			return (isOptionalTargetClass ? Optional.of(payload) : payload);
-		}
-		else {
+		if (!ClassUtils.isAssignable(targetClass, payloadClass)) {
-			validate(message, parameter, payload);
-			return (isOptionalTargetClass ? Optional.of(payload) : payload);
+		validate(message, parameter, payload);
+		return (isOptionalTargetClass ? Optional.of(payload) : payload);",10,condition,Minor refactoring in PayloadMethodArgumentResolver,"Closes gh-30168
",,30168,1,['Minor refactoring in PayloadMethodArgumentResolver'],['remove duplicate logic'],['closed'],[0],[]
341ac76209a0a5ad34cb80385179040d47636974,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/BeanPropertyRowMapper.java,Remove_Condition,"+	 * @see #setMappedClass
+	 * @see BeanUtils#getPropertyDescriptors
+	 * @see #mappedNames(PropertyDescriptor)
+	 * @see #initialize
-		String lowerCaseName = lowerCaseName(pd.getName());
-		mappedNames.add(lowerCaseName);
-		String underscoreName = underscoreName(pd.getName());
-		if (!lowerCaseName.equals(underscoreName)) {
-			mappedNames.add(underscoreName);
-		}
+		mappedNames.add(lowerCaseName(pd.getName()));
+		mappedNames.add(underscoreName(pd.getName()));",8,condition,Rely on HashSet for uniqueness of mapped names,"See gh-32199
",,32199,1,['Let `BeanPropertyRowMapper` subclasses customize mapped names'],"['`BeanPropertyRowMapper` traditionally maps lower-case and underscore-based names for each discovered property.\r\n\r\nWhile it allows for customizing those specific names, it does not allow for totally custom mapped names, e.g. derived from a custom annotation.\r\n\r\nSee the use case described in the tests for #30180.']",['closed'],[0],[]
3477738bed64f0cda2952eee787a267e89b0569d,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,Condition_Change,"-				else if (replace) {
+				else if (replace && replacingClass == null) {",2,condition,Consistently pick lowest superclass level to replace,"See gh-28676
",,28676,1,['A configuration class superclass that is skipped due to register bean phase conditions is ignored when another configuration class that extends it is processed'],"['**Affects:** 6.0.x. I expect 5.3.x to also be affected.\r\n\r\nI think @mbhave and I have found a bug in configuration class processing related to condition evaluation. It\'s hopefully illustrated by the following tests:\r\n\r\n```java\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.ConditionContext;\r\nimport org.springframework.context.annotation.Conditional;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.annotation.ConfigurationCondition;\r\nimport org.springframework.context.annotation.Import;\r\nimport org.springframework.core.type.AnnotatedTypeMetadata;\r\n\r\nimport static org.assertj.core.api.Assertions.assertThat;\r\n\r\nclass ConfigurationPhasesKnownSuperclassesTests {\r\n\r\n\t@Test\r\n\tvoid superclassSkippedInParseConfigurationPhaseShouldNotPreventSubsequentProcessingOfSameSuperclass() {\r\n\t\ttry (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\r\n\t\t\t\tParseConfigurationPhase.class)) {\r\n\t\t\tassertThat(context.getBean(""subclassBean"")).isEqualTo(""bravo"");\r\n\t\t\tassertThat(context.getBean(""superclassBean"")).isEqualTo(""superclass"");\r\n\t\t}\r\n\t}\r\n\r\n\t@Test\r\n\tvoid superclassSkippedInRegisterBeanPhaseShouldNotPreventSubsequentProcessingOfSameSuperclass() {\r\n\t\ttry (AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\r\n\t\t\t\tRegisterBeanPhase.class)) {\r\n\t\t\tassertThat(context.getBean(""subclassBean"")).isEqualTo(""bravo"");\r\n\t\t\tassertThat(context.getBean(""superclassBean"")).isEqualTo(""superclass"");\r\n\t\t}\r\n\t}\r\n\r\n\t@Configuration(proxyBeanMethods = false)\r\n\tstatic class Example {\r\n\r\n\t\t@Bean\r\n\t\tString superclassBean() {\r\n\t\t\treturn ""superclass"";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t@Configuration(proxyBeanMethods = false)\r\n\t@Import({ RegisterBeanPhaseExample.class, BravoExample.class })\r\n\tstatic class RegisterBeanPhase {\r\n\r\n\t}\r\n\r\n\t@Conditional(NonMatchingRegisterBeanPhaseCondition.class)\r\n\t@Configuration(proxyBeanMethods = false)\r\n\tstatic class RegisterBeanPhaseExample extends Example {\r\n\r\n\t\t@Bean\r\n\t\tString subclassBean() {\r\n\t\t\treturn ""alpha"";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t@Configuration(proxyBeanMethods = false)\r\n\t@Import({ ParseConfigurationPhaseExample.class, BravoExample.class })\r\n\tstatic class ParseConfigurationPhase {\r\n\r\n\t}\r\n\r\n\t@Conditional(NonMatchingParseConfigurationPhaseCondition.class)\r\n\t@Configuration(proxyBeanMethods = false)\r\n\tstatic class ParseConfigurationPhaseExample extends Example {\r\n\r\n\t\t@Bean\r\n\t\tString subclassBean() {\r\n\t\t\treturn ""alpha"";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\t@Configuration(proxyBeanMethods = false)\r\n\tstatic class BravoExample extends Example {\r\n\r\n\t\t@Bean\r\n\t\tString subclassBean() {\r\n\t\t\treturn ""bravo"";\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic class NonMatchingRegisterBeanPhaseCondition implements ConfigurationCondition {\r\n\r\n\t\t@Override\r\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic ConfigurationPhase getConfigurationPhase() {\r\n\t\t\treturn ConfigurationPhase.REGISTER_BEAN;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tstatic class NonMatchingParseConfigurationPhaseCondition implements ConfigurationCondition {\r\n\r\n\t\t@Override\r\n\t\tpublic boolean matches(ConditionContext context, AnnotatedTypeMetadata metadata) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t@Override\r\n\t\tpublic ConfigurationPhase getConfigurationPhase() {\r\n\t\t\treturn ConfigurationPhase.PARSE_CONFIGURATION;\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n```\r\n\r\n`superclassSkippedInParseConfigurationPhaseShouldNotPreventSubsequentProcessingOfSameSuperclass` passes but `superclassSkippedInRegisterBeanPhaseShouldNotPreventSubsequentProcessingOfSameSuperclass` fails.\r\n\r\nThe register bean phase test fails due to the `knownSuperclasses` map in `ConfigurationClassParser` being polluted. Due to the parse configuration phase conditions matching an entry is added to the map for `Example -> RegisterBeanPhaseExample`. Subsequently, the register bean phase condition on `RegisterBeanPhaseExample` does not match, so neither it nor `Example` are processed. When `BravoExample` is then parsed, `ConfigurationClassParser` considers its superclass `Example`. It\'s skipped due to the existing entry in the `knownSuperclasses` map, despite the fact that `Example` was never actually processed due to the conditions on `RegisterBeanPhaseExample`. The end result is that the context is left without a bean named `superclassBean`.']",['closed'],[0],[]
34ab818dfa795bd67fa44061f71e68bc665fa0bf,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateExceptionTranslator.java,Add_Condition,"-		if (ex instanceof PersistenceException && ex.getCause() instanceof HibernateException) {
-			return convertHibernateAccessException((HibernateException) ex.getCause());
+		if (ex instanceof PersistenceException) {
+			if (ex.getCause() instanceof HibernateException) {
+				return convertHibernateAccessException((HibernateException) ex.getCause());
+			}
+			return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);
-		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);
+		return null;",9,condition,HibernateExceptionTranslator avoids JPA IllegalState/ArgumentException translation,"Issue: SPR-14681
",,19245,1,['HibernateExceptionTranslator translating to InvalidDataAccessApiUsageException when using vanilla Hibernate [SPR-14681]'],"[""**[Koen Serneels](https://jira.spring.io/secure/ViewProfile.jspa?name=koen.serneels)** opened **[SPR-14681](https://jira.spring.io/browse/SPR-14681?redirect=false)** and commented\n\nThe new org.springframework.orm.hibernate5.HibernateExceptionTranslator uses a fallthrough in the sense that it first tries to map the exception using vanilla Hibernate (SessionFactoryUtils). If no translation could be done it tries JPA via EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible().\n\nThe latter troubles us as it is translating IllegalStateException to InvalidDataAccessApiUsageException. I'm not really sure why IllegalStateException and IllegalArgumentException get this special treatment, but ok. So now we suddenly end up with translated exceptions that weren't translated before. Since these extra translations are in context of JPA (as it is called 'convertJpaAccessExceptionIfPossible') this also makes no sense as we are not using JPA but vanilla Hibernate.\n\nSo, what is the correct way to make sure that we only get Hibernate exceptions translated? Afaic the HibernateExceptionTranslator has no options to turn off JPA translation and the LocalSessionFactoryBean extends HibernateExceptionTranslator without the option to inject another implementation. Wouldn't it make more sense to have the HibernateExceptionTranslator JPA unaware and add another translator in case JPA is actually used?\n\n---\n\n**Affects:** 4.3.2\n\n**Reference URL:** https://stackoverflow.com/questions/39393116/how-to-deactivate-spring-data-exception-translation\n\n**Issue Links:**\n- #19225 TypeConverterSupport does not propagate custom exceptions anymore\n- #19024 Hibernate5 LocalSessionFactoryBean does not translate javax.persistence exceptions\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4b445531f56ccb106c935bcbdee27c55cb867b83, https://github.com/spring-projects/spring-framework/commit/34ab818dfa795bd67fa44061f71e68bc665fa0bf\n""]",['closed'],[6],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThe translation of `IllegalStateException` to `InvalidDataAccessApiUsageException` arguably wasn\'t intended in this native Hibernate case and is therefore a regression in 4.3.2. I\'ve re-labelled this issue accordingly.\n\nHowever, the general feature was intentional (see #19024): As of Hibernate 5.2, a Hibernate `Session` **is** a JPA `EntityManager`, and `HibernateException` actually extends `PersistenceException` now. It mostly throws `HibernateException` still but sometimes also plain JPA exceptions now, even when used ""natively"".\n', '**[Koen Serneels](https://jira.spring.io/secure/ViewProfile.jspa?name=koen.serneels)** commented\n\nThanks Jürgen. So, to be sure, the fix will imply that both IllegalStateException and IllegalArgumentException are no longer translated?\n\nNote: for completeness, the javadoc does mention this:\n// Following the JPA specification, a persistence provider can also\n// throw these two exceptions, besides PersistenceException.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nYes, that\'s what I\'m trying to balance out for this modern-day ""native"" use of Hibernate: just translating plain `PersistenceException` next to `HibernateException` but leaving other exceptions as-is, like before when doing native Hibernate.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAre you actually relying on Hibernate-originating `IllegalStateException` / `IllegalArgumentException` to get rethrown there, or is it primarily about custom exceptions that you throw within your callbacks? Do you have some specific handling for those exceptions?\n', '**[Koen Serneels](https://jira.spring.io/secure/ViewProfile.jspa?name=koen.serneels)** commented\n\nThe second: we are throwing  `IllegalStateException` / `IllegalArgumentException` from repositories and are not expecting them to be wrapped/translated. While this is mostly important for our tests, it is imho arguable that  such general purpose exceptions would be translated when they did not originate from JPA. So, in that case I believe the best solution is to translate if they originated from Hibernate/JPA (if that is doable) and leave them as-is otherwise\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIt would be great if you could give the latest `4.3.3.BUILD-SNAPSHOT` a try to check whether it works for you again...\n']"
34e5ce9360ed6c0fe83678a904d5e70064765db6,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/jta/JtaTransactionManager.java,Condition_Change,"-		if (transactionManager instanceof UserTransaction userTransaction) {
-			return userTransaction;
+		if (transactionManager instanceof UserTransaction ut) {
+			return ut;
-		if (ut instanceof TransactionManager transactionManager) {
+		if (ut instanceof TransactionManager tm) {
-			return transactionManager;
+			return tm;",8,condition,Fix Checkstyle violations,"See gh-30019
",,30019,1,"['Apply ""instanceof pattern matching"" in `spring-tx`']",[None],['closed'],[1],['This has been merged into `main` in 375114defa711b33babc0aef9b4f918f232e315f and revised in 34e5ce9360ed6c0fe83678a904d5e70064765db6 and b1cf832c28473518240a91afed17bd51f95fbf9a.\r\n\r\nThanks']
35055fd866baadefeec2e2f47d1d94454763b452,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/env/PropertySourcesPropertyResolver.java,Condition_Change,"- * Copyright 2002-2011 the original author or authors.
+ * Copyright 2002-2012 the original author or authors.
-			if (propertySource.getProperty(key) != null) {
+			if (propertySource.containsProperty(key)) {",2,condition,Refactor PropertyResolver impl for consistency,"PropertySourcesPropertyResolver#containsProperty now
calls #containsProperty on each underlying PropertySource instead of
calling #getProperty and checking for null.

Issue: SPR-9529
",,14163,1,['Refactor PropertySourcesPropertyResolver#containsString for consistency [SPR-9529]'],"[""**[Mauro Molinari](https://jira.spring.io/secure/ViewProfile.jspa?name=mauromol)** opened **[SPR-9529](https://jira.spring.io/browse/SPR-9529?redirect=false)** and commented\n\nTo ensure maximum performance and consistency, shouldn't `org.springframework.core.env.PropertySourcesPropertyResolver.containsProperty(String)` be implemented as such?\n\n```\npublic boolean containsProperty(String key) {\n  for (PropertySource<?> propertySource : this.propertySources) {\n    if (propertySource.containsProperty(key)) {\n      return true;\n    }\n  }\n  return false;\n}\n```\n\n\n\n---\n\n**Affects:** 3.1 GA, 3.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/35055fd866baadefeec2e2f47d1d94454763b452\n""]",['closed'],[1],"['**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** commented\n\nGood call, Mauro.  This is complete.\n\n> ```\n> \n> commit 35055fd866baadefeec2e2f47d1d94454763b452\n> Author: Chris Beams <cbeams@vmware.com>\n> Date:   Thu Jun 21 12:28:12 2012 +0200\n> \n>     Refactor PropertyResolver impl for consistency\n>     \n>     PropertySourcesPropertyResolver#containsProperty now\n>     calls #containsProperty on each underlying PropertySource instead of\n>     calling #getProperty and checking for null.\n>     \n>     Issue: SPR-9529\n> ```\n\n']"
3576ff051cf13ccc97d8b0fea8d961d204c15f0d,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java,Add_Condition,"-			Set<ScheduledTask> tasks =
-					new LinkedHashSet<ScheduledTask>(4);
+			Set<ScheduledTask> tasks = this.scheduledTasks.get(bean);
+			if (tasks == null) {
+				tasks = new LinkedHashSet<ScheduledTask>(4);
+				this.scheduledTasks.put(bean, tasks);
+			}
-			this.scheduledTasks.put(bean, tasks);",8,condition,ScheduledAnnotationBeanPostProcessor properly registers multiple tasks per bean,"Issue: SPR-14286
",,18858,1,"[""Scheduled tasks aren't cancelled on ScheduledTaskRegistrar destruction anymore [SPR-14286]""]","['**[Romain Moreau](https://jira.spring.io/secure/ViewProfile.jspa?name=romainmoreau)** opened **[SPR-14286](https://jira.spring.io/browse/SPR-14286?redirect=false)** and commented\n\nWith Spring 4.3.0.RC1, when ScheduledTaskRegistrar was destroyed, scheduled futures were cancelled correctly.\n\nNow, with Spring 4.3.0.RC2, when ScheduledTaskRegistrar is destroyed, scheduled tasks aren\'t cancelled because the [scheduledTasks collection used to iterate the tasks to cancel](https://github.com/spring-projects/spring-framework/blob/v4.3.0.RC2/spring-context/src/main/java/org/springframework/scheduling/config/ScheduledTaskRegistrar.java#L485) is empty.\n\nHere\'s below the code for a quick and dirty reproduction case.\nTo run with Spring 4.3.0.RC1, replace the spring-boot-starter-parent version with 1.4.0.M2.\nWith Spring 4.3.0.RC1, you\'ll see in the log ""1 scheduled found"" as expected.\nWith Spring 4.3.0.RC2, you\'ll see in the log ""0 scheduled found"" (scheduledTasks set is empty).\n\n```xml\n<?xml version=""1.0"" encoding=""UTF-8""?>\n<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"">\n  <modelVersion>4.0.0</modelVersion>\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.4.0.M3</version>\n  </parent>\n  <artifactId>scheduled-repro</artifactId>\n  <properties>\n    <!-- Needed because of a Maven issue on my side, not affecting reproduction case -->\n    <spring-integration.version>4.2.6.RELEASE</spring-integration.version>\n  </properties>\n  <dependencies>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter</artifactId>\n    </dependency>\n  </dependencies>\n  <build>\n    <plugins>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n  <repositories>\n    <repository>\n      <id>spring-milestones</id>\n      <url>http://repo.spring.io/milestone</url>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </repository>\n  </repositories>\n  <pluginRepositories>\n    <pluginRepository>\n      <id>spring-milestones</id>\n      <url>http://repo.spring.io/milestone</url>\n      <releases>\n        <enabled>true</enabled>\n      </releases>\n    </pluginRepository>\n  </pluginRepositories>\n</project>\n```\n\n```java\npackage scheduledrepro;\n\nimport org.springframework.beans.factory.annotation.*;\nimport org.springframework.boot.*;\nimport org.springframework.boot.autoconfigure.*;\nimport org.springframework.scheduling.annotation.*;\nimport org.springframework.scheduling.config.*;\nimport org.springframework.scheduling.concurrent.*;\nimport org.springframework.context.annotation.*;\nimport org.springframework.boot.context.event.*;\nimport org.springframework.context.event.*;\nimport org.springframework.util.*;\nimport java.lang.*;\nimport java.lang.reflect.*;\nimport java.util.*;\nimport org.slf4j.*;\n\n@EnableScheduling\n@SpringBootApplication\npublic class ScheduledReproApplication implements SchedulingConfigurer {\n private static final Logger LOGGER = LoggerFactory.getLogger(ScheduledReproApplication.class);\n\n private ScheduledTaskRegistrar taskRegistrar;\n\n @Override\n public void configureTasks(ScheduledTaskRegistrar taskRegistrar) {\n  this.taskRegistrar = taskRegistrar;\n  taskRegistrar.setScheduler(threadPoolTaskScheduler());\n }\n\n @Bean\n public ThreadPoolTaskScheduler threadPoolTaskScheduler() {\n  return new ThreadPoolTaskScheduler();\n }\n\n @org.springframework.context.event.EventListener\n public void applicationReadyEvent(ApplicationReadyEvent applicationReadyEvent) throws Exception {\n  Field field = ReflectionUtils.findField(ScheduledTaskRegistrar.class, ""scheduledTasks""); // Spring 4.3.0.RC2\n  if (field == null) {\n   field = ReflectionUtils.findField(ScheduledTaskRegistrar.class, ""scheduledFutures""); // Spring 4.3.0.RC1\n  }\n  field.setAccessible(true);\n  Set < ? > scheduledTasks = (Set < ? > ) field.get(taskRegistrar);\n  LOGGER.info(""{} scheduled found"", scheduledTasks.size());\n }\n\n @Scheduled(cron = ""* * * * * *"")\n public void scheduled() {\n  LOGGER.info(""Scheduled"");\n }\n\n public static void main(String[] args) throws Exception {\n  SpringApplication.run(ScheduledReproApplication.class, args);\n }\n}\n```\n\n---\n\n**Affects:** 4.3 RC2\n\n**Issue Links:**\n- #16830 ScheduledAnnotationBeanPostProcessor should unregister tasks on destruction of individual beans\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3576ff051cf13ccc97d8b0fea8d961d204c15f0d\n']",['closed'],[4],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIndeed, as of 4.3 RC2, `ScheduledAnnotationBeanPostProcessor` tracks its scheduled tasks internally, with `ScheduledTaskRegistrar.destroy()` not affecting those anymore. However, tasks should still get destroyed on shutdown through `ScheduledAnnotationBeanPostProcessor`'s destruction callbacks. So are your beans not getting destroyed at all, or are you simply not seeing the expected effect on `ScheduledTaskRegistrar.destroy()` now (which is by design)?\n"", '**[Romain Moreau](https://jira.spring.io/secure/ViewProfile.jspa?name=romainmoreau)** commented\n\nI looked at ScheduledAnnotationBeanPostProcessor and any Set that is a value of the scheduledTasks map will only contain one task associated to the last `@Scheduled` annotated method of a bean because when there is a previous Set already created, it is always overwritten on [line 400](https://github.com/spring-projects/spring-framework/blob/v4.3.0.RC2/spring-context/src/main/java/org/springframework/scheduling/annotation/ScheduledAnnotationBeanPostProcessor.java#L400).\n\nFor instance, given the following class, Spring 4.3.RC2 will only cancel the task associated to the scheduled3 method, the tasks associated to the scheduled1 and the scheduled2 methods won\'t be cancelled.\n\n```java\n@Component\npublic class Scheduler {\n\tprivate static final Logger LOGGER = LoggerFactory.getLogger(Scheduler.class);\n\t\n\t@Scheduled(cron = ""*/30 * * * * *"")\n\tpublic void scheduled1() {\n\t\tLOGGER.info(""1"");\n\t}\n\n\t@Scheduled(cron = ""0 0 0 * * *"")\n\tpublic void scheduled2() {\n\t\tLOGGER.info(""2"");\n\t}\n\n\t@Scheduled(cron = ""15 * * * * *"")\n\tpublic void scheduled3() {\n\t\tLOGGER.info(""3"");\n\t}\n}\n```\n\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch! Addressed in master now; please give the upcoming `4.3.0.BUILD-SNAPSHOT` a try if you have the chance...\n', '**[Romain Moreau](https://jira.spring.io/secure/ViewProfile.jspa?name=romainmoreau)** commented\n\nI tried the latest SNAPSHOT build with your changes and it works for me, thanks!\n']"
358555929d4ff7d33dc1a5895a324e550cfa993e,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java,Add_Condition,"- * Copyright 2002-2024 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-		return expressions.stream()
-				.filter(e -> e.getValue() != null && !e.isNegated())
-				.count();
+		long count = 0;
+		for (ParamExpression e : expressions) {
+			if (e.getValue() != null && !e.isNegated()) {
+				count++;
+			}
+		}
+		return count;",10,"condition, iteration","Revert ""Merge pull request #32088 from Ryan-Dia""","This reverts commit 484aee069e7edaf0cf904d0135ab10b6b8162e70, reversing
changes made to 6bd7f0231dcc47e8099000dea301157788fd5b15.

See gh-32088
",,32088,1,['Use count in ParamsRequestCondition#getValueMatchCount'],"['\r\nThe `getValueMatchCount` method was refactored to use a `Stream` instead of a `for-each loop`, eliminating the need for the unnecessary local variable `count`. This change was made to reduce the risk of accidental modifications during future maintenance, as the implementation is possible without using a local variable. Additionally, the refactoring was done for enhanced stability and maintainability, especially since there was no need to interrupt the loop under specific conditions.\r\n\r\n\r\n\r\n- [x]  The test code was executed and passed successfully.']",['closed'],[3],"['@Ryan-Dia congratulations for making your first contribution to Spring Framework.', ""@Ryan-Dia the team has discussed this change today and we've decided to revert it. I had missed that the method you've changed is in a hot code path and we explicitly avoid using the Stream API in such places. "", 'Thank you for reviewing the changes I proposed. I understand the decision to revert them, recognizing that the modified method is in a hot code path. I appreciate the feedback and will ensure my future contributions are more closely aligned with these best practices\r\n\r\n\r\n']"
35bd00beaf25943521b5650ef6e004291b19eff7,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/init/ScriptUtils.java,Condition_Change,"-		char[] content = script.toCharArray();
-			char c = content[i];
+			char c = script.charAt(i);
-		char[] content = script.toCharArray();
-			if (content[i] == '\'') {
+			if (script.charAt(i) == '\'') {",6,condition,Remove String#toCharArray from ScriptUtils,"ScriptUtils contains two calls to String#toCharArray for the sole
purpose to iterating over all chars in a String. Not only is this
unnecessary and can be replaced with String#charAt it also causes
additional allocator and heap pressure because String#toCharArray
rather than returning the backing array (which is gone in Java 9)
creates a copy.

This commit contains the following changes:

 - remove String#toCharArray from ScriptUtils and replace with
   String#charAt

Issue: SPR-15075
",,19641,1,['Remove String#toCharArray from ScriptUtils [SPR-15075]'],"['**[Philippe Marschall](https://jira.spring.io/secure/ViewProfile.jspa?name=marschall)** opened **[SPR-15075](https://jira.spring.io/browse/SPR-15075?redirect=false)** and commented\n\nScriptUtils contains two calls to String#toCharArray for the sole purpose to iterating over all chars in a String. Not only is this unnecessary and can be replaced with String#charAt it also causes additional allocator and heap pressure because String#toCharArray rather than returning the backing array (which is gone in Java 9) creates a copy.\n\n\n---\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1280, and commits https://github.com/spring-projects/spring-framework/commit/d912f77a31e34156d55c149d8b322ab274269cd6, https://github.com/spring-projects/spring-framework/commit/35bd00beaf25943521b5650ef6e004291b19eff7, https://github.com/spring-projects/spring-framework/commit/131d2c2051f7bf9f54d6a9cb89da79cdd67fa3a6\n']",['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nLet's backport this to 4.3.6 as well.\n"", '**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nPR merged and backported to `4.3.x`. Thanks!\n']"
37c04bd9c8d7a1269d1088af935a5571cb6887bc,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java,Condition_Change,"-		Parameter[] parameters = this.method.getParameters();
-		if (parameters.length != 1) {
+		int count = this.method.getParameterTypes().length;
+		if (count != 1) {",4,condition,Fix usage of Java8 API,,,,0,N/A,N/A,N/A,N/A,N/A
37f9c8675804d4282bed9d2d1fb9da9761aee86a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java,Condition_Change,"-		if (reactiveType == null) {
+		if (clazz == null) {",2,condition,Fix failing tests due to last commit,,,,0,N/A,N/A,N/A,N/A,N/A
3809d885b6e5825368705d00a3d63f0ab7cd0128,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/ContentDisposition.java,Add_Condition,"-			} else {
+			}
+			else {",3,condition,Fix Checkstyle violation,,,,0,N/A,N/A,N/A,N/A,N/A
38525ceff609e4ae5c3d1c06a35c0e96e7da748d,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java,Condition_Change,"-					if (logger.isWarnEnabled()) {
+					if (logger.isInfoEnabled()) {",2,condition,Fix log level guard in DatabaseStartupValidator.afterPropertiesSet(),,,,0,N/A,N/A,N/A,N/A,N/A
38dcd179d5c2ad7630310cba292e80471b000d5f,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/SimpleEvaluationContext.java,Add_Condition,"- * of essential SpEL features and configuration options.
+ * of essential SpEL features and customization options, targeting simple
+ * condition evaluation and in particular data binding scenarios.
- * <p>When creating {@code SimpleEvaluationContext} you need to choose the level
- * of support you need to deal with properties and methods in SpEL expressions:
+ * <p>When creating a {@code SimpleEvaluationContext} you need to choose the
+ * level of support that you need for property access in SpEL expressions:
- * <li>Custom {@code PropertyAccessor} only (no reflection)</li>
+ * <li>A custom {@code PropertyAccessor} (typically not reflection-based),
+ * potentially combined with a {@link DataBindingPropertyAccessor}</li>
- * <p>For more flexibility, consider {@link StandardEvaluationContext} instead.
+ * <p>For more flexibility, in particular for internal configuration
+ * scenarios, consider using {@link StandardEvaluationContext} instead.
+ * @see #forPropertyAccessors
-	 * Create a {@code SimpleEvaluationContext} for the specified
-	 * {@link PropertyAccessor} delegates.
-	 * @see ReflectivePropertyAccessor
-	 * @see DataBindingPropertyAccessor
+	 * Create a {@code SimpleEvaluationContext} for the specified {@link PropertyAccessor}
+	 * delegates: typically a custom {@code PropertyAccessor} specific to a use case
+	 * (e.g. attribute resolution in a custom data structure), potentially combined with
+	 * a {@link DataBindingPropertyAccessor} if property dereferences are needed as well.
+	 * @see DataBindingPropertyAccessor#forReadOnlyAccess()
+	 * @see DataBindingPropertyAccessor#forReadWriteAccess()
+		for (PropertyAccessor accessor : accessors) {
+			if (accessor.getClass() == ReflectivePropertyAccessor.class) {
+				throw new IllegalArgumentException(""SimpleEvaluationContext is not designed for use with a plain "" +
+						""ReflectivePropertyAccessor. Consider using DataBindingPropertyAccessor or a custom subclass."");
+			}
+		}
+	 * @see #forPropertyAccessors
-	 * @see DataBindingPropertyAccessor#forReadOnlyAccess()
+	 * @see DataBindingPropertyAccessor#forReadWriteAccess()
+	 * @see #forPropertyAccessors
-		 * {@link org.springframework.core.convert.support.DefaultConversionService}
-		 * is used.
+		 * {@link org.springframework.core.convert.support.DefaultConversionService} is used.
-		 * {@link org.springframework.core.convert.support.DefaultConversionService}
-		 * is used.
+		 * {@link org.springframework.core.convert.support.DefaultConversionService} is used.",6,"condition, iteration",Guidance of which PropertyAccessors to use with SimpleEvaluationContext,"Issue: SPR-16588
",,21130,1,['Support for SimpleEvaluationContext in SpEL [SPR-16588]'],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** opened **[SPR-16588](https://jira.spring.io/browse/SPR-16588?redirect=false)** and commented\n\n`StandardEvaluationContext` provides more options than are actually required for many common uses cases (e.g. data binding expressions, property based filters, etc) where the goal is to provide a little extra flexibility but not necessarily expose the full extent of the SpEL language. Arguably there should be a more basic `EvaluationContext` that meaningfully restricts the SpEL language and the set of relevant configuration options to what is relevant for those scenarios, optimizing guidance and SpEL resolution performance for the particular scenario.\n\n---\n\n**Affects:** 4.3.14, 5.0.4\n\n**Issue Links:**\n- [DATACMNS-1282](https://jira.spring.io/browse/DATACMNS-1282) Use SimpleEvaluationContext in MapDataBinder (_**""is depended on by""**_)\n- #21481 Performance degradation in SPEL expression evaluation\n- [SWF-1722](https://jira.spring.io/browse/SWF-1722) Use SimpleEvaluationContext in AbstractMvcView\n- #21244 Incomplete backport of DefaultSubscriptionRegistry changes for SPR-16588\n\n**Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)\n']",['closed'],[1],['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nReopened for considering the new `DataBindingPropertyAccessor` as well as a builder API.\n']
3910350b0a21b3f24750b26d22ce158b732b028b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/ClassReader.java,Add_Condition,"+        // SPRING PATCH: leniently handle offset mismatch
+        if (offset >= labels.length) {
+            return new Label();
+        }
+        // END OF PATCH",3,condition,ASM ClassReader leniently handles label offset mismatch,"Issue: SPR-14089
",,18661,1,['Type annotations cause ArrayIndexOutOfBoundsException in ASM ClassReader [SPR-14089]'],"['**[Tom van den Berge](https://jira.spring.io/secure/ViewProfile.jspa?name=tomvandenberge)** opened **[SPR-14089](https://jira.spring.io/browse/SPR-14089?redirect=false)** and commented\n\nI\'m getting an exception when starting up my Spring Boot application:\n\n```java\njava.lang.ArrayIndexOutOfBoundsException: 193\n\tat org.springframework.asm.ClassReader.readLabel(ClassReader.java:2185)\n\tat org.springframework.asm.ClassReader.readTypeAnnotations(ClassReader.java:1614)\n\t...\n```\n\nIt seems that when my classes are inspected for annotations, ClassReader (Spring 4.2.5) chokes on one of my classes containing Java-8 type annotations. This is extremely unfortunate, because it means that I can\'t use Spring annotations in combination with type annotations.\n\nI\'ve attached a very small (maven) project that reproduces the problem. All you need to do is run ""mvn test"". The included unit test attempts to read the problematic class file using org.springframework.asm.ClassReader, and gives the same exception as above.\n\nThe class that can\'t be read is\n\n```java\npublic class Problem implements Interface<String> {\n\tpublic void serialize(String request) {\n\t\tMap<String, @Nullable Object> values = new HashMap<>();\n\t\tvalues.clear();\n\t}\n}\n```\n\nThe `@Nullable` type annotation is from org.eclipse.jdt.annotation 2.0.0. I\'ve included the source code in the attached project.\n\nAnd the interface:\n\n```java\npublic interface Interface<T> {\n\tvoid serialize(T request);\n}\n```\n\nWithout the interface, the problem doesn\'t occur. Also the type parameter is essential to reproduce the problem.\nWhat is also surprising, is that when the class is not compiled by maven (javac), but by Eclipse, the problem does not occur.\n\nIt would be great to know if there is a workaround for this problem, e.g. compiler settings that can be included in the pom file.\n\n---\n\n**Affects:** 4.2.5\n\n**Attachments:**\n- [project.tar](https://jira.spring.io/secure/attachment/23355/project.tar) (_8.50 kB_)\n\n**Issue Links:**\n- #21999 Type annotations and generic types causing ArrayIndexOutOfBoundsException\n\n']",['closed'],[4],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nTechnically, this is an issue in ASM which we're forking there, currently at ASM 5.0.4 level. As of Spring Framework 4.3, this is based on ASM 5.1... However, your issue doesn't seem to be addressed there either yet, and I'm not aware of a workaround either.\n\nSo we can certainly address this in a custom fashion within our ASM fork, through a defensive catch block around type annotation parsing (and possibly similar metadata that Spring does not actually need for its component introspection, which is the only purpose of our repackaged ASM ClassReader). We'll do this for 4.3 RC1 as well as 4.2.6.\n\nHowever, please also report this issue to the ASM project itself at the ObjectWeb tracker: http://forge.ow2.org/tracker/?group_id=23\n"", '**[Tom van den Berge](https://jira.spring.io/secure/ViewProfile.jspa?name=tomvandenberge)** commented\n\nGreat! I just filed the bug there, too:\n\nhttp://forge.ow2.org/tracker/index.php?func=detail&aid=317615&group_id=23&atid=100023\n\nI was able to reproduce the bug against ASM 5.0.4 and ASM 5.1 directly as well.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe're leniently handling any label offset mismatch now. Please give it a try against the upcoming `4.3.0.BUILD-SNAPSHOT`; to be backported to 4.2.6 in a bit.\n\nOnce ASM published an official fix for the actual cause of the mismatch, we'll roll it in as well.\n"", '**[Tom van den Berge](https://jira.spring.io/secure/ViewProfile.jspa?name=tomvandenberge)** commented\n\nIt works fine in 4.3.0.BUILD-SNAPSHOT.\n\nThanks a lot for the incredibly fast fix!\n']"
39de64bafc234a3db9210f05b38174e878a69489,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java,Condition_Change,"-				if (logger.isDebugEnabled()) {
-					logger.debug(""Found explicit default unit with name '"" + defaultName + ""' in persistence.xml - "" +
-							""overriding local default unit settings ('packagesToScan'/'mappingResources')"");
+				if (logger.isWarnEnabled()) {
+					logger.warn(""Found explicit default persistence unit with name '"" + defaultName + ""' in persistence.xml - "" +
+							""overriding local default persistence unit settings ('packagesToScan'/'mappingResources')"");",6,condition,Log at WARN level in case of contradicting PersistenceUnitManager setup,"Closes gh-23257
",,23257,1,['Log at WARN level in case of contradicting PersistenceUnitManager setup'],"[""If users configure a `LocalContainerEntityManagerFactoryBean` and accidentally set both a persistence unit name *and* packages to scan, the latter are ignored but the message pointing to the invalidity of this setup is only logged at debug level. The observable misbehavior is that apparently the entity scanning silently does not work.\r\n\r\nHere's an [example StackOverflow question](https://stackoverflow.com/questions/26583015/no-managedtype-was-found-for-the-key-class).""]",['closed'],[0],[]
3b1d46b3bac74802d264cd57c4a7e685f377c91e,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/BodyExtractors.java,Condition_Change,"+	private static final ResolvableType VOID_TYPE = ResolvableType.forClass(Void.class);
-		if (elementType.equals(ResolvableType.forClass(Void.class))) {
+		if (VOID_TYPE.equals(elementType)) {",3,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
3b3798977408c25ec38ef1f7fe65bafc3712f7d9,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/SortedProperties.java,Condition_Change,"-			if (!this.omitComments || !line.startsWith(""#"")) {
+			if (!(this.omitComments && line.startsWith(""#""))) {
-			if (!this.omitComments || !line.startsWith(""#"")) {
+			if (!(this.omitComments && line.startsWith(""#""))) {",4,condition,Apply De Morgan's law for greater clarity of purpose,,,,0,N/A,N/A,N/A,N/A,N/A
3baacedfd9c8d908ac95be00ee745d938033cd67,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,Condition_Change,"-public final class CoroutinesUtils {
-
-	private CoroutinesUtils() {
-	}
+public abstract class CoroutinesUtils {
-		if (classifier.equals(JvmClassMappingKt.getKotlinClass(Flow.class))) {
+		if (classifier != null && classifier.equals(JvmClassMappingKt.getKotlinClass(Flow.class))) {",7,condition,Alignment with other abstract utils classes,,,,0,N/A,N/A,N/A,N/A,N/A
3bc1121b9d6f73f601776a20e6ec5b0e1ea0f4b2,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java,Condition_Change,"-			if (!this.isStompConnected) {
+			if (!this.isStompConnected || conn == null) {",2,condition,Check both connection and connected flag,"Issue: SPR-14703
",,19268,1,['NPE during websocket disconnect [SPR-14703]'],"['**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-14703](https://jira.spring.io/browse/SPR-14703?redirect=false)** and commented\n\nThis is the exception on server\n\n```\n\nException in thread ""clientInboundChannel-97"" org.springframework.messaging.MessageDeliveryException: Failed to handle GenericMessage [payload=byte[0], headers={simpMessageType=DISCONNECT, stompCommand=DISCONNECT, simpSessionAttributes={org.springframework.messaging.simp.SimpAttributes.COMPLETED=true}, simpSessionId=e4fb909754d849a08526503c2afa7584}] to org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask@329d23a5 in StompBrokerRelay[127.0.0.1:61613]; nested exception is java.lang.NullPointerException\n\tat org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:144)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: java.lang.NullPointerException\n\tat org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler$StompConnectionHandler.forward(StompBrokerRelayMessageHandler.java:783)\n\tat org.springframework.messaging.simp.stomp.StompBrokerRelayMessageHandler.handleMessageInternal(StompBrokerRelayMessageHandler.java:511)\n\tat org.springframework.messaging.simp.broker.AbstractBrokerMessageHandler.handleMessage(AbstractBrokerMessageHandler.java:238)\n\tat org.springframework.messaging.support.ExecutorSubscribableChannel$SendTask.run(ExecutorSubscribableChannel.java:135)\n\t... 3 more\n```\n\nHere is the client side code:\n\n```java\n    void setup() throws ExecutionException, InterruptedException\n    {\n\n        JettyWebSocketClient webSocketClient = new JettyWebSocketClient();\n        List<Transport> transports = new ArrayList<Transport>(1);\n        transports.add(new WebSocketTransport(webSocketClient));\n\n        SockJsClient sockJsClient = new SockJsClient(transports);\n        sockJsClient.setMessageCodec(new StringMessageCodec());\n\n        stompClient = new WebSocketStompClient(sockJsClient);\n        stompClient.setMessageConverter(new StringMessageConverter());\n        stompClient.start();\n\n        sessionHandler = new MyStompSessionHandler();\n        stompClient.connect(WS_URL, sessionHandler);\n    }\n\n    void stop()\n    {\n        stompSession.disconnect();\n        stompClient.stop();\n    }\n```\n\nAs you can see the client closes the connection gracefully.\nIt first disconnects the session and then calls stop() on the stompClient.\n\nDoing so should not result in an exception on the server.\n\n---\n\n**Affects:** 4.2.6\n\n**Issue Links:**\n- #19281 exception during websocket server shutdown\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3bc1121b9d6f73f601776a20e6ec5b0e1ea0f4b2, https://github.com/spring-projects/spring-framework/commit/07d5f8b12300fe8559a034031143a1e598ace059, https://github.com/spring-projects/spring-framework/commit/114b2b63b1bf04a2d8743203578797387cd1527f\n\n**Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)\n']",['closed'],[2],"[""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nLine number based on 4.2.6 should [match to here](https://github.com/spring-projects/spring-framework/blob/74c025052541e70d61d3569a59f80d612fb08272/spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java#L783).\n\nMost likely the DISCONNECT frame and the closing of the websocket connection are competing with each other on the server-side. There is actually a way to wait for the DISONNECT to complete through a receipt header before shutting down completely. That said we should be more defensive around this scenario to avoid the NPE. I'll see if I can reproduce it easily. Either way I can add some checks.\n"", '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis should now be fixed in snapshots of all 3 target versions.\n']"
3d57425dcb67bc9f403a412555afeb6ba962ff9f,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/SimpleErrors.java,Add_Condition,"+		FieldError fieldError = getFieldError(field);
+		if (fieldError != null) {
+			return fieldError.getRejectedValue();
+		}
+
+
+",7,condition,Return rejected value from getFieldValue in case of error,"See gh-19877
",,19877,1,['Increase reusability of `Validator` [SPR-15314]'],"[""**[Daniel Gulyas](https://jira.spring.io/secure/ViewProfile.jspa?name=danigu)** opened **[SPR-15314](https://jira.spring.io/browse/SPR-15314?redirect=false)** and commented\n\n### Quick summary\n\nHi!\n\nIt would be really cool if the Validator implementations could be reused at the Service level hassle-free.\n\nIt would be cool because:\n* It's a common scenario that there's a second request source using the same dto (think webmvc / rest and mq), adding the second source involves extra work if it doesn't provide the binding in an other way, without using implementations of the Errors interface\n* Increases code reuse, since we use the same Validator on both Service-level and Controller-level\n* Would promote validation at the service-level a bit\n\nExample scenario when that happens:\n1. There's a web-mvc project, `controller <-dto-> service`, at the controller-side the dto is validated with the Validator\n2. There's a business need to implement a secondary source of requests (let's say an mq)\n\nNow there's a possibility to reuse the Validator created for the controller at the service level, but for me it seems to involves quite a hassle, it would be nice to make that convenient.\n\n### Proposal\n\n* Create an interface which implements the simplified Errors interface\n  * Can be instantiated with the target object only\n  * Doesn't necessary have to store all the rejected properties, tracking if there was any errors might be enough\n* Create an abstract class which implements Validator\n  * Boolean validate(Object target) is implemented here\n\nThe namings for me seem to be a bit weak, they could handle suggestions I'm pretty sure.\n\nFor existing Validator implementations there's only need to extend this abstract class and it'll turn into a validator which is convenient to use at the service level, please see the attached java files, this might be a bit invasive although.\n\n### Follow-up\n\nThis is just an idea and i'm kinda new to Spring and to Java in general so the proposal will probably include foolish design mistakes, i looked it up and so far i haven't seen anything which would make reusing of these easy, please point it out if there's already some.\n\nIf that's cool to do and there's a consensus i could make a pr for this in the coming days.\n\nLet me know what you think!\n\n\n---\n\n**Attachments:**\n- [ExampleValidator.java](https://jira.spring.io/secure/attachment/23795/ExampleValidator.java) (_553 bytes_)\n- [ServiceLevelValidator.java](https://jira.spring.io/secure/attachment/23794/ServiceLevelValidator.java) (_350 bytes_)\n- [SimplifiedErrors.java](https://jira.spring.io/secure/attachment/23793/SimplifiedErrors.java) (_488 bytes_)\n""]",['closed'],[2],"[""We are considering a default method on the `Validator` interface for such a purpose in 6.1, for simplified assertion-style invocations. We are not sure whether to reduce this to a `boolean` return value or rather throw an `IllegalArgumentException` with a rich message, but either way, we're going to make it easier to invoke a `Validator` without an `Errors` instance having to be manually built/provided."", ""After a bit of back and forth, I'm introducing a `Validator.validateObject(Object)` method with an `Errors` return value now which can easily be used for a `Validator.validateObject(Object).hasErrors()` check but also with a new failOnError method on the `Errors` interface: `Validator.validateObject(Object).failOnError(IllegalStateException::new))`. Underneath the covers, this is using a new `SimpleErrors` implementation which tracks registered errors in a lean fashion and flexibly accesses field values via getter methods or raw field access (while not providing any binding support).""]"
3dd817585b6258fe51d3279262234dc41f34009b,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/jmx/support/MBeanRegistrationSupport.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
+import java.util.Collections;
-	protected final Set<ObjectName> registeredBeans = new LinkedHashSet<ObjectName>();
+	private final Set<ObjectName> registeredBeans = Collections.synchronizedSet(new LinkedHashSet<ObjectName>());
-		for (ObjectName objectName : this.registeredBeans) {
+		for (ObjectName objectName : new LinkedHashSet<ObjectName>(this.registeredBeans)) {
-		this.registeredBeans.clear();
+		this.registeredBeans.remove(objectName);",7,iteration,MBeanExporter does not log warnings for manually unregistered MBeans,"Issue: SPR-9451
",,14086,1,['MBeanExporter#destroy logs warnings about explicitly unregistered mbeans [SPR-9451]'],"['**[Andreas Hubold](https://jira.spring.io/secure/ViewProfile.jspa?name=ahubold)** opened **[SPR-9451](https://jira.spring.io/browse/SPR-9451?redirect=false)** and commented\n\nMethod #destroy of org.springframework.jmx.export.MBeanExporter unregisters all beans that have been registered before. It however also tries to unregister beans that have already been unregistered via org.springframework.jmx.export.MBeanExporter#unregisterManagedResource. The MBeanExporter logs a warning for each such bean:\n\n```\nWARN  o.s.jmx.export.MBeanExporter - Could not unregister MBean [...] as said MBean is not registered (perhaps already unregistered by an external process)\n```\n\nThe bean was not unregistered by an external process but by the MBeanExporter itself when #unregisterManagedResource was called.\n\nPlease do not log this as warning. Administrators get nervous and keep asking what this message means.\n\n---\n\n**Affects:** 3.1.1\n\n**Issue Links:**\n- #15585 MBeanExporter/MBeanRegistrationSupport leaks ObjectNames in registeredBeans\n\n**Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)\n\n10 votes, 3 watchers\n']",['closed'],[0],[]
40822746306f5d0e5d553504275046ec4906309b,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/SQLStateSQLExceptionTranslator.java,Add_Condition,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
+import org.springframework.dao.QueryTimeoutException;
+		// First, the getSQLState check...
+
+		// For MySQL: exception class name indicating a timeout?
+		// (since MySQL doesn't throw the JDBC 4 SQLTimeoutException)
+		if (ex.getClass().getName().contains(""Timeout"")) {
+			return new QueryTimeoutException(buildMessage(task, sql, ex), ex);
+		}
+
+		// Couldn't resolve anything proper - resort to UncategorizedSQLException.",6,condition,SQLStateSQLExceptionTranslator checks exception class name for timeout indication before resorting to UncategorizedSQLException,"Issue: SPR-11959
",,16575,1,['SQLExceptionTranslators do not reliably translate QueryTimeoutException [SPR-11959]'],"['**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** opened **[SPR-11959](https://jira.spring.io/browse/SPR-11959?redirect=false)** and commented\n\nWith SQLErrorCodeSQLExceptionTranslator, my code can catch both DuplicateKeyException and DataIntegrityViolationException. This helps to distinguish between a FK constraint violation and a duplicate key, directly and without having to dig more onto the database to find out.\n\nI had to change my use of JdbcTemplate to force SQLExceptionSubclassTranslator, in order to gracefully handle query timeouts. Unfortunately, this had the effect of rendering all my catches of DuplicateKeyException unreachable.\n\nSo, by default and without coding anything, as a user of Spring JDBC wrappers I\'m stuck between a rock and a hard place.\n\nI guess the workaround is to make a custom SQLExceptionTranslator, but this use-case is not so strange and it would be great if Spring could come with a ""smart"" SQL exception translator that uses whatever it needs to provide the most accurate exception possible.\n\nI\'m not sure now this should be reported a ""bug"" or as something else... I initially considered SQLErrorCodeSQLExceptionTranslator ""buggy"" because it is not translating exceptions onto  DuplicateKeyException, but I can see in this case it\'s not straightforward to do it right for everyone.\n\n---\n\n**Affects:** 4.0.5\n\n**Issue Links:**\n- #14012 java.sql.SQLTimeoutException not translated to org.springframework.dao.QueryTimeoutException\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/40822746306f5d0e5d553504275046ec4906309b\n']",['closed'],[9],"['**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** commented\n\nWorkaround for now:\n\n```\npublic class SmarterSQLExceptionTranslator extends\n\t\tSQLErrorCodeSQLExceptionTranslator {\n\n\t@Override\n\tprotected DataAccessException customTranslate(String task, String sql,\n\t\t\tSQLException sqlEx) {\n\t\tif (sqlEx instanceof SQLTimeoutException) {\n\t\t\treturn new QueryTimeoutException(buildMessage(task, sql, sqlEx),\n\t\t\t\t\tsqlEx);\n\t\t}\n\t\treturn super.customTranslate(task, sql, sqlEx);\n\t}\n}\n```\n\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nBased on your workaround, let's turn this around: SQLErrorCodeSQLExceptionTranslator should be able to handle QueryTimeoutException, even if not indicated by a specific error code.\n\nAs for SQLExceptionSubclassTranslator, that one is intended to be constrained to the JDBC 4.0 exception hierarchy's capabilities. It's also used as the fallback translator within SQLErrorCodeSQLExceptionTranslator, but for some reason it's not kicking in for query timeouts - probably because those end up being misidentified based on some error code match in SQLErrorCodeSQLExceptionTranslator itself?\n\nJuergen\n"", ""**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** commented\n\nFirst of all, an update: for me it's still failing even with workaround, because I'm using MySQL and this issue happens: http://bugs.mysql.com/bug.php?id=73216. In short: MySQL has two MySQLTimeoutException - one jdbc4 and other plain SQLException - and the one being thrown is the one which doesn't inherit from SQLTimeoutException.\n\nDuring my tests I threw manually the right exception (the jdbc4 one), whereas the driver never throws that one (it's there but I think it's never used).\n\nIf the thrown MySQLTimeoutException was the correct one of the two that they have in the driver, SQLErrorCodeSQLExceptionTranslator would probably work OK as it is now, right? delegating to subclass-based.\n\nSo, unless there's another way to detect a timeout other than subclass-approach, and given that SQLExceptionSubclassTranslator is on-spec and OK as it is (it already does as much as it can with subclass strategy), I think this issue may be fixed as a won't fix.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIndeed, SQLErrorCodeSQLExceptionTranslator is supposed to fall back to the subclass-based approach in such a case. The only problem could be that it accidentally detects an known error code in a timeout-related exception and decides to translate it to one of its resource failure exceptions first.\n\nThat said, in your case, it seems that it does fall through to the subclass-based approach but just doesn\'t detect it that way either since it\'s not the expected subclass. So you end up getting an UncategorizedSQLException? Or do you get a more specific but still not timeout-indicating exception thrown?\n\nWe could have a fallback check that detects known keywords such as ""Timeout"" in an exception\'s class name before resorting to an UncategorizedSQLException. I suppose that would actually work for this MySQL case here... In principle, we\'d even be willing to add such a workaround just for MySQL.\n\nJuergen\n', ""**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** commented\n\nIn my case, I get UncategorizedSQLException wrapping the non-jdbc4 MySQLTimeoutException.\n\nI like the idea of having a list of (vendor-specific?) exception names or patterns handling fallbacks. I think I will try that for my workaround actually... I didn't want to catch the specific exception and couple my code to MySQL's driver because of GPL, but I can for sure put the name of the exception in a Set.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI\'m not too keen on turning this into a full-fledged extensible mechanism at this point, since we only have one use case and everything else is known to be covered by the existing (and extensible) error code and SQLState based mechanisms. So from that perspective, all I\'m considering to add is this...\n\n```\n// For MySQL: exception class name indicating a timeout?\n// (since MySQL doesn\'t throw the JDBC 4 SQLTimeoutException)\nif (ex.getClass().getName().contains(""Timeout"")) {\n     return new QueryTimeoutException(buildMessage(task, sql, ex), ex);\n}\n```\n\nat the end of SQLStateSQLExceptionTranslator which is the last-resort fallback in all of our translation chains, right before we end up with an UncategorizedSQLException.\n\nJuergen\n', '**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** commented\n\nIf this is the only case found, maybe that\'s enough :) but the .contains("""") is not very roubst, why not the class name? if it\'s just for MySQL\'s specific case...\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nFair enough, we could check for the specific class name there... It just might be beneficial to cover similar exceptions for other JDBC drivers as well; in some sense, that's actually more robust. We have a few such cases where we detect naming patterns for the purposes of specific exception messages etc, for cases where there are no formal indications. Note that we are checking the **exception class name** here, not the exception message.\n\nSince the specific check above is right before giving up completely (with a bland UncategorizedSQLException), a general check for timeout-related exceptions doesn't seem to hurt. It will even cover plain SQLStateSQLExceptionTranslator use with the standard JDBC 4 SQLTimeoutException, without the SQLExceptionSubclassTranslator involved, adding a timeout capability that otherwise isn't possible based on the pure SQLState arrangement.\n\nJuergen\n"", '**[Francisco Lozano](https://jira.spring.io/secure/ViewProfile.jspa?name=flozano)** commented\n\nThank you as always!\n']"
40bf83c9e585bcca99dc321f071f69f4e7cdffa9,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/metadata/CallMetaDataContext.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-						setFunctionReturnName(paramName);
+						this.actualFunctionReturnName = paramName;
-					else if (paramName != null) {
-						setFunctionReturnName(paramName);
+					else {
+						this.actualFunctionReturnName = param.getName();
-							setFunctionReturnName(returnNameToUse);
+							this.actualFunctionReturnName = returnNameToUse;",8,condition,Restore original 4.x behavior for initialization of function return name,"Closes gh-25707
",,25707,1,['CallMetaDataContext.reconcileParameters overwrites cursor name'],"['\r\n**Affects:** \\SB2\r\norg.springframework:spring-jdbc:5.1.9.RELEASE\r\nExplanation. Existing code is using a named cursor.\r\nWhen the Resultset comes back, it is always empty, even though when I debug through the spring-jdbc I see it getting created with correct results. The issue is with the named cursor.\r\n\r\nExample:\r\n\r\n> this.simpleJdbcCall = new SimpleJdbcCall(jdbcTemplate)\r\n>                 .withSchemaName(""schema"")\r\n>                 .withFunctionName(""functionName"")\r\n>                 .returningResultSet(""myCursorName"", mapperInstance);\r\n\r\nif I name the cursor \'returnValue\' then it works. Searching through the code, I saw that it is over writing \'myCursorName\' with \'returnValue\'. \'returnValue\' seems to be the default name used internally.\r\nIn SimpleJdbcCall:\r\n\r\n> \tpublic <T> T executeFunction(Class<T> returnType, SqlParameterSource args) {\r\n> \t\treturn (T) doExecute(args).get(getScalarOutParameterName());\r\n> \t}\r\n\r\n\'getScalarOutParameterName()\' is returning \'returnValue\' even though I named it as \'.returningResultSet(""myCursorName"",\'\r\n\r\nBut I also traced this to `CallMetaDataContext.reconcileParameters` around line 396:\r\n\r\n> \tparam = declaredParams.get(getFunctionReturnName());\r\n> \tif (param == null && !getOutParameterNames().isEmpty()) {\r\n> \t\tparam = declaredParams.get(getOutParameterNames().get(0).toLowerCase());\r\n> \t}\r\n> \tif (param == null) {\r\n> \t\tthrow new InvalidDataAccessApiUsageException(\r\n> \t\t\t\t""Unable to locate declared parameter for function return value - "" +\r\n> \t\t\t\t"" add an SqlOutParameter with name \'"" + getFunctionReturnName() + ""\'"");\r\n> \t}\r\n> \telse if (paramName != null) {\r\n> \t\tsetFunctionReturnName(paramName);\r\n> \t}\r\n\r\nIn older version it used to have (the last 3 lines):\r\n\r\n> \telse {\r\n> \t\tsetFunctionReturnName(param.getName());\r\n> \t}\r\n\r\nparamName is \'returnValue\', but it should be using what I supplied which is \'param.getName()\'.\r\nThen this would return the correct ruleset: return (T) doExecute(args).get(getScalarOutParameterName());\r\n\r\nPlease advise. Thanks.\r\n']",['closed'],[2],"[""This seems to be an accidental regression introduced by our nullability efforts in 5.0. I'll fix this for 5.2.9, with a backport to 5.1.18 and 5.0.19 at the same time (for release on Sep 15)."", 'Thanks for the quick response.']"
40cd277b7e26e135de71b80bec757b2022641815,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ReloadableResourceBundleMessageSource.java,Condition_Change,"-		long originalTimestamp = -1;
+		long originalTimestamp = -2;
-			if (originalTimestamp < 0 || originalTimestamp > System.currentTimeMillis() - this.cacheMillis) {
+			if (originalTimestamp == -1 || originalTimestamp > System.currentTimeMillis() - this.cacheMillis) {",4,condition,ReloadableResourceBundleMessageSource prevents accidental exposure of incomplete holder,"Issue: SPR-12177
",,16791,1,['Race condition in ReloadableResourceBundleMessageSource since 4.1.0 [SPR-12177]'],"['**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** opened **[SPR-12177](https://jira.spring.io/browse/SPR-12177?redirect=false)** and commented\n\nThis bug is not in 4.1.0.RC2 but in 4.1.0.RELEASE\n\nI think it is a blocker as this class is at the core of spring, widely used and produces unexpected results which crashes the application completely:\n\nWe are using ReloadableResourceBundleMessageSource with cacheMillis = -1 in production. We use this class to have a reloadable instance in development mode.\n\nThere is a race condition when getMergedProperties(Locale locale) is called.\n\nIt results in an empty but cached propertiesHolder. Imagine two threads calling getMergedProperties(Locale locale). The first thread is running into getProperties(filename) Line 354. it then runs into line 464:\n\npropHolder = new PropertiesHolder();\nPropertiesHolder existingHolder = this.cachedProperties.putIfAbsent(filename, propHolder);\n\nso thread 1 is setting an empty PropertiesHolder into the cache. Imagine thread 1 is waiting here for a long time and a second thread is running into this method. It will find the empty propHolder in line 453 and it get returned in line 460. Now thread 2 goes on with this empty propHolder but it does not put it into mergedProperties (line  355).\n\nBut in line 360 the second thread is putting his mergedholder into the cache. Now thread 1 continues but will not update the cache as an entry already exists. Subsequent threads  will get the mergedHolder from the cache which is partially empty (depending on how often this race condition occurs).\n\nI was able to reproduce this bug on my development engine with breakpoints. I think you need to fix line 464-465.\n\nThis else thread is only running on start up. A fix would be to add this line after line 464:\n\npropHolder = refreshProperties(filename, propHolder);\n\nI hope I explained it good enough.\n\n---\n\n**Affects:** 4.1 GA\n\n**Issue Links:**\n- #19152 Method getMergedProperties in ReloadableResourceBundleMessageSource does not set fileTimestamp\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/40cd277b7e26e135de71b80bec757b2022641815\n\n0 votes, 5 watchers\n']",['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAs far as my analysis goes, the actual root of the problem is the `originalTimestamp < 0` in line 458 which may prematurely return a half-initialized holder to concurrent callers. Changing this to `originalTimestamp == -1`, i.e. just the case of a pre-cached 'eternal' holder, should do the job... In the case of a yet incomplete holder (-2), we should then skip the early return and proceed to the regular refresh code path that follows below.\n\nThis will be available in the upcoming 4.1.1 snapshot. Try to break it again please, and let me know whether I've been missing something!\n\nJuergen\n"", '**[Janning Vygen](https://jira.spring.io/secure/ViewProfile.jspa?name=janning)** commented\n\nlooks good. Thanks you so much!\n']"
42a4f2896222959d85ba4642542cfe05aff91f2c,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,Condition_Change,"-			for (Annotation annotation : getAnnotations()) {
+			for (Annotation annotation : this.annotations) {
-			for (Annotation annotation : getAnnotations()) {
+			for (Annotation annotation : this.annotations) {",4,iteration,Avoid unnecessary Annotation array cloning in TypeDescriptor,"Closes gh-32476
",,32476,1,['Avoid additional unnecessary `Annotation` array cloning in `TypeDescriptor`'],"['As a follow-up to #32405, we should also avoid cloning the annotation array unnecessarily in `isAnnotationPresent()` and `getAnnotation()`.']",['closed'],[0],[]
42b16591ec9978f9e317035bad998e617e79bb7e,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/SpringPersistenceUnitInfo.java,Add_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
+import org.apache.commons.logging.LogFactory;
-		if (this.loadTimeWeaver == null) {
-			throw new IllegalStateException(""Cannot apply class transformer without LoadTimeWeaver specified"");
+		if (this.loadTimeWeaver != null) {
+			this.loadTimeWeaver.addTransformer(new ClassFileTransformerAdapter(classTransformer));
+		}
+		else {
+			LogFactory.getLog(getClass()).info(""No LoadTimeWeaver setup: ignoring JPA class transformer"");
-		this.loadTimeWeaver.addTransformer(new ClassFileTransformerAdapter(classTransformer));",9,condition,SpringPersistenceUnitInfo leniently ignores transformer if no LoadTimeWeaver is present,"Closes gh-29736
",,29736,1,['Compatibility with Hibernate ORM 6.2'],"[""I've just tried to run a build of Spring Data JPA on [Hibernate 6.2 CR1](https://in.relation.to/2022/12/22/orm-62-cr1/). It apparently [changes a couple of default settings](https://docs.jboss.org/hibernate/orm/6.2/migration-guide/migration-guide.html#enhancement), which now cause `SpringPersistenceUnitInfo.addTransformer(…)` being called, which blows up with an `IllegalStateException` if no `LoadTimeWeaver` is set.\r\n\r\nI am not certain how we want to handle this, but as it looks like the current default bootstrap settings will either have to handle that call more leniently or we will have to change our default settings. Unfortunately, the tickets linked to from the migration guide indicate that the flags are deprecated for removal without replacement.\r\n\r\nThe comments in `EntityManagerFactoryBuilderImpl` seem to indicate that they only assume the call to `….addTransformer(…)` to have an effect in EE environments anyway. I could get this working with a local copy of `SpringPersistenceUnitInfo` tweaked to drop the invocation if no load time weaver was specified instead of throwing the exception. SD JPA builds fine then.""]",['closed'],[1],"[""Following that advice, `SpringPersistenceUnitInfo` just logs a warning in case of no `LoadTimeWeaver` setup now, leniently ignoring the given transformer in such a case.\r\n\r\nIf anything else can be addressed for Hibernate ORM 6.2 RC1 or a follow-up RC, there's still a chance for the 6.0.4 release. Otherwise we'll address any remainders in 6.0.5.""]"
437ffa6067266eafca6fa7c5200b7375618e1970,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,Add_Condition,"+
+		// Detect a LoadTimeWeaver and prepare for weaving, if found in the meantime
+		// (e.g. through an @Bean method registered by ConfigurationClassPostProcessor)
+		if (beanFactory.getTempClassLoader() == null && beanFactory.containsBean(LOAD_TIME_WEAVER_BEAN_NAME)) {
+			beanFactory.addBeanPostProcessor(new LoadTimeWeaverAwareProcessor(beanFactory));
+			beanFactory.setTempClassLoader(new ContextTypeMatchClassLoader(beanFactory.getBeanClassLoader()));
+		}",5,condition,Detect LoadTimeWeaver bean when declared through @Bean method as well,"Issue: SPR-10856
",,15483,1,['Detect LoadTimeWeaver bean when declared through @Bean method as well [SPR-10856]'],"['**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10856](https://jira.spring.io/browse/SPR-10856?redirect=false)** and commented\n\nThis may be a Java-config problem only. I haven\'t tried it with XML config.\n\nI\'m configuring a `LocalContainerEntityManagerFactoryBean`, and I want to enable load time weaving. `@EnableLoadTimeWeaving` works (I see in the log that it found `addTransformer` on the `ClassLoader` and created a load time weaver), but `setLoadTimeWeaver` is never called on the `LocalContainerEntityManagerFactoryBean`.\n\n`LocalContainerEntityManagerFactoryBean` implements `LoadTimeWeaverAware`, so my (possibly incorrect) assumption was that Spring should set the `LoadTimeWeaver` property, but it does not. If my assumption was incorrect, the documentation should be updated to indicate that you must call this method manually. If my assumption was correct, there is a bug here, because Spring is not calling this method.\n\nInstead, I have to do this in my configuration:\n\n```java\n@Configuration\n...\n@EnableLoadTimeWeaving\n...\npublic class RootContextConfiguration\n{\n    ...\n    @Inject LoadTimeWeaver loadTimeWeaver;\n    ...\n\n    @Bean\n    public LocalContainerEntityManagerFactoryBean entityManagerFactoryBean()\n    {\n        ...\n        LocalContainerEntityManagerFactoryBean factory =\n                new LocalContainerEntityManagerFactoryBean();\n        ...\n        factory.setLoadTimeWeaver(this.loadTimeWeaver);\n        ...\n        return factory;\n    }\n    ...\n}\n```\n\nThat code works. The `LoadTimeWeaver` is injected and I successfully add it to my factory, then the JPA provider starts instrumenting my classes. However, without this the `LoadTimeWeaver` is never added to the `LocalContainerEntityManagerFactoryBean` and the JPA provider cannot instrument my classes.\n\n---\n\n**Affects:** 3.2.4, 4.0 M2\n\n**Issue Links:**\n- #15365 LoadTimeWeaving is working with XML config and not with Java Config (_**""is duplicated by""**_)\n- #19498 NPE in LoadTimeWeavingConfiguration: loadTimeWeaver() called too early\n- #18459 Proper load-time weaving support for Hibernate 5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/437ffa6067266eafca6fa7c5200b7375618e1970\n\n9 votes, 14 watchers\n']",['closed'],[6],"[""**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** commented\n\n[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller), are you not going to be able to get this fixed for 4.0.0? That's disappointing. :-(\n"", '**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** commented\n\nAny possibility this gets fixed in 4.0.1 or 4.0.2?\n', ""**[Steve McKay](https://jira.spring.io/secure/ViewProfile.jspa?name=smckay)** commented\n\nI encountered this issue with Spring 4.1.1, and it's caused by the way the ApplicationContext registers LoadTimeWeaverAwareProcessor. LoadTimeWeaver definition is checked for in AbstractApplicationContext.prepareBeanFactory(), which runs **before** BeanFactoryPostProcessors. Because `@Configuration` classes are handled by a BeanFactoryPostProcessor, the LoadTimeWeaver registered by `@EnableLoadTimeWeaving` is added to late too trigger registration of LoadTimeWeaverAwareProcessor.\n\nBecause I'm using Spring Boot, I used a SpringApplicationRunListener to register a LoadTimeWeaver in the contextLoaded() callback. Of course that only works with Spring Boot so anyone not using it will have to find some other workaround. The important thing is to have a LoadTimeWeaver definition available **before** calling ApplicationContext.refresh().\n"", ""**[Michael Simons](https://jira.spring.io/secure/ViewProfile.jspa?name=michael.simons)** commented\n\nHere's a snippet that works with Spring Boot in case anybody lands here:\n\n```java\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.context.event.ApplicationPreparedEvent;\nimport org.springframework.context.ApplicationListener;\nimport org.springframework.context.ConfigurableApplicationContext;\nimport org.springframework.instrument.classloading.InstrumentationLoadTimeWeaver;\n \n@SpringBootApplication\npublic class Application {    \n    public static void main(final String... args) {\n        final SpringApplication springApplication = new SpringApplication(Application.class);\n        springApplication.addListeners(new ApplicationListener<ApplicationPreparedEvent>() {\n            @Override\n            public void onApplicationEvent(final ApplicationPreparedEvent event) {\n                event.getApplicationContext().getBeanFactory().registerSingleton(ConfigurableApplicationContext.LOAD_TIME_WEAVER_BEAN_NAME, new InstrumentationLoadTimeWeaver());\n            }\n        });\n        springApplication.run(args);\n    }\n}\n```\n\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThanks for the pointers! It seems that we need to detect a `LoadTimeWeaver` bean when declared through an `@Bean` method as well, after we registered all `BeanFactoryPostProcessors`. We did not support that at all before but we are doing it in `AbstractApplicationContext` as of 4.3 now.\n\nThat said, it might make sense for Spring Boot to go a step further and have first-class support for `LoadTimeWeaver` setup, registering an externally declared `LoadTimeWeaver` class at the earliest possible point.\n', '**[Andrei Ivanov](https://jira.spring.io/secure/ViewProfile.jspa?name=shadow)** commented\n\nSorry to hijack this issue, but maybe I can draw attention to my related issue too, #18466 :)\n\n']"
43dd813ee64e7c62aeeaf24cdd52230457336d5b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/xml/DomContentHandler.java,Condition_Change,"-		if (node instanceof Document document) {
-			this.document = document;
+		if (node instanceof Document doc) {
+			this.document = doc;",4,condition,Temporary workaround for Checkstyle bug,"Attempting to name a variable in an ""instanceof pattern"" the same as
a field results in a Checkstyle violation similar to the following if
the ""instanceof pattern matching"" is located within a constructor.

Reference to instance variable 'document' needs ""this."". [RequireThis]

See gh-28188
",,28188,1,"['Apply ""instanceof pattern matching"" in spring-core']",[None],['closed'],[4],"[""I'm not convinced this needs to be applied throughout. Especially where variables are used once."", '> Please rebase your changes on `main`.\r\n> \r\n> Also, for checks like `value instanceof Class clazz` you\'ll need to add the generic wildcard like `value instanceof Class<?> clazz`. So please make the appropriate changes. In other words, we don\'t want to have to suppress ""raw types"" warnings in such cases.\r\n\r\nOK , let me update the codes.', 'This has been merged into `main` in bbaf7578b2ca66ec1a4cff114c3e2bc4d7d3b462 and revised in 43dd813ee64e7c62aeeaf24cdd52230457336d5b and 16f65e59b49ebdc7813819c137203fccccf8f4f2.\r\n\r\nThanks! 👍 ', 'It turns out that the Checkstyle issue is a known limitation.\r\n\r\n- https://github.com/checkstyle/checkstyle/issues/10969']"
43e315f10c6021ef46f403f17b473ffd98c8474a,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-				return;
-				if (inValue instanceof DisposableSqlTypeValue) {
-					((DisposableSqlTypeValue) inValue).cleanup();
+				// Unwrap SqlParameterValue first...
+				if (inValue instanceof SqlParameterValue) {
+					inValue = ((SqlParameterValue) inValue).getValue();
-				else if (inValue instanceof SqlValue) {
+				// Check for disposable value types
+				if (inValue instanceof SqlValue) {
+				else if (inValue instanceof DisposableSqlTypeValue) {
+					((DisposableSqlTypeValue) inValue).cleanup();
+				}",10,condition,Unwrap SqlParameterValue for disposable value detection in cleanupParameters,"Closes gh-22972
",,22972,1,['Oracle LOB segments holding TEMP space after executing SP using SimpleJdbcCall with SqlParameterSource'],"[""https://github.com/spring-projects/spring-framework/blob/e0654a5b3dcf55a7840cd29d25c55854a071202c/spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java#L460\r\n\r\nWhen using SimpleJdbcCall with MapSqlParameterSource but without initial parameters declaration - all parameters became as SqlParameterValue.\r\n\r\nBut cleanup method doesn't expect such type of parameters and therefore is not executing freetemporary for LOBs.\r\n""]",['closed'],[0],[]
4453102e852f4693222d103264c9a62b421f3d2a,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java,Remove_Condition,"-			ExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.get(handlerType);
-			if (resolver == null) {
-				resolver = new ExceptionHandlerMethodResolver(handlerType);
-				this.exceptionHandlerCache.put(handlerType, resolver);
-			}
+			ExceptionHandlerMethodResolver resolver = this.exceptionHandlerCache.computeIfAbsent(handlerType, ExceptionHandlerMethodResolver::new);",6,condition,Polish ExceptionHandlerMethodResolver mapping,"See gh-27801
",,27801,1,[' Polish ExceptionHandlerMethodResolver mapping'],['Refactor exception resolver cache get/null/put opration into single call.'],['closed'],[1],['Thanks for making your first contribution to Spring Framework.']
449174c7d4c5925ff54cc4390d33d0d0bd8ad377,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java,Condition_Change,"-				for (int i = 0; i < destroyMethodNames.length; i++) {
-					String destroyMethodName = destroyMethodNames[i];
+				for (String destroyMethodName : destroyMethodNames) {",3,iteration,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
449f704650fa02750a807e7f060515128dc888f3,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
+		if (logger.isDebugEnabled()) {
+			logger.debug(""Resolved classpath location ["" + location + ""] to resources "" + result);
+		}",3,condition,PathMatchingResourcePatternResolver consistently logs retrieval results,"Issue: SPR-13923
",,18495,1,['PathMatchingResourcePatternResolver should provide consistent logging [SPR-13923]'],"['**[Paul](https://jira.spring.io/secure/ViewProfile.jspa?name=pmv)** opened **[SPR-13923](https://jira.spring.io/browse/SPR-13923?redirect=false)** and commented\n\nIf you provide a pattern such as ""classpath:com/some/company/**/*.xml"", and have the logger set to debug, you get nice output with the list of resources Spring finds:\nhttps://github.com/spring-projects/spring-framework/blob/v4.2.4.RELEASE/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java#L424\n\nHowever, if you have a pattern such as ""classpath*:someResource.xml"", you get no output of what Spring found - you have to set a breakpoint.\n\nEither a similar log statement should be added here:\nhttps://github.com/spring-projects/spring-framework/blob/v4.2.4.RELEASE/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java#L311\n\nOr the logging should be moved to somewhere in the parent method that calls each of them: https://github.com/spring-projects/spring-framework/blob/v4.2.4.RELEASE/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java#L268\n\nWe have an issue where different servers are returning elements in different order.  Obviously our code needs to be fixed so order doesn\'t matter, however, the issue would have been easier to track down if the list of resolved artifacts would have been displayed with DEBUG or TRACE logging enabled.\n\n\n---\n\n**Affects:** 4.2.4\n']",['closed'],[1],['**[Paul](https://jira.spring.io/secure/ViewProfile.jspa?name=pmv)** commented\n\nThanks!\n']
44c31a6aad26ce2a4e7225e93e6fb26612f07b2c,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java,Add_Condition,"-						subs.add(sessionId, subsId);
-						this.accessCache.put(cachedDestination, subs.deepCopy());
+						// Subscription id's may also be populated via getSubscriptions()
+						if (!subs.containsKey(sessionId) || !subs.get(sessionId).contains(subsId)) {
+							subs.add(sessionId, subsId);
+							this.accessCache.put(cachedDestination, subs.deepCopy());
+						}",6,condition,Fix duplicate STOMP subscription id issue,"Issue: SPR-15543
",,20102,1,['DefaultSubscriptionRegistry should prevent duplicate subscription id in accessCache [SPR-15543]'],"[""**[Bao Tran](https://jira.spring.io/secure/ViewProfile.jspa?name=tran.bao51093)** opened **[SPR-15543](https://jira.spring.io/browse/SPR-15543?redirect=false)** and commented\n\nIn DefaultSubscriptionRegistry, multiple subscriptions on the same session should have unique subscription id's.\nIn DefaultSubscriptionRegistry.addSubscriptionInternal method, there are calls to:\n\n```java\nthis.subscriptionRegistry.addSubscription(sessionId, subsId, destination, expression);\nthis.destinationCache.updateAfterNewSubscription(destination, sessionId, subsId);\n```\n\n* Assume that registerSubscription is called with a message argument.\n* If findSubscriptions method is called with destination argument after addSubscription and before updateAfterNewSubscription, accessCache will contain duplicate subscriptionId for destination - sessionId key.\n* This will lead to a subscriber receives a message twice due to loop in SimpleBrokerMessageHandler.sendMessageToSubscribers\n\n---\n\n**Affects:** 4.3.8\n\n**Issue Links:**\n- #19848 Cannot receive message sometimes with SimpleBrokerMessageHandler\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1427, and commits https://github.com/spring-projects/spring-framework/commit/4fc41eeeb90f9c5cd01f96ec46a1438ce2fbdc0e, https://github.com/spring-projects/spring-framework/commit/b6e252495a70d716179db1e91397190ac2a0aee9, https://github.com/spring-projects/spring-framework/commit/44c31a6aad26ce2a4e7225e93e6fb26612f07b2c, https://github.com/spring-projects/spring-framework/commit/8deec9569c2741c2fc5a78e375765dfb93586f49\n""]",['closed'],[1],['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThanks for finding this and identifying the fix!\n']
44da77513444f8388397f93d057ad1b6187516d3,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMapping.java,Add_Condition,"+import org.springframework.web.context.request.async.WebAsyncManager;
+import org.springframework.web.context.request.async.WebAsyncUtils;
+			// Consistent with CorsFilter, ignore ASYNC dispatches
+			WebAsyncManager asyncManager = WebAsyncUtils.getAsyncManager(request);
+			if (asyncManager.hasConcurrentResult()) {
+				return true;
+			}
+",7,condition,CorsInterceptor skips async dispatch,"Closes gh-24223
",,24223,1,['Ensure CORS processing does not add Vary header twice on async requests'],"['## spring boot version `2.2.2`\r\n## example \r\n\r\n`WebMvcConfigurer`\r\n```\r\nCorsRegistration corsRegistration = registry.addMapping(""/**"")\r\n                .allowCredentials(true);\r\ncorsRegistration.allowedHeaders(""*"")\r\n                .maxAge(1800L)\r\n                .allowedMethods(HttpMethod.GET.name(),\r\n                        HttpMethod.POST.name(),\r\n                        HttpMethod.PUT.name(),\r\n                        HttpMethod.OPTIONS.name(),\r\n                        HttpMethod.DELETE.name())\r\n                .exposedHeaders(""Content-Length"");\r\n```\r\n`controller`\r\n```\r\n@RequestMapping(""/test)\r\n@RestController\r\npublic class ExampleController {\r\n    @GetMapping\r\n    public CompletableFuture<T> test() {\r\n        // do something\r\n    }\r\n}\r\n```\r\n\r\n`reponse headers`\r\n```\r\nVary | Origin\r\nVary | Access-Control-Request-Method\r\nVary | Access-Control-Request-Headers\r\nVary | Origin\r\nVary | Access-Control-Request-Method\r\nVary | Access-Control-Request-Headers\r\n```\r\n\r\nRef #24222 ']",['closed'],[2],"['@blackstorm Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=24223)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=24223) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@blackstorm Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=24223)!']"
45a629e20a4f184769808d2958b6ca17f9333334,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/adapter/standard/ConvertingEncoderDecoderSupport.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-		if (applicationContext != null && applicationContext instanceof ConfigurableApplicationContext) {
+		if (applicationContext instanceof ConfigurableApplicationContext) {",2,condition,Remove unnecessary check in ConvertingEncoderDecoderSupport,,,,0,N/A,N/A,N/A,N/A,N/A
460947651ae4c58d31386a0a14396c273b287119,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/DefaultPathContainer.java,Condition_Change,"-				String value = input.substring(index + 1);
-				for (String v : StringUtils.commaDelimitedListToStringArray(value)) {
-					name = StringUtils.uriDecode(name, charset);
-					if (StringUtils.hasText(name)) {
+				name = StringUtils.uriDecode(name, charset);
+				if (StringUtils.hasText(name)) {
+					String value = input.substring(index + 1);
+					for (String v : StringUtils.commaDelimitedListToStringArray(value)) {",8,"condition, iteration",Minor refactoring in DefaultPathContainer,"Closes gh-27204
",,27204,1,['DefaultPathContainer#parsePathParamValues should decode and test name once in outer loop'],"['<!--\r\n!!! For Security Vulnerabilities, please go to https://spring.io/security-policy !!!\r\n-->\r\n**Affects:** 5.3.8\r\n\r\n---\r\n<!--\r\nThanks for taking the time to create an issue. Please read the following:\r\n\r\n- Questions should be asked on Stack Overflow.\r\n- For bugs, specify affected versions and explain what you are trying to do.\r\n- For enhancements, provide context and describe the problem.\r\n\r\nIssue or Pull Request? Create only one, not both. GitHub treats them as the same.\r\nIf unsure, start with an issue, and if you submit a pull request later, the\r\nissue will be closed as superseded.\r\n-->\r\nIn method parsePathParamValues, line 164: should  name be decoded and tested once in outer loop?\r\n```\r\nprivate static void parsePathParamValues(String input, Charset charset, MultiValueMap<String, String> output) {\r\n  if (StringUtils.hasText(input)) {\r\n  \tint index = input.indexOf(\'=\');\r\n  \tif (index != -1) {\r\n  \t  String name = input.substring(0, index);\r\n  \t  String value = input.substring(index + 1);\r\n  \t  for (String v : StringUtils.commaDelimitedListToStringArray(value)) {\r\n  \t  \r\n  \t  \t// should `name` be decoded and tested once in outer loop?\r\n  \t  \tname = StringUtils.uriDecode(name, charset);\r\n  \t  \tif (StringUtils.hasText(name)) {\r\n  \t  \t  output.add(name, StringUtils.uriDecode(v, charset));\r\n  \t  \t}\r\n  \t  }\r\n  \t}\r\n  \telse {\r\n  \t  String name = StringUtils.uriDecode(input, charset);\r\n  \t  if (StringUtils.hasText(name)) {\r\n  \t  \toutput.add(input, """");\r\n  \t  }\r\n  \t}\r\n  }\r\n}\r\n```']",['closed'],[0],[]
46b7cd54a154df16d4c93d1e6c2e44bbc8c74399,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/context/support/SpringBeanAutowiringSupport.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-			if (logger.isDebugEnabled()) {
-				logger.debug(""Current WebApplicationContext is not available for processing of "" +
+			if (logger.isWarnEnabled()) {
+				logger.warn(""Current WebApplicationContext is not available for processing of "" +
-						""Make sure this class gets constructed in a Spring web application. Proceeding without injection."");
+						""Make sure this class gets constructed in a Spring web application after the"" +
+						""Spring WebApplicationContext has been initialized. Proceeding without injection."");",7,condition,Log missing web application context at warn level (instead of debug),"Closes gh-26925
",,26925,1,['SpringBeanAutowiringSupport should log at warn level when autowiring fails'],"[""I recently upgraded to a newer wildfly version (20-->23) and wildfly now init's webservices very early, before spring initilization is kicked off, so the autowiring in SpringBeanAutowiringSupport fails.\r\n\r\nObviously, that is not a spring issue, but these issues would be WAY easier to find if the failure to wire was at least a Warn level log statement.  It appears that the logging in the processInjectionBasedOnCurrentContext method is debug, as it is designed to be called from other places than the constructor itself, but I think there should be a warn or error level log of the failure to wire in the constructor, to lead people to this class when their are external factors that cause this autowire to work differently.""]",['closed'],[0],[]
4751769a7c984f9bce6dd095e6c9324c8fce150e,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectiveMethodResolver.java,Condition_Change,"-			Method[] methods = getMethods(type);
-			for (Method method : methods) {
+			for (Method method : getMethods(type)) {
-				Method[] methods = getMethods(ifc);
-				for (Method method : methods) {
+				for (Method method : getMethods(ifc)) {
-			Method[] methods = getMethods(type);
-			for (Method method : methods) {
+			for (Method method : getMethods(type)) {
-	 * static methods sand non-user-declared methods on the {@link Object} base class.
+	 * static methods and non-user-declared methods on the {@link Object} base class.",9,iteration,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
475c4d4425b2170c4a0f19d5bd39b70e752e38a1,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterUtils.java,Condition_Change,"-					while (j < statement.length && '}' != statement[j]) {
+					while (j < statement.length && statement[j] != '}') {
-						if (':' == statement[j] || '{' == statement[j]) {
+						if (statement[j] == ':' || statement[j] == '{') {
-						totalParameterCount = addNamedParameter(parameterList, totalParameterCount, escapes, i, j + 1, parameter);
+						totalParameterCount = addNamedParameter(
+								parameterList, totalParameterCount, escapes, i, j + 1, parameter);
-						totalParameterCount = addNamedParameter(parameterList, totalParameterCount, escapes, i, j, parameter);
+						totalParameterCount = addNamedParameter(
+								parameterList, totalParameterCount, escapes, i, j, parameter);",10,"condition, iteration",Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
47a3a5c97011a4e147db9a4cab3e85c8486fcec7,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpResponse.java,Remove_Condition,"-	// 0 - not subscribed, 1 - subscribed, 2 - cancelled, 3 - cancelled via connector (before subscribe)
+	// 0 - not subscribed, 1 - subscribed, 2 - cancelled via connector (before subscribe)
-					// https://github.com/reactor/reactor-netty/issues/503
-					// FluxReceive rejects multiple subscribers, but not after a cancel().
-					// Subsequent subscribers after cancel() will not be rejected, but will hang instead.
-					// So we need to reject once in cancelled state.
-						throw new IllegalStateException(
-								""The client response body can only be consumed once."");
-					}
-					else if (this.state.get() == 3) {
-				.doOnCancel(() -> this.state.compareAndSet(1, 2))
-		if (mayHaveBody(method) && this.state.compareAndSet(0, 3)) {
+		if (mayHaveBody(method) && this.state.compareAndSet(0, 2)) {",7,condition,Switch to Reactor 2020.0.0 snapshots,"See gh-25373
",,25373,1,['Upgrade to Reactor 2020.0.0-M2'],[''],['closed'],[0],[]
47ff92873bc35345a0e0a743be4939527a27f896,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java,Condition_Change,"-		if (!message.contains(parameter.getExecutable().toGenericString())) {
+		if (message != null && !message.contains(parameter.getExecutable().toGenericString())) {",2,condition,Add null check,,,,0,N/A,N/A,N/A,N/A,N/A
49356b2c0f498ae6580c1ef7d7ac0787629de7c8,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/SimpleIdGenerator.java,Remove_Condition,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
- * A simple {@link IdGenerator} that starts at 1 and increments by 1 with each call.
+ * A simple {@link IdGenerator} that starts at 1, increments up to
+ * {@link Long#MAX_VALUE}, and then rolls over.
-	private final AtomicLong mostSigBits = new AtomicLong(0);
-
-		long leastSigBits = this.leastSigBits.incrementAndGet();
-		if (leastSigBits == 0) {
-			this.mostSigBits.incrementAndGet();
-		}
-		return new UUID(this.mostSigBits.get(), leastSigBits);
+		return new UUID(0, this.leastSigBits.incrementAndGet());",8,condition,SimpleIdGenerator rolls over at Long.MAX_VALUE,"Closes gh-25485
",,25485,1,"['SimpleIdGenerator is not thread safe, neither it is documented to be']","[""I have a small miss-understanding about `SimpleIdGenerator`, that is a fairly trivial class:\r\n\r\n```\r\npublic class SimpleIdGenerator implements IdGenerator {\r\n\r\n\tprivate final AtomicLong mostSigBits = new AtomicLong(0);\r\n\r\n\tprivate final AtomicLong leastSigBits = new AtomicLong(0);\r\n\r\n\r\n\t@Override\r\n\tpublic UUID generateId() {\r\n\t\tlong leastSigBits = this.leastSigBits.incrementAndGet();\r\n\t\tif (leastSigBits == 0) {\r\n\t\t\tthis.mostSigBits.incrementAndGet();\r\n\t\t}\r\n\t\treturn new UUID(this.mostSigBits.get(), leastSigBits);\r\n\t}\r\n\r\n}\r\n```\r\n\r\nThe presence of `AtomicLong` hints into the fact that this is a thread-safe continuous incremented UUID, but it's not the case:\r\n\r\n```\r\nlong leastSigBits = this.leastSigBits.incrementAndGet();\r\nif (leastSigBits == 0) {\r\n```\r\n\r\nFor the sake of the discussion let's suppose that currently `leastSigBits` holds a `-1` (it has been incremented quite a lot, yes). \r\n\r\n\r\n`ThreadA` does `long leastSigBits = this.leastSigBits.incrementAndGet();`, so it puts the value into `0` (`-1 + 1 = 0`); but _before_ it does the check `if (leastSigBits == 0)`, `ThreadB` did `long leastSigBits = this.leastSigBits.incrementAndGet();` too, now on a value that is `0`, so it put the value in `1`. `ThreadA` does the check and sees a value of `1`, that `if` statement is not entered and a such a duplicate `UUID`.\r\n\r\nThis is very far stretched and I have doubts it has ever impacted any users as for this to happen they would need to generate all the `long` range of IDs, which is highly highly improbable. Still, this code is wrong.\r\n\r\nIf this is suppose to provide _thread-safe_ variant : \r\n\r\n   - document it as such\r\n  - fix the code\r\n\r\nif this isn't supposed to be thread safe, simply dropping the un-necessary `AtomicLong` (with it's `volatile` overhead) is going to be a big performance gain.\r\n\r\nEither way, I would be more than glad to fix this, if someone tells me the path I should be taking. Thank you. ""]",['closed'],[16],"['Can I fix this .', '> ThreadA does the check and sees a value of 1\r\n\r\nWhy would that be? The value of incrementAndGet is saved in a local variable. ', ""@rstoyanchev I should have had my coffee before posting this. you're right and I am wrong.\r\n\r\nEither way there is a race here.\r\n\r\n`ThreadA` does this:\r\n\r\n```\r\nlong leastSigBits = this.leastSigBits.incrementAndGet();\r\n\t\tif (leastSigBits == 0) {\r\n\t\t\tthis.mostSigBits.incrementAndGet();\r\n\t\t}\r\n```\r\n\r\nit sets `long leastSigBits` as `0`, enters the `if` statement, but does not do `this.mostSigBits.incrementAndGet();` just yet. `ThreadB` acts at the same time; it sets its local `long leastSigBits` to `1`, does not enter the `if statement` and does `return new UUID(this.mostSigBits.get(), leastSigBits);`. `this.mostSigBits.get() == 0` and  `leastSigBits == 1`; as such it returns an UUID that was already returned. \r\n\r\n"", '> > ThreadA does the check and sees a value of 1\r\n> \r\n> Why would that be? The value of incrementAndGet is saved in a local variable.\r\n\r\nThe result of `this.mostSigBits.incrementAndGet()` should be saved in a local variable too and instead of `this.mostSigBits.get()` later.', ""> @rstoyanchev I should have had my coffee before posting this. you're right and I am wrong.\r\n> \r\n> Either way there is a race here.\r\n> \r\n> `ThreadA` does this:\r\n> \r\n> ```\r\n> long leastSigBits = this.leastSigBits.incrementAndGet();\r\n> \t\tif (leastSigBits == 0) {\r\n> \t\t\tthis.mostSigBits.incrementAndGet();\r\n> \t\t}\r\n> ```\r\n> \r\n> it sets `long leastSigBits` as `0`, enters the `if` statement, but does not do `this.mostSigBits.incrementAndGet();` just yet. `ThreadB` acts at the same time; it sets its local `long leastSigBits` to `1`, does not enter the `if statement` and does `return new UUID(this.mostSigBits.get(), leastSigBits);`. `this.mostSigBits.get() == 0` and `leastSigBits == 1`; as such it returns an UUID that was already returned.\r\n\r\n@wind57  I agree."", ""> > @rstoyanchev I should have had my coffee before posting this. you're right and I am wrong.\r\n> > Either way there is a race here.\r\n> > `ThreadA` does this:\r\n> > ```\r\n> > long leastSigBits = this.leastSigBits.incrementAndGet();\r\n> > \t\tif (leastSigBits == 0) {\r\n> > \t\t\tthis.mostSigBits.incrementAndGet();\r\n> > \t\t}\r\n> > ```\r\n> > \r\n> > \r\n> > it sets `long leastSigBits` as `0`, enters the `if` statement, but does not do `this.mostSigBits.incrementAndGet();` just yet. `ThreadB` acts at the same time; it sets its local `long leastSigBits` to `1`, does not enter the `if statement` and does `return new UUID(this.mostSigBits.get(), leastSigBits);`. `this.mostSigBits.get() == 0` and `leastSigBits == 1`; as such it returns an UUID that was already returned.\r\n> \r\n> @wind57 I agree.\r\n\r\nI prepared a unit test to show the issue:\r\n\r\n```java\r\nclass SimpleIdGeneratorTest {\r\n\r\n\tprivate final AtomicLong mostSigBits = new AtomicLong(0);\r\n\tprivate final AtomicLong leastSigBits = new AtomicLong(-1);\r\n\r\n\tSet<UUID> ids = new HashSet<>();\r\n\r\n\t@Test\r\n\tvoid generateIdTest() throws InterruptedException {\r\n\r\n\t\tids.add(new UUID(0, 1));\r\n\t\tExecutorService executorService = Executors.newFixedThreadPool(2);\r\n\t\texecutorService.execute(() -> ids.add(generateId()));\r\n\t\texecutorService.execute(() -> ids.add(generateId()));\r\n\r\n\t\tThread.sleep(200);\r\n\t\tassertTrue(ids.contains(new UUID(0, 1)));\r\n\t\tassertTrue(ids.contains(new UUID(1, 0)));\r\n\r\n                 // This UUID is missing, instead UUID(mostSigBits = 0, leastSigBits = 1) got created twice\r\n\t\tassertFalse(ids.contains(new UUID(1, 1)));\r\n\t}\r\n\r\n\tpublic UUID generateId() {\r\n\t\tlong leastSigBits = this.leastSigBits.incrementAndGet();\r\n\t\tif (leastSigBits == 0) {\r\n\t\t\ttry {\r\n\t\t\t\tThread.sleep(100);\r\n\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t\tthis.mostSigBits.incrementAndGet();\r\n\t\t}\r\n\t\treturn new UUID(this.mostSigBits.get(), leastSigBits);\r\n\t}\r\n}\r\n```\r\n\r\nI guess, to be truly thread safe, we would need to introduce a synchronized block as shown below. Please correct me if I'm wrong.\r\n\r\n\r\n```java\r\nclass SimpleIdGeneratorTest {\r\n\r\n\tprivate final AtomicLong mostSigBits = new AtomicLong(0);\r\n\tprivate final AtomicLong leastSigBits = new AtomicLong(-1);\r\n\r\n\tSet<UUID> ids = new HashSet<>();\r\n\r\n\t@Test\r\n\tvoid generateIdTest() throws InterruptedException {\r\n\r\n\t\tids.add(new UUID(0, 1));\r\n\t\tExecutorService executorService = Executors.newFixedThreadPool(2);\r\n\t\texecutorService.execute(() -> ids.add(generateId()));\r\n\t\texecutorService.execute(() -> ids.add(generateId()));\r\n\r\n\t\tThread.sleep(200);\r\n\t\tassertTrue(ids.contains(new UUID(0, 1)));\r\n\t\tassertTrue(ids.contains(new UUID(1, 0)));\r\n\t\tassertTrue(ids.contains(new UUID(1, 1)));\r\n\t}\r\n\r\n\tpublic UUID generateId() {\r\n\t\tlong leastSigBits = this.leastSigBits.incrementAndGet();\r\n\t\tsynchronized (this) {\r\n\t\t\tif (leastSigBits == 0) {\r\n\t\t\t\ttry {\r\n\t\t\t\t\tThread.sleep(100);\r\n\t\t\t\t} catch (InterruptedException e) {\r\n\t\t\t\t\te.printStackTrace();\r\n\t\t\t\t}\r\n\t\t\t\tthis.mostSigBits.incrementAndGet();\r\n\t\t\t}\r\n\t\t\treturn new UUID(this.mostSigBits.get(), leastSigBits);\r\n\t\t}\r\n\t}\r\n}\r\n``` "", '@puhlerblet usually a unit test proves very little in case of thread safety, though, I admit, in this case it is fairly trivial to prove the point. Otherwise, you could also look into [this](https://openjdk.java.net/projects/code-tools/jcstress/) tool, that I usually use. It does instruction re-ordering that can prove things, see more [here](https://stackoverflow.com/questions/56273136/xxstresslcm-xxstressgcm-options-for-jvm) for example.\r\n\r\nAlso _both_ `synchronized` _and_ `AtomicLong`? Under contention, an intrinsic lock is ""inflated"" and when a GC needs to happen - it needs to deflate that, which is a process that takes time (and easily provable with `JMH`). I would suggest a `ReentrantLock`, instead.\r\n\r\nBut the problem is a bit more subtle, it seems to me. Keep in mind that for this problem to be observed, we need to go through the entire range of positive and negative values of a long. Let\'s take the easy case:\r\n\r\n```\r\n Long.MAX_VALUE == 9223372036854775807\r\n```\r\n\r\nSo there are `9223372036854775807` positive possibilities in a long. We now look of how big is an `UUID`:\r\n\r\n```\r\njava.util.UUID object internals:\r\n OFFSET  SIZE   TYPE DESCRIPTION                               VALUE\r\n      0     4        (object header)                           05 00 00 00 (00000101 00000000 00000000 00000000) (5)\r\n      4     4        (object header)                           00 00 00 00 (00000000 00000000 00000000 00000000) (0)\r\n      8     4        (object header)                           2c 19 17 00 (00101100 00011001 00010111 00000000) (1513772)\r\n     12     4        (alignment/padding gap)\r\n     16     8   long UUID.mostSigBits                          0\r\n     24     8   long UUID.leastSigBits                          0\r\nInstance size: 32 bytes\r\nSpace losses: 4 bytes internal + 0 bytes external = 4 bytes total\r\n```\r\n\r\ntake `32 bytes` multiply by `9223372036854775807` and you will need that much space, just for the `UUID`, just for positive part of the least significant bits, if you want to cover the entire range.\r\n\r\nAnd if I now look at the documentation of the class itself:\r\n\r\n> A simple IdGenerator that starts at 1 and increments by 1 with each call.\r\n\r\nI could say that there is no need for two `AtomicLong` as, realistically, no one will ever hit so many IDs.', '@wind57 since i am quite inexperienced in dealing with concurrency I really appreciate your input. Your assumption, that no one will ever hit so many IDs sounds reasonable. ', '@rstoyanchev what do you think about this one? ', ""@wind57 indeed every time `leastSigBits` rolls over, some id's may be based on the current rather than on the next `mostSigBits` value which in practice means that some id's may be issued more than once, but that would only happen once in a very long while and the duplicates would have been last issued a very long time ago\r\n\r\nI think it's simply not worth optimizing and we can just update the docs to say that uniqueness is not fully guaranteed and that on occasion, after every `Long.MAX_VALUE` number of id's are issued, there may be repeated ones for a short period. If that's an issue for some reason then don't use this generator.\r\n\r\nThoughts? /cc @garyrussell @artembilan\r\n\r\n"", ""This is by the way one alternative I thought of but again I'm not sure it's necessary:\r\n```java\r\npublic class SimpleIdGenerator implements IdGenerator {\r\n\r\n\tprivate final AtomicLong mostSigBits = new AtomicLong(0);\r\n\r\n\tprivate final AtomicLong leastSigBits = new AtomicLong(0);\r\n\r\n\tprivate final AtomicLong lastMostSigBits = new AtomicLong(-1);\r\n\r\n\r\n\t@Override\r\n\tpublic UUID generateId() {\r\n\t\tlong leastSigBits = this.leastSigBits.incrementAndGet();\r\n\t\tif (leastSigBits == 0) {\r\n\t\t\tthis.mostSigBits.incrementAndGet();\r\n\t\t}\r\n\t\telse if (leastSigBits == Long.MAX_VALUE - 10000) {\r\n\t\t\tthis.lastMostSigBits.incrementAndGet();\r\n\t\t}\r\n\t\telse if (leastSigBits < 10000) {\r\n\t\t\twhile (true) {\r\n\t\t\t\tif (!this.mostSigBits.equals(this.lastMostSigBits)) {\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn new UUID(this.mostSigBits.get(), leastSigBits);\r\n\t}\r\n\r\n}\r\n```"", 'Bear in mind that this generator is pretty much useless in any environment that persists the ID in a DB and/or a multi-instance application.\r\n\r\nNot only does the problem (potentially) occur after `Long.MAX_VALUE` allocations, but those allocations must have occurred in the same JVM.\r\n\r\nThis generator was provided long ago for a very specific use case where the IDs were not persisted and `UUID.randomUUID()` was found to be too expensive for the ID allocation rate.\r\n\r\nSo, I would say documentation should be enough.\r\n\r\nIf performance is really an issue, consider using the `AlternativeJdkIdGenerator` instead.', ""Thanks @garyrussell those will be good clarifications. For same JVM, not persisted, and reasonably close to unique. If those trade-offs are okay you'll probably get better performance than `AlternativeJDkIdGenerator`."", ' - I agree on the part about documentation.\r\n\r\n - I disagree on the implementation prototype, though. Why not simply use a _single_ `AtomicLong` and specify in the documentation that it supports unique values up to `Long.MAX_VALUE` and then it will simply overflow? ', "">  and specify in the documentation that it supports unique values up to Long.MAX_VALUE and then it will simply overflow\r\n\r\nThat's an option I guess, make it more official that after Long.MAX_VALUE it won't be fully unique. If that is an issue to begin with then it's the wrong generator to use one way or another. @garyrussell you agree with that?"", 'Yes, I agree; users are always able to define their own implementation if they are not happy with this one.']"
49c4d310b51ac0552e036348fc1c1dbbc2b0589f,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java,Condition_Change,"-					if (editor != null) {
-						break;
-					}
+						if (editor != null) {
+							break;
+						}",6,condition,Polish,"See gh-27799
",,27799,1,['Polish'],['This PR polishes a bit.'],['closed'],[0],[]
4a81f2c904ef72ec80a043cb9f9b1d9ab2a390c5,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java,Remove_Condition,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-			// To be on the safe side: explicitly delete the parts,
-			// but only actual file parts (for Resin compatibility)
+
-					if (request.getFile(part.getName()) != null) {
-						part.delete();
-					}
+					part.delete();",5,condition,Remove HTTP parts workaround for Resin,"A workaround was added for the Resin Servlet container in gh-13937.
This avoids attempting to delete parts that are not named, because the
`part.delete()` call would fail for non-file entries. This can be
problematic for files that are unnamed as they might not be removed by
the Framework.

This commit removes this workaround as Resin is not supported anymore.

Fixes gh-33511
",,"33511, 13937",2,"['parts w/o filename in `Content-Disposition` header are not cleaned from temp folder (skipped by `StandardServletMultipartResolver`)', 'org.springframework.web.multipart.support.StandardServletMultipartResolver.cleanupMultipart causes an IOException on Resin [SPR-9299]']","['<!--\r\n!!! For Security Vulnerabilities, please go to https://spring.io/security-policy !!!\r\n-->\r\n**Affects:** 6.1.12 (but can not say since when exactly, older versions are probably also affected) + Jetty 12.0.12\r\n\r\nParts w/o filename in content disposition header are missing in `AbstractMultipartHttpServletRequest.getMultiFileMap()`. Because of this `part.delete()` is skipped in the resolver. \r\nThe relevant logic to filter out such parts is in https://github.com/spring-projects/spring-framework/blob/eff19ec9721381344f0eeacdebfda9da8d8bef07/spring-web/src/main/java/org/springframework/web/multipart/support/StandardMultipartHttpServletRequest.java#L101\r\n\r\nthe logic to ignore parts which are not part of the filemap is here: https://github.com/spring-projects/spring-framework/blob/eff19ec9721381344f0eeacdebfda9da8d8bef07/spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java#L123\r\n\r\nShould we cleanup those parts by ourself? Not sure whether there are other dependencies (why it should not be part of filemap e.g.) but our fix is currently to overwrite the `StandardServletMultipartResolver` and delete the part nevertheless its contained or not in the filemap)', '**[Ralph Schaer](https://jira.spring.io/secure/ViewProfile.jspa?name=ralsa)** opened **[SPR-9299](https://jira.spring.io/browse/SPR-9299?redirect=false)** and commented\n\nTesting the StandardServletMultipartResolver on Resin 4.0.27 with this form.\n\n\\<form action=""uploadTest"" method=""post"" enctype=""multipart/form-data"">\n\\<input type=""hidden"" name=""hiddenParameter"" value=""theHiddenValue"" />\n...\n\\</form>\n\nThe resolver tries to cleanup the parts with the cleanupMultipart method\nby calling part.delete();\n\nResin throws this exception\n\n8:08:25.093 [resin-port-8080-19] WARN  o.s.w.m.s.StandardServletMultipartResolver - Failed to perform cleanup of multipart items\nava.io.IOException: Part.delete() is not applicable to part \'hiddenParameter\':\'theHiddenValue\'\nat com.caucho.server.http.AbstractCauchoRequest$PartImpl.delete(AbstractauchoRequest.java:1086) ~[resin.jar:4.0.27]       \nat org.springframework.web.multipart.support.StandardServletMultipartResolver.cleanupMultipart(StandardServletMultipartResolver.java:65) ~[spring-web-3.1.1.RELEASE.jar:3.1.1.RELEASE]\n\nNot sure why Resin not simply ignores the call to delete() for this kind of parts, as all the other servers (Tomcat, Jetty) do.\n\n\n\n---\n\n**Affects:** 3.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9fcb5781873417e3e9ce8f2a932d3de4649a26c4, https://github.com/spring-projects/spring-framework/commit/7ea85a959c810c1689fc04b8d0c2bd17e5fe6e08\n']","['closed', 'closed']","[2, 0]",[]
4c964473b19590780b9ddad34c832f0b2b4f47d8,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Condition_Change,"-		boolean newJarFile = false;
+		boolean closeJarFile;
+			closeJarFile = !jarCon.getUseCaches();
-				newJarFile = true;
+				closeJarFile = true;
-			// Close jar file, but only if freshly obtained -
-			// not from JarURLConnection, which might cache the file reference.
-			if (newJarFile) {
+			if (closeJarFile) {",7,condition,Defensively close jar files from non-cached JarURLConnections,"Issue: SPR-6295
",,10961,1,['PathMatchingResourcePatternResolver should close jar file from JarURLConnection if not cached [SPR-6295]'],"['**[Stoehr Sukachevin](https://jira.spring.io/secure/ViewProfile.jspa?name=stoehr)** opened **[SPR-6295](https://jira.spring.io/browse/SPR-6295?redirect=false)** and commented\n\nThe ""org.springframework.core.io.support.PathMatchingResourcePatternResolver#doFindPathMatchingJarResources(Resource, String)"" method does not close a Jar file that it opens if it gets it from a JarURLConnection directly.  The reason that is given in the code as to why the Jar file is not closed from a JarURLConnection is because the JarURLConnection ""might cache the file reference"".  However, ""setUseCaches(false)"" is called on the JarURLConnection instance when it is first obtained presumably because we do not want any caching done.  (And internally, at least for the Sun JVM version of the JarURLConnection subclass [sun.net.www.protocol.jar.JarURLConnection], if ""useCaches"" is ""false"", then the Jar file is closed after it is no longer needed [e.g., when the input stream from the JarURLConnection instance is closed].)\n\nThe net result of this is that the Jar file will NOT be closed for an undetermined\nlength of time (until the Jar file\'s ""finalize()"" method is called by the GC), and in Windows, the Jar file will most likely have an open-file lock on it unnecessarily after this method completes.\n\nThe solution is to simply close the Jar file unconditionally at the end of the method.  (Curently, it is only closed when the ""newJarFile"" flag is set, which is not the case when the Jar file is retrieved from a JarURLConnection directly.)\n\n---\n\n**Affects:** 2.5.6\n\n**Issue Links:**\n- #17521 Regression: DLL handled as classpath resource\n- #16711 PathMatchingResourcePatternResolver cannot search for ""classpath*"" patterns in a jar file roots\n- #18260 PathMatchingResourcePatternResolver does not consider manifest based classpaths\n- #18657 PathMatchingResourcePatternResolver should enforce consistent alphabetical sorting of directory content\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4c964473b19590780b9ddad34c832f0b2b4f47d8\n\n1 votes, 4 watchers\n']",['closed'],[3],"[""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis issue has been resolved through a selective bulk update, as part of a larger effort to better manage unresolved issues. To qualify for the update, the issue was either created before Spring 3.0 or affects a version older than Spring 3.0 and is not a bug.\n\nThere is a good chance the request was made obsolete, or at least partly outdated, by changes in later versions of Spring including deprecations. It is also possible it didn't get enough traction or we didn't have enough time to address it. One way or another, we didn't get to it.\n\nIf you believe the issue, or some aspects of it, are still relevant and worth pursuing at present you may re-open this issue or create a new one with a more up-to-date description.\n\nWe thank you for your contributions and encourage you to become familiar with the [current process](https://github.com/SpringSource/spring-framework/wiki/The-Lifecycle-of-an-Issue) of managing Spring Framework JIRA issues that has been in use for over a year.\n"", '**[Shabin S](https://jira.spring.io/secure/ViewProfile.jspa?name=shabin.s.8780@gmail.com)** commented\n\nThe ""org.springframework.core.io.support.PathMatchingResourcePatternResolver#doFindPathMatchingJarResources(Resource, String)"" method still(4.2.4-RELEASE) does not close a Jar file that it opens if it gets it from a JarURLConnection directly. As mentioned in the main description, the reason that is given in the code as to why the Jar file is not closed from a JarURLConnection is because the JarURLConnection ""might cache the file reference"". However, ""setUseCaches(true)"" is called on the JarURLConnection instance only if  con.getClass().getSimpleName().startsWith(""JNLP"") written inside ResourceUtils.useCachesIfNecessary(jarCon) method. So if the file is not cached in other cases, why is it not closed?\nThe newJarFile flag(which is used for checking whether to close the file or not) can be modified to set to true if jarCon.getUseCaches() is false so that the file will be closed if no caching is to be done.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAs of 4.3, we defensively close jar files from non-cached JarURLConnections. We'll see during the 4.3 release candidate whether that causes a regression in any common environment...\n\nJuergen\n""]"
4d3c3056edc983c1afe13d055aeb443bd96bd473,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java,Add_Condition,"-import org.springframework.web.HttpMediaTypeNotAcceptableException;
-import org.springframework.web.accept.ContentNegotiationManagerFactoryBean;
-	 * Configure a {@code ContentNegotiationManager} to determine the media types
-	 * for resources being served. If the manager contains a path
-	 * extension strategy it will be used to look up the file extension
-	 * of resources being served via
-	 * {@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource
-	 * getMediaTypeForResource}. If that fails the check is then expanded
-	 * to use any configured content negotiation strategy against the request.
-	 * <p>By default a {@link ContentNegotiationManagerFactoryBean} with default
-	 * settings is used to create the manager. See the Javadoc of
-	 * {@code ContentNegotiationManagerFactoryBean} for details
-	 * @param contentNegotiationManager the manager to use
+	 * Configure a {@code ContentNegotiationManager} to help determine the
+	 * media types for resources being served. If the manager contains a path
+	 * extension strategy it will be checked for registered file extension.
+	 * @param contentNegotiationManager the manager in use
-	 * Return the specified content negotiation manager.
+	 * Return the configured content negotiation manager.
-	 * to it. This implementation first tries to determine the MediaType based
-	 * strictly on the file extension of the Resource via
-	 * {@link PathExtensionContentNegotiationStrategy#getMediaTypeForResource}
-	 * and then expands to check against the request via
-	 * {@link ContentNegotiationManager#resolveMediaTypes}.
+	 * to it. This implementation tries to determine the MediaType based on the
+	 * file extension of the Resource via
+	 * {@link ServletPathExtensionContentNegotiationStrategy#getMediaTypeForResource}.
+		// For backwards compatibility
+		MediaType mediaType = getMediaType(resource);
+		if (mediaType != null) {
+			return mediaType;
+		}",6,condition,Polish media type change in ResourceHttpRequestHandler,,,,0,N/A,N/A,N/A,N/A,N/A
4dab35205dbbde83b219352c0567cb1e7f1f4062,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/FrameworkServlet.java,Add_Condition,"-		super.doTrace(request, response);
+		// Work around until https://github.com/jakartaee/servlet/pull/545 is fixed and in use
+		if (request.getDispatcherType() != DispatcherType.ERROR) {
+			super.doTrace(request, response);
+		}",4,condition,Avoid super.doTrace for ERROR dispatches,"Closes gh-31457
",,31457,1,['Do not delegate TRACE to HttpServlet on ERROR dispatch'],"['Based on https://github.com/spring-projects/spring-boot/issues/33623. \r\n\r\nTomcat disables TRACE requests by default, which results in a 405. Spring Boot handles the resulting ERROR dispatch, and `FrameworkServlet` delegates to its parent for `doTrace` handling as usual. The result is in an error response with HTTP TRACE (instead of error) details in the body.\r\n\r\nThe issue will be fixed at the Servlet level with https://github.com/jakartaee/servlet/pull/545, possibly for Servlet 6.1, but meanwhile we can apply a temporary fix in `FrameworkServlet`.\r\n\r\n']",['closed'],[0],[]
4eaee1e7381d5f3d8cd6e3ab77c8cfcf7ef2d716,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AttributeMethods.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
+ * @author Sam Brannen
-			if (method.getDefaultValue() != null) {
+			if (!foundDefaultValueMethod && (method.getDefaultValue() != null)) {
-			if (type.isAnnotation() || (type.isArray() && type.getComponentType().isAnnotation())) {
+			if (!foundNestedAnnotation && (type.isAnnotation() || (type.isArray() && type.getComponentType().isAnnotation()))) {",4,condition,Short circuit if-conditions in AttributeMethods,,,,0,N/A,N/A,N/A,N/A,N/A
4edc7196fb172cabe454dfc0377d322678b7ea7f,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java,Add_Condition,"+			// Request handling error (e.g. remote call), if we manage to set the status..
+			if (response.setStatusCode(HttpStatus.INTERNAL_SERVER_ERROR)) {
+				logger.error(logPrefix + ""500 Server Error for "" + formatRequest(request), ex);
+				return Mono.empty();
+			}",4,condition,Refine disconnected client handling in WebFlux,"If an error looks like a ""disconnected client"" but the response is not
yet committed then it can't be an I/O error from writing to the server
response. It is most likely as a result of a remote call as part of
request handling.

Not setting the response to 500 in this case results in a 200 response
status despite the error. Even if it was an I/O error from the server
response, setting the status won't impact a failed response.

Closes gh-23319
",,23319,1,['Errors.NativeIoException from WebClient on WebFlux server does not set the response status'],"['If `Errors.NativeIoException` is raised from controller while handling service logic it is not properly handled by Spring Framework / WebFlux.\r\n\r\nI\'m observing the issue in one of my services that runs on Linux, it uses `WebClient` to access another web-service and, if idled for a while in connection pool, it generates `Errors.NativeIoException` with error code indication ""Connection reset by peer"" (I have mentioned it here: https://github.com/reactor/reactor-netty/issues/641#issuecomment-512865171).\r\n\r\nDisregarding the fact that this connection is not taken out from the pool automatically the behavior of the Spring WebFlux is odd: the service returns **HTTP 200 with empty content**, where as I have expected at least HTTP 500.\r\n\r\nIt can be easy reproduced by raising this Exception manually using latest versions of Spring-Boot, Netty and Java.\r\nSpring-Boot version (maven):\r\n```xml\r\n<parent>\r\n\t<groupId>org.springframework.boot</groupId>\r\n\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t<version>2.1.6.RELEASE</version>\r\n\t<relativePath/>\r\n</parent>\r\n<dependencies>\r\n\t<dependency>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-webflux</artifactId>\r\n\t</dependency>\r\n\t...\r\n```\r\n\r\nLinux version (in Docker):\r\n```\r\nroot@59a09bf2408a:/demo# uname -a\r\nLinux 59a09bf2408a 4.9.125-linuxkit #1 SMP Fri Sep 7 08:20:28 UTC 2018 x86_64 GNU/Linux\r\n```\r\n\r\nJava version:\r\n```\r\nroot@59a09bf2408a:/demo# mvn -version\r\nApache Maven 3.6.1 (d66c9c0b3152b2e69ee9bac180bb8fcc8e6af555; 2019-04-04T19:00:29Z)\r\nMaven home: /usr/share/maven\r\nJava version: 11.0.4, vendor: Oracle Corporation, runtime: /usr/local/openjdk-11\r\nDefault locale: en, platform encoding: UTF-8\r\nOS name: ""linux"", version: ""4.9.125-linuxkit"", arch: ""amd64"", family: ""unix""\r\n```\r\n\r\nExample of controller to cause the issue:\r\n```java\r\n@RestController\r\n@EnableWebFlux\r\npublic class DemoController {\r\n\t@GetMapping(""/objects/{id}"")\r\n\tpublic Mono<DemoObject> getObjects(final @PathVariable String id) {\r\n\t\tswitch (id) {\r\n\t\t\tcase ""1"":\r\n\t\t\t\treturn Mono.error(new IOException(""Failed to read object: "" + id));\r\n\t\t\tcase ""2"":\r\n\t\t\t\t// -104 Connection reset by peer\r\n\t\t\t\treturn Mono.error(new Errors.NativeIoException(""Failed to read object: "" + id, -104));\r\n\t\t\tdefault:\r\n\t\t\t\tDemoObject data = new DemoObject();\r\n\t\t\t\tdata.id = id;\r\n\t\t\t\treturn Mono.just(data);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic static final class DemoObject {\r\n\t\tpublic String id;\r\n\t}\r\n}\r\n```\r\n\r\n`-104` is a [Connection reset by peer](https://github.com/torvalds/linux/blob/master/include/uapi/asm-generic/errno.h#L87) code on Linux generated in my service by underlying communication to the external service using `WebClient`\r\n\r\nStandard `IOException` are handled as expected:\r\n```\r\n$ curl -v http://localhost:8080/objects/1\r\n*   Trying ::1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (::1) port 8080 (#0)\r\n> GET /objects/1 HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 500 Internal Server Error\r\n< Content-Type: application/json;charset=UTF-8\r\n< Content-Length: 129\r\n<\r\n* Connection #0 to host localhost left intact\r\n{""timestamp"":1563573616713,""path"":""/objects/1"",""status"":500,""error"":""Internal Server Error"",""message"":""Failed to read object: 1""}\r\n```\r\n\r\nBut the `Errors.NativeIoException` have weird handling:\r\n```\r\n~ $ curl -v http://localhost:8080/objects/2\r\n*   Trying ::1...\r\n* TCP_NODELAY set\r\n* Connected to localhost (::1) port 8080 (#0)\r\n> GET /objects/2 HTTP/1.1\r\n> Host: localhost:8080\r\n> User-Agent: curl/7.54.0\r\n> Accept: */*\r\n>\r\n< HTTP/1.1 200 OK\r\n< content-length: 0\r\n<\r\n* Connection #0 to host localhost left intact\r\n```\r\n\r\nI believe `Errors.NativeIoException` is misinterpret by Netty as an error of incoming HTTP connection and not the underlying business / service logic. But should not this be a part of WebFlux to take care of any Exception that is raised from inside controllers and deliver them as HTTP 500 to outside clients?\r\n\r\nWorkaround: at the moment I am using `Mono.onErrorMap` to map any `Errors.NativeIoException` into `ResponseStatusException` before it leaves the controller to avoid **HTTP 200** response in case of internal issues. But this feels very wrong to me.\r\n\r\nI\'ll be happy about any guidance and/or explanation about current behavior of WebFlux.\r\nThank you!']",['closed'],[1],"['It looks like the ""Connection reset by peer"" triggers this [error handling](https://github.com/spring-projects/spring-framework/blob/957f0fac7a0dd1f0a7a5742fbeb8c40b7da439f0/spring-web/src/main/java/org/springframework/web/server/adapter/HttpWebHandlerAdapter.java#L270-L279) where the assumption is that the client is gone and we don\'t event set the response status.\r\n\r\nWe can at least try and set the status to 500, so if the error is a result of request handling, then the response would correctly reflect that.\r\n\r\nWe considered differentiating between IO errors on the server response vs request handling in #21875. However it was determined Reactor Netty already uses different exceptions. @violetagg is this case where the above `Errors.NativeIoException` somehow slips through and isn\'t getting translated to `PrematureCloseException`?']"
502997d8e986dcfde1f49b2b2f443a32b5488b13,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Condition_Change,"-		if (dependentBeans == null) {
+		if (dependentBeans == null || dependentBeans.isEmpty()) {",2,condition,Further simplify DefaultSingletonBeanRegistry.isDependent(),"See gh-30839
",,30839,1,['Simplify `DefaultSingletonBeanRegistry.isDependent()`'],['Move `alreadySeen` out of for-loop.'],['closed'],[3],"['@bnbakp0582 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30839)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30839) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@bnbakp0582 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30839)!', 'Hi @bnbakp0582,\r\n\r\nThis has been merged into `6.0.x` and `main` in fb4ad2f3ba0bf0d968a49a05efd8fd41f3e2509d and revised in 502997d8e986dcfde1f49b2b2f443a32b5488b13.\r\n\r\nThanks']"
5068eb2e01a5f534b6ceaefe9d1034446b674164,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/AbstractErrors.java,Add_Condition,"-		return (field.equals(fieldError.getField()) ||
-				(field.endsWith(""*"") && fieldError.getField().startsWith(field.substring(0, field.length() - 1))));
+		if (field.equals(fieldError.getField())) {
+			return true;
+		}
+		// Optimization: use chatAt instead of endsWith (SPR-11304, VESC-165)
+		int endIndex = field.length() - 1;
+		return (field.charAt(endIndex) == '*' && fieldError.getField().startsWith(field.substring(0, endIndex)));",7,condition,Add minor optimization to AbstractErrors,"Issue: SPR-11304
",,15928,1,['Optimize lookup of field errors in AbstractBindingResult [SPR-11304]'],"['**[Daniel Mikusa](https://jira.spring.io/secure/ViewProfile.jspa?name=dmikusa)** opened **[SPR-11304](https://jira.spring.io/browse/SPR-11304?redirect=false)** and commented\n\nThere is a performance issue when Spring MVC validates a large object graph using JSR 303 Bean Validation API & Hibernated Validator.\n\nHere is the object structure for the [sample project](https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-11304) in spring-framework-issues...\n\n```\n- Address\n  - propA (string)\n  - propB (string)\n  - propC (List) // has around 100 elements\n       - Object1\n           - propA (string)\n           - propB (List)  // has around 30 elements\n               - Object 2\n                    - propA\n                    - propB\n                    - propC\n```\n\nWorst case it takes about 2.5 seconds to process a request that fails validation.  Without validation, processing is very fast.\n\n---\n\n**Affects:** 3.2.6, 4.0 GA\n\n**Issue Links:**\n- #16001 StringIndexOutOfBoundsException in AbstractErrors for class-level JSR-303 validator\n\n**Backported to:** [3.2.7](https://github.com/spring-projects/spring-framework/milestone/95?closed=1)\n']",['closed'],[1],"[""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI've made a small optimization in AbstractErrors that improves performance by ~ 30%. The overall request time is still not ideal but the number of errors (~12K) is unusually large. Given some additional details on the specific scenario that leads to this, we could make further optimzations.\n""]"
50829c9fdce91309118a2dfa2ebd8cd9bcf43437,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/SharedEntityManagerCreator.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-				if (target == null || !TransactionSynchronizationManager.isActualTransactionActive()) {
+				if (target == null || (!TransactionSynchronizationManager.isActualTransactionActive() &&
+						!target.getTransaction().isActive())) {",3,condition,Shared EntityManager does not insist on actualTransactionActive flag anymore,"Issue: SPR-13838
",,18411,1,['Regression: Shared EntityManager proxy insists on actualTransactiveActive flag even with SYNCHRONIZATION_NEVER [SPR-13838]'],"['**[Krzysztof Lewandowski](https://jira.spring.io/secure/ViewProfile.jspa?name=bikeholik)** opened **[SPR-13838](https://jira.spring.io/browse/SPR-13838?redirect=false)** and commented\n\nIf set the transaction synchronization to be SYNCHRONIZATION_NEVER, e.g.:\n\n```\n@Override\npublic Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n    if(bean instanceof AbstractPlatformTransactionManager){\n        AbstractPlatformTransactionManager transactionManager = (AbstractPlatformTransactionManager)bean;\n        transactionManager.setTransactionSynchronization(SYNCHRONIZATION_NEVER);\n    }\n    return bean;\n}\n```\n\nI get a following exception when trying to save an object using jpa repository:\n\n```\nCaused by: javax.persistence.TransactionRequiredException: No EntityManager with actual transaction available for current thread - cannot reliably process \'persist\' call\n\tat org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:277)\n\tat com.sun.proxy.$Proxy126.persist(Unknown Source)\n\tat org.springframework.data.jpa.repository.support.SimpleJpaRepository.save(SimpleJpaRepository.java:439)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.executeMethodOn(RepositoryFactorySupport.java:483)\n\tat org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.doInvoke(RepositoryFactorySupport.java:468)\n\tat org.springframework.data.repository.core.support.RepositoryFactorySupport$QueryExecutorMethodInterceptor.invoke(RepositoryFactorySupport.java:440)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.data.projection.DefaultMethodInvokingMethodInterceptor.invoke(DefaultMethodInvokingMethodInterceptor.java:61)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:99)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:281)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:136)\n```\n\nWith that setup `TransactionSynchronizationManager.setActualTransactionActive(status.hasTransaction());` is not called and now SharedEntityManagerCreator requires actual transaction to be active:\n\n```\n            if (target == null || !TransactionSynchronizationManager.isActualTransactionActive()) {\n         throw new TransactionRequiredException(""No EntityManager with actual transaction available "" +\n                           ""for current thread - cannot reliably process \'"" + method.getName() + ""\' call"");\n}\n```\n\n---\n\n**Affects:** 4.2.4\n\n**Attachments:**\n- [screenshot-1.png](https://jira.spring.io/secure/attachment/23256/screenshot-1.png) (_119.53 kB_)\n- [screenshot-2.png](https://jira.spring.io/secure/attachment/23257/screenshot-2.png) (_222.84 kB_)\n\n**Issue Links:**\n- #16541 Shared EntityManager should immediately throw TransactionRequiredException if no transaction in progress\n- #17833 Transaction propagation SUPPORTS leads to “HHH000326: Cannot join transaction” warning\n- #17834 Inconsistent JPA behavior using no transaction, propagation SUPPORTS and OpenEntityManager pattern\n- #18944 Shared EntityManager\'s target lookup doesn\'t work with Spring Data\'s ChainedTransactionManager\n\n1 votes, 5 watchers\n']",['closed'],[17],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI suppose you are using `JpaTransactionManager`, so an `EntityManager` is bound to the thread... with just the `actualTransactionActive` flag not set? We should definitely relax that `EntityManager` status check then. Looking at it for 4.2.5.\n\nJuergen\n', ""**[Krzysztof Lewandowski](https://jira.spring.io/secure/ViewProfile.jspa?name=bikeholik)** commented\n\nYes, exactly. JpaTransactionManager is used. i can work around it like:\n\n```\n    @Bean\n    @Primary\n    public PlatformTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {\n        return new JpaTransactionManager(entityManagerFactory) {\n            @Override\n            protected void prepareSynchronization(DefaultTransactionStatus status, TransactionDefinition definition) {\n                if (status.isNewSynchronization()) {\n                    super.prepareSynchronization(status, definition);\n                } else {\n                    TransactionSynchronizationManager.setActualTransactionActive(status.hasTransaction());\n                }\n            }\n\n\n        };\n    }\n```\n\nBut it doesn't seem to be a cleanest solution. Moreover thread locals won't get cleaned unless I add some transaction event listeners.\n"", '**[Sathishkumar Murugesan](https://jira.spring.io/secure/ViewProfile.jspa?name=sathish.murugesan)** commented\n\nHi,\n\nI am also facing similar issue. I have upgraded to latest Spring version from 4.1.6.Release to 4.2.4.Release and suddenly all what has functioned smoothly before, now throws the following exception. Exception occurs in SharedEntityManagerCreator.java. In the same method reported by other user.\n\n```java\njavax.persistence.TransactionRequiredException: No EntityManager with actual transaction available for current thread - cannot reliably process \'persist\' call\nat org.springframework.orm.jpa.SharedEntityManagerCreator$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:277) ~[na:4.2.4.RELEASE]\nat com.sun.proxy.$Proxy51.persist(Unknown Source) ~[na:na]\n```\n\n```java\nelse if (transactionRequiringMethods.contains(method.getName())) {\n                    // We need a transactional target now, according to the JPA spec.\n                    // Otherwise, the operation would get accepted but remain unflushed...\n                    if (target == null || !TransactionSynchronizationManager.isActualTransactionActive()) {\n                        throw new TransactionRequiredException(""No EntityManager with actual transaction available "" +\n                                ""for current thread - cannot reliably process \'"" + method.getName() + ""\' call"");\n                    }\n                }\n```\n\nDo you have work around for now?\n\nI also created issue in Stackoverflow : http://stackoverflow.com/questions/34494754/upgraded-from-spring-4-1-6-to-4-2-4-and-suddenly-getting-transactionrequiredexce with more explanation and code samples\n', '**[Krzysztof Lewandowski](https://jira.spring.io/secure/ViewProfile.jspa?name=bikeholik)** commented\n\nThe most dirty one is to manually call\n\n```\nTransactionSynchronizationManager.setActualTransactionActive(true);\n```\n\nsomewhere before you invoke operation that force those checks\n', ""**[Sathishkumar Murugesan](https://jira.spring.io/secure/ViewProfile.jspa?name=sathish.murugesan)** commented\n\nThanks for workaround. For me target == null, so it fails in the first condition not with ActualTransactionActive.\n\nEntityManagerFactoryUtils.java\n\n```java\nelse if (!TransactionSynchronizationManager.isSynchronizationActive()) {\n\t\t\t// Indicate that we can't obtain a transactional EntityManager.\n\t\t\treturn null;\n\t\t}\n```\n\nI dont know why it couldn't find the targetEntityManager. But when i switch 4.1.6 it works like charm\n\nIf I set this in code.. then it works\n\n```java\nif(!TransactionSynchronizationManager.isSynchronizationActive()){\n            TransactionSynchronizationManager.initSynchronization();\n            TransactionSynchronizationManager.setActualTransactionActive(true);\n        }\n```\n\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIf the first condition fails for you there, I assume you're not using `JpaTransactionManager`? Which transaction manager are you using then? You do set transaction synchronization to 'never' though?\n\nLet's sort out any variant of this issue for 4.2.5 in February. Providing an immediate upgrade path from 4.1.x is a key requirement for us.\n\nJuergen\n"", '**[Sathishkumar Murugesan](https://jira.spring.io/secure/ViewProfile.jspa?name=sathish.murugesan)** commented\n\nI use JPA transaction manager and attached code snippet of my configuration.\n\n```java\n<bean id=""xxxTxManager"" class=""org.springframework.orm.jpa.JpaTransactionManager""\n          p:entityManagerFactory-ref=""xxxEntityManagerFactory"" p:dataSource-ref=""xxxDataSource""/>\n\n<tx:annotation-driven transaction-manager=""xxxTxManager""/>\n\n<bean id=""xxxEntityManagerFactory""\n          class=""org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean""\n          p:persistenceUnitName=""xxxHibernatePersistenceUnit""\n          p:packagesToScan=""com.opensolutions""\n          p:dataSource-ref=""xxxDataSource"" p:jpaVendorAdapter-ref=""hibernateVendor""\n          p:jpaPropertyMap-ref=""jpaPropertyMap"" p:persistenceXmlLocation=""classpath*:META-INF/xxx-jpa-persistence.xml""/>\n\n    <bean id=""hibernateVendor""\n          class=""org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter""\n          p:showSql=""false""/>\n\n    <util:map id=""jpaPropertyMap"">\n        <entry key=""hibernate.dialect"" value=""org.hibernate.dialect.Oracle10gDialect""/>\n        <entry key=""jadira.usertype.databaseZone"" value=""jvm""/>\n        <entry key=""jadira.usertype.javaZone"" value=""jvm""/>\n    </util:map>\n```\n\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI'm not sure how `target` can be `null` there with a `JpaTransactionManager` driving the transaction. Could you please double-check what's happening there, in particular within the `EntityManagerFactoryUtils.doGetTransactionalEntityManager` call?\n\nJuergen\n"", ""**[Sathishkumar Murugesan](https://jira.spring.io/secure/ViewProfile.jspa?name=sathish.murugesan)** commented\n\nI checked it..,\n\n```java\nEntityManagerHolder emHolder = (EntityManagerHolder) TransactionSynchronizationManager.getResource(emf);\n```\n\nreturns null, so\n\n```java\nelse if (!TransactionSynchronizationManager.isSynchronizationActive()) {\n\t\t\t// Indicate that we can't obtain a transactional EntityManager.\n\t\t\treturn null;\n\t\t}\n```\n\n!!\nWhen i check the method doGetResource it has only JMS datasource not my database datasource. Attached screenshot for more reference. Please let me know if you need more details.\n\n!screenshot-1.png|thumbnail!\nJust giving back ground about my scenario, i am trying to persist the data in the database before i post the message in the queue while posting queue it works fine. Its async process i used to save the data when they post reply back its fails only in the reply section when i listener picks up the call.  While posting the message to the queue, it still works fine without any issues.\n\nBefore i post the message in the queue, when i inspect getResources, I see all the resources. Attached screenshot of the same for reference. It fails only during reply\n!screenshot-2.png|thumbnail!\n\nRegards,\nSathish\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis looks like your `JpaTransactionManager` isn't even kicking in though; otherwise an `EntityManagerHolder` would be bound for your `EntityManagerFactory` at that point. You could put corresponding breakpoints in `JpaTransactionManager`...\n\nAs far as my current analysis goes, #17834 seems to have caused the regression for `SYNCHRONIZATION_NEVER` in that it insists on the `actualTransactiveActive` flag; we can easily fix this for 4.2.5. The regression with no `EntityManagerHolder` bound at all seems to be different and not caused by #17834; it'd be my pleasure to address it for 4.2.5 as well but have yet to find its root cause.\n\nJuergen\n"", '**[Sathishkumar Murugesan](https://jira.spring.io/secure/ViewProfile.jspa?name=sathish.murugesan)** commented\n\nI tried to put break point in JpaTransactionManager. But code doesnt even go to JpaTransactionManager. JpaTransactionManger class is never invoked.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've resolved the original issue here through an extra `EntityManager.getTransaction().isActive()` check: so either the `actualTransactiveFlag` or that `EntityManager` state needs to be set in order to proceed with a transaction-requiring operation. This should cover the `SYNCHRONIZATION_NEVER` case.\n\nAs for the `target` suddenly being `null` in some scenarios on 4.x, this seems to be a separate issue not caused by the changes behind #17834. Let's create a separate JIRA issue for that scenario if it remains to be a problem.\n\nJuergen\n"", '**[Murali Mohan Rath](https://jira.spring.io/secure/ViewProfile.jspa?name=mmrath)** commented\n\nI have raised a related bug at https://jira.spring.io/browse/DATACMNS-803\nThis is not resolved even with 4.2.5 SNAPSHOT build\n', '**[Murali Mohan Rath](https://jira.spring.io/secure/ViewProfile.jspa?name=mmrath)** commented\n\nI had another go by building 4.3.0-BUILD-SNAPSHOT locally and it resolves the issue. I guess the snapshots on spring repo are not updated.\n\n`@Juergen` , Is it possible to release 4.2.5 soon? if not would you know when will be the next release?\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI haven't got around to the 4.2.5 backport yet; I'll make sure to commit it later this week. So the fix simply isn't available in that branch yet.\n\nAs for the release dates, we always reflect the current plan here: https://jira.spring.io/browse/SPR/?selectedTab=com.atlassian.jira.jira-projects-plugin:roadmap-panel - 4.2.5 is currently scheduled for Feb 18.\n\nJuergen\n"", '**[Paul Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=paulzhang)** commented\n\nhello Juergen,\n\njust fellow up with ""As for the target suddenly being null in some scenarios on 4.x, this seems to be a separate issue not caused by the changes behind #17834. Let\'s create a separate JIRA issue for that scenario if it remains to be a problem."" did you created separate JIRA issue for this one.\n', ""**[Sathishkumar Murugesan](https://jira.spring.io/secure/ViewProfile.jspa?name=sathish.murugesan)** commented\n\nAs for the target suddenly being null in some scenarios on 4.x, this seems to be a separate issue not caused by the changes behind #17834. Let's create a separate JIRA issue for that scenario if it remains to be a problem.\n\nThis issue is not still resolved in Spring 4.3.0 also. Exact Scenario is explained  by Murali Mohan Rath : I have raised a related bug at https://jira.spring.io/browse/DATACMNS-803\n\nIf we invoke JmsTransactionManager first, followed by JPATransactionManager then JPATransactionManager is coming as null. which eventually breaks code. Because of this issue we were not able to migrate from Spring 4.1.6 to any higher Spring Version.\n""]"
511dab1ade9c8b45d35e3bca005b631f0c40af89,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/DefaultAdvisorChainFactory.java,Condition_Change,"-					if (mm instanceof IntroductionAwareMethodMatcher) {
+					if (mm instanceof IntroductionAwareMethodMatcher iamm) {
-						match = ((IntroductionAwareMethodMatcher) mm).matches(method, actualClass, hasIntroductions);
+						match = iamm.matches(method, actualClass, hasIntroductions);",4,condition,"Apply ""instanceof pattern matching"" (#29710)",,,29710,1,"['Apply ""instanceof pattern matching""']",[None],['closed'],[3],"['This has been merged into `main`.\r\n\r\nIn the future, please include larger change sets in your PRs.\r\n\r\nThere are certainly other places in the code base that can benefit from ""instance of pattern matching"", and we would prefer to address them on a per-module basis (for example, the entire `spring-aop` module).\r\n\r\nThanks', 'OK. Thank you for the tips.\r\n\r\nI had checked all the codes of `spring-aop`, and only this one needed to be modified.', ""> I had checked all the codes of `spring-aop`, and only this one needed to be modified.\r\n\r\nI'm not sure how you checked, because I found several other places that needed to be modified in `spring-aop`. See commit b71db12c43a1a09fa2fb49bf88ce8f00e017511b.""]"
51875cdf5fa1ee0fafad85876cd14e0ea422f003,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java,Condition_Change,"-		// SPRING PATCH BEGIN: early initialization for overridden methods on subclasses
-		if (!c1.isInterface()) {
-			proxy.init();
+		// SPRING PATCH BEGIN
+		if (!c1.isInterface() && c1 != Object.class) {
+			// Try early initialization for overridden methods on subclasses
+			try {
+				proxy.init();
+			}
+			catch (CodeGenerationException ex) {
+				// Ignore - to be retried when actually needed later on (possibly not at all)
+			}",8,condition,Defensive early initialization of CGLIB method proxies (for AOT processing),"Method proxies might not actually be used later on, so failure is not fatal.

See gh-29107
",,29107,1,['CGLIB proxies are not used at runtime on `@Configuration` classes in AOT mode'],"['Consider the following configuration class:\r\n\r\n```java\r\n@Configuration\r\npublic class MyConfiguration {\r\n\t@Bean\r\n\tA a() { return new A(); }\r\n\r\n\t@Bean\r\n\tB b() { return new B(this.a()); }\r\n\t\r\n\tstatic class A {\r\n\t\tpublic A() { System.out.println(""A constructor""); }\r\n\t}\r\n\r\n\tstatic class B {\r\n\t\tpublic B(A a) { System.out.println(""B constructor""); }\r\n\t}\r\n}\r\n```\r\n\r\nOn JVM in regular mode, it prints:\r\n\r\n```\r\nA constructor\r\nB constructor\r\n```\r\n\r\nOn JVM in AOT mode or native, while it seems CGLIB proxies are generated correctly at build time,  but they seems not used since it prints:\r\n\r\n```\r\nA constructor\r\nA constructor\r\nB constructor\r\n```\r\n\r\nThe code generated AOT maybe needs to be updated to leverage those CGLIB proxies.']",['closed'],[2],"[""We need to swap the creation of the raw class to the cglib proxy. I was hoping I could avoid having to change code generation for this but it turns out that there isn't a way to achieve this using an instance supplier. \r\n\r\nI've a proposal in [3b8bcdf](https://github.com/snicoll/spring-framework/commit/3b8bcdfe281b606a1ce8ee354b0cef56913ccfcd).\r\n\r\nThis is blocked by https://github.com/spring-projects/spring-boot/issues/32304 and, to some extent, https://github.com/spring-projects/spring-framework/issues/29141"", 'I have it working but I think it needs a bit more work to test it correctly. ']"
51e30dd2211d635703359e907529a1ec871b91fa,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/MimeType.java,Condition_Change,"-import java.util.Map.Entry;
-		for (Entry<String, String> entry : this.parameters.entrySet()) {
-			String key = entry.getKey();
+		for (String key : this.parameters.keySet()) {",4,iteration,Polish MimeType,,,,0,N/A,N/A,N/A,N/A,N/A
53597f90e9e7da2739da9b874d16a4b1c5c50c10,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/SortedProperties.java,Condition_Change,"-import org.springframework.util.StringUtils;
-
-		for (String line : StringUtils.tokenizeToStringArray(contents, EOL)) {
+		for (String line : contents.split(EOL)) {
-		for (String line : StringUtils.tokenizeToStringArray(contents, EOL)) {
+		for (String line : contents.split(EOL)) {",6,iteration,Remove dependency on StringUtils in SortedProperties,"See gh-23018, gh-22383
",,"22383, 23018",2,"['Ensure indexer output is deterministic and repeatable', 'Provide utility for writing Properties to a file in a repeatable manner']","['The output file that `spring-context-indexer` produces is currently written using `Properties#store`. This prevents the build of a project that uses indexer from being repeatable, due to current timestamp being included in comment inside output file, and also entries possibly not being ordered deterministically.\r\n\r\nThis PR ensures that indexer output is written in deterministic and repeatable manner by filtering out comments and ordering entries.', 'Instances of `java.util.Properties` are typically written to file using `Properties#store`. Since this method also writes a timestamp in a comment, its use is problematic in projects that need to have [reproducible builds](https://reproducible-builds.org/).\r\n\r\nIf Spring Framework could provide utility for writing `Properties` to a file in a repeatable manner, this would IMO be of great benefit to all Spring projects. There are already several issues/PRs that are blocked due to the shortcomings of `Properties#store`:\r\n\r\n- spring-projects/spring-boot#14494\r\n- #22383\r\n\r\n/cc @dsyer @wilkinsona']","['closed', 'closed']","[11, 14]","[""As @jhoeller mentioned elsewhere, Spring already has a `PropertiesPersister` interface and `DefaultPropertiesPersister` implementation.\r\n\r\nSo, we'll look into providing support to filter out comment lines from the output (likely enabled via a new `boolean` flag in `DefaultPropertiesPersister`), which should take care of the timestamp comment.\r\n\r\n@vpavic, would that meet your needs?"", ""I'm not sure that filtering comments alone is sufficient. To be guaranteed to be repeatable I believe it's also necessary to order the keys. Without ordering the keys, you are reliant on repeatable hashing of the keys which may not hold true under all circumstances.\r\n\r\nGradle contains [some code](https://github.com/gradle/gradle/blob/d40d48a02932cd12936e1c4829c0f1143c82aa5e/subprojects/base-services/src/main/java/org/gradle/internal/util/PropertiesUtils.java#L81-L119) for writing properties in a repeatable manner which could serve as inspiration."", ""Thanks for the feedback @sbrannen, I wasn't aware of `PropertiesPersister` - a custom implementation would probably do.\r\n\r\nThanks @wilkinsona, I forgot to mention there's also an ordering aspect to this."", ""> I'm not sure that filtering comments alone is sufficient. To be guaranteed to be repeatable I believe it's also necessary to order the keys. Without ordering the keys, you are reliant on repeatable hashing of the keys which may not hold true under all circumstances.\r\n\r\nOK. Thanks for bringing that up. We'll then have to take the order into account as well.\r\n"", '### Design Notes\r\n\r\nIt will likely be easiest to support consistent ordering by extending `Properties` and overriding the implementation of `keys()`.\r\n\r\nTo remove the comments, we will likely need to override `store(OutputStream, String)` and `store(Writer, String)` to _filter_ out all comments.\r\n\r\n### Open Issues\r\n\r\n@vpavic, @dsyer, @wilkinsona:\r\n\r\n* Can you please confirm that you do not need this support for the `storeToXML(...)` variants?\r\n* Is it acceptable to ignore (i.e., filter out) any user-supplied comments (provided via the `String comment` argument to `store(OutputStream, String)` or `store(Writer, String)`)?', ""I believe XML variants aren't needed.\r\n\r\nRegarding `PropertiesPersister` itself, it seems a bit obscure as code search doesn't reveal any (production) uses even in Framework's codebase - `Properties#store` is actually used in all places that write `Properties` instances.\r\n\r\nTo me `PropertiesPersister` looks like an overhead for this, as simple property writing helper with two variants (one accepting `OutputStream` the other `Writer`) of static `store` method would be much simpler to consume across the Spring portfolio. Both load and XML related parts of the API don't seem particularly relevant to the core problem being discussed here."", ""Thanks for the feedback, @vpavic.\r\n\r\nI am actually considering only a custom subclass of `Properties`. If I get that to work, I don't think there will be a need to implement a custom `PropertiesPersister`, modify `DefaultPropertiesPersister`, or introduce a new helper class."", 'OK, this feature is basically done, but I\'d like to share it with you here first to see if it meets your needs.\r\n\r\nNew method in `org.springframework.core.CollectionFactory` (per recommendation by @jhoeller):\r\n\r\n```java\r\n/**\r\n * Create a variant of {@code java.util.Properties} that sorts properties\r\n * alphanumerically based on their keys.\r\n *\r\n * <p>This can be useful when storing the {@link Properties} instance in a\r\n * properties file, since it allows such files to be generated in a repeatable\r\n * manner with consistent ordering of properties. Comments in generated\r\n * properties files can also be optionally omitted.\r\n *\r\n * @param omitComments {@code true} if comments should be omitted when\r\n * storing properties in a file\r\n * @return a new {@code Properties} instance\r\n * @since 5.2\r\n */\r\npublic static Properties createSortedProperties(boolean omitComments) {\r\n\treturn new SortedProperties(omitComments);\r\n}\r\n```\r\n\r\nImplementation of `SortedProperties`:\r\n\r\n```java\r\n/**\r\n * Specialization of {@link Properties} that sorts properties alphanumerically\r\n * based on their keys.\r\n *\r\n * <p>This can be useful when storing the {@link Properties} instance in a\r\n * properties file, since it allows such files to be generated in a repeatable\r\n * manner with consistent ordering of properties.\r\n *\r\n * <p>Comments in generated properties files can also be optionally omitted\r\n * (see {@link SortedProperties#SortedProperties(boolean)}).\r\n *\r\n * @author Sam Brannen\r\n * @since 5.2\r\n * @see java.util.Properties\r\n */\r\nclass SortedProperties extends Properties {\r\n\r\n\tprivate static final String EOL = System.getProperty(""line.separator"");\r\n\r\n\tprivate static final Comparator<Entry<Object, Object>> entryComparator = //\r\n\t\t(entry1, entry2) -> String.valueOf(entry1.getKey()).compareTo(String.valueOf(entry2.getKey()));\r\n\r\n\tprivate final boolean omitComments;\r\n\r\n\r\n\t/**\r\n\t * Construct a new {@code SortedProperties} instance that honors the supplied\r\n\t * {@code omitComments} flag.\r\n\t *\r\n\t * @param omitComments {@code true} if comments should be omitted when\r\n\t * storing properties in a file\r\n\t */\r\n\tSortedProperties(boolean omitComments) {\r\n\t\tthis.omitComments = omitComments;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void store(OutputStream out, String comments) throws IOException {\r\n\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\r\n\t\tsuper.store(baos, (this.omitComments ? null : comments));\r\n\t\tString contents = new String(baos.toByteArray(), StandardCharsets.ISO_8859_1);\r\n\t\tfor (String line : StringUtils.tokenizeToStringArray(contents, EOL)) {\r\n\t\t\tif (!omitComments || !line.startsWith(""#"")) {\r\n\t\t\t\tout.write((line + EOL).getBytes(StandardCharsets.ISO_8859_1));\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void store(Writer writer, String comments) throws IOException {\r\n\t\tStringWriter stringWriter = new StringWriter();\r\n\t\tsuper.store(stringWriter, (this.omitComments ? null : comments));\r\n\t\tString contents = stringWriter.toString();\r\n\t\tfor (String line : StringUtils.tokenizeToStringArray(contents, EOL)) {\r\n\t\t\tif (!omitComments || !line.startsWith(""#"")) {\r\n\t\t\t\twriter.write(line + EOL);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void storeToXML(OutputStream out, String comments) throws IOException {\r\n\t\tsuper.storeToXML(out, (this.omitComments ? null : comments));\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void storeToXML(OutputStream out, String comments, String encoding) throws IOException {\r\n\t\tsuper.storeToXML(out, (this.omitComments ? null : comments), encoding);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a sorted enumeration of the keys in this {@link Properties} object.\r\n\t * <p>The keys will be converted to strings if necessary using\r\n\t * {@link String#valueOf(Object)} and sorted alphanumerically according to\r\n\t * the natural order of strings.\r\n\t */\r\n\t@Override\r\n\tpublic synchronized Enumeration<Object> keys() {\r\n\t\tSet<Object> sortedKeys = new TreeSet<>();\r\n\t\tfor (Object key : super.keySet()) {\r\n\t\t\tsortedKeys.add(String.valueOf(key));\r\n\t\t}\r\n\t\treturn Collections.enumeration(sortedKeys);\r\n\t}\r\n\r\n\t/**\r\n\t * Return a sorted set of the entries in this {@link Properties} object.\r\n\t * <p>The entries will be sorted based on their keys, and the keys will be\r\n\t * converted to strings if necessary using {@link String#valueOf(Object)}\r\n\t * and compared alphanumerically according to the natural order of strings.\r\n\t */\r\n\t@Override\r\n\tpublic Set<Entry<Object, Object>> entrySet() {\r\n\t\tSet<Entry<Object, Object>> sortedEntries = new TreeSet<>(entryComparator);\r\n\t\tsortedEntries.addAll(super.entrySet());\r\n\t\treturn Collections.synchronizedSet(sortedEntries);\r\n\t}\r\n\r\n}\r\n```\r\n\r\n@vpavic, @dsyer, @wilkinsona, please let me know your thoughts.\r\n\r\nCheers,\r\n\r\nSam', ""Thanks @sbrannen, looks good at first glance.\r\n\r\nMy only concern is that this basically limits the use to `SortedProperties` instances, meaning you'd have to be control of both creation and persistence of properties. It would be nice if `SortedProperties` could wrap regular `Properies` instance so that we're be able to write it repeatable manner even when we're not in control of creation."", ""> It would be nice if `SortedProperties` could wrap regular `Properies` instance so that we're be able to write it repeatable manner even when we're not in control of creation.\r\n\r\nOK. I just added that locally. The additional factory method looks like this:\r\n\r\n```java\r\n/**\r\n * Create a variant of {@link java.util.Properties} that sorts properties\r\n * alphanumerically based on their keys.\r\n *\r\n * <p>This can be useful when storing the {@code Properties} instance in a\r\n * properties file, since it allows such files to be generated in a repeatable\r\n * manner with consistent ordering of properties. Comments in generated\r\n * properties files can also be optionally omitted.\r\n *\r\n * <p>The returned {@code Properties} instance will be populated with\r\n * properties from the supplied {@code properties} object, but default\r\n * properties from the supplied {@code properties} object will not be copied.\r\n *\r\n * @param properties the {@code Properties} object from which to copy the\r\n * initial properties\r\n * @param omitComments {@code true} if comments should be omitted when\r\n * storing properties in a file\r\n * @return a new {@code Properties} instance\r\n * @since 5.2\r\n * @see #createSortedProperties(boolean)\r\n */\r\npublic static Properties createSortedProperties(Properties properties, boolean omitComments) {\r\n\treturn new SortedProperties(properties, omitComments);\r\n}\r\n```\r\n\r\nSo, I hope that meets all of your needs now."", 'Looks good, thanks Sam! :+1:', 'Thanks, @sbrannen. I can confirm that we have no need for storing to XML in a repeatable manner.\r\n\r\n', 'Oh... well... it turns out that my implementation fully supports XML as well. 😇 ', 'The new `createSortedProperties(...)` factory methods in `CollectionFactory` are now in place. See c39c4211df15500996142a265d7afcc31c23c6f8 for details, and feel free to try it out in an upcoming snapshot build.']"
5405c07d26db564cb680c713dce5abb859635147,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java,Add_Condition,"+		if (!this.setMetadataReaderFactoryCalled) {
+			this.metadataReaderFactory = new CachingMetadataReaderFactory(resourceLoader);
+		}",3,condition,Configuration class processing uses MetadataReaderFactory for current ResourceLoader,"Issue: SPR-14684
",,19248,1,"[""ConfigurationClassParser does not use ApplicationContext's ResourceLoader for its MetadataReaderFactory [SPR-14684]""]","['**[Denis Miorandi](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.miorandi)** opened **[SPR-14684](https://jira.spring.io/browse/SPR-14684?redirect=false)** and commented\n\n# Scenario description:\n\nI\'ve got a spring webapp like this\n- webapp is main context + main classloader\n- plugins are child contexts + child classloaders. Note that plugins read files from disk\n  (via custom classloader, not from jar)\n  this work fine in spring 3.2.x.\n  When migrated to spring 4.3.2 + spring boot 1.4, I\'ve got an issue starting up.\n  In some cases it doesn\'t load file using the expected resourceLoader (classpath instead of expexted file)\n  The only changing is I\'ve used a spring boot annotated class starting instead a web.xml one.\n\n# Issue:\n\nIf you look at attacched files (stack), it seems that spring scan two times\n1. On scan 1 spring use the webapp/plugin ResourceLoader, so that file are loaded as FileSystemResource as  expected\n2. On scan 2 (ConfigurationClassParser one) spring use DefaultResourceLoader instead of the webapp/plugin one. In this case it recognize resource as classpath/jar and it fails (due to application logic). It seems that ConfigurationClassParser doesn\'t take in account main context\n\n# My ugly patch\n\nActually the only solution I found is to patch SimpleMetadataReaderFactory forcing my logic\n\n{{\t`@Override`\npublic MetadataReader getMetadataReader(String className) throws IOException {\nString resourcePath = ResourceLoader.CLASSPATH_URL_PREFIX +\nClassUtils.convertClassNameToResourcePath(className) + ClassUtils.CLASS_FILE_SUFFIX;\nResource resource = this.resourceLoader.getResource(resourcePath);\n\n    \t// CLESIUS PATCH - BEGIN\n    \t// Load from disk instead of jar, otherwise crash\n    \tif(SingletonLoader.getInstance()!=null && className.startsWith(""it.clesius"")){\n    \t\tClass<?> cPlugin=SingletonLoader.getInstance().getClass(className);\n    \t\tif (cPlugin!=null){\n    \t\t\ttry{\n    \t\t\t\tresourcePath=cPlugin.getClassLoader().getResource(ClassUtils.convertClassNameToResourcePath(className) + ClassUtils.CLASS_FILE_SUFFIX).toString().replace(""file://"", ""//"");\n    \t\t\t\tresource=new FileSystemResource(resourcePath);\n    \t\t\t}catch(Exception e){\n    \t\t\t\tSystem.out.println(""CLESIUS PATCH - Error on spring clesius Patch"");\n    \t\t\t}\n    \t\t}\n    \t}\t\t\n    \t// CLESIUS PATCH - END\t\t\n    \t\n    \tif (!resource.exists()) {\n    \t\t// Maybe an inner class name using the dot name syntax? Need to use the dollar syntax here...\n    \t\t// ClassUtils.forName has an equivalent check for resolution into Class references later on.\n    \t\tint lastDotIndex = className.lastIndexOf(\'.\');\n    \t\tif (lastDotIndex != -1) {\n    \t\t\tString innerClassName =\n    \t\t\t\t\tclassName.substring(0, lastDotIndex) + \'$\' + className.substring(lastDotIndex + 1);\n    \t\t\tString innerClassResourcePath = ResourceLoader.CLASSPATH_URL_PREFIX +\n    \t\t\t\t\tClassUtils.convertClassNameToResourcePath(innerClassName) + ClassUtils.CLASS_FILE_SUFFIX;\n    \t\t\tResource innerClassResource = this.resourceLoader.getResource(innerClassResourcePath);\n    \t\t\tif (innerClassResource.exists()) {\n    \t\t\t\tresource = innerClassResource;\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn getMetadataReader(resource);\n    }\n\n}}\n\n---\n\n**Affects:** 4.3.2\n\n**Attachments:**\n- [scan1_right.png](https://jira.spring.io/secure/attachment/23539/scan1_right.png) (_188.25 kB_)\n- [scan2_wrong(fail).png](https://jira.spring.io/secure/attachment/23538/scan2_wrong%28fail%29.png) (_183.84 kB_)\n\n**Issue Links:**\n- #19219 Cache ASM metadata at the context level\n- #19250 Consistent *Aware callbacks for TypeFilters, ImportSelectors and ImportBeanDefinitionRegistrars\n\n']",['closed'],[10],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n`ConfigurationClassPostProcessor` instantiates its `CachingMetadataReaderFactory` via the `ClassLoader` only, not via the `ResourceLoader`, which leads to `CachingMetadataReaderFactory` internally creating its own `DefaultResourceLoader` for the given `ClassLoader`. This is clearly lacking and needs to be revised.\n\nHowever, I'm surprised that this actually worked in 3.2.x! This is probably due to more defensive class loading in 4.x, making use of the `CachingMetadataReaderFactory` in places where it did not in 3.2.x. Or are you making use of configuration classes in places where you did not use them in the 3.2.x based version of your application?\n\nIn any case, we'll fix this for the upcoming 4.3.3.\n"", ""**[Denis Miorandi](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.miorandi)** commented\n\nIn spring 3.2.x app boot from web.xml, now from spring boot. It's possible this code (ConfigurationClassPostProcessor ) was not used on my previous version of sw, before upgrade to spring 4.\n\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAlright, thanks for the clarification! I suppose a directly equivalent arrangement probably wouldn't have worked in 3.2.x either, so this isn't an immediate regression. In any case, we'll do our best to make this work in 4.3.3, scheduled for release late next week.\n"", '**[Denis Miorandi](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.miorandi)** commented\n\nok tks Juergen\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIt would be great if you could give the latest `4.3.3.BUILD-SNAPSHOT` a try... We intend to release 4.3.3 next Monday but it'd be great to get your feedback ahead of that.\n"", '**[Denis Miorandi](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.miorandi)** commented\n\nI should able to test it this afgternoon or at least on tomorrow\n', ""**[Denis Miorandi](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.miorandi)** commented\n\nI'm using springboot 1.4 + some spring 4.3.2 deps. I've replaced/forced spring-core+spring-context to snapshot.\nIt doesn't work. Is it enough? May I replace something else?\n"", ""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\n[Denis Miorandi](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.miorandi) you must replace the whole spring framework and not individual jars. If you are using the `spring-boot-starter-parent`, just add `<spring.version>4.3.2.BUILD-SNAPSHOT</spring.version>` to your pom. Or just upgrade to Spring Boot `1.4.1.BUILD-SNAPSHOT` that already uses the latest spring framework version.\n\nAlway run `mvn dependencies:list -D sort` to make sure that you're using the expected version.\n\nOr you can generate an app from `start.spring.io` and choose `1.4.1.BUILD-SNAPSHOT`. That way you'll be on the latest release.\n"", ""**[Denis Miorandi](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.miorandi)** commented\n\nProbably you means <spring.version>4.3.3.BUILD-SNAPSHOT</spring.version> not 4.3.2..\nBtw my spring-core and spring-context was 4.3.3.BUILD-SNAPSHOT on test, checked in WEB-INF lib. I miss just to update  spring.boot to 1.4.1.BUILD-SNAPSHOT\nbut I suspect changes are in core/context not in spring boot.\nAnyway I'll try during weekend if possible.\n\n"", ""**[Denis Miorandi](https://jira.spring.io/secure/ViewProfile.jspa?name=denis.miorandi)** commented\n\nI've made test with full spring replacement  1.4.1.BUILD-SNAPSHOT + 4.3.3.BUILD-SNAPSHOT. Btw I've verified war file outcome and there was no contamination of older versions.\nIt didn't work. I've got same behavior (from external perspective) that in 4.3.2. Btw I should make a debug session to give your more informations. Before do it what kind of test did you do?\nAre you able to replicate a scenario like the not working one in your automatic tests?\n\nActually without my patch it doesn't solve the issue.\n""]"
5459304a4b5e8dc6ce08ff8d9e09228ab7d72659,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java,Add_Condition,"+ * @author Juergen Hoeller
-					AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(annotationType).get(0);
-					if (mapping.isSynthesizable()) {
-						return true;
+					if (annotationType != this.annotationType) {
+						AnnotationTypeMapping mapping = AnnotationTypeMappings.forAnnotationType(annotationType).get(0);
+						if (mapping.isSynthesizable()) {
+							return true;
+						}",8,condition,Re-introduce support for annotation declarations with self references,"Closes gh-31400
",,31400,1,['AnnotationScanner scanning leads to StackOverflowError with recursive annotation'],"['**Affects:**  6.0.12\r\n\r\nI am trying to update from Spring boot 2.7.13 to 3.1.4.\r\nWe are using this custom annotation to document configuration properties.\r\n\r\n```\r\n@Target(AnnotationTarget.CLASS, AnnotationTarget.PROPERTY)\r\nannotation class DocProperty(\r\n  val name: String = """",\r\n  val displayName: String = """",\r\n  val description: String = """",\r\n  val defaultValue: String = """",\r\n  val defaultExplanation: String = """",\r\n  val children: Array<DocProperty> = [],\r\n  val prefix: String = """",\r\n  val removedIn: String = """",\r\n  val removalReason: String = """",\r\n  val hidden: Boolean = false\r\n)\r\n```\r\n\r\nWhen I run the app, it fails:\r\n\r\n```\r\n2023-10-10T17:17:04.743+02:00 ERROR 22027 --- [  restartedMain] o.s.boot.SpringApplication               : Application run failed\r\n\r\norg.springframework.beans.factory.BeanDefinitionStoreException: Failed to read candidate component class: URL [jar:file:/Users/jenik/IdeaProjects/tolgee-server/public/backend/data/build/libs/data-local-plain.jar!/io/tolgee/configuration/tolgee/S3Settings.class]\r\n\tat org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.scanCandidateComponents(ClassPathScanningCandidateComponentProvider.java:463) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:317) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:276) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.annotation.ComponentScanAnnotationParser.parse(ComponentScanAnnotationParser.java:128) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.annotation.ConfigurationClassParser.doProcessConfigurationClass(ConfigurationClassParser.java:289) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.annotation.ConfigurationClassParser.processConfigurationClass(ConfigurationClassParser.java:243) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:196) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.annotation.ConfigurationClassParser.parse(ConfigurationClassParser.java:164) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.annotation.ConfigurationClassPostProcessor.processConfigBeanDefinitions(ConfigurationClassPostProcessor.java:415) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.annotation.ConfigurationClassPostProcessor.postProcessBeanDefinitionRegistry(ConfigurationClassPostProcessor.java:287) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanDefinitionRegistryPostProcessors(PostProcessorRegistrationDelegate.java:344) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.support.PostProcessorRegistrationDelegate.invokeBeanFactoryPostProcessors(PostProcessorRegistrationDelegate.java:115) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.support.AbstractApplicationContext.invokeBeanFactoryPostProcessors(AbstractApplicationContext.java:771) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:589) ~[spring-context-6.0.12.jar:6.0.12]\r\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.1.4.jar:3.1.4]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:737) ~[spring-boot-3.1.4.jar:3.1.4]\r\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:439) ~[spring-boot-3.1.4.jar:3.1.4]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) ~[spring-boot-3.1.4.jar:3.1.4]\r\n\tat io.tolgee.Application$Companion.main(Application.kt:26) ~[main/:na]\r\n\tat io.tolgee.Application.main(Application.kt) ~[main/:na]\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:568) ~[na:na]\r\n\tat org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50) ~[spring-boot-devtools-3.1.4.jar:3.1.4]\r\nCaused by: java.lang.StackOverflowError: null\r\n\tat java.base/java.lang.ref.ReferenceQueue.poll(ReferenceQueue.java:117) ~[na:na]\r\nCaused by: java.lang.StackOverflowError: null\r\n\r\n\tat org.springframework.util.ConcurrentReferenceHashMap$ReferenceManager.pollForPurge(ConcurrentReferenceHashMap.java:1006) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.util.ConcurrentReferenceHashMap$Segment.restructureIfNecessary(ConcurrentReferenceHashMap.java:574) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.util.ConcurrentReferenceHashMap$Segment.getReference(ConcurrentReferenceHashMap.java:495) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.util.ConcurrentReferenceHashMap.getReference(ConcurrentReferenceHashMap.java:265) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.util.ConcurrentReferenceHashMap.get(ConcurrentReferenceHashMap.java:235) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.getDeclaredAnnotations(AnnotationsScanner.java:446) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.getDeclaredAnnotation(AnnotationsScanner.java:435) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.resolveAliasedForTargets(AnnotationTypeMapping.java:144) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:122) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat java.base/java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:330) ~[na:na]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:405) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:126) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat java.base/java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:330) ~[na:na]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.computeSynthesizableFlag(AnnotationTypeMapping.java:405) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:126) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:112) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:75) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:68) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:245) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat java.base/java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:330) ~[na:na]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:241) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:199) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:182) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:169) ~[spring-core-6.0.12.jar:6.0.12]\r\n\tat \r\n...\r\n```\r\n\r\nI\'ve epxlored what happens, and the issue is that method `org.springframework.core.annotation.AnnotationTypeMapping#computeSynthesizableFlag` finds the `children` property of our `DocProperty` class annotation and calls the `forAnnotationType`, with the `children`\'s type which is `DocProperty` again. And that\'s infinite loop.\r\n\r\nIt\'s reproducible here: https://github.com/tolgee/tolgee-platform/pull/1938/commits/259cd313e625b9e87af26e4f9c0e7a4b96583ada (the specific commit)']",['closed'],[4],"['It looks like #28618 removed the support for cyclic annotation definitions introduced in #28012 but unfortunately also removed the ability to handle nested references to the same annotation type.', 'Is there any workaround like ignoring the annotation?', ""I'm afraid there isn't an obvious workaround. We'll have to address this in our `AnnotationTypeMapping` implementation.\r\n\r\nNote that Java annotations are not allowed to refer to themselves in their attributes, so this remains Kotlin specific. Kotlin prohibits deep cycles (X -> Y -> X) in annotation declarations as of Kotlin 1.9 (aligned with Java) but still allows self references (in contrast to Java)... unfortunately we missed the latter part there."", '@jhoeller The fix does not work for the following legal Kotlin code:\r\n```\r\n@Target(AnnotationTarget.CLASS, AnnotationTarget.PROPERTY)\r\nannotation class DocProperty(\r\n    val name: String = """",\r\n    val displayName: String = """",\r\n    val description: String = """",\r\n    val defaultValue: String = """",\r\n    val defaultExplanation: String = """",\r\n    val children: Array<DocProperty> = [],\r\n    val prefix: String = """",\r\n    val removedIn: String = """",\r\n    val removalReason: String = """",\r\n    val hidden: Boolean = false,\r\n    val externalMap: Array<DocPropertyMapEntry> = []\r\n)\r\n\r\nannotation class DocPropertyMapEntry(\r\n    val docProperty: DocProperty = DocProperty()\r\n)\r\n```\r\nsee the externalMap property. Can Spring add support for this valid use-case please 🙏 \r\n\r\nThis is my use-case: https://github.com/OpenFolder/kotlin-asyncapi/blob/master/kotlin-asyncapi-annotation/src/main/kotlin/org/openfolder/kotlinasyncapi/annotation/Schema.kt']"
550f13e8ed678447a61872b4f9ff96d918003102,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-			ConvertersForPair convertersForPair = this.converters.get(convertiblePair);
-			if (convertersForPair == null) {
-				convertersForPair = new ConvertersForPair();
-				this.converters.put(convertiblePair, convertersForPair);
-			}
-			return convertersForPair;
+			return this.converters.computeIfAbsent(convertiblePair, k -> new ConvertersForPair());",7,condition,Simplify GenericConversionService.getMatchableConverters(),Closes gh-24403,,24403,1,['Simplify GenericConversionService.getMatchableConverters()'],['It can be simplify this way.'],['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks']
55b258f2dec5110145f9017fc8fc3ba05bbb7aeb,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompDecoder.java,Add_Condition,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
+		int index = inString.indexOf('\\');
+		if (index == -1) {
+			return inString;
+		}
-		int index = inString.indexOf('\\');",5,condition,Avoid unnecessary allocations in StompDecoder#unescape,"Closes gh-29443
",,29443,1,['Avoid unnecessary allocations in StompDecoder#unescape'],"['Hi,\r\n\r\nI noticed in one of our applications that a tiny amount (0,5-1%) of allocations is caused by `StompDecoder#unescape`. The unfortunate bit is that there is actually no unescaping needed in most of the cases. This PR avoids unnecessary allocations if the String to unescape is not containing any `\\` character.\r\n\r\nCheers,\r\nChristoph']",['closed'],[1],['This has been merged into `5.3.x` and `main`.\r\n\r\nThanks 👍 ']
55faf6e3205d26a4ba693f40c1ea1cef179f31cb,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Condition_Change,"+import org.springframework.http.HttpMethod;
-				boolean isGet = ""GET"".equals(method);
-				if (isGet || ""HEAD"".equals(method)) {
+				boolean isGet = HttpMethod.GET.matches(method);
+				if (isGet || HttpMethod.HEAD.matches(method)) {",5,condition,Use HttpMethod enums,"See gh-26855
",,26855,1,['Use HttpMethod enum constants instead of strings in DispatcherServlet'],"['doDispatch method of Dispatcher servlet class uses hard coded strings, such as ""GET"" and ""HEAD"".\r\nso, I replaced it with HttpMethod enum.']",['closed'],[11],"['@BryceYangS Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26855)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26855) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@BryceYangS Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26855)!', ""i think it's not a good idea"", ""> i think it's not a good idea\r\n\r\n@TAKETODAY Could I hear why you think so? Your feedback will be of great help to my study."", ""I just stumbled over this PR - I hope you don't mind me commenting. I wonder if we should use `HttpMethod.GET.name().equals()` rather than `HttpMethod.GET.matches()`. I did a small benchmark (on JDK 11) comparing things, and the former is expectedly a bit faster because it avoids the map access.\r\n\r\n```\r\nMyBenchmark.testMatches                         avgt    6   4,476 ±  1,153   ns/op\r\nMyBenchmark.testNameEquals                      avgt    6   2,462 ±  0,114   ns/op\r\n```\r\nGiven that we deal with `DispatcherServlet` here, I wonder if we should strive for the better performing option even though it's definitely a micro-optimization.\r\n"", '@dreis2211 I suppose we could also fine-tune the `HttpMethod.matches` implementation to `name().equals(method)` then - if known to be faster?', '@jhoeller I was wondering but it actually was like that before - see 3d87718fc6d14a9638682317121f9647e0441cc3. Maybe you remember why that changed?', '@jhoeller @dreis2211 Thank all of your comments. I thought the problem about a performance for a while. If there is a reason why `HttpMethod.matches ` was changed, How about using `name().equals(method)` in DispatcherServlet?', '@BryceYangS Using `name().equals(method)` is not as good as using the original', 'No idea why I changed that back then... maybe a vague suspicion that hashing within the `Map` lookup would be faster than a String equality comparison, or maybe just a stylistic notion? In any case, we can change the current `HttpMethod.resolve` implementation back to a name comparison if that is known to be faster, and then rely on that implementation where appropriate.', ""This has been merged and I've also switched HttpMethod matches to String equals comparison with b76e0c482608c664d5d1d701b995dc4ceb0ed340.""]"
5619b005f03d5b4160c3a0bf31991067f58401be,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotatedElementUtils.java,Condition_Change,"-	 * This method is invoked by
-	 * {@link #searchWithGetSemantics(AnnotatedElement, Class, String, Processor, Set, int)}
-	 * to perform the actual search within the supplied list of annotations.
+	 * This method is invoked by {@link #searchWithGetSemantics} to perform
+	 * the actual search within the supplied list of annotations.
-				if ((annotation.annotationType() == annotationType
-						|| annotation.annotationType().getName().equals(annotationName))
-						|| processor.alwaysProcesses()) {
-
+				if (annotation.annotationType() == annotationType ||
+						annotation.annotationType().getName().equals(annotationName) ||
+						processor.alwaysProcesses()) {",7,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
564c6f7f86467e1f831d107d571ec34501104b18,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/groovy/GroovyBeanDefinitionReader.java,Condition_Change,"-				for (Object key : namedArgs.keySet()) {
-					String propName = (String) key;
-					setProperty(propName, namedArgs.get(propName));
+				for (Map.Entry<?, ?> entity : namedArgs.entrySet()) {
+					String propName = (String) entity.getKey();
+					setProperty(propName, entity.getValue());",6,iteration,improve the performance of iteration,,,,0,N/A,N/A,N/A,N/A,N/A
56688ab36130aa9b08c456a2ef90287337c39a74,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Add_Condition,"-				String headers = values.isEmpty() ? """" : ""masked"";
+				String headers;
+				else {
+					headers = (!values.isEmpty() ? ""masked"" : """");
+				}",5,condition,Polish contribution,"See gh-31244
",,31244,1,['Use `List#isEmpty()` in `DispatcherServlet`'],"['There was no reason for getRequestUri() to be static, so we removed it.\r\n\r\nIf the reason the method is static is because it does not access state from the instance, then I think there are several more candidates for static.\r\nBased on this, I think that static in `getRequestUri()` is unnecessary.\r\n\r\n<br>\r\n\r\nAnd, all the methods in `DispatcherServlet` used `isEmpty()`, and only one part used `size() > 0`.\r\nI changed this to `isEmpty()` for uniformity.']",['closed'],[5],"[""Hi @shin-mallang,\r\n\r\n> There was no reason for getRequestUri() to be static, so we removed it.\r\n> \r\n> If the reason the method is static is because it does not access state from the instance, then I think there are several more candidates for static. Based on this, I think that static in `getRequestUri()` is unnecessary.\r\n\r\nThat method is intentionally `static` because it is an internal helper utility method that should not rely on state in a `DispatcherServlet` instance. Although it's not a steadfast rule in our code base, we often do that for such use cases, but sometimes we don't think about it. In light of that, I will omit that change when merging this PS and consistently make such utility methods `static` in a separate commit.\r\n\r\n> And, all the methods in `DispatcherServlet` used `isEmpty()`, and only one part used `size() > 0`. I changed this to `isEmpty()` for uniformity.\r\n\r\nGood catch. I've repurposed this PR to focus on that and have changed the title accordingly."", 'This has been merged into `main` in 3932f91117aad8afa082bab63ed7cc44f7c01b70 and revised in 56688ab36130aa9b08c456a2ef90287337c39a74.\r\n\r\nThanks', ""@sbrannen\nThanks for the answer!\nIt's a utility method, so that's why you wrote it with static!\n\nI have one question.\n\nIs there any advantage to doing it in this way other than it reveals the intent of the method is utility?\n\nI'm just curious as to the reasoning behind doing it this way."", ""> @sbrannen Thanks for the answer! \r\n\r\nYou're very welcome.\r\n\r\n> It's a utility method, so that's why you wrote it with static!\r\n\r\nYes\r\n\r\n> Is there any advantage to doing it in this way other than it reveals the intent of the method is utility?\r\n\r\nThe rationale is two-fold:\r\n\r\n1. It reveals the intent.\r\n2. The use of and invocation of static methods may potentially result in better performance.\r\n"", '@sbrannen \n\nThank you for your kind answer.🙇🏻\u200d♂️\nIt really helped me a lot.']"
574dffb60b52c7cb708a436b2939def65b94d0c9,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java,Condition_Change,"-		if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME || mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) {
+		int resolvedAutowireMode = mbd.getResolvedAutowireMode();
+		if (resolvedAutowireMode == AUTOWIRE_BY_NAME || resolvedAutowireMode == AUTOWIRE_BY_TYPE) {
-			if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_NAME) {
+			if (resolvedAutowireMode == AUTOWIRE_BY_NAME) {
-			if (mbd.getResolvedAutowireMode() == AUTOWIRE_BY_TYPE) {
+			if (resolvedAutowireMode == AUTOWIRE_BY_TYPE) {",7,condition,Some trivial optimization in method populateBean() (#22792),Optimize the number of getResolvedAutowireMode() method calls,,22792,1,['Some trivial optimization in method populateBean()'],"[""I don't think it's necessary to call the same get method so many times, maybe can do some trivial optimization here.""]",['closed'],[3],"['@cenjieHo Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22792)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22792) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@cenjieHo Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22792)!', 'Thanks for raising this! Even if such field access through method calls is usually very efficient at runtime, this is worth changing for clarification purposes in any case: namely evaluating the same state of the field, never getting a different autowire mode returned from that getter. A one-time method call with a locally cached result makes this clear.']"
58e113a591fc040cbe1534ece68c5a28bf6d73bf,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/AutoProxyRegistrar.java,Add_Condition,"+			if (candidate == null) {
+				continue;
+			}",3,condition,Avoid NPE in AutoProxyRegistrar when no attribute found,"Issue: SPR-15055
",,19621,1,['AutoProxyRegistrar throws NullPointer on @kotlin.Metadata Annotation [SPR-15055]'],"['**[Marvin Schramm](https://jira.spring.io/secure/ViewProfile.jspa?name=marvinschramm)** opened **[SPR-15055](https://jira.spring.io/browse/SPR-15055?redirect=false)** and commented\n\nWhen using a simple spring boot application with both mixed Java And Kotlin files\nThe Kotlin Plugin seems to introduce a new Annotation for some classes. ""`@kotlin`.Metadata""\n\nWhen starting the Spring Boot Project the AutoProxyRegistrar.java#L63 is not able to resolve the\nannotation metadata and will throw a NullPointerException.\nIn my case, this only happens when i use the `@EnableCaching` Annotation (i think when not using it, the AutoProxyRegistrar class is not invoked)\n\n1. Repository For This is here\n   https://github.com/spring-projects/spring-framework-issues/pull/145\n\nOnly those two classes and a single dependency is needed to reproduce this issue\n\n```\n@EnableCaching\n@Configuration\nopen class CacheConfiguration {\n    //this can be empty. when removing the @EnableCaching Annotation everything works\n}\n```\n\n```\n@SpringBootApplication\npublic class Application {\n\n    public static void main(String[] args) {\n        SpringApplication.run(Application.class, args);\n    }\n}\n```\n\n```\ngroup = \'org.springframework.issues\'\nversion = \'1.0.0.SNAPSHOT\'\n\nbuildscript {\n    ext {\n        kotlin_version = \'1.0.5-2\'\n        springBootVersion = \'1.4.3.RELEASE\'\n    }\n    repositories {\n        jcenter()\n        mavenCentral()\n    }\n    dependencies {\n        classpath(""org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"")\n        classpath(""org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlin_version}"")\n    }\n}\n\napply plugin: \'java\'\napply plugin: \'eclipse\'\napply plugin: \'kotlin\'\napply plugin: \'org.springframework.boot\'\napply plugin: \'idea\'\n\nrepositories {\n    maven { url \'http://repo.spring.io/snapshot\' }\n    mavenCentral()\n}\n\ndependencies {\n    compile(group: \'org.springframework.boot\', name: \'spring-boot-starter\')\n}\n\n[compileJava, compileTestJava]*.options*.compilerArgs = [\'-Xlint:all\']\n\nsourceCompatibility = 1.8\ntargetCompatibility = 1.8\n```\n\nP.S. I am sorry if this is more are Spring-Boot and not Spring Framework issue. It was not clear for me where I should report this issue.\n\n\n---\n\n**Affects:** 4.3.5, 5.0 M3\n\n**Reference URL:** http://stackoverflow.com/questions/41334909/spring-boot-kotlin-autoproxyregistrar-causes-nullpointer-exception\n']",['closed'],[2],"['**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** commented\n\nGood catch, fixed on `master` and `4.3.x` branches via [this change](https://github.com/spring-projects/spring-framework/commit/58e113a591fc040cbe1534ece68c5a28bf6d73bf).\n', '**[Marvin Schramm](https://jira.spring.io/secure/ViewProfile.jspa?name=marvinschramm)** commented\n\nNice! Thank you!\n']"
5912d6f52af193e8bc562db80a64062394158851,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/hibernate5/LocalSessionFactoryBean.java,Add_Condition,"+	private boolean metadataSourcesAccessed = false;
+
+		this.metadataSourcesAccessed = true;
+		this.metadataSourcesAccessed = true;
+		if (this.metadataSources != null && !this.metadataSourcesAccessed) {
+			// Repeated initialization with no user-customized MetadataSources -> clear it.
+			this.metadataSources = null;
+		}
+",8,condition,LocalSessionFactoryBean clears default MetadataSources on reinitialization,"Issue: SPR-14815
",,19381,1,['Hibernate 5 LocalSessionFactoryBean should allow for dynamic mapping registration (like for Hibernate 4) [SPR-14815]'],"[""**[Arunkumar](https://jira.spring.io/secure/ViewProfile.jspa?name=arung.cse)** opened **[SPR-14815](https://jira.spring.io/browse/SPR-14815?redirect=false)** and commented\n\nWe are working on a project where we have to invoke the\nlocalSessionFactoryBean.afterPropertiesSet(); to reload the hibernate's session factory to add dynamically created HBM from our application, but we got the org.hibernate.DuplicateMappingException.\n\nUpon debugging hibernate5.2.2 source code, we found that the issue starts at the localSessionFactoryBean.afterPropertiesSet().\n\n```java\n@Override\n\tpublic void afterPropertiesSet() throws IOException {\n\t\tLocalSessionFactoryBuilder sfb = new LocalSessionFactoryBuilder(\n\t\t\t\tthis.dataSource, getResourceLoader(), getMetadataSources());\n\n// Here the getMetadataSources() has been reused in LocalSessionFactoryBuilder\n\npublic MetadataSources getMetadataSources() {\n\t\tif (this.metadataSources == null) {\n\t\t\tBootstrapServiceRegistryBuilder builder = new BootstrapServiceRegistryBuilder();\n\t\t\tif (this.resourcePatternResolver != null) {\n\t\t\t\tbuilder = builder.applyClassLoader(this.resourcePatternResolver.getClassLoader());\n\t\t\t}\n\t\t\tthis.metadataSources = new MetadataSources(builder.build());\n\t\t}\n\t\treturn this.metadataSources;\n\t}\n\n/*Here the previously created metadatasources values are being returned without clearing the xmlbindings values, so hibernate again adds (duplicates) all the .hbm  files to its sessionfactory which finally results in DuplicateMappingException. */\n```\n\nAs a quick fix in our code we have cleared the getMetadataSources.getXnlBindings\n\n```java\nlocalSessionFactoryBean.getMetadataSources().getXmlBindings().clear();\n//and then we called the \nlocalSessionFactoryBean.afterPropertiesSet();\n```\n\nThis scenario will be reproduced only when we have the joined subclass hbm mapping, because  in hiberanate 5.2.2 the duplication validation happens at InFlightMetadataCollectorImpl (Line No: 268). This method will be invoked by ModelBinder class method : bindJoinedSubclassEntities( Line No: 576).\n\n---\n\n**Affects:** 4.3.3\n\n**Issue Links:**\n- #18285 Hibernate5 metadata access\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5912d6f52af193e8bc562db80a64062394158851, https://github.com/spring-projects/spring-framework/commit/7cbab0efe3e939814657c5fdab7024bcd7eae339\n""]",['closed'],[4],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIt's not clear to me what we could do better here. `LocalSessionFactoryBean` isn't really designed for registering dynamic mappings to begin with, so this looks like an enhancement request to me. However, what specifically could we be improving to make your case work?\n"", '**[Arunkumar](https://jira.spring.io/secure/ViewProfile.jspa?name=arung.cse)** commented\n\nIn Hibernate4.LocalSessionFactoryBean.afterPropertiesSet() , LocalSessionFactoryBuilder constructor has only (this.datasource, this.resourcePatternResolver) in constructor argument whereas in In Hibernate5.LocalSessionFactoryBean.afterPropertiesSet() the LocalSessionFactoryBuilder has metaDataSource  along with datasource and resourcePatternResolver as constructor argument.  This leads to the duplicate files added in xmlBinding variable in metadatasources and lead to DuplicatMappingException in Hibernate package.\n\nIs there any specific reason to reuse the metadaSources in Hibernate5.LocalSessionFactoryBean ?  because in 3 and 4 ORM packagaes it was working fine and we have been using it for long time.\n\nIt will be good if you can add the enhancement request for registering  the dynamic mapping of .hbm files.  Meanwhile we will use  localSessionFactoryBean.getMetadataSources().getXmlBindings().clear();  as our workaround.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAs of 4.3.4, we're resetting the `MetadataSources` in `afterPropertiesSet` if they haven't been user-accessed (i.e. if there were no interactions with `setMetadataSources` / `getMetadataSources`. This should still allow for `MetadataSources` customizations as per #18285 while also covering your re-initialization case.\n"", '**[Arunkumar](https://jira.spring.io/secure/ViewProfile.jspa?name=arung.cse)** commented\n\nThank you so much !!\n']"
593bd064e1466125ef2c25141e5da6d992f3cb94,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/config/TypedStringValue.java,Condition_Change,"-		if (!(targetTypeValue instanceof Class)) {
+		if (!(targetTypeValue instanceof Class<?> clazz)) {
-		return (Class<?>) targetTypeValue;
+		return clazz;
-		if (targetTypeValue instanceof Class) {
-			return ((Class<?>) targetTypeValue).getName();
+		if (targetTypeValue instanceof Class<?> clazz) {
+			return clazz.getName();",8,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
59b66007638c6937daca6b0c5f97a0fbe8a111bf,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,Condition_Change,"-				targetClass != null && !targetClass.equals(method.getDeclaringClass())) {
+				targetClass != null && targetClass != method.getDeclaringClass()) {
-			if (resolvedPrimitive != null && lhsType.equals(resolvedPrimitive)) {
+			if (lhsType == resolvedPrimitive) {",4,condition,Class identity comparisons wherever possible,"Issue: SPR-12926
",,17519,1,"['Spring Performance Optimization, Comparing Classes [SPR-12926]']","['**[Daniel P Rossi](https://jira.spring.io/secure/ViewProfile.jspa?name=dr9885)** opened **[SPR-12926](https://jira.spring.io/browse/SPR-12926?redirect=false)** and commented\n\nThis is a task to update class comparisons to use ""=="" instead of "".equals()"". There is a significant performance gain in this change. It also makes utilities like ""BeanPropertyRowMapper"" just as efficient as writing a custom row mapper.\n\n---\n\n**Reference URL:** https://github.com/spring-projects/spring-framework/pull/773\n\n**Attachments:**\n- [EqualsTest.java](https://jira.spring.io/secure/attachment/22801/EqualsTest.java) (_30.53 kB_)\n\n**Issue Links:**\n- #19493 Improve performance for conversions using a method parameter based type descriptor with annotations\n\n']",['closed'],[6],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nOn review, it seems odd that there is a significant performance gain here: `java.lang.Class` doesn't seem to override `Object.equals` and therefore inherits a straight reference equality check from it. In a live JVM, that reference comparison would get inlined and should be effectively identical to a direct reference check. Could you provide some details on why this makes a significant difference in your scenario?\n\nJuergen\n"", '**[Daniel P Rossi](https://jira.spring.io/secure/ViewProfile.jspa?name=dr9885)** commented\n\nI\'ve written and attached a test that demonstrates the performance gain with ""JdbcUtils.getResultSetValue"" being changed to reference checks instead of equal checks...\n\nBefore: 42ms, 1000 tests, 14 distinct values\nAfter: 18ms, 1000 tests, 14 distinct values\n\nThis test should help prove my point. Let me know if there are any further questions.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIn such a micro-benchmark, the JVM isn\'t going to inline those calls yet. Method call overhead is going to make a significant difference there, in particular against a dummy `ResultSet` implementation. In a warmed-up JVM, those `equals` calls should all be inlined and the resulting performance equivalent to direct reference comparisons.\n\nWe - and I\'d argue plenty of developers - rely on inlining for efficiency at runtime. Otherwise, even `Assert` calls or calls to utility methods would be inefficient. So generally speaking, optimizing a case that would be inlined anyway falls into the category of ""premature optimization"" in source code.\n\nAlso, the Java language specification does not explicitly guarantee that `Class` can be compared by reference. `Class.equals` may theoretically be implemented in a more lenient form on some JVMs, and we need to make sure we\'re correctly handling such comparisons in the general case.\n\nNow, that said, I wouldn\'t mind optimizing the checks in `JdbcUtils` since they\'re all referring to built-in JVM types which I can\'t imagine to be present in a non-unique form. It\'s just in other places in the framework where we\'re comparing user types for which I\'d stick with `equals` for defensiveness.\n\nJuergen\n', '**[Daniel P Rossi](https://jira.spring.io/secure/ViewProfile.jspa?name=dr9885)** commented\n\nI think having only JdbcUtils changed for this would be just fine (that was all I was originally after). It has a significant performance increase when using BeanPropertyRowMapper. This makes the need to write custom row mappers almost obsolete and can increase development time where this class becomes useful.\n\nI also agree defensive programming is a better way to go. Although, if there are any other places where multiple class types are being checked (like JdbcUtils), then I would strongly recommend this change as well.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI'm doing a broader sweep through the codebase now where I'm replacing all comparisons with hard-coded `Class` references (i.e. `X.class.equals`) with identity comparisons. Also, we can use `IdentityHashMap` for maps that only hold built-in types in keys anyway (such as in `ClassUtils` and `BeanUtils`).\n\nIn other words, we're relying on `Class` identity for JDK types and Spring interface types now. This should be a safe assumption since otherwise we couldn't refer to those types in our source files or cast to them either. At the same time, we keep using `Class.equals` for any comparisons between user types.\n\nJuergen\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis turns out to be a pretty worthwhile sweep, reviewing quite a few hotspots. `NumberUtils` does plenty of class comparisons as well and may get invoked for many properties per request. The same applies to various parts of our dependency injection resolution algorithm.\n\nThe principle of comparing JDK classes and Spring interfaces by identity is now consistently applied across the codebase. We'll see whether there are any subtle regressions in the 4.2 RC phase but I doubt that there can be regressions for those specific purposes.\n\nJuergen\n""]"
5ab966fbdefc33840ff2ac4c12b26a6c306b59cf,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/support/CronField.java,Condition_Change,"-		 * minimum value of this field's range, except for daylight saving.
+		 * minimum value of this field's range.
-			T result =  this.field.getBaseUnit().addTo(temporal, amount);
-			//adjust daylight saving
-			if (get(result) != range.getMinimum()) {
-				result = this.field.adjustInto(result,result.range(this.field).getMinimum());
+			T result = this.field.getBaseUnit().addTo(temporal, amount);
+			current = get(result);
+			range = result.range(this.field);
+			// adjust for daylight savings
+			if (current != range.getMinimum()) {
+				result = this.field.adjustInto(result, range.getMinimum());",8,condition,Polish contribution,"See gh-28038
",,28038,1,['CronExpression fails to calculate next execution on the day of daylight saving time'],"['Affects: Spring Framework 5.3.15\r\n\r\nLooks like the fix for #26744 doesn\'t cover the following case.\r\n\r\nProblem: `CronExpression` fails to calculate properly next execution when running on the day of daylight saving time, just before DST is applied.\r\n\r\n```java\r\nZonedDateTime current = ZonedDateTime.of(LocalDateTime.parse(""2021-03-28T01:00:00""), ZoneId.of(""Europe/Amsterdam""));\r\nCronExpression cronExpression = CronExpression.parse(""0 5 0 * * *"");\r\nZonedDateTime next = cronExpression.next(current);\r\n```\r\n\r\nIn this case the value returned by `cronExpression.next(current)` is `2021-03-30T00:05` instead of the expected `2021-03-29T00:05`.\r\n\r\nTo be more precise any input date between `2021-03-28T00:05+01:00` and `2021-03-28T01:59+01:00` will calculate next execution to `2021-03-30T00:05` instead of the expected `2021-03-29T00:05`.\r\n\r\nAfter DST, next execution is successfully calculated i.e. `2021-03-29T00:05`.']",['closed'],[1],"['Thanks for the PR,  @vikeychen ']"
5b47816183e4e9a0dc2ad5d2175065ac17539719,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Add_Condition,"-				multipartRequestParsed = processedRequest != request;
+				multipartRequestParsed = (processedRequest != request);
+			else if (request.getAttribute(WebUtils.ERROR_EXCEPTION_ATTRIBUTE) instanceof MultipartException) {
+				logger.debug(""Multipart resolution failed for current request before - "" +
+						""skipping re-resolution for undisturbed error rendering"");
+			}",6,condition,DispatcherServlet skips multipart resolution if error page exception attribute indicates MultipartException as root cause,"Issue: SPR-11716
",,16338,1,['Skip multipart checking so that multipart errors can be handled in an @Controller method using Servlet 3 <error-page> [SPR-11716]'],"['**[steve bread](https://jira.spring.io/secure/ViewProfile.jspa?name=solze)** opened **[SPR-11716](https://jira.spring.io/browse/SPR-11716?redirect=false)** and commented\n\nI have a multipartpart config in the web.xml to limit the max upload size\n\n```xml\n<servlet>\n     <!-- some elements excluded for brevity -->\n     <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n     <multipart-config>\n          <max-file-size>2097152</max-file-size>\n          <max-request-size>2097152</max-request-size>\n          <file-size-threshold>0</file-size-threshold>\n     </multipart-config>\n</servlet>\n```\n\nand a mapping to an error controller\n\n```xml\n<error-page>\n     <location>/error</location>\n</error-page>\n```\n\nI\'m using Tomcat. A file upload greater than the max size results in an exception which the container attempts to forward to the error controller. Following the normal dispatch behavior for the error URL, Spring attempts to create a `StandardMultipartHttpServletRequest` again which once again results in a Tomcat exception for max size violation. So the error controller is not reached and instead a Tomcat error page is returned. It would be nice if there were a way to tell Spring to ignore the mutipart content for the error controller and create a regular request.\n\nIn Eclipse, I had Spring skip the multipart block in `DispatcherServlet.checkMultipart` and got the desired result.\n\nThe error controller for reference\n\n```java\n@Controller\n@RequestMapping(""/error"")\npublic class ErrorController {\n\n\t@RequestMapping(headers = ""X-Requested-With=XMLHttpRequest"")\n\tpublic ResponseEntity<String> error(HttpServletRequest request, HttpServletResponse response) {\n\t\treturn new ResponseEntity<String>(""An error occurred"", HttpStatus.BAD_REQUEST);\n\t}\n}\n```\n\n---\n\n**Affects:** 3.2.8\n\n**Issue Links:**\n- #16352 StandardServletMultipartResolver should support lazy resolution along the lines of CommonsMultipartResolver\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5b47816183e4e9a0dc2ad5d2175065ac17539719, https://github.com/spring-projects/spring-framework/commit/d3c9a31e9a10a1128c2ad8b55e4cc0519d8af32c\n']",['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe're skipping multipart resolution if the error page exception attribute in the current request indicates a MultipartException as the root cause of triggering the error handler. This should hopefully address your scenario.\n\nJuergen\n"", ""**[steve bread](https://jira.spring.io/secure/ViewProfile.jspa?name=solze)** commented\n\nThanks Juergen. I'll upgrade to Spring 4 once 4.0.4 is released and try it out.\n""]"
5b97c47fc4b9a4248db9cd2472f25ae78242baf4,spring-projects/spring-framework,spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java,Add_Condition,"+		ZonedDateTime expires = (cookie instanceof MockCookie ? ((MockCookie) cookie).getExpires() : null);
-			ZonedDateTime expires = (cookie instanceof MockCookie ? ((MockCookie) cookie).getExpires() : null);
+		else if (expires != null) {
+			buf.append(""; Expires="");
+			buf.append(expires.format(DateTimeFormatter.RFC_1123_DATE_TIME));
+		}",6,condition,Sync changes in MockHttpServletResponse test fixture,"See gh-26558
",,26558,1,['Support cookies with Expires attribute but no Max-Age attribute in MockHttpServletResponse'],"[""According to the spec it is allowed to have cookies that only use the `Expires` attribute (even though it's really old style).\r\n\r\n`MockHttpServletResponse` didn't previously support that properly.\r\n\r\nSo, added a testcase and made it work.""]",['closed'],[4],"['@koosg Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26558)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26558) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@koosg Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26558)!', 'For reference: [HTTP Cookie Syntax](https://tools.ietf.org/html/rfc6265#section-4.1.1).', 'This has been merged into `master` for 5.3.5 and backported to `5.2.x` for 5.2.14.\r\n\r\nThanks']"
5c77c3739ea2eaf292639a702f721c0b5a73a277,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java,Condition_Change,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-			for (Class<?> beanInterface : beanClass.getInterfaces()) {
+			for (Class<?> beanInterface : ClassUtils.getAllInterfacesForClass(beanClass)) {",2,iteration,Find destroy methods in superclass interfaces,"Related tests will be added in
https://github.com/spring-projects/spring-aot-smoke-tests.

Closes gh-32006
",,32006,1,['Destroy method not found in Native image for `ExecutorService` Bean type'],"[""**Describe the issue**\r\nI have a Spring Boot 3 _(version 3.2.1)_ app with nothing on the classpath except `spring-boot-starter`.\r\n\r\nif I use following code:\r\n```java\r\npackage com.example.demo;\r\n\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.context.annotation.Bean;\r\n\r\nimport java.util.concurrent.ExecutorService;\r\nimport java.util.concurrent.Executors;\r\nimport java.util.concurrent.ThreadPoolExecutor;\r\n\r\n@SpringBootApplication\r\npublic class DemoApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(DemoApplication.class, args);\r\n    }\r\n\r\n    @Bean\r\n    ExecutorService executorService() {\r\n        return Executors.newFixedThreadPool(10);\r\n    }\r\n}\r\n```\r\n\r\n...and then compile as Native image:\r\n```bash\r\nmvn clean native:compile -Pnative\r\n```\r\n\r\n...and run: \r\n```bash\r\n./target/demo\r\n```\r\n\r\n...then I get the following error:\r\n```bash\r\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'executorService': Invalid destruction signature\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:643) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975) ~[demo:6.1.2]\r\n        at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:960) ~[demo:6.1.2]\r\n        at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625) ~[demo:6.1.2]\r\n        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762) ~[demo:3.2.1]\r\n        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464) ~[demo:3.2.1]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[demo:3.2.1]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358) ~[demo:3.2.1]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347) ~[demo:3.2.1]\r\n        at com.example.demo.DemoApplication.main(DemoApplication.java:15) ~[demo:na]\r\nCaused by: org.springframework.beans.factory.support.BeanDefinitionValidationException: Could not find a destroy method named 'shutdown' on bean with name 'executorService'\r\n        at org.springframework.beans.factory.support.DisposableBeanAdapter.<init>(DisposableBeanAdapter.java:134) ~[na:na]\r\n        at org.springframework.beans.factory.support.AbstractBeanFactory.registerDisposableBeanIfNecessary(AbstractBeanFactory.java:1868) ~[demo:6.1.2]\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:639) ~[demo:6.1.2]\r\n```\r\n\r\nAnd if I'll switch bean type to a precise one: _(`ThreadPoolExecutor`)_ instead of _(`ExecutorService`)_, then it works:\r\n```java\r\n    // This works\r\n    @Bean\r\n    ThreadPoolExecutor executorService() {\r\n        return (ThreadPoolExecutor) Executors.newFixedThreadPool(10);\r\n    }\r\n\r\n    // This doesn't work\r\n    @Bean\r\n    ExecutorService executorService() {\r\n        return Executors.newFixedThreadPool(10);\r\n    }\r\n```\r\n\r\nThis issue is almost exactly the same like this one: [#29545](https://github.com/spring-projects/spring-framework/issues/29545) except that now it only reproducing for `ExecutorService`.\r\n\r\n**Steps to reproduce the issue**\r\nPlease see reproducible Demo app: [spring-native-executor-demo.zip](https://github.com/spring-projects/spring-framework/files/13890213/spring-native-executor-demo.zip)\r\n\r\n**Describe GraalVM and your environment:**\r\n - GraalVM version: **17.0.9-graal**\r\n - JDK major version: **17**\r\n - OS: **macOS Sonoma 14.1.1 (23B81)**\r\n - Architecture: **ARM64**""]",['closed'],[4],"[""Looks indeed very similar to #29545, especially given the fact that `ExecutorService` has the `void shutdown()` method defined at interface level.\r\n\r\nSurprisingly, I can't reproduce with using SDKman with `sdk use java 23.1.1.r21-nik` or `sdk use java 21.0.1-graalce`, but I can reproduce using `sdk use java 17.0.9-graalce`. On Spring AOT side, the metadata for `ExecutorService#shutdown` are generated as expected.\r\n\r\nThat likely indicates that this is a GraalVM limitation or bug only fixed in recent versions.\r\n\r\nAs consequence, and since we don't have any actionable item on Spring side, I close this ticket.\r\n\r\nI advise you to use a more recent GraalVM distribution or add invoke reflection hints on `ThreadPoolExecutor#shutdown`."", '@sdeleuze thank you for quick investigation!\r\nI see that for different java versions the metadata for `ExecutorService`\'s Destroy method generated differently.\r\n\r\nFor the Java 17 _(`sdk use java 17.0.9-graalce`)_ metadata looks like this:\r\n```json\r\n  {\r\n    ""name"": ""java.util.concurrent.ExecutorService"",\r\n    ""queryAllPublicMethods"": true,\r\n    ""queryAllDeclaredMethods"": true,\r\n    ""methods"": [\r\n      {\r\n        ""name"": ""shutdown"",    <<== one method, which is not default in ExecutorService interface\r\n        ""parameterTypes"": [ ]\r\n      }\r\n    ]\r\n  },\r\n\r\n```\r\n\r\n...but for the Java 21 _(`sdk use java 21.0.1-graalce`)_ metadata looks like this:\r\n\r\n```json\r\n  {\r\n    ""name"": ""java.util.concurrent.ExecutorService"",\r\n    ""queryAllPublicMethods"": true,\r\n    ""queryAllDeclaredMethods"": true,\r\n    ""methods"": [\r\n      {\r\n        ""name"": ""close"",      <<== new default method\r\n        ""parameterTypes"": [ ]\r\n      }\r\n    ]\r\n  },\r\n```\r\n\r\n...because, since the Java 19 `ExecutorService` interface extends `AutoClosable`, and has [`default void close()` method](https://docs.oracle.com/en/java/javase/21/docs/api/java.base/java/util/concurrent/ExecutorService.html#close()).\r\n\r\nSo, probably this is the issue?', ""Good catch, this is probably the reason for such difference of behavior. But that's does not explain why the repro for #29545 works and this one on Java 17 doesn't.\r\n\r\nAfter a deeper look, I think I found the cause: #29545 does not attempt to find methods in superclass interfaces. As a consequence, I reopen this issue."", '@sdeleuze I suppose this should be backported to 6.0.x as well?']"
5cbc972a0de195ebb09645f65a1dea8fb85880c9,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/AbstractJmsListeningContainer.java,Condition_Change,"- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-	 * at debug level.
+	 * at warn level.
-		if (logger.isDebugEnabled()) {
-			logger.debug(""Listener container task ["" + task + ""] has been rejected and paused: "" + ex);
+		if (logger.isWarnEnabled()) {
+			logger.warn(""Listener container task ["" + task + ""] has been rejected and paused: "" + ex);",4,condition,Log rejected listener container tasks at warn level,"Closes gh-27451
",,27451,1,['DefaultMessageListenerContainer does not log an error/warning when consumer tasks have been rejected'],"['**Affects:** 5.1.2, 5.3.9\r\n\r\n_Background:_ We experienced an issue due to `DefaultMessageListenerContainer` no longer receiving messages. This was because of a misunderstanding on our part how `ThreadPoolExecutorFactoryBean` works. We used following settings for the executor:\r\n\r\ncorePoolSize=5\r\nmaximumPoolSize=10\r\nqueueCapacity=1\r\n\r\nwhich was injected into a `DefaultMessageListenerContainer` with these parameters:\r\n\r\nconcurrentConsumers=1\r\nmaxConcurrentConsumers=10\r\nmaxMessagesPerTask=1\r\n\r\nThe goal was to have a dynamic scaling of threads aligned with the scaling of consumers; however we shouldn\'t have set neither a queue capacity nor a maximum pool size and rather used something like `Executors.newCachedThreadPool()`; after all, the container will take care of not scheduling more than maxConcurrentConsumers * 2 threads in the worst case (since each task reschedules itself if all are busy).\r\n\r\nOur problem was reproducible given [this test](https://github.com/grubeninspekteur/defaultmessagelistenercontainer/blob/master/src/test/java/com/example/demo/MessageListenerTest.java), the log is available [here](https://github.com/grubeninspekteur/defaultmessagelistenercontainer/blob/master/experiment.log) (I killed the process after no more messages were being received).\r\n\r\n_The issue:_ There are some rejected task debug level log entries due to the executor misconfiguration, but no warn or error entries. I would expect at least the error ""All scheduled consumers have been paused, probably due to tasks having been rejected. Check your thread pool configuration! Manual recovery necessary through a start() call."" at [DefaultMessageListenerContainer.java#L1180-L1183](https://github.com/spring-projects/spring-framework/blob/main/spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java#L1180-L1183) to appear. I don\'t understand why it didn\'t, since everything happens inside locks held on the `lifecycleMonitor`.\r\n\r\nOn a side note, why is the rejection of tasks logged only at debug level (not even info)? After all, dropping below `concurrentConsumers` raises a warning (this works in the test if I set `concurrentConsumers` to 2). Is there any use case of configuring an executor that occasionally rejects tasks?']",['closed'],[1],"[""Not sure why the error did not get logged, but in any case, each individual rejection should get logged at warn level at least. While executor implementations may temporarily reject tasks for any reason, it really isn't the norm, in particular not with the common executor implementations out there. I'll therefore backport the log level change to 5.2.18 as well.""]"
5d5cd17d33c59f105f992373d6e0aa013c7a02d3,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java,Condition_Change,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-	/** Cache of early target objects: cacheKey to bean instance. */
-	private final Map<Object, Object> earlyTargetReferences = new ConcurrentHashMap<>(16);
+	private final Map<Object, Object> earlyBeanReferences = new ConcurrentHashMap<>(16);
-		this.earlyTargetReferences.put(cacheKey, bean);
+		this.earlyBeanReferences.put(cacheKey, bean);
-			if (this.earlyTargetReferences.remove(cacheKey) != bean) {
+			if (this.earlyBeanReferences.remove(cacheKey) != bean) {",6,condition,"Polish ""Rename earlyProxyReferences in AbstractAutoProxyCreator""","See gh-23914
",,23914,1,['Rename earlyProxyReferences to earlyBeanReferences in AbstractAutoProxyCreator'],"['The original map named earlyProxyReferences seems to stores the target object, not the proxy object.']",['closed'],[1],"[""Thanks @chenqimiao. For consistency with the method that fills the cache, I've renamed that to `earlyBeanReferences`.""]"
5dcd55b23b5dd43e5e7ef7241c15942ab8ceedb8,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java,Add_Condition,"-			if (logger.isDebugEnabled()) {
+			SimpMessageType messageType = SimpMessageHeaderAccessor.getMessageType(message.getHeaders());
+			if (messageType.equals(SimpMessageType.CONNECT) && logger.isErrorEnabled()) {
+				logger.error(""Message broker is not active. Ignoring: "" + message);
+			}
+			else if (logger.isDebugEnabled()) {",6,condition,Log ignored CONNECT messages at error level,"Issue: SPR-11673
",,16296,1,['no msg when cannot authorize against external queue [SPR-11673]'],"['**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11673](https://jira.spring.io/browse/SPR-11673?redirect=false)** and commented\n\nSo i tried putting in the following lines in my code to pass a fake password:\n\n```\n StompBrokerRelayRegistration registration = config.enableStompBrokerRelay(""/topic"");\n        registration.setRelayHost(""xxxx.com"");\n        registration.setSystemPasscode(""hello"");\n        registration.setClientPasscode(""hello"");\n\n```\n\nthe funny thing is the logs still just show this:\n\n```\n16:24:47,103  INFO reactor-tcp-io-2 netty.NettyTcpClient:304 - CONNECT: [id: 0x0db8042b, /192.168.1.15:49980 => xxxx.com/162.242.220.165:61613]\n```\n\nof course there is no data transfer cause the msg queue itself wont allow authentication with a non-existent password, but nothing in the logs by spring shows we had a bad authentication\n\n\n---\n\n**Affects:** 4.0.3\n']",['closed'],[2],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI see this for the ""system"" connection at startup (DEBUG level):\n\n```\n10:21:58 [reactor-tcp-io-1] StompDecoder - Decoded [Payload byte[32]][Headers={stompCommand=ERROR, nativeHeaders={content-type=[text/plain], message=[Bad CONNECT], content-length=[32], version=[1.0,1.1,1.2]}, simpMessageType=OTHER, contentType=text/plain, id=31149240-3fb5-63b8-15fd-11166e51e9f2, timestamp=1398867718551}]\n```\n\nAnd then this for client connections later (TRACE level):\n\n```\n10:22:31 [clientInboundChannel-2] StompBrokerRelayMessageHandler - Message broker is not active. Ignoring message id=7ac7d601-e1a9-587b-5dbc-a78dd0ac73dd\n```\n\nI made changes so that:\n\n(a) any STOMP ERROR frame received from the broker is logged at **error** level\n(b) any client CONNECT frame ignored when the broker is inactive is logged at **error** level\n(c) any other client message ignored when the broker is inactive is logged at **debug** level\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI'm marking this resolved. The messages should now appear as expected.\n""]"
5ec2cd79470aeaa8e676dfbe794a63b189349fa2,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/support/AbstractPlatformTransactionManager.java,Add_Condition,"- * Copyright 2002-2014 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
+			if (definition.getIsolationLevel() != TransactionDefinition.ISOLATION_DEFAULT && logger.isWarnEnabled()) {
+				logger.warn(""Custom isolation level specified but no actual transaction initiated; "" +
+						""isolation level will effectively be ignored: "" + definition);
+			}",4,condition,AbstractPlatformTransactionManager logs warning for custom isolation level in case of no actual transaction,"Issue: SPR-12600
",,17201,1,['Log warning for Isolation.READ_UNCOMMITTED with Propagation.NOT_SUPPORTED [SPR-12600]'],"['**[Ethan Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=ethanzhang)** opened **[SPR-12600](https://jira.spring.io/browse/SPR-12600?redirect=false)** and commented\n\nThe actual Isolation Level for the setting\n""`@Transactional`(propagation = Propagation.NOT_SUPPORTED, isolation = Isolation.READ_UNCOMMITTED)""\nis READ_COMMITTED rather than READ_UNCOMMITTED.\n\nThe environment:\nspring: 3.1.0\nhibernate: 3.5.6\n\n---\n\n**Affects:** 3.1 GA\n\n**Issue Links:**\n- #19583 Validation of existing transactions with transaction synchronization turned off not working (?)\n- #11234 Rollback of transaction participating in nested transaction should not enforce rollback of global transaction\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/5ec2cd79470aeaa8e676dfbe794a63b189349fa2\n\n0 votes, 6 watchers\n']",['closed'],[6],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nNote that isolation levels are just supported within actual transactions, i.e. propagation REQUIRED or REQUIRES_NEW, initiating a resource transaction.\n\nYour configuration essentially suggests non-transactional execution, which - in the JDBC case - a JDBC driver doesn't support an isolation level for (since an underlying RDBMS doesn't support isolation levels in auto-commit mode).\n\nJuergen\n"", '**[Ethan Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=ethanzhang)** commented\n\nThanks a lot.\nI see, isolation levels are just supported within actual transactions!\n\nAnd I think it will be better if Spring can warn such configuration (configured a isolation level for Propagation.NOT_SUPPORTED).\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point, we could log a warning for such a scenario, assuming that the combination of settings never really makes sense...\n\nJuergen\n', '**[Hanh Pham](https://jira.spring.io/secure/ViewProfile.jspa?name=hpham)** commented\n\nHi Jurgen,\n\nif you have this transactional configuration, you would also get the warning, although you do not need a transaction. Is this correct?\n\n`@Transactional`(propagation = Propagation.SUPPORTS, isolation = Isolation.REPEATABLE_READ, readOnly = true)\n\nThe commit:\nhttps://github.com/spring-projects/spring-framework/commit/5ec2cd79470aeaa8e676dfbe794a63b189349fa2\n\nHanh\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIndeed, you would also get the warning with that configuration, since your isolation level will always get ignored in that case as well. It's always the outermost transaction boundary initiating the isolation level, so a SUPPORTS boundary will never actually initiate it... Therefore you can simply omit the isolation level in such a case.\n\nJuergen\n"", '**[Hanh Pham](https://jira.spring.io/secure/ViewProfile.jspa?name=hpham)** commented\n\nThat right, this is my errors in reasoning. With SUPPORTS you can use exisiting transaction and with exisiting transaction you use the isolation level of the existing transaction.\n\nThanks for your answer.\n\nHanh\n']"
5f2e298c08255bbda2b36ad0351146748d847bc6,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceUtils.java,Condition_Change,"+		boolean debugEnabled = logger.isDebugEnabled();
-				if (logger.isDebugEnabled()) {
+				if (debugEnabled) {
-			if (logger.isDebugEnabled()) {
+			if (debugEnabled) {
+		boolean debugEnabled = logger.isDebugEnabled();
-				if (logger.isDebugEnabled()) {
+				if (debugEnabled) {
-				if (logger.isDebugEnabled()) {
+				if (debugEnabled) {",10,condition,Extract isDebugEnabled() checks to local variables,Closes gh-24683,,24683,1,['Extract isDebugEnabled() checks to local variables'],['Add log level checks before log input in some classes.'],['closed'],[3],"['@sbrannen Thanks for your review.\r\nI have updated this PR according to your guidance.\r\nLooking forward to your reply again.\r\n', 'This has been merged into `master` after various changes to the original PR. Please see the ""Show resolved"" comments for details.\r\n\r\nThanks', '@sbrannen Thank you for your patience in explaining and modifying this PR , I have read every comment in detail, and I will pay more attention to these details in the future. Thanks again!\r\n']"
6013591fac1444df88bb75542367633373603a45,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/CollectionUtils.java,Remove_Condition,"-		if (isEmpty(source) || isEmpty(candidates)) {
-			return false;
-		}
-		for (Object candidate : candidates) {
-			if (source.contains(candidate)) {
-				return true;
-			}
-		}
-		return false;
+		return findFirstMatch(source, candidates) != null;",10,iteration,Polish containsAny of CollectionUtils by reusing findFirstMatch,,,,0,N/A,N/A,N/A,N/A,N/A
60fac678844a5626f4f5c7150a648b981c4ce427,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/MediaType.java,Add_Condition,"-
-
+	/**
+	 * Create a new {@code MediaType} for the given {@link MimeType}.
+	 * The type, subtype and parameters information is copied and {@code MediaType}-specific
+	 * checks on parameters are performed.
+	 * @param mimeType the MIME type
+	 * @throws IllegalArgumentException if any of the parameters contain illegal characters
+	 * @since 5.3.0
+	 */
-		for(MimeType mimeType : mimeTypes) {
+		for (MimeType mimeType : mimeTypes) {",5,iteration,Polish,,,,0,N/A,N/A,N/A,N/A,N/A
61117245a6fa5ef793bfd447f6edaa4c1d432684,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,Remove_Condition,"-							for (int i = 0; i < arguments.length; i++) {
-								cachedMethodArguments[i] = descriptors[i];
-							}
+							System.arraycopy(descriptors, 0, cachedMethodArguments, 0, arguments.length);",4,iteration,Replace manual array copy with native method call,"Closes gh-1606
",,1606,1,['Replace manual array copy with native method call'],[''],['closed'],[1],"['Merged, thanks!']"
6251222a23415d8b8788e79b9c208d3208988685,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/json/Jackson2ObjectMapperBuilder.java,Remove_Condition,"-	private static volatile boolean kotlinWarningLogged;
-
-				if (!kotlinWarningLogged) {
-					kotlinWarningLogged = true;
-					logger.warn(""For Jackson Kotlin classes support please add "" +
-							""\""com.fasterxml.jackson.module:jackson-module-kotlin\"" to the classpath"");
-				}
+				// jackson-module-kotlin not available",7,condition,Remove jackson-module-kotlin warning,"Closes gh-26962
",,26962,1,['Remove jackson-module-kotlin warning'],"['The Apollo GraphQL client depends on OkHttp 3 which depends on Kotlin. In a Java-based application, this results in the following warning being logged:\r\n\r\n```\r\n2021-05-20 19:06:02.663  WARN 41818 --- [kground-preinit] o.s.h.c.j.Jackson2ObjectMapperBuilder    : For Jackson Kotlin classes support please add ""com.fasterxml.jackson.module:jackson-module-kotlin"" to the classpath\r\n```\r\n\r\nAdding `com.fasterxml.jackson.module:jackson-module-kotlin` isn\'t the right thing to do as Jackson isn\'t handling any Kotlin types. The warning is the only logging done by `Jackson2ObjectMapperBuilder` so I could raise its log level to error without losing anything, but you have to know that\'s the right thing to do. I suspect many will unnecessarily add the dependency instead. In short, the warning feels a bit over-zealous to me.\r\n\r\nI wonder if it would be possible to detect an actual problem caused by the lack of `jackson-module-kotlin` and log something at that point instead? If that\'s not possible, perhaps the log message could be lowered to info level and softened a bit to indicate that `jackson-module-kotlin` is only needed if Jackson will be dealing with Kotlin classes?']",['closed'],[4],"[""I think would just remove that warning and refine the documentation to make that point more visible. It was introduced in the early days of Spring's Kotlin support, it is coming from how Jackson is architectured and nowadays most developers know how it works, https://start.spring.io/ and https://spring.io/guides/tutorials/spring-boot-kotlin/ being there for beginners."", 'In another project we also get the warn now after updating to spring-boot 2.5.\r\nThe project does not have Apollo GraphQL as a dependency. \r\nThe reason why `kotlin-stdlib-jdk8` is in the list of the projects dependencies is spring-security-config version 5.5.0.\r\nSpring-security-config 5.5.0 has `kotlin-stdlib-jdk8` as a compile dependency!', ""@julius-d can you please report that issue [against Spring Security](https://github.com/spring-projects/spring-security)?. The dependency change that you've described must be addressed there and there's nothing we can do about it here."", '@julius-d Looks like [spring-security#9811](https://github.com/spring-projects/spring-security/issues/9811) is the same issue?\r\n\r\n/cc @snicoll \r\n']"
62ea627965eb10eb3f3c2b2388ff6d1ac7ddb3a6,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java,Condition_Change,"+
-				if (Class.class.equals(beanClass) && ""classLoader"".equals(pd.getName())) {
-					// Ignore Class.getClassLoader() method - nobody needs to bind to that
+				if (Class.class.equals(beanClass) &&
+						(""classLoader"".equals(pd.getName()) ||  ""protectionDomain"".equals(pd.getName()))) {
+					// Ignore Class.getClassLoader() and getProtectionDomain() methods - nobody needs to bind to those",4,condition,Revised exclusion of java.lang.Class properties,"Issue: SPR-11098
",,15724,1,['Minor issue with fix for CVE 2010-1622 [SPR-11098]'],"[""**[John Melton](https://jira.spring.io/secure/ViewProfile.jspa?name=jtmelton)** opened **[SPR-11098](https://jira.spring.io/browse/SPR-11098?redirect=false)** and commented\n\nThere is a minor issue with the fix for CVE 2010-1622 (http://docs.spring.io/spring/docs/2.5.6.SEC03/changelog.txt). I don't have an exploitable vulnerability, but the issue could lead to a security issue. I couldn't find on the site how to specify this was a security issue and didn't want to post it in the open. Please let me know how to post with the visibility restricted.\n\n\n---\n\n**Affects:** 4.0 RC1\n\n**Reference URL:** https://github.com/spring-projects/spring-framework/blob/master/spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/62ea627965eb10eb3f3c2b2388ff6d1ac7ddb3a6, https://github.com/spring-projects/spring-framework/commit/7f895222e17b0970d4f9ab038b2f03c26aaf6f03\n\n**Backported to:** [3.2.6](https://github.com/spring-projects/spring-framework/milestone/94?closed=1)\n\n0 votes, 5 watchers\n""]",['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nFeel free to send it to me via email (it's gopivotal.com and I'm jhoeller there).\n\nJuergen\n"", '**[John Melton](https://jira.spring.io/secure/ViewProfile.jspa?name=jtmelton)** commented\n\nI emailed you a couple days ago, but received no response yet. Can you confirm you received it?\n']"
62efdfb89c368fd3a3665fe78a7180692d174c23,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/proxy/MethodProxy.java,Condition_Change,"-		if (!c1.isInterface() && c1 != Object.class && !Factory.class.isAssignableFrom(c2)) {
+		if (c1 != Object.class && c1.isAssignableFrom(c2.getSuperclass()) && !Factory.class.isAssignableFrom(c2)) {",2,condition,Try early initialization for all user-declared methods (including interfaces),"Closes gh-32682
",,32682,1,['ConfigurationClassEnhancer should consistently trigger FastClass creation at build-time'],"[""This is a follow-up of #32609 where we don't seem to generate the necessary FastClass when the factory bean method is declared in a parent interface.""]",['closed'],[0],[]
6305a69cc14f90a6e65e96362d38cab46e6c8b07,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/ContentDisposition.java,Add_Condition,"+ * @author Sergey Tsypanov
-			sb.append((c == '""' && !escaped) ? ""\\\"""" : c);
+			if (!escaped && c == '""') {
+				sb.append(""\\\"""");
+			} else {
+				sb.append(c);
+			}",6,condition,Avoid StringBuilder.append(Object) in ContentDisposition,"This commit avoids invoking StringBuilder.append(Object) in favor
of explicit method calls to append(String) and append(char) in
ContentDisposition.escapeQuotationsInFilename(String).

Closes gh-25056",,25056,1,['Avoid StringBuilder.append(Object) in ContentDisposition'],"['The return type of expression `(c == \'""\' && !escaped) ? ""\\\\\\"""" : c` is `Object`, which implies a call to `StringBuilder.append(Object)`.\r\n\r\nThe implementation of the following means that lots of garbage objects are allocated as a result of `String.valueOf()`.\r\n\r\n\r\n```java\r\n@Override\r\npublic StringBuilder append(Object obj) {\r\n    return append(String.valueOf(obj));\r\n}\r\n```\r\n\r\nInstead of covariant append we can use exact signatures, i.e. one taking `char` and one taking `String` which allows us to avoid unnecessary allocations.\r\n\r\nThis [benchmark](https://raw.githubusercontent.com/stsypanov/strings/master/src/jmh/java/tsypanov/strings/string/StringBuilderCovariantAppendBenchmark.java) demonstrates significant improvement even for filename of length = 10:\r\n\r\n```\r\nJDK 8\r\n\r\nBenchmark                              (latin)  (length)  Mode  Cnt     Score     Error   Units\r\nappendCovariant                           true        10  avgt   50   180.230 ±  10.346   ns/op\r\nappendExact                               true        10  avgt   50    68.517 ±   1.479   ns/op\r\n\r\nappendCovariant                          false        10  avgt   50   177.713 ±   4.438   ns/op\r\nappendExact                              false        10  avgt   50    67.798 ±   1.364   ns/op\r\n\r\nappendCovariant:·gc.alloc.rate.norm       true        10  avgt   50   688.000 ±   0.001    B/op\r\nappendExact:·gc.alloc.rate.norm           true        10  avgt   50   112.000 ±   0.001    B/op\r\n\r\nappendCovariant:·gc.alloc.rate.norm      false        10  avgt   50   816.000 ±   0.001    B/op\r\nappendExact:·gc.alloc.rate.norm          false        10  avgt   50   112.000 ±   0.001    B/op\r\n\r\nJDK 14\r\n\r\nBenchmark                              (latin)  (length)  Mode  Cnt     Score     Error   Units\r\nappendCovariant                           true        10  avgt   50   228.858 ±  18.627   ns/op\r\nappendExact                               true        10  avgt   50    57.950 ±   2.660   ns/op\r\n\r\nappendCovariant                          false        10  avgt   50   292.879 ±  12.408   ns/op\r\nappendExact                              false        10  avgt   50    90.228 ±   2.277   ns/op\r\n\r\nappendCovariant:·gc.alloc.rate.norm       true        10  avgt   50   688.026 ±   0.002    B/op\r\nappendExact:·gc.alloc.rate.norm           true        10  avgt   50   112.004 ±   0.001    B/op\r\n\r\nappendCovariant:·gc.alloc.rate.norm      false        10  avgt   50  1096.040 ±   0.002    B/op\r\nappendExact:·gc.alloc.rate.norm          false        10  avgt   50   200.008 ±   0.001    B/op\r\n```\r\n']",['closed'],[2],"['This has been merged into `master`.\r\n\r\nThanks', 'Good catch!']"
63fae8c5a7ea21e4ff59ee094cc4541c048e8e54,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/aot/generate/ClassNameGenerator.java,Add_Condition,"- * Generates unique class names that can be used in ahead-of-time generated
- * source code. This class is stateful so the same instance should be used for
- * all name generation. Most commonly the class name generator is obtained via a
- * {@link GenerationContext}.
+ * Generate unique class names based on an optional target {@link Class} and
+ * a feature name. This class is stateful so the same instance should be used
+ * for all name generation. Most commonly the class name generator is obtained
+ * via a {@link GenerationContext}.
+ * @author Stephane Nicoll
-	 * Generate a new class name for the given {@code target} /
-	 * {@code featureName} combination.
-	 * @param target the target of the newly generated class or {@code null} if
-	 * there is not target.
+	 * Generate a unique {@link ClassName} based on the specified {@code target}
+	 * class and {@code featureName}. If a {@code target} is specified, the
+	 * generated class name is a suffixed version of it.
+	 * <p>For instance, a {@code com.example.Demo} target with an
+	 * {@code Initializer} feature name leads to a
+	 * {@code com.example.Demo__Initializer} generated class name. If such a
+	 * feature was already requested for this target, a counter is used to
+	 * ensure uniqueness.
+	 * <p>If there is no target, the {@code featureName} is used to generate the
+	 * class name in the {@value #AOT_PACKAGE} package.
+	 * @param target the class the newly generated class relates to, or
+	 * {@code null} if there is not target
-		if(target != null) {
-			return generateSequencedClassName(target.getName().replace(""$"", ""_"") + SEPARATOR + StringUtils.capitalize(featureName));
+		if (target != null) {
+			return generateSequencedClassName(target.getName().replace(""$"", ""_"")
+					+ SEPARATOR + StringUtils.capitalize(featureName));
-		return generateSequencedClassName(AOT_PACKAGE+ featureName);
+		return generateSequencedClassName(AOT_PACKAGE + featureName);",7,condition,Clarify the scope of target in ClassNameGenerator,"Closes gh-28517
",,28517,1,['Ambiguous behavior for ClassNameGenerator::generateClassName'],"['`ClassNameGenerator` has two variants for the `generateClassName` feature. One that takes a target `Class<?>` and another that takes a target `String`. I\'m a bit confused by the concept of a target here and I think we should explain that a bit more in the javadocs.\r\n\r\nThese methods also have different behavior:\r\n\r\n```java\r\nClassName first = this.generator.generateClassName(java.io.InputStream.class, ""bytes"");\r\n// will result in java.io.InputStream__Bytes\r\n\r\nClassName first = this.generator.generateClassName(""java.io.InputStream"", ""bytes"");\r\n// will result in __.JavaIoInputStream__Bytes\r\n```\r\n\r\nEven if the difference of behavior is intended, the name and docs are very similar. Also, a common use case for the `ClassNameGenerator` is about generating sources in a specific package to work around visibility issues. The second variant can make this case more difficult to achieve.\r\n\r\nAs a side note, this class is also referring to the now defunct `@see GeneratedClassName`.\r\n\r\ncc @philwebb @snicoll ']",['closed'],[2],"[""The `String` variant was added to support generation where there isn't a single class that can be linked. I think it's currently only used in `BeanRegistrationsAotContribution`. We should probably rename that method to make it clearer that there is no target class.\r\n\r\nI know @snicoll was wondering about the use of the `__` package in general, perhaps we can make the generated `BeanRegistrations` class be in the same package as the `@SpringBootApplication` class then we can drop the string version entirely.\r\n\r\nThe `ClassNameGenerator` should be removed, we dropped that class during the prototype work."", 'The second method that takes a `String` rather than a `Class<?>` has been removed in 4bd33cb6e0659df2cd0b9fa04feea8fd77e5a16d. I am going to look at the Javadoc and see if we can clarify ']"
66c63c374b8be03f765a84a386932920e6580402,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.java,Add_Condition,"+import java.util.concurrent.ConcurrentHashMap;
-	private final Map<String, Object> attributes;
+	private final Map<String, Object> attributes = new ConcurrentHashMap<String, Object>();
-		this.attributes = attributes;
+
+		if (attributes != null) {
+			this.attributes.putAll(attributes);
+		}",8,condition,Ensure handshake attrs are copied in SockJS session,,,,0,N/A,N/A,N/A,N/A,N/A
66e488850be2169e94c9daf161fb682094132ac2,spring-projects/spring-framework,spring-r2dbc/src/main/java/org/springframework/r2dbc/connection/init/ScriptUtils.java,Condition_Change,"-	 * @since 5.2.16
+	 * @since 5.3.8
-			if (!EOF_STATEMENT_SEPARATOR.equals(separatorToUse) && !containsSqlScriptDelimiters(statement, separatorToUse)) {
+			if (!EOF_STATEMENT_SEPARATOR.equals(separatorToUse) &&
+					!containsStatementSeparator(resource, statement, separatorToUse, commentPrefixes,
+						blockCommentStartDelimiter, blockCommentEndDelimiter)) {",4,condition,Ignore comments when searching for statement delimiter in ScriptUtils,"This commit picks up where 569ce840cf left off, by correctly invoking
the new containsStatementSeparator(...) method from
executeSqlScript(...) in ScriptUtils in spring-r2dbc.

See gh-26911
",,26911,1,['Ignore comments when searching for SQL statement delimiter in ScriptUtils'],"['Spring Version: 5.3.4\r\nJDK: 15\r\n\r\nThe spring utility class ```org.springframework.jdbc.datasource.init.ScriptUtils``` falsely interepts single quote literals found within block comments of SQL resource files.\r\n\r\nTo understand the impact of this bug, I\'ll illustrate a scenario.\r\n\r\n**schema.sql**\r\n\r\n```sql\r\n/*\r\n    It\'s function is as follows..\r\n*/\r\n\r\nALTER TABLE public.User ADD CONSTRAINT\r\nUSER_PK PRIMARY KEY(id); \r\n...\r\n\r\n```\r\n\r\nFrom the resource file above, let\'s assume that the statement delimiter is that of ```ScriptUtils.DEFAULT_STATEMENT_SEPARATOR``` (\';\') and, accordingly, default comment block start & end separators are used as well (\'/*  ...  */\').\r\n\r\nLet\'s also make another assumption: the single quote found in the block comment within the ```schema.sql``` resource file is the only single quote in the entire resource file.\r\n\r\nIn my java utility class, my goal is to execute the statements in my resource file against a given JDBC connection. It would look something as follows:\r\n\r\n```java\r\nResource resource = new ClassPathResource(""classpath:schema.sql"", Thread.currentThread().getContextClassLoader());\r\nEncodedResource encoded = new EncodedResource(resource, ""UTF-8"");\r\nScriptUtils.executeSql (getConnection(), encoded);\r\n```\r\n\r\nWhere ```getConnection()``` corresponds to my JDBC connection (assume it works accordingly). \r\n\r\nAccordingly, I would be met with a fault that looks similar to the following:\r\n\r\n```\r\norg.springframework.jdbc.datasource.init.ScriptStatementFailedException: Failed to execute SQL script statement...\r\nALTER TABLE public.User ADD CONSTRAINT; ; nested exception is org.postgresql.util.PSQLException: ERROR: syntax error at end of input Position: 47\r\n```\r\nNotice how in the error message, it displays a **partial** SQL statement of what is intended.  This is because the ```.executeSql(...)``` function call defaulted to its FALLBACK_STATEMENT_SEPARATOR, ""\\n"". How do I know this?\r\n\r\nThe following is a fraction of code that is currently contained, at the time of writing this, is found within the ```.executeSql(...)``` internal call:\r\n\r\n```java\r\nif (separator == null) {\r\n\tseparator = DEFAULT_STATEMENT_SEPARATOR;\r\n}\r\nif (!EOF_STATEMENT_SEPARATOR.equals(separator) && !containsSqlScriptDelimiters(script, separator)) {\r\n\tseparator = FALLBACK_STATEMENT_SEPARATOR;\r\n}\r\n```\r\n\r\nSo I did a bit of digging and exploring within the internal check to ```containsSqlScriptDelimiters(...)``` and found the following:\r\n\r\n```java\r\npublic static boolean containsSqlScriptDelimiters(String script, String delim) {\r\n\t\tboolean inLiteral = false;\r\n\t\tboolean inEscape = false;\r\n\r\n\t\tfor (int i = 0; i < script.length(); i++) {\r\n\t\t\tchar c = script.charAt(i);\r\n\t\t\tif (inEscape) {\r\n\t\t\t\tinEscape = false;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\t// MySQL style escapes\r\n\t\t\tif (c == \'\\\\\') {\r\n\t\t\t\tinEscape = true;\r\n\t\t\t\tcontinue;\r\n\t\t\t}\r\n\t\t\tif (c == \'\\\'\') {\r\n\t\t\t\tinLiteral = !inLiteral;\r\n\t\t\t}\r\n\t\t\tif (!inLiteral && script.startsWith(delim, i)) {\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\treturn false;\r\n\t}\r\n``` \r\n\r\nThe problem here is that it does not distinguish between literal single quotes from within block comments and executable statements. This is an issue because, going back to my resource file: ```schema.sql```, since I declared only a single literal quote within my inital block comment, the parsing fails to acknowledge the separator delimiter ( \';\', in this case) within my executable portion (it\'s waiting for the end literal character!) and falls back to using the FALLBACK_STATEMENT_SEPARATOR. \r\n\r\nHere\'s the workaround I\'m currently using:\r\n\r\n```sql\r\n/*\r\n    It\\\'s function is as follows..\r\n*/\r\n\r\nALTER TABLE public.User ADD CONSTRAINT\r\nUSER_PK PRIMARY KEY(id); \r\n...\r\n\r\n```\r\n\r\nEscape single quotes within comments (for now)!\r\n']",['closed'],[2],"['Thank you for bringing this to our attention.\r\n\r\nWhile analyzing the issue, I discovered a separate issue regarding double quotes which will be addressed in #26935 for `5.3.x` and backported to `5.2.x`.\r\n\r\nThe issue you have raised here applies not only to block comments but also to single-line comments. In addition, it applies to the `ScriptUtils` implementations in `spring-jdbc` and `spring-r2dbc`.\r\n\r\nWe will investigate a fix for `5.3.x` and consider a backport to `5.2.x`.\r\n\r\nIn the interim, please continue using the workaround you discovered.', 'This has been fixed for 5.3.8 in 569ce840cf720b6534e5ff670fc34eaa151b73cb and backported to 5.2.16 in e4d843e41e61bc93b95d2431075a886aebd552f8.\r\n\r\nFeel free to try it out in the upcoming snapshots for 5.3.8 and 5.2.16.']"
674dc2f2039fb6186b35ab674c3046ecd5809bb3,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Add_Condition,"-			if (isEnableLoggingRequestDetails()) {
+			if (StringUtils.startsWithIgnoreCase(request.getContentType(), ""multipart/"")) {
+				params = ""multipart"";
+			}
+			else if (isEnableLoggingRequestDetails()) {",5,condition,Do not log request parameters for multipart requests,"Closes gh-27350
",,27350,1,['CommonsMultipartResolver and DEBUG logging lead to empty fileMap in MultipartHttpServletRequest'],"['**Affects:** \\\r\nSpring: 5.3.9 but the error also occurs in earlier Versions (i could also reproduce it with 5.2.6)\r\n\r\n**Problem:**\r\nIf a CommonsMultipartResolver is used to Handle File Upload to a Spring RestController and the LogLevel of the Dispatcher Servlet is set to DEBUG a Request Containing a Multipart File leads to an empty FileMap on the MultipartHttpServletRequest. If eighter the LogLevel is not DEBUG or another Resolver is used the same Request contains a FileMap,.\r\n\r\n**Expected Behavior:**\r\nThe expected behavior would be that he LogLevel and the choice of the MultipartResolver do not change the behavior and the Request should always contain a File on the MultipartHttpServletRequest.\r\n\r\n**Example Application:**\r\nI created an example Application to check the behavior here:\r\nhttps://gitlab.com/katja_m_franz/springbug\r\nIt is a really small Application and i hope you can easily reproduce the described Problem. All Info on how to do that can be found on the projects readme.']",['closed'],[0],[]
67e3b1b5310b9ecc4cbcab6dab1262d5369bbde8,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java,Condition_Change,"-	private final Map<Object, Object> earlyProxyReferences = new ConcurrentHashMap<>(16);
+	/** Cache of early target objects: cacheKey to bean instance. */
+	private final Map<Object, Object> earlyTargetReferences = new ConcurrentHashMap<>(16);
-		this.earlyProxyReferences.put(cacheKey, bean);
+		this.earlyTargetReferences.put(cacheKey, bean);
-			if (this.earlyProxyReferences.remove(cacheKey) != bean) {
+			if (this.earlyTargetReferences.remove(cacheKey) != bean) {",6,condition,Rename earlyProxyReferences in AbstractAutoProxyCreator,"See gh-23914
",,23914,1,['Rename earlyProxyReferences to earlyBeanReferences in AbstractAutoProxyCreator'],"['The original map named earlyProxyReferences seems to stores the target object, not the proxy object.']",['closed'],[1],"[""Thanks @chenqimiao. For consistency with the method that fills the cache, I've renamed that to `earlyBeanReferences`.""]"
67f184293b94c076b0474231f739a74f42d5ffa8,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java,Add_Condition,"-		Assert.notNull(key, ""Null key returned for cache operation (maybe you are using named params "" +
-				""on classes without debug info?) "" + context.metadata.operation);
+		if (key == null) {
+			throw new IllegalArgumentException(""Null key returned for cache operation (maybe you are "" +
+					""using named params on classes without debug info?) "" + context.metadata.operation);
+		}",6,condition,Improve performance of generateKey,"Only compute the error message to display when the generated key is
actually null instead of using Assert.notNull as the cache operation
'toString()' method is non trivial and gets computed regardless of the
result.

Issue: SPR-12527
",,17132,1,"[""CacheAspectSupport 's generateKey method should not concatenate Strings [SPR-12527]""]","['**[Kyrill Alyoshin](https://jira.spring.io/secure/ViewProfile.jspa?name=kyrill007)** opened **[SPR-12527](https://jira.spring.io/browse/SPR-12527?redirect=false)** and commented\n\n**CacheAspectSupport** class has the following line of code at the beginning of its **generateKey** method:\n\n```\nAssert.notNull(key, ""Null key returned for cache operation (maybe you are using named params "" +\n\t\t\t\t""on classes without debug info?) "" + context.operation);\n```\n\nYourKit shows that this single method call takes about 15% of total time when invoking a ""cached"" method through Spring caching pipeline. It is not surprising because **context.operation** object has a non-trivial implementation of the **toString** method.\n\nWe really think that this _Assert.notNull_ call should be refactored into _if(key == null)..._ for performance reasons.\n\n\n---\n\n**Affects:** 4.1.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/67f184293b94c076b0474231f739a74f42d5ffa8\n\n**Backported to:** [4.0.9](https://github.com/spring-projects/spring-framework/milestone/121?closed=1)\n\n1 votes, 3 watchers\n']",['closed'],[2],"['**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nGood catch, most of the logging usage of `CacheOperation` are guarded by `logger.isTraceEnabled` - This may also be a nice improvements for Spring 4.0.x (that piece of code of yours is coming from 4.0.x I think)\n', ""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nFixed.\n\n[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller), I think that's a good candidate for a backport. What do you think?\n""]"
6806aaf162f396e89cc07735d399737c87bcd2a1,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CollectionFactory.java,Condition_Change,"-		else if (TreeSet.class == collectionType || SortedSet.class == collectionType || NavigableSet.class == collectionType) {
+		else if (TreeSet.class == collectionType || NavigableSet.class == collectionType
+				|| SortedSet.class == collectionType) {",3,condition,"Polish ""Add missing TreeSet to CollectionFactory.createCollection()""","See gh-28949
",,28949,1,['Support TreeSet collection type in CollectionFactory.createCollection() without using reflection'],['It seems to have been missed in #28718.'],['closed'],[0],[]
68837ebb57b111bcaa2f98f1d570268cfa23df0f,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java,Condition_Change,"-			else if (namespaceUri.startsWith(""https://www.springframework.org/"")) {
+			else if (namespaceUri.startsWith(""http://www.springframework.org/"")) {",2,condition,URL Cleanup - fix undesirable code change,"Namespace handlers are mapped based on the canonical names for XML
namespaces which in Spring do not use ""https"" as the scheme.

See gh-22617 gh-22622 gh-22635
",,"22635, 22617, 22622",3,"['URL Cleanup', 'URL Cleanup', 'URL Cleanup']","['This commit updates URLs to prefer the https protocol. Redirects are not followed to avoid accidentally expanding intentionally shortened URLs (i.e. if using a URL shortener).\n\n# Fixed URLs\n\n## Fixed Success \nThese URLs were switched to an https URL with a 2xx status. While the status was successful, your review is still recommended.\n\n* [x] http://www.apache.org/licenses/ with 1 occurrences migrated to:  \n  https://www.apache.org/licenses/ ([https](https://www.apache.org/licenses/) result 200).\n* [x] http://www.apache.org/licenses/LICENSE-2.0 with 6625 occurrences migrated to:  \n  https://www.apache.org/licenses/LICENSE-2.0 ([https](https://www.apache.org/licenses/LICENSE-2.0) result 200).', 'This commit updates URLs to prefer the https protocol. Redirects are not followed to avoid accidentally expanding intentionally shortened URLs (i.e. if using a URL shortener).\n\n# HTTP URLs that Could Not Be Fixed\nThese URLs were unable to be fixed. Please review them to see if they can be manually resolved.\n\n* http://www.foo.com/schema/component/component.xsd (404) with 1 occurrences could not be migrated:  \n   ([https](https://www.foo.com/schema/component/component.xsd) result SSLHandshakeException).\n\n# Fixed URLs\n\n## Fixed But Review Recommended\nThese URLs were fixed, but the https status was not OK. However, the https status was the same as the http request or http redirected to an https URL, so they were migrated. Your review is recommended.\n\n* http://www.kbcafe.com/rss/atom.xsd.xml (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://www.kbcafe.com/rss/atom.xsd.xml ([https](https://www.kbcafe.com/rss/atom.xsd.xml) result ConnectTimeoutException).\n* http://domain1.com (UnknownHostException) with 2 occurrences migrated to:  \n  https://domain1.com ([https](https://domain1.com) result UnknownHostException).\n* http://domain2.com (UnknownHostException) with 1 occurrences migrated to:  \n  https://domain2.com ([https](https://domain2.com) result UnknownHostException).\n* http://mydomain1.com,http://mydomain2.com (UnknownHostException) with 1 occurrences migrated to:  \n  https://mydomain1.com,http://mydomain2.com ([https](https://mydomain1.com,https://mydomain2.com) result UnknownHostException).\n* http://mydomain2.com (UnknownHostException) with 2 occurrences migrated to:  \n  https://mydomain2.com ([https](https://mydomain2.com) result UnknownHostException).\n* http://mydomain3.com,http://mydomain4.com (UnknownHostException) with 1 occurrences migrated to:  \n  https://mydomain3.com,http://mydomain4.com ([https](https://mydomain3.com,https://mydomain4.com) result UnknownHostException).\n* http://www.springframework.org/schema/beans/factory/xml/support/CustomNamespaceHandlerTests.xsd (404) with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/factory/xml/support/CustomNamespaceHandlerTests.xsd ([https](https://www.springframework.org/schema/beans/factory/xml/support/CustomNamespaceHandlerTests.xsd) result 404).\n\n## Fixed Success \nThese URLs were switched to an https URL with a 2xx status. While the status was successful, your review is still recommended.\n\n* http://example.com with 1 occurrences migrated to:  \n  https://example.com ([https](https://example.com) result 200).\n* http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd (301) with 2 occurrences migrated to:  \n  https://hibernate.org/dtd/hibernate-mapping-3.0.dtd ([https](https://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd) result 200).\n* http://testng.org/testng-1.0.dtd with 3 occurrences migrated to:  \n  https://testng.org/testng-1.0.dtd ([https](https://testng.org/testng-1.0.dtd) result 200).\n* http://tiles.apache.org/dtds/tiles-config_2_0.dtd with 2 occurrences migrated to:  \n  https://tiles.apache.org/dtds/tiles-config_2_0.dtd ([https](https://tiles.apache.org/dtds/tiles-config_2_0.dtd) result 200).\n* http://tiles.apache.org/dtds/tiles-config_2_1.dtd with 2 occurrences migrated to:  \n  https://tiles.apache.org/dtds/tiles-config_2_1.dtd ([https](https://tiles.apache.org/dtds/tiles-config_2_1.dtd) result 200).\n* http://tiles.apache.org/dtds/tiles-config_3_0.dtd with 4 occurrences migrated to:  \n  https://tiles.apache.org/dtds/tiles-config_3_0.dtd ([https](https://tiles.apache.org/dtds/tiles-config_3_0.dtd) result 200).\n* http://www.quartz-scheduler.org/xml/job_scheduling_data_1_8.xsd with 1 occurrences migrated to:  \n  https://www.quartz-scheduler.org/xml/job_scheduling_data_1_8.xsd ([https](https://www.quartz-scheduler.org/xml/job_scheduling_data_1_8.xsd) result 200).\n* http://www.springframework.org/dtd/spring-beans-2.0.dtd with 168 occurrences migrated to:  \n  https://www.springframework.org/dtd/spring-beans-2.0.dtd ([https](https://www.springframework.org/dtd/spring-beans-2.0.dtd) result 200).\n* http://www.springframework.org/schema/aop/spring-aop-2.0.xsd with 68 occurrences migrated to:  \n  https://www.springframework.org/schema/aop/spring-aop-2.0.xsd ([https](https://www.springframework.org/schema/aop/spring-aop-2.0.xsd) result 200).\n* http://www.springframework.org/schema/aop/spring-aop-2.5.xsd with 11 occurrences migrated to:  \n  https://www.springframework.org/schema/aop/spring-aop-2.5.xsd ([https](https://www.springframework.org/schema/aop/spring-aop-2.5.xsd) result 200).\n* http://www.springframework.org/schema/aop/spring-aop-3.0.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/aop/spring-aop-3.0.xsd ([https](https://www.springframework.org/schema/aop/spring-aop-3.0.xsd) result 200).\n* http://www.springframework.org/schema/aop/spring-aop.xsd with 7 occurrences migrated to:  \n  https://www.springframework.org/schema/aop/spring-aop.xsd ([https](https://www.springframework.org/schema/aop/spring-aop.xsd) result 200).\n* http://www.springframework.org/schema/beans/spring-beans-2.0.xsd with 112 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans-2.0.xsd ([https](https://www.springframework.org/schema/beans/spring-beans-2.0.xsd) result 200).\n* http://www.springframework.org/schema/beans/spring-beans-2.5.xsd with 46 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans-2.5.xsd ([https](https://www.springframework.org/schema/beans/spring-beans-2.5.xsd) result 200).\n* http://www.springframework.org/schema/beans/spring-beans-3.0.xsd with 10 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans-3.0.xsd ([https](https://www.springframework.org/schema/beans/spring-beans-3.0.xsd) result 200).\n* http://www.springframework.org/schema/beans/spring-beans-3.1.xsd with 33 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans-3.1.xsd ([https](https://www.springframework.org/schema/beans/spring-beans-3.1.xsd) result 200).\n* http://www.springframework.org/schema/beans/spring-beans-3.2.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans-3.2.xsd ([https](https://www.springframework.org/schema/beans/spring-beans-3.2.xsd) result 200).\n* http://www.springframework.org/schema/beans/spring-beans-4.0.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans-4.0.xsd ([https](https://www.springframework.org/schema/beans/spring-beans-4.0.xsd) result 200).\n* http://www.springframework.org/schema/beans/spring-beans-4.1.xsd with 3 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans-4.1.xsd ([https](https://www.springframework.org/schema/beans/spring-beans-4.1.xsd) result 200).\n* http://www.springframework.org/schema/beans/spring-beans-4.2.xsd with 4 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans-4.2.xsd ([https](https://www.springframework.org/schema/beans/spring-beans-4.2.xsd) result 200).\n* http://www.springframework.org/schema/beans/spring-beans-4.3.xsd with 4 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans-4.3.xsd ([https](https://www.springframework.org/schema/beans/spring-beans-4.3.xsd) result 200).\n* http://www.springframework.org/schema/beans/spring-beans.xsd with 142 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans.xsd ([https](https://www.springframework.org/schema/beans/spring-beans.xsd) result 200).\n* http://www.springframework.org/schema/cache/spring-cache.xsd with 10 occurrences migrated to:  \n  https://www.springframework.org/schema/cache/spring-cache.xsd ([https](https://www.springframework.org/schema/cache/spring-cache.xsd) result 200).\n* http://www.springframework.org/schema/context/spring-context-2.5.xsd with 41 occurrences migrated to:  \n  https://www.springframework.org/schema/context/spring-context-2.5.xsd ([https](https://www.springframework.org/schema/context/spring-context-2.5.xsd) result 200).\n* http://www.springframework.org/schema/context/spring-context-3.0.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/context/spring-context-3.0.xsd ([https](https://www.springframework.org/schema/context/spring-context-3.0.xsd) result 200).\n* http://www.springframework.org/schema/context/spring-context-3.1.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/context/spring-context-3.1.xsd ([https](https://www.springframework.org/schema/context/spring-context-3.1.xsd) result 200).\n* http://www.springframework.org/schema/context/spring-context-3.2.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/context/spring-context-3.2.xsd ([https](https://www.springframework.org/schema/context/spring-context-3.2.xsd) result 200).\n* http://www.springframework.org/schema/context/spring-context-4.0.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/context/spring-context-4.0.xsd ([https](https://www.springframework.org/schema/context/spring-context-4.0.xsd) result 200).\n* http://www.springframework.org/schema/context/spring-context-4.2.xsd with 4 occurrences migrated to:  \n  https://www.springframework.org/schema/context/spring-context-4.2.xsd ([https](https://www.springframework.org/schema/context/spring-context-4.2.xsd) result 200).\n* http://www.springframework.org/schema/context/spring-context-4.3.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/context/spring-context-4.3.xsd ([https](https://www.springframework.org/schema/context/spring-context-4.3.xsd) result 200).\n* http://www.springframework.org/schema/context/spring-context.xsd with 10 occurrences migrated to:  \n  https://www.springframework.org/schema/context/spring-context.xsd ([https](https://www.springframework.org/schema/context/spring-context.xsd) result 200).\n* http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd with 9 occurrences migrated to:  \n  https://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd ([https](https://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd) result 200).\n* http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd with 5 occurrences migrated to:  \n  https://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd ([https](https://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd) result 200).\n* http://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd with 9 occurrences migrated to:  \n  https://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd ([https](https://www.springframework.org/schema/jdbc/spring-jdbc-4.2.xsd) result 200).\n* http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd ([https](https://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd) result 200).\n* http://www.springframework.org/schema/jdbc/spring-jdbc.xsd with 8 occurrences migrated to:  \n  https://www.springframework.org/schema/jdbc/spring-jdbc.xsd ([https](https://www.springframework.org/schema/jdbc/spring-jdbc.xsd) result 200).\n* http://www.springframework.org/schema/jee/spring-jee-3.1.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/jee/spring-jee-3.1.xsd ([https](https://www.springframework.org/schema/jee/spring-jee-3.1.xsd) result 200).\n* http://www.springframework.org/schema/jms/spring-jms-4.1.xsd with 9 occurrences migrated to:  \n  https://www.springframework.org/schema/jms/spring-jms-4.1.xsd ([https](https://www.springframework.org/schema/jms/spring-jms-4.1.xsd) result 200).\n* http://www.springframework.org/schema/jms/spring-jms-4.2.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/jms/spring-jms-4.2.xsd ([https](https://www.springframework.org/schema/jms/spring-jms-4.2.xsd) result 200).\n* http://www.springframework.org/schema/lang/spring-lang-2.0.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/lang/spring-lang-2.0.xsd ([https](https://www.springframework.org/schema/lang/spring-lang-2.0.xsd) result 200).\n* http://www.springframework.org/schema/lang/spring-lang-2.5.xsd with 3 occurrences migrated to:  \n  https://www.springframework.org/schema/lang/spring-lang-2.5.xsd ([https](https://www.springframework.org/schema/lang/spring-lang-2.5.xsd) result 200).\n* http://www.springframework.org/schema/lang/spring-lang-3.0.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/lang/spring-lang-3.0.xsd ([https](https://www.springframework.org/schema/lang/spring-lang-3.0.xsd) result 200).\n* http://www.springframework.org/schema/lang/spring-lang-3.1.xsd with 5 occurrences migrated to:  \n  https://www.springframework.org/schema/lang/spring-lang-3.1.xsd ([https](https://www.springframework.org/schema/lang/spring-lang-3.1.xsd) result 200).\n* http://www.springframework.org/schema/lang/spring-lang-4.2.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/lang/spring-lang-4.2.xsd ([https](https://www.springframework.org/schema/lang/spring-lang-4.2.xsd) result 200).\n* http://www.springframework.org/schema/lang/spring-lang.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/lang/spring-lang.xsd ([https](https://www.springframework.org/schema/lang/spring-lang.xsd) result 200).\n* http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd ([https](https://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd) result 200).\n* http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd ([https](https://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd) result 200).\n* http://www.springframework.org/schema/mvc/spring-mvc.xsd with 26 occurrences migrated to:  \n  https://www.springframework.org/schema/mvc/spring-mvc.xsd ([https](https://www.springframework.org/schema/mvc/spring-mvc.xsd) result 200).\n* http://www.springframework.org/schema/oxm/spring-oxm.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/oxm/spring-oxm.xsd ([https](https://www.springframework.org/schema/oxm/spring-oxm.xsd) result 200).\n* http://www.springframework.org/schema/task/spring-task-4.1.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/task/spring-task-4.1.xsd ([https](https://www.springframework.org/schema/task/spring-task-4.1.xsd) result 200).\n* http://www.springframework.org/schema/task/spring-task.xsd with 6 occurrences migrated to:  \n  https://www.springframework.org/schema/task/spring-task.xsd ([https](https://www.springframework.org/schema/task/spring-task.xsd) result 200).\n* http://www.springframework.org/schema/tx/spring-tx-2.5.xsd with 3 occurrences migrated to:  \n  https://www.springframework.org/schema/tx/spring-tx-2.5.xsd ([https](https://www.springframework.org/schema/tx/spring-tx-2.5.xsd) result 200).\n* http://www.springframework.org/schema/tx/spring-tx-4.0.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/tx/spring-tx-4.0.xsd ([https](https://www.springframework.org/schema/tx/spring-tx-4.0.xsd) result 200).\n* http://www.springframework.org/schema/tx/spring-tx.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/tx/spring-tx.xsd ([https](https://www.springframework.org/schema/tx/spring-tx.xsd) result 200).\n* http://www.springframework.org/schema/util/spring-util-2.0.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/util/spring-util-2.0.xsd ([https](https://www.springframework.org/schema/util/spring-util-2.0.xsd) result 200).\n* http://www.springframework.org/schema/util/spring-util-2.5.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/util/spring-util-2.5.xsd ([https](https://www.springframework.org/schema/util/spring-util-2.5.xsd) result 200).\n* http://www.springframework.org/schema/util/spring-util-3.0.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/util/spring-util-3.0.xsd ([https](https://www.springframework.org/schema/util/spring-util-3.0.xsd) result 200).\n* http://www.springframework.org/schema/util/spring-util-3.1.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/util/spring-util-3.1.xsd ([https](https://www.springframework.org/schema/util/spring-util-3.1.xsd) result 200).\n* http://www.springframework.org/schema/util/spring-util-4.1.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/util/spring-util-4.1.xsd ([https](https://www.springframework.org/schema/util/spring-util-4.1.xsd) result 200).\n* http://www.springframework.org/schema/util/spring-util-4.2.xsd with 4 occurrences migrated to:  \n  https://www.springframework.org/schema/util/spring-util-4.2.xsd ([https](https://www.springframework.org/schema/util/spring-util-4.2.xsd) result 200).\n* http://www.springframework.org/schema/util/spring-util.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/util/spring-util.xsd ([https](https://www.springframework.org/schema/util/spring-util.xsd) result 200).\n* http://www.springframework.org/schema/websocket/spring-websocket.xsd with 11 occurrences migrated to:  \n  https://www.springframework.org/schema/websocket/spring-websocket.xsd ([https](https://www.springframework.org/schema/websocket/spring-websocket.xsd) result 200).\n* http://mydomain1.com with 2 occurrences migrated to:  \n  https://mydomain1.com ([https](https://mydomain1.com) result 301).\n* http://www.springframework.org with 1 occurrences migrated to:  \n  https://www.springframework.org ([https](https://www.springframework.org) result 301).\n* http://help.sap.com/saphelp_hanaplatform/helpdata/en/20/a78d3275191014b41bae7c4a46d835/content.htm with 1 occurrences migrated to:  \n  https://help.sap.com/saphelp_hanaplatform/helpdata/en/20/a78d3275191014b41bae7c4a46d835/content.htm ([https](https://help.sap.com/saphelp_hanaplatform/helpdata/en/20/a78d3275191014b41bae7c4a46d835/content.htm) result 302).\n* http://java.sun.com/dtd/properties.dtd with 4 occurrences migrated to:  \n  https://java.sun.com/dtd/properties.dtd ([https](https://java.sun.com/dtd/properties.dtd) result 302).\n* http://java.sun.com/xml/ns/j2ee/connector_1_5.xsd with 1 occurrences migrated to:  \n  https://java.sun.com/xml/ns/j2ee/connector_1_5.xsd ([https](https://java.sun.com/xml/ns/j2ee/connector_1_5.xsd) result 302).\n* http://java.sun.com/xml/ns/javaee/web-fragment_3_0.xsd with 1 occurrences migrated to:  \n  https://java.sun.com/xml/ns/javaee/web-fragment_3_0.xsd ([https](https://java.sun.com/xml/ns/javaee/web-fragment_3_0.xsd) result 302).\n* http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd with 12 occurrences migrated to:  \n  https://java.sun.com/xml/ns/persistence/persistence_1_0.xsd ([https](https://java.sun.com/xml/ns/persistence/persistence_1_0.xsd) result 302).\n* http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd with 1 occurrences migrated to:  \n  https://java.sun.com/xml/ns/persistence/persistence_2_0.xsd ([https](https://java.sun.com/xml/ns/persistence/persistence_2_0.xsd) result 302).\n\n# Ignored\nThese URLs were intentionally ignored.\n\n* http://java.sun.com/xml/ns/j2ee with 2 occurrences\n* http://java.sun.com/xml/ns/javaee with 2 occurrences\n* http://java.sun.com/xml/ns/persistence with 27 occurrences\n* http://localhost:8080 with 3 occurrences\n* http://samples.springframework.org/flight with 3 occurrences\n* http://www.foo.com/schema/component with 2 occurrences\n* http://www.greeting.com/goodbye/ with 1 occurrences\n* http://www.greeting.com/hello/ with 1 occurrences\n* http://www.quartz-scheduler.org/xml/JobSchedulingData with 2 occurrences\n* http://www.springframework.org/schema/aop with 176 occurrences\n* http://www.springframework.org/schema/beans with 715 occurrences\n* http://www.springframework.org/schema/beans/test with 2 occurrences\n* http://www.springframework.org/schema/c with 9 occurrences\n* http://www.springframework.org/schema/cache with 20 occurrences\n* http://www.springframework.org/schema/context with 126 occurrences\n* http://www.springframework.org/schema/jdbc with 66 occurrences\n* http://www.springframework.org/schema/jee with 2 occurrences\n* http://www.springframework.org/schema/jms with 20 occurrences\n* http://www.springframework.org/schema/lang with 27 occurrences\n* http://www.springframework.org/schema/mvc with 58 occurrences\n* http://www.springframework.org/schema/oxm with 2 occurrences\n* http://www.springframework.org/schema/p with 16 occurrences\n* http://www.springframework.org/schema/task with 14 occurrences\n* http://www.springframework.org/schema/tx with 12 occurrences\n* http://www.springframework.org/schema/util with 28 occurrences\n* http://www.springframework.org/schema/websocket with 22 occurrences\n* http://www.w3.org/2001/XMLSchema-instance with 375 occurrences\n* http://www.w3.org/2005/Atom with 2 occurrences', 'This commit updates URLs to prefer the https protocol. Redirects are not followed to avoid accidentally expanding intentionally shortened URLs (i.e. if using a URL shortener).\n\n# HTTP URLs that Could Not Be Fixed\nThese URLs were unable to be fixed. Please review them to see if they can be manually resolved.\n\n* [ ] http://aopalliance.sourceforge.net (200) with 1 occurrences could not be migrated:  \n   ([https](https://aopalliance.sourceforge.net) result AnnotatedConnectException).\n* [ ] http://cglib.sourceforge.net (200) with 2 occurrences could not be migrated:  \n   ([https](https://cglib.sourceforge.net) result AnnotatedConnectException).\n* [ ] http://classdoc.sourceforge.net (200) with 1 occurrences could not be migrated:  \n   ([https](https://classdoc.sourceforge.net) result AnnotatedConnectException).\n* [ ] http://code.jquery.com:80/jquery.js (200) with 1 occurrences could not be migrated:  \n   ([https](https://code.jquery.com:80/jquery.js) result ClosedChannelException).\n* [ ] http://dbunit.sourceforge.net/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://dbunit.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://docs.groovy-lang.org/docs/next/html/documentation/template-engines.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://docs.groovy-lang.org/docs/next/html/documentation/template-engines.html) result SSLProtocolException).\n* [ ] http://domain3.com (200) with 6 occurrences could not be migrated:  \n   ([https](https://domain3.com) result ConnectTimeoutException).\n* [ ] http://forum.thymeleaf.org/Thymeleaf-3-0-8-JUST-PUBLISHED-td4030687.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://forum.thymeleaf.org/Thymeleaf-3-0-8-JUST-PUBLISHED-td4030687.html) result SSLHandshakeException).\n* [ ] http://grinder.sourceforge.net/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://grinder.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://groovy-lang.org/templating.html (200) with 3 occurrences could not be migrated:  \n   ([https](https://groovy-lang.org/templating.html) result SSLProtocolException).\n* [ ] http://hsqldb.org (200) with 1 occurrences could not be migrated:  \n   ([https](https://hsqldb.org) result SSLHandshakeException).\n* [ ] http://htmlunit.sourceforge.net/ (200) with 3 occurrences could not be migrated:  \n   ([https](https://htmlunit.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://htmlunit.sourceforge.net/gettingStarted.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://htmlunit.sourceforge.net/gettingStarted.html) result AnnotatedConnectException).\n* [ ] http://htmlunit.sourceforge.net/javascript.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://htmlunit.sourceforge.net/javascript.html) result AnnotatedConnectException).\n* [ ] http://javadiff.cvs.sourceforge.net/ (200) with 3 occurrences could not be migrated:  \n   ([https](https://javadiff.cvs.sourceforge.net/) result SSLHandshakeException).\n* [ ] http://jibx.sourceforge.net/ (200) with 2 occurrences could not be migrated:  \n   ([https](https://jibx.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://joda-time.sourceforge.net (200) with 1 occurrences could not be migrated:  \n   ([https](https://joda-time.sourceforge.net) result AnnotatedConnectException).\n* [ ] http://jotm.objectweb.org/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://jotm.objectweb.org/) result NotSslRecordException).\n* [ ] http://json-b.net/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://json-b.net/) result SSLHandshakeException).\n* [ ] http://mx4j.sourceforge.net (200) with 1 occurrences could not be migrated:  \n   ([https](https://mx4j.sourceforge.net) result AnnotatedConnectException).\n* [ ] http://mx4j.sourceforge.net/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://mx4j.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://mydomain3.com (200) with 9 occurrences could not be migrated:  \n   ([https](https://mydomain3.com) result ConnectTimeoutException).\n* [ ] http://objenesis.org (200) with 1 occurrences could not be migrated:  \n   ([https](https://objenesis.org) result SSLHandshakeException).\n* [ ] http://objenesis.org/tutorial.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://objenesis.org/tutorial.html) result SSLHandshakeException).\n* [ ] http://other.com/ (200) with 2 occurrences could not be migrated:  \n   ([https](https://other.com/) result SSLHandshakeException).\n* [ ] http://reactivex.io/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://reactivex.io/) result SSLHandshakeException).\n* [ ] http://reactivex.io/documentation/operators.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://reactivex.io/documentation/operators.html) result SSLHandshakeException).\n* [ ] http://url.somewhereelse.com (200) with 4 occurrences could not be migrated:  \n   ([https](https://url.somewhereelse.com) result SSLHandshakeException).\n* [ ] http://www.beanshell.org (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.beanshell.org) result SSLHandshakeException).\n* [ ] http://www.beanshell.org/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.beanshell.org/) result SSLHandshakeException).\n* [ ] http://www.doclet.com (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.doclet.com) result AnnotatedConnectException).\n* [ ] http://www.gebish.org/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.gebish.org/) result SSLHandshakeException).\n* [ ] http://www.gebish.org/manual/current/ (200) with 3 occurrences could not be migrated:  \n   ([https](https://www.gebish.org/manual/current/) result SSLHandshakeException).\n* [ ] http://www.groovy-lang.org/ (200) with 2 occurrences could not be migrated:  \n   ([https](https://www.groovy-lang.org/) result SSLProtocolException).\n* [ ] http://www.groovy-lang.org/operators.html (200) with 2 occurrences could not be migrated:  \n   ([https](https://www.groovy-lang.org/operators.html) result SSLProtocolException).\n* [ ] http://www.hsqldb.org (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.hsqldb.org) result SSLHandshakeException).\n* [ ] http://www.jensgulden.de (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.jensgulden.de) result AnnotatedConnectException).\n* [ ] http://www.mockobjects.com (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.mockobjects.com) result ClosedChannelException).\n* [ ] http://www.mockobjects.com/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.mockobjects.com/) result ClosedChannelException).\n* [ ] http://www.w3.org/TR/cors/ (200) with 19 occurrences could not be migrated:  \n   ([https](https://www.w3.org/TR/cors/) result SSLException).\n* [ ] http://xmlunit.sourceforge.net/ (200) with 2 occurrences could not be migrated:  \n   ([https](https://xmlunit.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://www.easymock.org (301) with 1 occurrences could not be migrated:  \n   ([https](https://www.easymock.org) result SSLHandshakeException).\n* [ ] http://www.easymock.org/ (301) with 1 occurrences could not be migrated:  \n   ([https](https://www.easymock.org/) result SSLHandshakeException).\n* [ ] http://www.jmock.org/ (301) with 1 occurrences could not be migrated:  \n   ([https](https://www.jmock.org/) result SSLHandshakeException).\n* [ ] http://foo.com (301) with 4 occurrences could not be migrated:  \n   ([https](https://foo.com) result SSLHandshakeException).\n* [ ] http://foo.com/ (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/) result SSLHandshakeException).\n* [ ] http://foo.com/a (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/a) result SSLHandshakeException).\n* [ ] http://foo.com/a?foo=bar&foo=baz (301) with 4 occurrences could not be migrated:  \n   ([https](https://foo.com/a?foo=bar&foo=baz) result SSLHandshakeException).\n* [ ] http://foo.com/bar (301) with 5 occurrences could not be migrated:  \n   ([https](https://foo.com/bar) result SSLHandshakeException).\n* [ ] http://foo.com/baz (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/baz) result SSLHandshakeException).\n* [ ] http://foo.com/rest/books/6.json (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/rest/books/6.json) result SSLHandshakeException).\n* [ ] http://foo.com/rest/books/6/pages/1.json (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/rest/books/6/pages/1.json) result SSLHandshakeException).\n* [ ] http://foo.com/v1 (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/v1) result SSLHandshakeException).\n* [ ] http://foo.com/v1/123 (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/v1/123) result SSLHandshakeException).\n* [ ] http://foo.com/v1/bar (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/v1/bar) result SSLHandshakeException).\n* [ ] http://foo.com/v1?id=123 (301) with 2 occurrences could not be migrated:  \n   ([https](https://foo.com/v1?id=123) result SSLHandshakeException).\n* [ ] http://foo.com/wrong (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/wrong) result SSLHandshakeException).\n* [ ] http://mydomain4.com (301) with 3 occurrences could not be migrated:  \n   ([https](https://mydomain4.com) result SSLHandshakeException).\n* [ ] http://xml.org/sax/features/ (301) with 4 occurrences could not be migrated:  \n   ([https](https://xml.org/sax/features/) result SSLHandshakeException).\n* [ ] http://xml.org/sax/features/external-general-entities (301) with 10 occurrences could not be migrated:  \n   ([https](https://xml.org/sax/features/external-general-entities) result SSLHandshakeException).\n* [ ] http://xml.org/sax/features/is-standalone (301) with 1 occurrences could not be migrated:  \n   ([https](https://xml.org/sax/features/is-standalone) result SSLHandshakeException).\n* [ ] http://xml.org/sax/features/namespace-prefixes (301) with 13 occurrences could not be migrated:  \n   ([https](https://xml.org/sax/features/namespace-prefixes) result SSLHandshakeException).\n* [ ] http://xml.org/sax/features/namespaces (301) with 12 occurrences could not be migrated:  \n   ([https](https://xml.org/sax/features/namespaces) result SSLHandshakeException).\n* [ ] http://xml.org/sax/features/namespaces-prefixes (301) with 1 occurrences could not be migrated:  \n   ([https](https://xml.org/sax/features/namespaces-prefixes) result SSLHandshakeException).\n* [ ] http://xml.org/sax/properties/lexical-handler (301) with 12 occurrences could not be migrated:  \n   ([https](https://xml.org/sax/properties/lexical-handler) result SSLHandshakeException).\n* [ ] http://www.caucho.com/hessian (302) with 6 occurrences could not be migrated:  \n   ([https](https://www.caucho.com/hessian) result SSLHandshakeException).\n* [ ] http://example.com:80/test/this/here (404) with 3 occurrences could not be migrated:  \n   ([https](https://example.com:80/test/this/here) result NotSslRecordException).\n* [ ] http://www.foo.com/schema/component/component.xsd (404) with 1 occurrences could not be migrated:  \n   ([https](https://www.foo.com/schema/component/component.xsd) result SSLHandshakeException).\n* [ ] http://www.foo.com/schema/jcache (404) with 2 occurrences could not be migrated:  \n   ([https](https://www.foo.com/schema/jcache) result SSLHandshakeException).\n* [ ] http://www.mycompany.com/schema/myns/myns.xsd (404) with 1 occurrences could not be migrated:  \n   ([https](https://www.mycompany.com/schema/myns/myns.xsd) result ConnectTimeoutException).\n* [ ] http://xunitpatterns.com/Test%20Spy.html (404) with 1 occurrences could not be migrated:  \n   ([https](https://xunitpatterns.com/Test%20Spy.html) result AnnotatedConnectException).\n\n# Fixed URLs\n\n## Fixed But Review Recommended\nThese URLs were fixed, but the https status was not OK. However, the https status was the same as the http request or http redirected to an https URL, so they were migrated. Your review is recommended.\n\n* [ ] http://mydomain2.com (302) with 22 occurrences migrated to:  \n  /QTifZ/ ([https](https://mydomain2.com) result IllegalArgumentException).\n* [ ] http://www.jdiff.org (302) with 1 occurrences migrated to:  \n  /VQYNZ/ ([https](https://www.jdiff.org) result IllegalArgumentException).\n* [ ] http://192.168.0.1/mvc-showcase (301) with 1 occurrences migrated to:  \n  /admin/ ([https](https://192.168.0.1/mvc-showcase) result IllegalArgumentException).\n* [ ] http://bugs.sun.com/view_bug.do?bug_id=6342411 (302) with 1 occurrences migrated to:  \n  https://bugs.java.com/view_bug.do?bug_id=6342411 ([https](https://bugs.sun.com/view_bug.do?bug_id=6342411) result SSLHandshakeException).\n* [ ] http://bugs.sun.com/view_bug.do?bug_id=7023180 (302) with 2 occurrences migrated to:  \n  https://bugs.java.com/view_bug.do?bug_id=7023180 ([https](https://bugs.sun.com/view_bug.do?bug_id=7023180) result SSLHandshakeException).\n* [ ] http://www.freemarker.org (301) with 5 occurrences migrated to:  \n  https://freemarker.apache.org/ ([https](https://www.freemarker.org) result ConnectTimeoutException).\n* [ ] http://sockjs.org (303) with 2 occurrences migrated to:  \n  https://github.com/sockjs/sockjs-client ([https](https://sockjs.org) result AnnotatedConnectException).\n* [ ] http://projects.eclipse.org/projects/tools.buildship (301) with 1 occurrences migrated to:  \n  https://projects.eclipse.org/projects/tools.buildship ([https](https://projects.eclipse.org/projects/tools.buildship) result SSLException).\n* [ ] http://tools.ietf.org/html/rfc6202 (301) with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc6202 ([https](https://tools.ietf.org/html/rfc6202) result ReadTimeoutException).\n* [ ] http://tools.ietf.org/html/rfc7239 (301) with 7 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7239 ([https](https://tools.ietf.org/html/rfc7239) result ReadTimeoutException).\n* [ ] http://aaa.org:8080/a (301) with 1 occurrences migrated to:  \n  https://www.aaa.org/articles/ ([https](https://aaa.org:8080/a) result NotSslRecordException).\n* [ ] http://www.caucho.com (302) with 1 occurrences migrated to:  \n  https://www.caucho.com/ ([https](https://www.caucho.com) result SSLHandshakeException).\n* [ ] http://jruby.org (301) with 4 occurrences migrated to:  \n  https://www.jruby.org ([https](https://jruby.org) result SSLHandshakeException).\n* [ ] http://jruby.org/ (301) with 1 occurrences migrated to:  \n  https://www.jruby.org ([https](https://jruby.org/) result SSLHandshakeException).\n* [ ] http://bbb.org:9090/b (AnnotatedConnectException) with 2 occurrences migrated to:  \n  https://bbb.org:9090/b ([https](https://bbb.org:9090/b) result AnnotatedConnectException).\n* [ ] http://192.168.28.42/1.jsp (ConnectTimeoutException) with 3 occurrences migrated to:  \n  https://192.168.28.42/1.jsp ([https](https://192.168.28.42/1.jsp) result ConnectTimeoutException).\n* [ ] http://abc.com/v2/accounts?q=12 (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://abc.com/v2/accounts?q=12 ([https](https://abc.com/v2/accounts?q=12) result ConnectTimeoutException).\n* [ ] http://example.com:8080/ (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.com:8080/ ([https](https://example.com:8080/) result ConnectTimeoutException).\n* [ ] http://example.com:8080/bar (ConnectTimeoutException) with 5 occurrences migrated to:  \n  https://example.com:8080/bar ([https](https://example.com:8080/bar) result ConnectTimeoutException).\n* [ ] http://example.org:9090 (ConnectTimeoutException) with 2 occurrences migrated to:  \n  https://example.org:9090 ([https](https://example.org:9090) result ConnectTimeoutException).\n* [ ] http://example.org:9090/base (ConnectTimeoutException) with 12 occurrences migrated to:  \n  https://example.org:9090/base ([https](https://example.org:9090/base) result ConnectTimeoutException).\n* [ ] http://example.org:9090/base/people (ConnectTimeoutException) with 2 occurrences migrated to:  \n  https://example.org:9090/base/people ([https](https://example.org:9090/base/people) result ConnectTimeoutException).\n* [ ] http://example.org:9090/base/something/1/foo (ConnectTimeoutException) with 2 occurrences migrated to:  \n  https://example.org:9090/base/something/1/foo ([https](https://example.org:9090/base/something/1/foo) result ConnectTimeoutException).\n* [ ] http://example.org:9090/base/something/else (ConnectTimeoutException) with 2 occurrences migrated to:  \n  https://example.org:9090/base/something/else ([https](https://example.org:9090/base/something/else) result ConnectTimeoutException).\n* [ ] http://example.org:9999/base (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/base ([https](https://example.org:9999/base) result ConnectTimeoutException).\n* [ ] http://example.org:9999/base/api/people/123/addresses (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/base/api/people/123/addresses ([https](https://example.org:9999/base/api/people/123/addresses) result ConnectTimeoutException).\n* [ ] http://example.org:9999/base/api/people/123/addresses/DE (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/base/api/people/123/addresses/DE ([https](https://example.org:9999/base/api/people/123/addresses/DE) result ConnectTimeoutException).\n* [ ] http://example.org:9999/base/people/123/addresses/DE (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/base/people/123/addresses/DE ([https](https://example.org:9999/base/people/123/addresses/DE) result ConnectTimeoutException).\n* [ ] http://example.org:9999/next (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/next ([https](https://example.org:9999/next) result ConnectTimeoutException).\n* [ ] http://example.org:9999/path?q=foo (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/path?q=foo ([https](https://example.org:9999/path?q=foo) result ConnectTimeoutException).\n* [ ] http://foo.com:8080/v1/bar?id=123 (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://foo.com:8080/v1/bar?id=123 ([https](https://foo.com:8080/v1/bar?id=123) result ConnectTimeoutException).\n* [ ] http://mydomain1.com:123 (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://mydomain1.com:123 ([https](https://mydomain1.com:123) result ConnectTimeoutException).\n* [ ] http://site1.com (ConnectTimeoutException) with 13 occurrences migrated to:  \n  https://site1.com ([https](https://site1.com) result ConnectTimeoutException).\n* [ ] http://wwws.sun.com/software/xml/developers/diffmk/ (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://wwws.sun.com/software/xml/developers/diffmk/ ([https](https://wwws.sun.com/software/xml/developers/diffmk/) result ConnectTimeoutException).\n* [ ] http://aaa.org:8080/app/b/c/d (ReadTimeoutException) with 1 occurrences migrated to:  \n  https://aaa.org:8080/app/b/c/d ([https](https://aaa.org:8080/app/b/c/d) result NotSslRecordException).\n* [ ] http://aaa.org:8080/b/c/d (ReadTimeoutException) with 1 occurrences migrated to:  \n  https://aaa.org:8080/b/c/d ([https](https://aaa.org:8080/b/c/d) result NotSslRecordException).\n* [ ] http://www.w3.org/2000/xmlns/ (ReadTimeoutException) with 5 occurrences migrated to:  \n  https://www.w3.org/2000/xmlns/ ([https](https://www.w3.org/2000/xmlns/) result SSLException).\n* [ ] http://www.w3.org/2004/08/xop/include (ReadTimeoutException) with 2 occurrences migrated to:  \n  https://www.w3.org/2004/08/xop/include ([https](https://www.w3.org/2004/08/xop/include) result SSLException).\n* [ ] http://www.w3.org/DesignIssues/MatrixURIs.html (ReadTimeoutException) with 2 occurrences migrated to:  \n  https://www.w3.org/DesignIssues/MatrixURIs.html ([https](https://www.w3.org/DesignIssues/MatrixURIs.html) result SSLException).\n* [ ] http://www.w3.org/TR/2004/WD-soap12-mtom-20040608/ (ReadTimeoutException) with 2 occurrences migrated to:  \n  https://www.w3.org/TR/2004/WD-soap12-mtom-20040608/ ([https](https://www.w3.org/TR/2004/WD-soap12-mtom-20040608/) result SSLException).\n* [ ] http://www.w3.org/TR/2005/REC-xop10-20050125/ (ReadTimeoutException) with 6 occurrences migrated to:  \n  https://www.w3.org/TR/2005/REC-xop10-20050125/ ([https](https://www.w3.org/TR/2005/REC-xop10-20050125/) result SSLException).\n* [ ] http://www.w3.org/TR/eventsource/ (ReadTimeoutException) with 2 occurrences migrated to:  \n  https://www.w3.org/TR/eventsource/ ([https](https://www.w3.org/TR/eventsource/) result SSLException).\n* [ ] http://www.w3.org/TR/html4/loose.dtd (ReadTimeoutException) with 5 occurrences migrated to:  \n  https://www.w3.org/TR/html4/loose.dtd ([https](https://www.w3.org/TR/html4/loose.dtd) result SSLException).\n* [ ] http://www.w3.org/TR/xhtml1/ (ReadTimeoutException) with 1 occurrences migrated to:  \n  https://www.w3.org/TR/xhtml1/ ([https](https://www.w3.org/TR/xhtml1/) result SSLException).\n* [ ] http://www.w3.org/TR/xhtml1/diffs.html (ReadTimeoutException) with 1 occurrences migrated to:  \n  https://www.w3.org/TR/xhtml1/diffs.html ([https](https://www.w3.org/TR/xhtml1/diffs.html) result SSLException).\n* [ ] http://www.w3.org/TR/xhtml1/dtds.html (ReadTimeoutException) with 1 occurrences migrated to:  \n  https://www.w3.org/TR/xhtml1/dtds.html ([https](https://www.w3.org/TR/xhtml1/dtds.html) result SSLException).\n* [ ] http://www.w3.org/XML/1998/namespace (ReadTimeoutException) with 5 occurrences migrated to:  \n  https://www.w3.org/XML/1998/namespace ([https](https://www.w3.org/XML/1998/namespace) result SSLException).\n* [ ] http://Additional-namespace-name-URI (UnknownHostException) with 1 occurrences migrated to:  \n  https://Additional-namespace-name-URI ([https](https://Additional-namespace-name-URI) result UnknownHostException).\n* [ ] http://DOMAIN2.com (UnknownHostException) with 2 occurrences migrated to:  \n  https://DOMAIN2.com ([https](https://DOMAIN2.com) result UnknownHostException).\n* [ ] http://Default-namespace-name-URI (UnknownHostException) with 1 occurrences migrated to:  \n  https://Default-namespace-name-URI ([https](https://Default-namespace-name-URI) result UnknownHostException).\n* [ ] http://HOST:8080/remoting/AccountService (UnknownHostException) with 1 occurrences migrated to:  \n  https://HOST:8080/remoting/AccountService ([https](https://HOST:8080/remoting/AccountService) result UnknownHostException).\n* [ ] http://Namespace-name-URI (UnknownHostException) with 1 occurrences migrated to:  \n  https://Namespace-name-URI ([https](https://Namespace-name-URI) result UnknownHostException).\n* [ ] http://Unbound-namespace-name-URI (UnknownHostException) with 1 occurrences migrated to:  \n  https://Unbound-namespace-name-URI ([https](https://Unbound-namespace-name-URI) result UnknownHostException).\n* [ ] http://a.example.org/mvc-showcase (UnknownHostException) with 1 occurrences migrated to:  \n  https://a.example.org/mvc-showcase ([https](https://a.example.org/mvc-showcase) result UnknownHostException).\n* [ ] http://anotherHost/mvc-showcase (UnknownHostException) with 1 occurrences migrated to:  \n  https://anotherHost/mvc-showcase ([https](https://anotherHost/mvc-showcase) result UnknownHostException).\n* [ ] http://arjen:foobar@java.sun.com:80 (UnknownHostException) with 1 occurrences migrated to:  \n  https://arjen:foobar@java.sun.com:80 ([https](https://arjen:foobar@java.sun.com:80) result UnknownHostException).\n* [ ] http://barfoo:8888 (UnknownHostException) with 1 occurrences migrated to:  \n  https://barfoo:8888 ([https](https://barfoo:8888) result UnknownHostException).\n* [ ] http://dev.bar.com (UnknownHostException) with 3 occurrences migrated to:  \n  https://dev.bar.com ([https](https://dev.bar.com) result UnknownHostException).\n* [ ] http://domain1.com (UnknownHostException) with 25 occurrences migrated to:  \n  https://domain1.com ([https](https://domain1.com) result UnknownHostException).\n* [ ] http://domain1.com/test.html (UnknownHostException) with 4 occurrences migrated to:  \n  https://domain1.com/test.html ([https](https://domain1.com/test.html) result UnknownHostException).\n* [ ] http://domain2.com (UnknownHostException) with 98 occurrences migrated to:  \n  https://domain2.com ([https](https://domain2.com) result UnknownHostException).\n* [ ] http://example.com&quot;,HttpMethod.GET (UnknownHostException) with 6 occurrences migrated to:  \n  https://example.com&quot;,HttpMethod.GET ([https](https://example.com&quot;,HttpMethod.GET) result UnknownHostException).\n* [ ] http://example/ (UnknownHostException) with 1 occurrences migrated to:  \n  https://example/ ([https](https://example/) result UnknownHostException).\n* [ ] http://fake-service (UnknownHostException) with 7 occurrences migrated to:  \n  https://fake-service ([https](https://fake-service) result UnknownHostException).\n* [ ] http://foo (UnknownHostException) with 3 occurrences migrated to:  \n  https://foo ([https](https://foo) result UnknownHostException).\n* [ ] http://foo.bar.com (UnknownHostException) with 4 occurrences migrated to:  \n  https://foo.bar.com ([https](https://foo.bar.com) result UnknownHostException).\n* [ ] http://foobar:8088 (UnknownHostException) with 1 occurrences migrated to:  \n  https://foobar:8088 ([https](https://foobar:8088) result UnknownHostException).\n* [ ] http://host:port/myApp/myEndpoint/ (UnknownHostException) with 1 occurrences migrated to:  \n  https://host:port/myApp/myEndpoint/ ([https](https://host:port/myApp/myEndpoint/) result UnknownHostException).\n* [ ] http://jaxws.remoting.springframework.org/ (UnknownHostException) with 4 occurrences migrated to:  \n  https://jaxws.remoting.springframework.org/ ([https](https://jaxws.remoting.springframework.org/) result UnknownHostException).\n* [ ] http://joe.openid.example.org/ (UnknownHostException) with 2 occurrences migrated to:  \n  https://joe.openid.example.org/ ([https](https://joe.openid.example.org/) result UnknownHostException).\n* [ ] http://myserver (UnknownHostException) with 1 occurrences migrated to:  \n  https://myserver ([https](https://myserver) result UnknownHostException).\n* [ ] http://myserver/logo.png (UnknownHostException) with 1 occurrences migrated to:  \n  https://myserver/logo.png ([https](https://myserver/logo.png) result UnknownHostException).\n* [ ] http://myurl (UnknownHostException) with 12 occurrences migrated to:  \n  https://myurl ([https](https://myurl) result UnknownHostException).\n* [ ] http://remotehost:8080/remoting/AccountService (UnknownHostException) with 2 occurrences migrated to:  \n  https://remotehost:8080/remoting/AccountService ([https](https://remotehost:8080/remoting/AccountService) result UnknownHostException).\n* [ ] http://samples.springframework.org/order (UnknownHostException) with 2 occurrences migrated to:  \n  https://samples.springframework.org/order ([https](https://samples.springframework.org/order) result UnknownHostException).\n* [ ] http://somethingDifferent (UnknownHostException) with 1 occurrences migrated to:  \n  https://somethingDifferent ([https](https://somethingDifferent) result UnknownHostException).\n* [ ] http://url.somewhere.com (UnknownHostException) with 25 occurrences migrated to:  \n  https://url.somewhere.com ([https](https://url.somewhere.com) result UnknownHostException).\n* [ ] http://url.somewhere.com/path (UnknownHostException) with 1 occurrences migrated to:  \n  https://url.somewhere.com/path ([https](https://url.somewhere.com/path) result UnknownHostException).\n* [ ] http://url.somewhere.com/path?id=1 (UnknownHostException) with 1 occurrences migrated to:  \n  https://url.somewhere.com/path?id=1 ([https](https://url.somewhere.com/path?id=1) result UnknownHostException).\n* [ ] http://url.somewhere.com/test.htm (UnknownHostException) with 2 occurrences migrated to:  \n  https://url.somewhere.com/test.htm ([https](https://url.somewhere.com/test.htm) result UnknownHostException).\n* [ ] http://url.somewhere.com?a=b&c=d (UnknownHostException) with 1 occurrences migrated to:  \n  https://url.somewhere.com?a=b&c=d ([https](https://url.somewhere.com?a=b&c=d) result UnknownHostException).\n* [ ] http://url.somewhere.com?foo= (UnknownHostException) with 2 occurrences migrated to:  \n  https://url.somewhere.com?foo= ([https](https://url.somewhere.com?foo=) result UnknownHostException).\n* [ ] http://url.somewhere.com?foo=bar (UnknownHostException) with 4 occurrences migrated to:  \n  https://url.somewhere.com?foo=bar ([https](https://url.somewhere.com?foo=bar) result UnknownHostException).\n* [ ] http://url.somewhere.com?foo=bar&a=b&c=d (UnknownHostException) with 2 occurrences migrated to:  \n  https://url.somewhere.com?foo=bar&a=b&c=d ([https](https://url.somewhere.com?foo=bar&a=b&c=d) result UnknownHostException).\n* [ ] http://wiki.fasterxml.com/JacksonHome (UnknownHostException) with 3 occurrences migrated to:  \n  https://wiki.fasterxml.com/JacksonHome ([https](https://wiki.fasterxml.com/JacksonHome) result UnknownHostException).\n* [ ] http://wiki.fasterxml.com/JacksonJsonViews (UnknownHostException) with 4 occurrences migrated to:  \n  https://wiki.fasterxml.com/JacksonJsonViews ([https](https://wiki.fasterxml.com/JacksonJsonViews) result UnknownHostException).\n* [ ] http://www (UnknownHostException) with 1 occurrences migrated to:  \n  https://www ([https](https://www) result UnknownHostException).\n* [ ] http://x.y.z (UnknownHostException) with 2 occurrences migrated to:  \n  https://x.y.z ([https](https://x.y.z) result UnknownHostException).\n* [ ] http://abc.com/v1 (301) with 1 occurrences migrated to:  \n  https://abc.go.com/v1 ([https](https://abc.com/v1) result 404).\n* [ ] http://abc.com/v1/accounts/43 (301) with 1 occurrences migrated to:  \n  https://abc.go.com/v1/accounts/43 ([https](https://abc.com/v1/accounts/43) result 404).\n* [ ] http://abc.com/v1/accounts?q=12 (301) with 1 occurrences migrated to:  \n  https://abc.go.com/v1/accounts?q=12 ([https](https://abc.com/v1/accounts?q=12) result 404).\n* [ ] http://apache.org/xml/features/disallow-doctype-decl (404) with 10 occurrences migrated to:  \n  https://apache.org/xml/features/disallow-doctype-decl ([https](https://apache.org/xml/features/disallow-doctype-decl) result 404).\n* [ ] http://docs.spring.io/v1/bar (301) with 1 occurrences migrated to:  \n  https://docs.spring.io/v1/bar ([https](https://docs.spring.io/v1/bar) result 404).\n* [ ] http://example.com/-foo (404) with 2 occurrences migrated to:  \n  https://example.com/-foo ([https](https://example.com/-foo) result 404).\n* [ ] http://example.com/1 (404) with 1 occurrences migrated to:  \n  https://example.com/1 ([https](https://example.com/1) result 404).\n* [ ] http://example.com/1/2 (404) with 2 occurrences migrated to:  \n  https://example.com/1/2 ([https](https://example.com/1/2) result 404).\n* [ ] http://example.com/2 (404) with 1 occurrences migrated to:  \n  https://example.com/2 ([https](https://example.com/2) result 404).\n* [ ] http://example.com/a%20b?q=a%2Bb (404) with 1 occurrences migrated to:  \n  https://example.com/a%20b?q=a%2Bb ([https](https://example.com/a%20b?q=a%2Bb) result 404).\n* [ ] http://example.com/abc/ (404) with 1 occurrences migrated to:  \n  https://example.com/abc/ ([https](https://example.com/abc/) result 404).\n* [ ] http://example.com/abc/x/y (404) with 1 occurrences migrated to:  \n  https://example.com/abc/x/y ([https](https://example.com/abc/x/y) result 404).\n* [ ] http://example.com/abc/x/y/z (404) with 3 occurrences migrated to:  \n  https://example.com/abc/x/y/z ([https](https://example.com/abc/x/y/z) result 404).\n* [ ] http://example.com/app/login/authenticate (404) with 1 occurrences migrated to:  \n  https://example.com/app/login/authenticate ([https](https://example.com/app/login/authenticate) result 404).\n* [ ] http://example.com/arbitrary/path (404) with 1 occurrences migrated to:  \n  https://example.com/arbitrary/path ([https](https://example.com/arbitrary/path) result 404).\n* [ ] http://example.com/bar (404) with 6 occurrences migrated to:  \n  https://example.com/bar ([https](https://example.com/bar) result 404).\n* [ ] http://example.com/context.xml (404) with 4 occurrences migrated to:  \n  https://example.com/context.xml ([https](https://example.com/context.xml) result 404).\n* [ ] http://example.com/example (404) with 6 occurrences migrated to:  \n  https://example.com/example ([https](https://example.com/example) result 404).\n* [ ] http://example.com/example/?name (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name ([https](https://example.com/example/?name) result 404).\n* [ ] http://example.com/example/?name= (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name= ([https](https://example.com/example/?name=) result 404).\n* [ ] http://example.com/example/?name=%20 (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name=%20 ([https](https://example.com/example/?name=%20) result 404).\n* [ ] http://example.com/example/?name=row%5B0%5D (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name=row%5B0%5D ([https](https://example.com/example/?name=row%5B0%5D) result 404).\n* [ ] http://example.com/example/?name=value (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name=value ([https](https://example.com/example/?name=value) result 404).\n* [ ] http://example.com/example/?name=value&param2=value+2 (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name=value&param2=value+2 ([https](https://example.com/example/?name=value&param2=value+2) result 404).\n* [ ] http://example.com/example/?row%5B0%5D=value (404) with 1 occurrences migrated to:  \n  https://example.com/example/?row%5B0%5D=value ([https](https://example.com/example/?row%5B0%5D=value) result 404).\n* [ ] http://example.com/foo (404) with 7 occurrences migrated to:  \n  https://example.com/foo ([https](https://example.com/foo) result 404).\n* [ ] http://example.com/foo/../bar (404) with 1 occurrences migrated to:  \n  https://example.com/foo/../bar ([https](https://example.com/foo/../bar) result 404).\n* [ ] http://example.com/foo/foo2?bar (404) with 1 occurrences migrated to:  \n  https://example.com/foo/foo2?bar ([https](https://example.com/foo/foo2?bar) result 404).\n* [ ] http://example.com/foo?bar (404) with 4 occurrences migrated to:  \n  https://example.com/foo?bar ([https](https://example.com/foo?bar) result 404).\n* [ ] http://example.com/foo?bar= (404) with 2 occurrences migrated to:  \n  https://example.com/foo?bar= ([https](https://example.com/foo?bar=) result 404).\n* [ ] http://example.com/foo?bar=baz (404) with 2 occurrences migrated to:  \n  https://example.com/foo?bar=baz ([https](https://example.com/foo?bar=baz) result 404).\n* [ ] http://example.com/foo?baz=42 (404) with 1 occurrences migrated to:  \n  https://example.com/foo?baz=42 ([https](https://example.com/foo?baz=42) result 404).\n* [ ] http://example.com/foo?foo=bar&baz=qux (404) with 2 occurrences migrated to:  \n  https://example.com/foo?foo=bar&baz=qux ([https](https://example.com/foo?foo=bar&baz=qux) result 404).\n* [ ] http://example.com/hotel (404) with 3 occurrences migrated to:  \n  https://example.com/hotel ([https](https://example.com/hotel) result 404).\n* [ ] http://example.com/hotel%20list (404) with 1 occurrences migrated to:  \n  https://example.com/hotel%20list ([https](https://example.com/hotel%20list) result 404).\n* [ ] http://example.com/hotel%20list/Z (404) with 1 occurrences migrated to:  \n  https://example.com/hotel%20list/Z ([https](https://example.com/hotel%20list/Z) result 404).\n* [ ] http://example.com/hotel%20list/Z%C3%BCrich (404) with 3 occurrences migrated to:  \n  https://example.com/hotel%20list/Z%C3%BCrich ([https](https://example.com/hotel%20list/Z%C3%BCrich) result 404).\n* [ ] http://example.com/hotels (404) with 3 occurrences migrated to:  \n  https://example.com/hotels ([https](https://example.com/hotels) result 404).\n* [ ] http://example.com/hotels/ (404) with 15 occurrences migrated to:  \n  https://example.com/hotels/ ([https](https://example.com/hotels/) result 404).\n* [ ] http://example.com/hotels/1/bookings/42 (404) with 1 occurrences migrated to:  \n  https://example.com/hotels/1/bookings/42 ([https](https://example.com/hotels/1/bookings/42) result 404).\n* [ ] http://example.com/hotels/1/pic/pics%2Flogo.png/size/150x150 (404) with 2 occurrences migrated to:  \n  https://example.com/hotels/1/pic/pics%2Flogo.png/size/150x150 ([https](https://example.com/hotels/1/pic/pics%2Flogo.png/size/150x150) result 404).\n* [ ] http://example.com/hotels/1/pic/pics/logo.png (404) with 1 occurrences migrated to:  \n  https://example.com/hotels/1/pic/pics/logo.png ([https](https://example.com/hotels/1/pic/pics/logo.png) result 404).\n* [ ] http://example.com/hotels/42/bookings/21 (404) with 1 occurrences migrated to:  \n  https://example.com/hotels/42/bookings/21 ([https](https://example.com/hotels/42/bookings/21) result 404).\n* [ ] http://example.com/hotels/42/bookings/42 (404) with 1 occurrences migrated to:  \n  https://example.com/hotels/42/bookings/42 ([https](https://example.com/hotels/42/bookings/42) result 404).\n* [ ] http://example.com/hotels/Rest%20%26%20Relax/bookings/42 (404) with 2 occurrences migrated to:  \n  https://example.com/hotels/Rest%20%26%20Relax/bookings/42 ([https](https://example.com/hotels/Rest%20%26%20Relax/bookings/42) result 404).\n* [ ] http://example.com/info (404) with 2 occurrences migrated to:  \n  https://example.com/info ([https](https://example.com/info) result 404).\n* [ ] http://example.com/invalid (404) with 1 occurrences migrated to:  \n  https://example.com/invalid ([https](https://example.com/invalid) result 404).\n* [ ] http://example.com/jquery-1.11.0.min.js (404) with 2 occurrences migrated to:  \n  https://example.com/jquery-1.11.0.min.js ([https](https://example.com/jquery-1.11.0.min.js) result 404).\n* [ ] http://example.com/match (404) with 1 occurrences migrated to:  \n  https://example.com/match ([https](https://example.com/match) result 404).\n* [ ] http://example.com/myFileUpload (404) with 1 occurrences migrated to:  \n  https://example.com/myFileUpload ([https](https://example.com/myFileUpload) result 404).\n* [ ] http://example.com/myForm (404) with 1 occurrences migrated to:  \n  https://example.com/myForm ([https](https://example.com/myForm) result 404).\n* [ ] http://example.com/path (404) with 4 occurrences migrated to:  \n  https://example.com/path ([https](https://example.com/path) result 404).\n* [ ] http://example.com/path?query (404) with 2 occurrences migrated to:  \n  https://example.com/path?query ([https](https://example.com/path?query) result 404).\n* [ ] http://example.com/path?query=foo (404) with 1 occurrences migrated to:  \n  https://example.com/path?query=foo ([https](https://example.com/path?query=foo) result 404).\n* [ ] http://example.com/people (404) with 1 occurrences migrated to:  \n  https://example.com/people ([https](https://example.com/people) result 404).\n* [ ] http://example.com/people/ (404) with 1 occurrences migrated to:  \n  https://example.com/people/ ([https](https://example.com/people/) result 404).\n* [ ] http://example.com/prefix/path (404) with 2 occurrences migrated to:  \n  https://example.com/prefix/path ([https](https://example.com/prefix/path) result 404).\n* [ ] http://example.com/resource (404) with 5 occurrences migrated to:  \n  https://example.com/resource ([https](https://example.com/resource) result 404).\n* [ ] http://example.com/resource?access_token=123 (404) with 1 occurrences migrated to:  \n  https://example.com/resource?access_token=123 ([https](https://example.com/resource?access_token=123) result 404).\n* [ ] http://example.com/spaces (404) with 1 occurrences migrated to:  \n  https://example.com/spaces ([https](https://example.com/spaces) result 404).\n* [ ] http://example.com/spaces%20and%20%E2%82%AC (404) with 3 occurrences migrated to:  \n  https://example.com/spaces%20and%20%E2%82%AC ([https](https://example.com/spaces%20and%20%E2%82%AC) result 404).\n* [ ] http://example.com/spring/ (404) with 1 occurrences migrated to:  \n  https://example.com/spring/ ([https](https://example.com/spring/) result 404).\n* [ ] http://example.com/test/this/here (404) with 1 occurrences migrated to:  \n  https://example.com/test/this/here ([https](https://example.com/test/this/here) result 404).\n* [ ] http://example.com/upload (404) with 1 occurrences migrated to:  \n  https://example.com/upload ([https](https://example.com/upload) result 404).\n* [ ] http://example.com/user (404) with 1 occurrences migrated to:  \n  https://example.com/user ([https](https://example.com/user) result 404).\n* [ ] http://example.org/fonts/css (404) with 6 occurrences migrated to:  \n  https://example.org/fonts/css ([https](https://example.org/fonts/css) result 404).\n* [ ] http://example.org/foo/page.html (404) with 1 occurrences migrated to:  \n  https://example.org/foo/page.html ([https](https://example.org/foo/page.html) result 404).\n* [ ] http://example.org/image.png (404) with 4 occurrences migrated to:  \n  https://example.org/image.png ([https](https://example.org/image.png) result 404).\n* [ ] http://example.org/music/people (404) with 4 occurrences migrated to:  \n  https://example.org/music/people ([https](https://example.org/music/people) result 404).\n* [ ] http://example.org/page.cache.html (404) with 1 occurrences migrated to:  \n  https://example.org/page.cache.html ([https](https://example.org/page.cache.html) result 404).\n* [ ] http://example.org/path (404) with 3 occurrences migrated to:  \n  https://example.org/path ([https](https://example.org/path) result 404).\n* [ ] http://springframework.org/oxm-test (404) with 2 occurrences migrated to:  \n  https://springframework.org/oxm-test ([https](https://springframework.org/oxm-test) result 404).\n* [ ] http://www.example.com/favicon.ico (404) with 2 occurrences migrated to:  \n  https://www.example.com/favicon.ico ([https](https://www.example.com/favicon.ico) result 404).\n* [ ] http://www.example.com/foo/bar (404) with 1 occurrences migrated to:  \n  https://www.example.com/foo/bar ([https](https://www.example.com/foo/bar) result 404).\n* [ ] http://www.example.com/hotels (404) with 2 occurrences migrated to:  \n  https://www.example.com/hotels ([https](https://www.example.com/hotels) result 404).\n* [ ] http://www.example.com/user/ (404) with 4 occurrences migrated to:  \n  https://www.example.com/user/ ([https](https://www.example.com/user/) result 404).\n* [ ] http://www.example.com/user/john%3Bdoe/dashboard (404) with 4 occurrences migrated to:  \n  https://www.example.com/user/john%3Bdoe/dashboard ([https](https://www.example.com/user/john%3Bdoe/dashboard) result 404).\n* [ ] http://www.example.com/user/john;doe/dashboard (404) with 2 occurrences migrated to:  \n  https://www.example.com/user/john;doe/dashboard ([https](https://www.example.com/user/john;doe/dashboard) result 404).\n* [ ] http://www.ibm.com/developerworks/websphere/library/techarticles/0404_tang/0404_tang.html (301) with 1 occurrences migrated to:  \n  https://www.ibm.com/developerworks/websphere/library/techarticles/0404_tang/0404_tang.html ([https](https://www.ibm.com/developerworks/websphere/library/techarticles/0404_tang/0404_tang.html) result 404).\n* [ ] http://mydomain1.com:80/path (301) with 2 occurrences migrated to:  \n  https://www.mydomain1.com/path ([https](https://mydomain1.com:80/path) result 404).\n* [ ] http://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-03 (404) with 1 occurrences migrated to:  \n  https://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-03 ([https](https://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-03) result 404).\n* [ ] http://www.utoronto.ca/webdocs/HTMLdocs/Book/Book-3ed/appb/mimetype.html (301) with 1 occurrences migrated to:  \n  https://www.utoronto.ca/webdocs/HTMLdocs/Book/Book-3ed/appb/mimetype.html ([https](https://www.utoronto.ca/webdocs/HTMLdocs/Book/Book-3ed/appb/mimetype.html) result 404).\n* [ ] http://xml.apache.org/xslt (404) with 3 occurrences migrated to:  \n  https://xml.apache.org/xslt ([https](https://xml.apache.org/xslt) result 404).\n* [ ] http://myhost.com/resource/path/myTemplate.txt (500) with 1 occurrences migrated to:  \n  https://myhost.com/resource/path/myTemplate.txt ([https](https://myhost.com/resource/path/myTemplate.txt) result 500).\n* [ ] http://myhost.com/some/arbitrary/path (500) with 1 occurrences migrated to:  \n  https://myhost.com/some/arbitrary/path ([https](https://myhost.com/some/arbitrary/path) result 500).\n\n## Fixed Success \nThese URLs were switched to an https URL with a 2xx status. While the status was successful, your review is still recommended.\n\n* [ ] http://activemq.apache.org/delete-inactive-destinations.html with 1 occurrences migrated to:  \n  https://activemq.apache.org/delete-inactive-destinations.html ([https](https://activemq.apache.org/delete-inactive-destinations.html) result 200).\n* [ ] http://activemq.apache.org/stomp.html with 1 occurrences migrated to:  \n  https://activemq.apache.org/stomp.html ([https](https://activemq.apache.org/stomp.html) result 200).\n* [ ] http://ant.apache.org with 1 occurrences migrated to:  \n  https://ant.apache.org ([https](https://ant.apache.org) result 200).\n* [ ] http://asciidoctor.org/ with 1 occurrences migrated to:  \n  https://asciidoctor.org/ ([https](https://asciidoctor.org/) result 200).\n* [ ] http://asciidoctor.org/docs/editing-asciidoc-with-live-preview/ with 2 occurrences migrated to:  \n  https://asciidoctor.org/docs/editing-asciidoc-with-live-preview/ ([https](https://asciidoctor.org/docs/editing-asciidoc-with-live-preview/) result 200).\n* [ ] http://beanvalidation.org/ with 1 occurrences migrated to:  \n  https://beanvalidation.org/ ([https](https://beanvalidation.org/) result 200).\n* [ ] http://caniuse.com/ with 2 occurrences migrated to:  \n  https://caniuse.com/ ([https](https://caniuse.com/) result 200).\n* [ ] http://cbor.io/ with 1 occurrences migrated to:  \n  https://cbor.io/ ([https](https://cbor.io/) result 200).\n* [ ] http://code.jquery.com/jquery-1.11.0.min.js with 2 occurrences migrated to:  \n  https://code.jquery.com/jquery-1.11.0.min.js ([https](https://code.jquery.com/jquery-1.11.0.min.js) result 200).\n* [ ] http://code.jquery.com/jquery.js with 1 occurrences migrated to:  \n  https://code.jquery.com/jquery.js ([https](https://code.jquery.com/jquery.js) result 200).\n* [ ] http://commons.apache.org/proper/commons-lang/ with 2 occurrences migrated to:  \n  https://commons.apache.org/proper/commons-lang/ ([https](https://commons.apache.org/proper/commons-lang/) result 200).\n* [ ] http://docs.oracle.com/javase/6/docs/api/java/lang/instrument/package-summary.html with 1 occurrences migrated to:  \n  https://docs.oracle.com/javase/6/docs/api/java/lang/instrument/package-summary.html ([https](https://docs.oracle.com/javase/6/docs/api/java/lang/instrument/package-summary.html) result 200).\n* [ ] http://docs.oracle.com/javase/8/docs/api/java/beans/package-summary.html with 1 occurrences migrated to:  \n  https://docs.oracle.com/javase/8/docs/api/java/beans/package-summary.html ([https](https://docs.oracle.com/javase/8/docs/api/java/beans/package-summary.html) result 200).\n* [ ] http://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html with 1 occurrences migrated to:  \n  https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html ([https](https://docs.oracle.com/javase/8/docs/api/java/io/Serializable.html) result 200).\n* [ ] http://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html with 1 occurrences migrated to:  \n  https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html ([https](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html) result 200).\n* [ ] http://docs.oracle.com/javase/8/docs/api/javax/script/ScriptEngineFactory.html with 2 occurrences migrated to:  \n  https://docs.oracle.com/javase/8/docs/api/javax/script/ScriptEngineFactory.html ([https](https://docs.oracle.com/javase/8/docs/api/javax/script/ScriptEngineFactory.html) result 200).\n* [ ] http://docs.oracle.com/javase/tutorial/javabeans/advanced/customization.html with 1 occurrences migrated to:  \n  https://docs.oracle.com/javase/tutorial/javabeans/advanced/customization.html ([https](https://docs.oracle.com/javase/tutorial/javabeans/advanced/customization.html) result 200).\n* [ ] http://docs.oracle.com/javase/tutorial/javabeans/writing/properties.html with 1 occurrences migrated to:  \n  https://docs.oracle.com/javase/tutorial/javabeans/writing/properties.html ([https](https://docs.oracle.com/javase/tutorial/javabeans/writing/properties.html) result 200).\n* [ ] http://docs.seleniumhq.org/ with 1 occurrences migrated to:  \n  https://docs.seleniumhq.org/ ([https](https://docs.seleniumhq.org/) result 200).\n* [ ] http://docs.seleniumhq.org/projects/webdriver/ with 1 occurrences migrated to:  \n  https://docs.seleniumhq.org/projects/webdriver/ ([https](https://docs.seleniumhq.org/projects/webdriver/) result 200).\n* [ ] http://docs.spring.io/spring-framework/docs/current/javadoc-api/ with 1 occurrences migrated to:  \n  https://docs.spring.io/spring-framework/docs/current/javadoc-api/ ([https](https://docs.spring.io/spring-framework/docs/current/javadoc-api/) result 200).\n* [ ] http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateView.html with 1 occurrences migrated to:  \n  https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateView.html ([https](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateView.html) result 200).\n* [ ] http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/ with 1 occurrences migrated to:  \n  https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/ ([https](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/) result 200).\n* [ ] http://docs.spring.io/spring-session/docs/current/reference/html5/ with 1 occurrences migrated to:  \n  https://docs.spring.io/spring-session/docs/current/reference/html5/ ([https](https://docs.spring.io/spring-session/docs/current/reference/html5/) result 200).\n* [ ] http://en.wikipedia.org/wiki/Adapter_pattern with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/Adapter_pattern ([https](https://en.wikipedia.org/wiki/Adapter_pattern) result 200).\n* [ ] http://en.wikipedia.org/wiki/Halting_Problem with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/Halting_Problem ([https](https://en.wikipedia.org/wiki/Halting_Problem) result 200).\n* [ ] http://en.wikipedia.org/wiki/List_of_HTTP_status_codes with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/List_of_HTTP_status_codes ([https](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) result 200).\n* [ ] http://en.wikipedia.org/wiki/MIME with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/MIME ([https](https://en.wikipedia.org/wiki/MIME) result 200).\n* [ ] http://en.wikipedia.org/wiki/Mock_Object with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/Mock_Object ([https](https://en.wikipedia.org/wiki/Mock_Object) result 200).\n* [ ] http://en.wikipedia.org/wiki/Polyfill with 2 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/Polyfill ([https](https://en.wikipedia.org/wiki/Polyfill) result 200).\n* [ ] http://example.com with 150 occurrences migrated to:  \n  https://example.com ([https](https://example.com) result 200).\n* [ ] http://example.com/ with 16 occurrences migrated to:  \n  https://example.com/ ([https](https://example.com/) result 200).\n* [ ] http://example.com?foo with 2 occurrences migrated to:  \n  https://example.com?foo ([https](https://example.com?foo) result 200).\n* [ ] http://example.com?foo=bar with 8 occurrences migrated to:  \n  https://example.com?foo=bar ([https](https://example.com?foo=bar) result 200).\n* [ ] http://example.com?foo=bar@baz with 1 occurrences migrated to:  \n  https://example.com?foo=bar@baz ([https](https://example.com?foo=bar@baz) result 200).\n* [ ] http://example.org with 18 occurrences migrated to:  \n  https://example.org ([https](https://example.org) result 200).\n* [ ] http://example.org/ with 1 occurrences migrated to:  \n  https://example.org/ ([https](https://example.org/) result 200).\n* [ ] http://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/DeserializationFeature.html with 2 occurrences migrated to:  \n  https://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/DeserializationFeature.html ([https](https://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/DeserializationFeature.html) result 200).\n* [ ] http://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/MapperFeature.html with 2 occurrences migrated to:  \n  https://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/MapperFeature.html ([https](https://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/MapperFeature.html) result 200).\n* [ ] http://h2database.com with 1 occurrences migrated to:  \n  https://h2database.com ([https](https://h2database.com) result 200).\n* [ ] http://handlebarsjs.com with 2 occurrences migrated to:  \n  https://handlebarsjs.com ([https](https://handlebarsjs.com) result 200).\n* [ ] http://handlebarsjs.com/ with 2 occurrences migrated to:  \n  https://handlebarsjs.com/ ([https](https://handlebarsjs.com/) result 200).\n* [ ] http://hc.apache.org/httpcomponents-asyncclient-dev/ with 1 occurrences migrated to:  \n  https://hc.apache.org/httpcomponents-asyncclient-dev/ ([https](https://hc.apache.org/httpcomponents-asyncclient-dev/) result 200).\n* [ ] http://hc.apache.org/httpcomponents-client-ga/ with 2 occurrences migrated to:  \n  https://hc.apache.org/httpcomponents-client-ga/ ([https](https://hc.apache.org/httpcomponents-client-ga/) result 200).\n* [ ] http://hc.apache.org/httpcomponents-client-ga/httpclient/ with 1 occurrences migrated to:  \n  https://hc.apache.org/httpcomponents-client-ga/httpclient/ ([https](https://hc.apache.org/httpcomponents-client-ga/httpclient/) result 200).\n* [ ] http://www.hibernate.org/ (301) with 1 occurrences migrated to:  \n  https://hibernate.org/ ([https](https://www.hibernate.org/) result 200).\n* [ ] http://www.hibernate.org (301) with 1 occurrences migrated to:  \n  https://hibernate.org/ ([https](https://www.hibernate.org) result 200).\n* [ ] http://jcp.org/aboutJava/communityprocess/final/jsr003/index3.html with 1 occurrences migrated to:  \n  https://jcp.org/aboutJava/communityprocess/final/jsr003/index3.html ([https](https://jcp.org/aboutJava/communityprocess/final/jsr003/index3.html) result 200).\n* [ ] http://jcp.org/aboutJava/communityprocess/final/jsr160/index.html with 1 occurrences migrated to:  \n  https://jcp.org/aboutJava/communityprocess/final/jsr160/index.html ([https](https://jcp.org/aboutJava/communityprocess/final/jsr160/index.html) result 200).\n* [ ] http://jcp.org/en/jsr/detail?id=107 with 1 occurrences migrated to:  \n  https://jcp.org/en/jsr/detail?id=107 ([https](https://jcp.org/en/jsr/detail?id=107) result 200).\n* [ ] http://joel-costigliola.github.io/assertj/ with 3 occurrences migrated to:  \n  https://joel-costigliola.github.io/assertj/ ([https](https://joel-costigliola.github.io/assertj/) result 200).\n* [ ] http://jsonassert.skyscreamer.org with 1 occurrences migrated to:  \n  https://jsonassert.skyscreamer.org ([https](https://jsonassert.skyscreamer.org) result 200).\n* [ ] http://jsonassert.skyscreamer.org/ with 5 occurrences migrated to:  \n  https://jsonassert.skyscreamer.org/ ([https](https://jsonassert.skyscreamer.org/) result 200).\n* [ ] http://junit.org/junit5/docs/current/user-guide/ with 2 occurrences migrated to:  \n  https://junit.org/junit5/docs/current/user-guide/ ([https](https://junit.org/junit5/docs/current/user-guide/) result 200).\n* [ ] http://kotlinlang.org/ with 2 occurrences migrated to:  \n  https://kotlinlang.org/ ([https](https://kotlinlang.org/) result 200).\n* [ ] http://kotlinlang.org/docs/reference/ with 1 occurrences migrated to:  \n  https://kotlinlang.org/docs/reference/ ([https](https://kotlinlang.org/docs/reference/) result 200).\n* [ ] http://kotlinlang.org/docs/reference/classes.html with 3 occurrences migrated to:  \n  https://kotlinlang.org/docs/reference/classes.html ([https](https://kotlinlang.org/docs/reference/classes.html) result 200).\n* [ ] http://mydomain.com with 5 occurrences migrated to:  \n  https://mydomain.com ([https](https://mydomain.com) result 200).\n* [ ] http://netty.io/ with 1 occurrences migrated to:  \n  https://netty.io/ ([https](https://netty.io/) result 200).\n* [ ] http://openjdk.java.net/jeps/290 with 1 occurrences migrated to:  \n  https://openjdk.java.net/jeps/290 ([https](https://openjdk.java.net/jeps/290) result 200).\n* [ ] http://openjdk.java.net/projects/nashorn/ with 10 occurrences migrated to:  \n  https://openjdk.java.net/projects/nashorn/ ([https](https://openjdk.java.net/projects/nashorn/) result 200).\n* [ ] http://pivotal.io/security/cve-2015-5211 with 1 occurrences migrated to:  \n  https://pivotal.io/security/cve-2015-5211 ([https](https://pivotal.io/security/cve-2015-5211) result 200).\n* [ ] http://poi.apache.org with 3 occurrences migrated to:  \n  https://poi.apache.org ([https](https://poi.apache.org) result 200).\n* [ ] http://projects.spring.io/spring-boot/ with 1 occurrences migrated to:  \n  https://projects.spring.io/spring-boot/ ([https](https://projects.spring.io/spring-boot/) result 200).\n* [ ] http://projects.spring.io/spring-data/ with 1 occurrences migrated to:  \n  https://projects.spring.io/spring-data/ ([https](https://projects.spring.io/spring-data/) result 200).\n* [ ] http://projects.spring.io/spring-framework/ with 1 occurrences migrated to:  \n  https://projects.spring.io/spring-framework/ ([https](https://projects.spring.io/spring-framework/) result 200).\n* [ ] http://projects.spring.io/spring-integration/ with 1 occurrences migrated to:  \n  https://projects.spring.io/spring-integration/ ([https](https://projects.spring.io/spring-integration/) result 200).\n* [ ] http://projects.spring.io/spring-security/ with 3 occurrences migrated to:  \n  https://projects.spring.io/spring-security/ ([https](https://projects.spring.io/spring-security/) result 200).\n* [ ] http://repo1.maven.org/maven2/javax/inject/javax.inject/1/ with 2 occurrences migrated to:  \n  https://repo1.maven.org/maven2/javax/inject/javax.inject/1/ ([https](https://repo1.maven.org/maven2/javax/inject/javax.inject/1/) result 200).\n* [ ] http://schema.spring.io/mvc/spring-mvc.xsd with 1 occurrences migrated to:  \n  https://schema.spring.io/mvc/spring-mvc.xsd ([https](https://schema.spring.io/mvc/spring-mvc.xsd) result 200).\n* [ ] http://search.maven.org/ with 2 occurrences migrated to:  \n  https://search.maven.org/ ([https](https://search.maven.org/) result 200).\n* [ ] http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html with 3 occurrences migrated to:  \n  https://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html ([https](https://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html) result 200).\n* [ ] http://sourceforge.net with 1 occurrences migrated to:  \n  https://sourceforge.net ([https](https://sourceforge.net) result 200).\n* [ ] http://sourceforge.net/projects/javadiff/ with 1 occurrences migrated to:  \n  https://sourceforge.net/projects/javadiff/ ([https](https://sourceforge.net/projects/javadiff/) result 200).\n* [ ] http://sourceforge.net/sflogo.php?group_id=37160 with 1 occurrences migrated to:  \n  https://sourceforge.net/sflogo.php?group_id=37160 ([https](https://sourceforge.net/sflogo.php?group_id=37160) result 200).\n* [ ] http://spring.io/blog/ with 1 occurrences migrated to:  \n  https://spring.io/blog/ ([https](https://spring.io/blog/) result 200).\n* [ ] http://spring.io/blog/category/news with 1 occurrences migrated to:  \n  https://spring.io/blog/category/news ([https](https://spring.io/blog/category/news) result 200).\n* [ ] http://square.github.io/okhttp/ with 1 occurrences migrated to:  \n  https://square.github.io/okhttp/ ([https](https://square.github.io/okhttp/) result 200).\n* [ ] http://stackoverflow.com/questions/1481251/what-does-document-domain-document-domain-do with 1 occurrences migrated to:  \n  https://stackoverflow.com/questions/1481251/what-does-document-domain-document-domain-do ([https](https://stackoverflow.com/questions/1481251/what-does-document-domain-document-domain-do) result 200).\n* [ ] http://stackoverflow.com/questions/19394570/java-jre-7u45-breaks-classloader-getresources with 2 occurrences migrated to:  \n  https://stackoverflow.com/questions/19394570/java-jre-7u45-breaks-classloader-getresources ([https](https://stackoverflow.com/questions/19394570/java-jre-7u45-breaks-classloader-getresources) result 200).\n* [ ] http://stackoverflow.com/questions/22986109/testing-spring-managed-servlet with 1 occurrences migrated to:  \n  https://stackoverflow.com/questions/22986109/testing-spring-managed-servlet ([https](https://stackoverflow.com/questions/22986109/testing-spring-managed-servlet) result 200).\n* [ ] http://stackoverflow.com/questions/24725438/what-could-cause-a-class-implementing-applicationlistenercontextrefreshedevent with 1 occurrences migrated to:  \n  https://stackoverflow.com/questions/24725438/what-could-cause-a-class-implementing-applicationlistenercontextrefreshedevent ([https](https://stackoverflow.com/questions/24725438/what-could-cause-a-class-implementing-applicationlistenercontextrefreshedevent) result 200).\n* [ ] http://stackoverflow.com/questions/35733344/can-contextconfiguration-in-a-custom-annotation-be-merged with 1 occurrences migrated to:  \n  https://stackoverflow.com/questions/35733344/can-contextconfiguration-in-a-custom-annotation-be-merged ([https](https://stackoverflow.com/questions/35733344/can-contextconfiguration-in-a-custom-annotation-be-merged) result 200).\n* [ ] http://start.spring.io/ with 2 occurrences migrated to:  \n  https://start.spring.io/ ([https](https://start.spring.io/) result 200).\n* [ ] http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html with 1 occurrences migrated to:  \n  https://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html ([https](https://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html) result 200).\n* [ ] http://stomp.github.io/stomp-specification-1.2.html with 9 occurrences migrated to:  \n  https://stomp.github.io/stomp-specification-1.2.html ([https](https://stomp.github.io/stomp-specification-1.2.html) result 200).\n* [ ] http://struts.apache.org with 1 occurrences migrated to:  \n  https://struts.apache.org ([https](https://struts.apache.org) result 200).\n* [ ] http://struts.apache.org/ with 1 occurrences migrated to:  \n  https://struts.apache.org/ ([https](https://struts.apache.org/) result 200).\n* [ ] http://tapestry.apache.org/ with 2 occurrences migrated to:  \n  https://tapestry.apache.org/ ([https](https://tapestry.apache.org/) result 200).\n* [ ] http://tiles.apache.org with 4 occurrences migrated to:  \n  https://tiles.apache.org ([https](https://tiles.apache.org) result 200).\n* [ ] http://tiles.apache.org/framework/dependency-management.html with 1 occurrences migrated to:  \n  https://tiles.apache.org/framework/dependency-management.html ([https](https://tiles.apache.org/framework/dependency-management.html) result 200).\n* [ ] http://tomcat.apache.org/ with 1 occurrences migrated to:  \n  https://tomcat.apache.org/ ([https](https://tomcat.apache.org/) result 200).\n* [ ] http://tools.ietf.org/html/rfc1945 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc1945 ([https](https://tools.ietf.org/html/rfc1945) result 200).\n* [ ] http://tools.ietf.org/html/rfc2109 with 2 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2109 ([https](https://tools.ietf.org/html/rfc2109) result 200).\n* [ ] http://tools.ietf.org/html/rfc2295 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2295 ([https](https://tools.ietf.org/html/rfc2295) result 200).\n* [ ] http://tools.ietf.org/html/rfc2324 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2324 ([https](https://tools.ietf.org/html/rfc2324) result 200).\n* [ ] http://tools.ietf.org/html/rfc2518 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2518 ([https](https://tools.ietf.org/html/rfc2518) result 200).\n* [ ] http://tools.ietf.org/html/rfc2616 with 3 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2616 ([https](https://tools.ietf.org/html/rfc2616) result 200).\n* [ ] http://tools.ietf.org/html/rfc2774 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2774 ([https](https://tools.ietf.org/html/rfc2774) result 200).\n* [ ] http://tools.ietf.org/html/rfc2817 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2817 ([https](https://tools.ietf.org/html/rfc2817) result 200).\n* [ ] http://tools.ietf.org/html/rfc2965 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2965 ([https](https://tools.ietf.org/html/rfc2965) result 200).\n* [ ] http://tools.ietf.org/html/rfc3229 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc3229 ([https](https://tools.ietf.org/html/rfc3229) result 200).\n* [ ] http://tools.ietf.org/html/rfc3986 with 4 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc3986 ([https](https://tools.ietf.org/html/rfc3986) result 200).\n* [ ] http://tools.ietf.org/html/rfc4918 with 5 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc4918 ([https](https://tools.ietf.org/html/rfc4918) result 200).\n* [ ] http://tools.ietf.org/html/rfc5842 with 2 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc5842 ([https](https://tools.ietf.org/html/rfc5842) result 200).\n* [ ] http://tools.ietf.org/html/rfc5988 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc5988 ([https](https://tools.ietf.org/html/rfc5988) result 200).\n* [ ] http://tools.ietf.org/html/rfc6266 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc6266 ([https](https://tools.ietf.org/html/rfc6266) result 200).\n* [ ] http://tools.ietf.org/html/rfc6454 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc6454 ([https](https://tools.ietf.org/html/rfc6454) result 200).\n* [ ] http://tools.ietf.org/html/rfc6455 with 2 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc6455 ([https](https://tools.ietf.org/html/rfc6455) result 200).\n* [ ] http://tools.ietf.org/html/rfc6585 with 4 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc6585 ([https](https://tools.ietf.org/html/rfc6585) result 200).\n* [ ] http://tools.ietf.org/html/rfc7230 with 10 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7230 ([https](https://tools.ietf.org/html/rfc7230) result 200).\n* [ ] http://tools.ietf.org/html/rfc7231 with 56 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7231 ([https](https://tools.ietf.org/html/rfc7231) result 200).\n* [ ] http://tools.ietf.org/html/rfc7232 with 8 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7232 ([https](https://tools.ietf.org/html/rfc7232) result 200).\n* [ ] http://tools.ietf.org/html/rfc7233 with 12 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7233 ([https](https://tools.ietf.org/html/rfc7233) result 200).\n* [ ] http://tools.ietf.org/html/rfc7234 with 5 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7234 ([https](https://tools.ietf.org/html/rfc7234) result 200).\n* [ ] http://tools.ietf.org/html/rfc7235 with 6 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7235 ([https](https://tools.ietf.org/html/rfc7235) result 200).\n* [ ] http://tools.ietf.org/html/rfc7238 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7238 ([https](https://tools.ietf.org/html/rfc7238) result 200).\n* [ ] http://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt with 3 occurrences migrated to:  \n  https://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt ([https](https://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt) result 200).\n* [ ] http://www.amazon.com/exec/obidos/tg/detail/-/0764543857/ with 10 occurrences migrated to:  \n  https://www.amazon.com/exec/obidos/tg/detail/-/0764543857/ ([https](https://www.amazon.com/exec/obidos/tg/detail/-/0764543857/) result 200).\n* [ ] http://www.apache.org with 1 occurrences migrated to:  \n  https://www.apache.org ([https](https://www.apache.org) result 200).\n* [ ] http://www.apple.com/DTDs/PropertyList-1.0.dtd with 6 occurrences migrated to:  \n  https://www.apple.com/DTDs/PropertyList-1.0.dtd ([https](https://www.apple.com/DTDs/PropertyList-1.0.dtd) result 200).\n* [ ] http://www.atomikos.com/ with 1 occurrences migrated to:  \n  https://www.atomikos.com/ ([https](https://www.atomikos.com/) result 200).\n* [ ] http://www.baeldung.com/kotlin-null-safety with 1 occurrences migrated to:  \n  https://www.baeldung.com/kotlin-null-safety ([https](https://www.baeldung.com/kotlin-null-safety) result 200).\n* [ ] http://www.eclipse.org/ajdt/ with 1 occurrences migrated to:  \n  https://www.eclipse.org/ajdt/ ([https](https://www.eclipse.org/ajdt/) result 200).\n* [ ] http://www.eclipse.org/aspectj/doc/next/progguide/index.html with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/doc/next/progguide/index.html ([https](https://www.eclipse.org/aspectj/doc/next/progguide/index.html) result 200).\n* [ ] http://www.eclipse.org/aspectj/doc/next/progguide/semantics-joinPoints.html with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/doc/next/progguide/semantics-joinPoints.html ([https](https://www.eclipse.org/aspectj/doc/next/progguide/semantics-joinPoints.html) result 200).\n* [ ] http://www.eclipse.org/aspectj/doc/released/adk15notebook/index.html with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/doc/released/adk15notebook/index.html ([https](https://www.eclipse.org/aspectj/doc/released/adk15notebook/index.html) result 200).\n* [ ] http://www.eclipse.org/aspectj/doc/released/devguide/antTasks.html with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/doc/released/devguide/antTasks.html ([https](https://www.eclipse.org/aspectj/doc/released/devguide/antTasks.html) result 200).\n* [ ] http://www.eclipse.org/aspectj/doc/released/devguide/index.html with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/doc/released/devguide/index.html ([https](https://www.eclipse.org/aspectj/doc/released/devguide/index.html) result 200).\n* [ ] http://www.eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html ([https](https://www.eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html) result 200).\n* [ ] http://www.eclipse.org/aspectj/doc/released/devguide/ltw.html with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/doc/released/devguide/ltw.html ([https](https://www.eclipse.org/aspectj/doc/released/devguide/ltw.html) result 200).\n* [ ] http://www.eclipse.org/aspectj/doc/released/progguide/index.html with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/doc/released/progguide/index.html ([https](https://www.eclipse.org/aspectj/doc/released/progguide/index.html) result 200).\n* [ ] http://www.eclipse.org/aspectj/doc/released/progguide/semantics-pointcuts.html with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/doc/released/progguide/semantics-pointcuts.html ([https](https://www.eclipse.org/aspectj/doc/released/progguide/semantics-pointcuts.html) result 200).\n* [ ] http://www.eclipse.org/aspectj/dtd/aspectj.dtd with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/dtd/aspectj.dtd ([https](https://www.eclipse.org/aspectj/dtd/aspectj.dtd) result 200).\n* [ ] http://ehcache.sourceforge.net (301) with 1 occurrences migrated to:  \n  https://www.ehcache.org/ ([https](https://ehcache.sourceforge.net) result 200).\n* [ ] http://ehcache.org/ (301) with 1 occurrences migrated to:  \n  https://www.ehcache.org/ ([https](https://ehcache.org/) result 200).\n* [ ] http://www.embeddedjs.com/ with 2 occurrences migrated to:  \n  https://www.embeddedjs.com/ ([https](https://www.embeddedjs.com/) result 200).\n* [ ] http://www.enterpriseintegrationpatterns.com with 1 occurrences migrated to:  \n  https://www.enterpriseintegrationpatterns.com ([https](https://www.enterpriseintegrationpatterns.com) result 200).\n* [ ] http://www.example.org/?param=aGVsbG9Xb3JsZA%3D%3D with 1 occurrences migrated to:  \n  https://www.example.org/?param=aGVsbG9Xb3JsZA%3D%3D ([https](https://www.example.org/?param=aGVsbG9Xb3JsZA%3D%3D) result 200).\n* [ ] http://www.google.com with 2 occurrences migrated to:  \n  https://www.google.com ([https](https://www.google.com) result 200).\n* [ ] http://www.h2database.com with 1 occurrences migrated to:  \n  https://www.h2database.com ([https](https://www.h2database.com) result 200).\n* [ ] http://www.h2database.com/html/grammar.html with 1 occurrences migrated to:  \n  https://www.h2database.com/html/grammar.html ([https](https://www.h2database.com/html/grammar.html) result 200).\n* [ ] http://www.ietf.org with 1 occurrences migrated to:  \n  https://www.ietf.org ([https](https://www.ietf.org) result 200).\n* [ ] http://www.ietf.org/rfc/rfc1867.txt with 1 occurrences migrated to:  \n  https://www.ietf.org/rfc/rfc1867.txt ([https](https://www.ietf.org/rfc/rfc1867.txt) result 200).\n* [ ] http://www.ietf.org/rfc/rfc2396.txt with 2 occurrences migrated to:  \n  https://www.ietf.org/rfc/rfc2396.txt ([https](https://www.ietf.org/rfc/rfc2396.txt) result 200).\n* [ ] http://www.ietf.org/rfc/rfc3986.txt with 11 occurrences migrated to:  \n  https://www.ietf.org/rfc/rfc3986.txt ([https](https://www.ietf.org/rfc/rfc3986.txt) result 200).\n* [ ] http://www.infoq.com/ with 1 occurrences migrated to:  \n  https://www.infoq.com/ ([https](https://www.infoq.com/) result 200).\n* [ ] http://www.infoq.com/minibooks/JTDS with 1 occurrences migrated to:  \n  https://www.infoq.com/minibooks/JTDS ([https](https://www.infoq.com/minibooks/JTDS) result 200).\n* [ ] http://www.jetbrains.com/idea/ with 1 occurrences migrated to:  \n  https://www.jetbrains.com/idea/ ([https](https://www.jetbrains.com/idea/) result 200).\n* [ ] http://www.json.org/ with 1 occurrences migrated to:  \n  https://www.json.org/ ([https](https://www.json.org/) result 200).\n* [ ] http://www.jython.org with 2 occurrences migrated to:  \n  https://www.jython.org ([https](https://www.jython.org) result 200).\n* [ ] http://www.jython.org/ with 2 occurrences migrated to:  \n  https://www.jython.org/ ([https](https://www.jython.org/) result 200).\n* [ ] http://www.lowagie.com/iText with 2 occurrences migrated to:  \n  https://www.lowagie.com/iText ([https](https://www.lowagie.com/iText) result 200).\n* [ ] http://www.manpagez.com/man/5/crontab/ with 1 occurrences migrated to:  \n  https://www.manpagez.com/man/5/crontab/ ([https](https://www.manpagez.com/man/5/crontab/) result 200).\n* [ ] http://mydomain1.com:80/ (301) with 2 occurrences migrated to:  \n  https://www.mydomain1.com/ ([https](https://mydomain1.com:80/) result 200).\n* [ ] http://mydomain1.com:80 (301) with 1 occurrences migrated to:  \n  https://www.mydomain1.com/ ([https](https://mydomain1.com:80) result 200).\n* [ ] http://www.oracle.com/technetwork/articles/javaee/jpa-137156.html with 1 occurrences migrated to:  \n  https://www.oracle.com/technetwork/articles/javaee/jpa-137156.html ([https](https://www.oracle.com/technetwork/articles/javaee/jpa-137156.html) result 200).\n* [ ] http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html with 1 occurrences migrated to:  \n  https://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html ([https](https://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html) result 200).\n* [ ] http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html with 1 occurrences migrated to:  \n  https://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html ([https](https://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html) result 200).\n* [ ] http://www.oracle.com/technetwork/java/javase/tech/download-jsp-141676.html with 1 occurrences migrated to:  \n  https://www.oracle.com/technetwork/java/javase/tech/download-jsp-141676.html ([https](https://www.oracle.com/technetwork/java/javase/tech/download-jsp-141676.html) result 200).\n* [ ] http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html with 1 occurrences migrated to:  \n  https://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html ([https](https://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html) result 200).\n* [ ] http://www.oracle.com/technetwork/middleware/weblogic/overview/index-085209.html with 1 occurrences migrated to:  \n  https://www.oracle.com/technetwork/middleware/weblogic/overview/index-085209.html ([https](https://www.oracle.com/technetwork/middleware/weblogic/overview/index-085209.html) result 200).\n* [ ] http://www.ow2.org/ with 1 occurrences migrated to:  \n  https://www.ow2.org/ ([https](https://www.ow2.org/) result 200).\n* [ ] http://www.owasp.org/index.php/HTTPOnly with 4 occurrences migrated to:  \n  https://www.owasp.org/index.php/HTTPOnly ([https](https://www.owasp.org/index.php/HTTPOnly) result 200).\n* [ ] http://quartz-scheduler.org (301) with 3 occurrences migrated to:  \n  https://www.quartz-scheduler.org/ ([https](https://quartz-scheduler.org) result 200).\n* [ ] http://www.rabbitmq.com/stomp.html with 1 occurrences migrated to:  \n  https://www.rabbitmq.com/stomp.html ([https](https://www.rabbitmq.com/stomp.html) result 200).\n* [ ] http://www.reactive-streams.org with 1 occurrences migrated to:  \n  https://www.reactive-streams.org ([https](https://www.reactive-streams.org) result 200).\n* [ ] http://www.reactive-streams.org/ with 2 occurrences migrated to:  \n  https://www.reactive-streams.org/ ([https](https://www.reactive-streams.org/) result 200).\n* [ ] http://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Publisher.html with 1 occurrences migrated to:  \n  https://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Publisher.html ([https](https://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Publisher.html) result 200).\n* [ ] http://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Subscriber.html with 1 occurrences migrated to:  \n  https://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Subscriber.html ([https](https://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Subscriber.html) result 200).\n* [ ] http://seleniumhq.org/projects/webdriver/ (301) with 1 occurrences migrated to:  \n  https://www.seleniumhq.org ([https](https://seleniumhq.org/projects/webdriver/) result 200).\n* [ ] http://www.springbyexample.org/examples/custom-thread-scope-module.html with 1 occurrences migrated to:  \n  https://www.springbyexample.org/examples/custom-thread-scope-module.html ([https](https://www.springbyexample.org/examples/custom-thread-scope-module.html) result 200).\n* [ ] http://www.springframework.org/dtd/spring-beans-2.0.dtd with 3 occurrences migrated to:  \n  https://www.springframework.org/dtd/spring-beans-2.0.dtd ([https](https://www.springframework.org/dtd/spring-beans-2.0.dtd) result 200).\n* [ ] http://www.springframework.org/schema/aop/spring-aop.xsd with 12 occurrences migrated to:  \n  https://www.springframework.org/schema/aop/spring-aop.xsd ([https](https://www.springframework.org/schema/aop/spring-aop.xsd) result 200).\n* [ ] http://www.springframework.org/schema/beans/spring-beans.xsd with 80 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans.xsd ([https](https://www.springframework.org/schema/beans/spring-beans.xsd) result 200).\n* [ ] http://www.springframework.org/schema/cache/spring-cache.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/cache/spring-cache.xsd ([https](https://www.springframework.org/schema/cache/spring-cache.xsd) result 200).\n* [ ] http://www.springframework.org/schema/context/spring-context.xsd with 13 occurrences migrated to:  \n  https://www.springframework.org/schema/context/spring-context.xsd ([https](https://www.springframework.org/schema/context/spring-context.xsd) result 200).\n* [ ] http://www.springframework.org/schema/jdbc/spring-jdbc.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/jdbc/spring-jdbc.xsd ([https](https://www.springframework.org/schema/jdbc/spring-jdbc.xsd) result 200).\n* [ ] http://www.springframework.org/schema/jee/spring-jee.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/jee/spring-jee.xsd ([https](https://www.springframework.org/schema/jee/spring-jee.xsd) result 200).\n* [ ] http://www.springframework.org/schema/jms/spring-jms.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/jms/spring-jms.xsd ([https](https://www.springframework.org/schema/jms/spring-jms.xsd) result 200).\n* [ ] http://www.springframework.org/schema/lang/spring-lang.xsd with 4 occurrences migrated to:  \n  https://www.springframework.org/schema/lang/spring-lang.xsd ([https](https://www.springframework.org/schema/lang/spring-lang.xsd) result 200).\n* [ ] http://www.springframework.org/schema/mvc/spring-mvc.xsd with 3 occurrences migrated to:  \n  https://www.springframework.org/schema/mvc/spring-mvc.xsd ([https](https://www.springframework.org/schema/mvc/spring-mvc.xsd) result 200).\n* [ ] http://www.springframework.org/schema/oxm/spring-oxm.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/oxm/spring-oxm.xsd ([https](https://www.springframework.org/schema/oxm/spring-oxm.xsd) result 200).\n* [ ] http://www.springframework.org/schema/tool/spring-tool.xsd with 13 occurrences migrated to:  \n  https://www.springframework.org/schema/tool/spring-tool.xsd ([https](https://www.springframework.org/schema/tool/spring-tool.xsd) result 200).\n* [ ] http://www.springframework.org/schema/tx/spring-tx.xsd with 8 occurrences migrated to:  \n  https://www.springframework.org/schema/tx/spring-tx.xsd ([https](https://www.springframework.org/schema/tx/spring-tx.xsd) result 200).\n* [ ] http://www.springframework.org/schema/util/spring-util.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/util/spring-util.xsd ([https](https://www.springframework.org/schema/util/spring-util.xsd) result 200).\n* [ ] http://www.springframework.org/schema/websocket/spring-websocket.xsd with 12 occurrences migrated to:  \n  https://www.springframework.org/schema/websocket/spring-websocket.xsd ([https](https://www.springframework.org/schema/websocket/spring-websocket.xsd) result 200).\n* [ ] http://www.stuartellis.eu/articles/erb/ (301) with 2 occurrences migrated to:  \n  https://www.stuartellis.name/articles/erb/ ([https](https://www.stuartellis.eu/articles/erb/) result 200).\n* [ ] http://www.thymeleaf.org/ with 2 occurrences migrated to:  \n  https://www.thymeleaf.org/ ([https](https://www.thymeleaf.org/) result 200).\n* [ ] http://www.thymeleaf.org/documentation.html with 2 occurrences migrated to:  \n  https://www.thymeleaf.org/documentation.html ([https](https://www.thymeleaf.org/documentation.html) result 200).\n* [ ] http://www.webjars.org with 4 occurrences migrated to:  \n  https://www.webjars.org ([https](https://www.webjars.org) result 200).\n* [ ] http://www.webjars.org/ with 2 occurrences migrated to:  \n  https://www.webjars.org/ ([https](https://www.webjars.org/) result 200).\n* [ ] http://www.webjars.org/documentation with 2 occurrences migrated to:  \n  https://www.webjars.org/documentation ([https](https://www.webjars.org/documentation) result 200).\n* [ ] http://www.wildfly.org/ with 1 occurrences migrated to:  \n  https://www.wildfly.org/ ([https](https://www.wildfly.org/) result 200).\n* [ ] http://x-stream.github.io/ with 2 occurrences migrated to:  \n  https://x-stream.github.io/ ([https](https://x-stream.github.io/) result 200).\n* [ ] http://youtrack.jetbrains.com/issue/IDEA-53476 with 1 occurrences migrated to:  \n  https://youtrack.jetbrains.com/issue/IDEA-53476 ([https](https://youtrack.jetbrains.com/issue/IDEA-53476) result 200).\n* [ ] http://youtrack.jetbrains.com/issue/IDEA-64446 with 1 occurrences migrated to:  \n  https://youtrack.jetbrains.com/issue/IDEA-64446 ([https](https://youtrack.jetbrains.com/issue/IDEA-64446) result 200).\n* [ ] http://bit.ly/TRlX2r with 1 occurrences migrated to:  \n  https://bit.ly/TRlX2r ([https](https://bit.ly/TRlX2r) result 301).\n* [ ] http://bit.ly/UzccDt with 1 occurrences migrated to:  \n  https://bit.ly/UzccDt ([https](https://bit.ly/UzccDt) result 301).\n* [ ] http://bit.ly/p9rIvx with 1 occurrences migrated to:  \n  https://bit.ly/p9rIvx ([https](https://bit.ly/p9rIvx) result 301).\n* [ ] http://bit.ly/qUwvwz with 1 occurrences migrated to:  \n  https://bit.ly/qUwvwz ([https](https://bit.ly/qUwvwz) result 301).\n* [ ] http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx with 1 occurrences migrated to:  \n  https://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx ([https](https://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx) result 301).\n* [ ] http://code.google.com/p/beanshell2/ with 1 occurrences migrated to:  \n  https://code.google.com/p/beanshell2/ ([https](https://code.google.com/p/beanshell2/) result 301).\n* [ ] http://code.google.com/p/browsersec/wiki/Part2 with 1 occurrences migrated to:  \n  https://code.google.com/p/browsersec/wiki/Part2 ([https](https://code.google.com/p/browsersec/wiki/Part2) result 301).\n* [ ] http://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal with 1 occurrences migrated to:  \n  https://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal ([https](https://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal) result 301).\n* [ ] http://code.google.com/p/xml-matchers/ with 3 occurrences migrated to:  \n  https://code.google.com/p/xml-matchers/ ([https](https://code.google.com/p/xml-matchers/) result 301).\n* [ ] http://commons.apache.org/proper/commons-dbcp with 2 occurrences migrated to:  \n  https://commons.apache.org/proper/commons-dbcp ([https](https://commons.apache.org/proper/commons-dbcp) result 301).\n* [ ] http://commons.apache.org/proper/commons-fileupload with 2 occurrences migrated to:  \n  https://commons.apache.org/proper/commons-fileupload ([https](https://commons.apache.org/proper/commons-fileupload) result 301).\n* [ ] http://confluence.jetbrains.net/display/IDEADEV/Gradle+integration with 1 occurrences migrated to:  \n  https://confluence.jetbrains.net/display/IDEADEV/Gradle+integration ([https](https://confluence.jetbrains.net/display/IDEADEV/Gradle+integration) result 301).\n* [ ] http://contributor-covenant.org with 1 occurrences migrated to:  \n  https://contributor-covenant.org ([https](https://contributor-covenant.org) result 301).\n* [ ] http://contributor-covenant.org/version/1/3/0/ with 1 occurrences migrated to:  \n  https://contributor-covenant.org/version/1/3/0/ ([https](https://contributor-covenant.org/version/1/3/0/) result 301).\n* [ ] http://db.apache.org/derby with 2 occurrences migrated to:  \n  https://db.apache.org/derby ([https](https://db.apache.org/derby) result 301).\n* [ ] http://dev.w3.org/html5/eventsource/ with 2 occurrences migrated to:  \n  https://dev.w3.org/html5/eventsource/ ([https](https://dev.w3.org/html5/eventsource/) result 301).\n* [ ] http://domain.com with 24 occurrences migrated to:  \n  https://domain.com ([https](https://domain.com) result 301).\n* [ ] http://domain.com/ with 1 occurrences migrated to:  \n  https://domain.com/ ([https](https://domain.com/) result 301).\n* [ ] http://en.wikipedia.org/wiki/Cache_ with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/Cache_ ([https](https://en.wikipedia.org/wiki/Cache_) result 301).\n* [ ] http://facebook.github.io/react/ with 2 occurrences migrated to:  \n  https://facebook.github.io/react/ ([https](https://facebook.github.io/react/) result 301).\n* [ ] http://forum.springframework.org/showthread.php?t=41350 with 1 occurrences migrated to:  \n  https://forum.springframework.org/showthread.php?t=41350 ([https](https://forum.springframework.org/showthread.php?t=41350) result 301).\n* [ ] http://github.com/SpringSource/spring-framework with 1 occurrences migrated to:  \n  https://github.com/SpringSource/spring-framework ([https](https://github.com/SpringSource/spring-framework) result 301).\n* [ ] http://hdiv.org/ with 1 occurrences migrated to:  \n  https://hdiv.org/ ([https](https://hdiv.org/) result 301).\n* [ ] http://jakarta.apache.org/commons/fileupload with 1 occurrences migrated to:  \n  https://jakarta.apache.org/commons/fileupload ([https](https://jakarta.apache.org/commons/fileupload) result 301).\n* [ ] http://jira.springframework.org/browse/SPR-5708 with 1 occurrences migrated to:  \n  https://jira.springframework.org/browse/SPR-5708 ([https](https://jira.springframework.org/browse/SPR-5708) result 301).\n* [ ] http://jira.springframework.org/browse/SPR-6124 with 1 occurrences migrated to:  \n  https://jira.springframework.org/browse/SPR-6124 ([https](https://jira.springframework.org/browse/SPR-6124) result 301).\n* [ ] http://jira.springframework.org/browse/SPR-6128 with 1 occurrences migrated to:  \n  https://jira.springframework.org/browse/SPR-6128 ([https](https://jira.springframework.org/browse/SPR-6128) result 301).\n* [ ] http://jira.springframework.org/browse/SPR-7064 with 1 occurrences migrated to:  \n  https://jira.springframework.org/browse/SPR-7064 ([https](https://jira.springframework.org/browse/SPR-7064) result 301).\n* [ ] http://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html with 1 occurrences migrated to:  \n  https://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html ([https](https://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html) result 301).\n* [ ] http://mockito.org/ (301) with 1 occurrences migrated to:  \n  https://mockito.github.io ([https](https://mockito.org/) result 301).\n* [ ] http://mydomain1.com with 37 occurrences migrated to:  \n  https://mydomain1.com ([https](https://mydomain1.com) result 301).\n* [ ] http://mydomain1.com/ with 2 occurrences migrated to:  \n  https://mydomain1.com/ ([https](https://mydomain1.com/) result 301).\n* [ ] http://mydomain1.com/path with 2 occurrences migrated to:  \n  https://mydomain1.com/path ([https](https://mydomain1.com/path) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-2660 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-2660 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-2660) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-2754 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-2754 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-2754) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-2789 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-2789 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-2789) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-3127 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-3127 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-3127) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-3775 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-3775 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-3775) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-3880 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-3880 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-3880) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-3896 with 7 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-3896 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-3896) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-3949 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-3949 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-3949) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-4008 with 2 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-4008 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-4008) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-4040 with 2 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-4040 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-4040) result 301).\n* [ ] http://publib.boulder.ibm.com/infocenter/wasinfo/v5r1//topic/com.ibm.websphere.base.doc/info/aes/ae/rdat_extiapi.html with 1 occurrences migrated to:  \n  https://publib.boulder.ibm.com/infocenter/wasinfo/v5r1//topic/com.ibm.websphere.base.doc/info/aes/ae/rdat_extiapi.html ([https](https://publib.boulder.ibm.com/infocenter/wasinfo/v5r1//topic/com.ibm.websphere.base.doc/info/aes/ae/rdat_extiapi.html) result 301).\n* [ ] http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.javadoc.doc/public_html/api/com/ibm/websphere/rsadapter/JDBCConnectionSpec.html with 1 occurrences migrated to:  \n  https://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.javadoc.doc/public_html/api/com/ibm/websphere/rsadapter/JDBCConnectionSpec.html ([https](https://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.javadoc.doc/public_html/api/com/ibm/websphere/rsadapter/JDBCConnectionSpec.html) result 301).\n* [ ] http://site2.com with 3 occurrences migrated to:  \n  https://site2.com ([https](https://site2.com) result 301).\n* [ ] http://slack.kotlinlang.org/ with 2 occurrences migrated to:  \n  https://slack.kotlinlang.org/ ([https](https://slack.kotlinlang.org/) result 301).\n* [ ] http://sourceforge.net/projects/c3p0 with 2 occurrences migrated to:  \n  https://sourceforge.net/projects/c3p0 ([https](https://sourceforge.net/projects/c3p0) result 301).\n* [ ] http://sourceforge.net/projects/javadiff with 1 occurrences migrated to:  \n  https://sourceforge.net/projects/javadiff ([https](https://sourceforge.net/projects/javadiff) result 301).\n* [ ] http://springframework.org with 2 occurrences migrated to:  \n  https://springframework.org ([https](https://springframework.org) result 301).\n* [ ] http://www-01.ibm.com/software/webservers/appserv/was/ with 1 occurrences migrated to:  \n  https://www-01.ibm.com/software/webservers/appserv/was/ ([https](https://www-01.ibm.com/software/webservers/appserv/was/) result 301).\n* [ ] http://www.atomenabled.org/developers/syndication/ with 1 occurrences migrated to:  \n  https://www.atomenabled.org/developers/syndication/ ([https](https://www.atomenabled.org/developers/syndication/) result 301).\n* [ ] http://www.eclipse.org/aspectj with 2 occurrences migrated to:  \n  https://www.eclipse.org/aspectj ([https](https://www.eclipse.org/aspectj) result 301).\n* [ ] http://www.google.com/ig/calculator?q=1USD=?EUR with 1 occurrences migrated to:  \n  https://www.google.com/ig/calculator?q=1USD=?EUR ([https](https://www.google.com/ig/calculator?q=1USD=?EUR) result 301).\n* [ ] http://www.javaworld.com/javaworld/jw-01-2009/jw-01-spring-transactions.html with 1 occurrences migrated to:  \n  https://www.javaworld.com/javaworld/jw-01-2009/jw-01-spring-transactions.html ([https](https://www.javaworld.com/javaworld/jw-01-2009/jw-01-spring-transactions.html) result 301).\n* [ ] http://www.jboss.org/jbossas/ with 1 occurrences migrated to:  \n  https://www.jboss.org/jbossas/ ([https](https://www.jboss.org/jbossas/) result 301).\n* [ ] http://www.junit.org/ with 1 occurrences migrated to:  \n  https://www.junit.org/ ([https](https://www.junit.org/) result 301).\n* [ ] http://www.mnot.net/cache_docs with 1 occurrences migrated to:  \n  https://www.mnot.net/cache_docs ([https](https://www.mnot.net/cache_docs) result 301).\n* [ ] http://www.sf.net/home.view?siteLanguage=nl with 1 occurrences migrated to:  \n  https://www.sf.net/home.view?siteLanguage=nl ([https](https://www.sf.net/home.view?siteLanguage=nl) result 301).\n* [ ] http://www.springframework.org with 7 occurrences migrated to:  \n  https://www.springframework.org ([https](https://www.springframework.org) result 301).\n* [ ] http://www.springframework.org/ with 3 occurrences migrated to:  \n  https://www.springframework.org/ ([https](https://www.springframework.org/) result 301).\n* [ ] http://xyz.com/path with 2 occurrences migrated to:  \n  https://xyz.com/path ([https](https://xyz.com/path) result 301).\n* [ ] http://commons.apache.org/codec/ with 1 occurrences migrated to:  \n  https://commons.apache.org/codec/ ([https](https://commons.apache.org/codec/) result 302).\n* [ ] http://commons.apache.org/logging with 2 occurrences migrated to:  \n  https://commons.apache.org/logging ([https](https://commons.apache.org/logging) result 302).\n* [ ] http://download.oracle.com/javaee/6/api/javax/inject/Scope.html with 1 occurrences migrated to:  \n  https://download.oracle.com/javaee/6/api/javax/inject/Scope.html ([https](https://download.oracle.com/javaee/6/api/javax/inject/Scope.html) result 302).\n* [ ] http://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html with 4 occurrences migrated to:  \n  https://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html ([https](https://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html) result 302).\n* [ ] http://download.oracle.com/javase/6/docs/technotes/guides/jar/jar.html with 1 occurrences migrated to:  \n  https://download.oracle.com/javase/6/docs/technotes/guides/jar/jar.html ([https](https://download.oracle.com/javase/6/docs/technotes/guides/jar/jar.html) result 302).\n* [ ] http://download.oracle.com/javase/8/docs/api/java/beans/ConstructorProperties.html with 1 occurrences migrated to:  \n  https://download.oracle.com/javase/8/docs/api/java/beans/ConstructorProperties.html ([https](https://download.oracle.com/javase/8/docs/api/java/beans/ConstructorProperties.html) result 302).\n* [ ] http://download.oracle.com/javase/jndi/tutorial/beyond/misc/policy.html with 1 occurrences migrated to:  \n  https://download.oracle.com/javase/jndi/tutorial/beyond/misc/policy.html ([https](https://download.oracle.com/javase/jndi/tutorial/beyond/misc/policy.html) result 302).\n* [ ] http://gafter.blogspot.nl/2006/12/super-type-tokens.html with 1 occurrences migrated to:  \n  https://gafter.blogspot.nl/2006/12/super-type-tokens.html ([https](https://gafter.blogspot.nl/2006/12/super-type-tokens.html) result 302).\n* [ ] http://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project with 1 occurrences migrated to:  \n  https://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project ([https](https://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project) result 302).\n* [ ] http://git-scm.com/book/en/Git-Tools-Rewriting-History with 1 occurrences migrated to:  \n  https://git-scm.com/book/en/Git-Tools-Rewriting-History ([https](https://git-scm.com/book/en/Git-Tools-Rewriting-History) result 302).\n* [ ] http://glassfish.dev.java.net/ with 1 occurrences migrated to:  \n  https://glassfish.dev.java.net/ ([https](https://glassfish.dev.java.net/) result 302).\n* [ ] http://java.sun.com/docs/books/jls/third_edition/html/conversions.html with 1 occurrences migrated to:  \n  https://java.sun.com/docs/books/jls/third_edition/html/conversions.html ([https](https://java.sun.com/docs/books/jls/third_edition/html/conversions.html) result 302).\n* [ ] http://java.sun.com/docs/books/jls/third_edition/html/expressions.html with 1 occurrences migrated to:  \n  https://java.sun.com/docs/books/jls/third_edition/html/expressions.html ([https](https://java.sun.com/docs/books/jls/third_edition/html/expressions.html) result 302).\n* [ ] http://java.sun.com/j2se/ with 2 occurrences migrated to:  \n  https://java.sun.com/j2se/ ([https](https://java.sun.com/j2se/) result 302).\n* [ ] http://java.sun.com/j2se/1.4.1/docs/tooldocs/solaris/javadoc.html with 1 occurrences migrated to:  \n  https://java.sun.com/j2se/1.4.1/docs/tooldocs/solaris/javadoc.html ([https](https://java.sun.com/j2se/1.4.1/docs/tooldocs/solaris/javadoc.html) result 302).\n* [ ] http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html with 1 occurrences migrated to:  \n  https://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html ([https](https://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html) result 302).\n* [ ] http://java.sun.com/j2se/javadoc with 1 occurrences migrated to:  \n  https://java.sun.com/j2se/javadoc ([https](https://java.sun.com/j2se/javadoc) result 302).\n* [ ] http://java.sun.com/j2se/javadoc/ with 1 occurrences migrated to:  \n  https://java.sun.com/j2se/javadoc/ ([https](https://java.sun.com/j2se/javadoc/) result 302).\n* [ ] http://java.sun.com/j2se/javadoc/faq.html with 1 occurrences migrated to:  \n  https://java.sun.com/j2se/javadoc/faq.html ([https](https://java.sun.com/j2se/javadoc/faq.html) result 302).\n* [ ] http://java.sun.com/webservices/jaxb/ with 1 occurrences migrated to:  \n  https://java.sun.com/webservices/jaxb/ ([https](https://java.sun.com/webservices/jaxb/) result 302).\n* [ ] http://java.sun.com/xml/jaxp/properties/schemaLanguage with 1 occurrences migrated to:  \n  https://java.sun.com/xml/jaxp/properties/schemaLanguage ([https](https://java.sun.com/xml/jaxp/properties/schemaLanguage) result 302).\n* [ ] http://java.sun.com/xml/ns/j2ee/connector_1_5.xsd with 1 occurrences migrated to:  \n  https://java.sun.com/xml/ns/j2ee/connector_1_5.xsd ([https](https://java.sun.com/xml/ns/j2ee/connector_1_5.xsd) result 302).\n* [ ] http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd with 2 occurrences migrated to:  \n  https://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd ([https](https://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd) result 302).\n* [ ] http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd with 2 occurrences migrated to:  \n  https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd ([https](https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd) result 302).\n* [ ] http://java.sun.com/xml/stream/properties/report-cdata-event with 1 occurrences migrated to:  \n  https://java.sun.com/xml/stream/properties/report-cdata-event ([https](https://java.sun.com/xml/stream/properties/report-cdata-event) result 302).\n* [ ] http://sourceforge.net/projects/cglib/files/cglib3/3.0/cglib-3.0.jar/download with 1 occurrences migrated to:  \n  https://sourceforge.net/projects/cglib/files/cglib3/3.0/cglib-3.0.jar/download ([https](https://sourceforge.net/projects/cglib/files/cglib3/3.0/cglib-3.0.jar/download) result 302).\n* [ ] http://other.info/foo/bar (301) with 1 occurrences migrated to:  \n  https://weibo.com/otherinfo/foo/bar ([https](https://other.info/foo/bar) result 302).\n* [ ] http://www.iana.org/assignments/http-status-codes with 1 occurrences migrated to:  \n  https://www.iana.org/assignments/http-status-codes ([https](https://www.iana.org/assignments/http-status-codes) result 302).\n* [ ] http://www.iana.org/assignments/media-types/ with 1 occurrences migrated to:  \n  https://www.iana.org/assignments/media-types/ ([https](https://www.iana.org/assignments/media-types/) result 302).\n* [ ] http://www.springsource.org/download with 1 occurrences migrated to:  \n  https://www.springsource.org/download ([https](https://www.springsource.org/download) result 302).\n* [ ] http://www.sys-con.com/java with 1 occurrences migrated to:  \n  https://www.sys-con.com/java ([https](https://www.sys-con.com/java) result 302).\n\n# Ignored\nThese URLs were intentionally ignored.\n\n* http://java.sun.com/jsp/jstl/core with 1 occurrences\n* http://java.sun.com/xml/ns/j2ee with 6 occurrences\n* http://java.sun.com/xml/ns/javaee with 4 occurrences\n* http://java.sun.com/xml/ns/persistence with 1 occurrences\n* http://localhost with 86 occurrences\n* http://localhost/ with 16 occurrences\n* http://localhost/42 with 1 occurrences\n* http://localhost/?cookie=foo with 1 occurrences\n* http://localhost/FILE.TXT with 1 occurrences\n* http://localhost/abc with 1 occurrences\n* http://localhost/abc/def with 1 occurrences\n* http://localhost/app%20/path/ with 1 occurrences\n* http://localhost/app/path%20with%20spaces/ with 1 occurrences\n* http://localhost/bar with 2 occurrences\n* http://localhost/context/a with 3 occurrences\n* http://localhost/contextPath/main/path with 2 occurrences\n* http://localhost/file.foo with 1 occurrences\n* http://localhost/file.txt with 1 occurrences\n* http://localhost/foo with 2 occurrences\n* http://localhost/foo%20bar with 1 occurrences\n* http://localhost/foo/bar with 1 occurrences\n* http://localhost/foo/bar/baz with 1 occurrences\n* http://localhost/forward with 1 occurrences\n* http://localhost/hotels/42/bookings/21 with 4 occurrences\n* http://localhost/input with 1 occurrences\n* http://localhost/jquery-1.11.0.min.js with 5 occurrences\n* http://localhost/messages/form with 1 occurrences\n* http://localhost/mvc-showcase with 2 occurrences\n* http://localhost/mvc-showcase/app with 1 occurrences\n* http://localhost/mvc-showcase/data/foo%20bar with 1 occurrences\n* http://localhost/mvc-showcase/data/param with 1 occurrences\n* http://localhost/mvc-showcase/data/param?foo=123 with 2 occurrences\n* http://localhost/myapp/main with 1 occurrences\n* http://localhost/myapp/people/1/addresses/DE with 1 occurrences\n* http://localhost/path with 3 occurrences\n* http://localhost/path;a=b/with/semicolon with 1 occurrences\n* http://localhost/persons with 1 occurrences\n* http://localhost/prefix with 1 occurrences\n* http://localhost/prefix/app with 1 occurrences\n* http://localhost/prefix/bar with 1 occurrences\n* http://localhost/prefix/mvc-showcase with 3 occurrences\n* http://localhost/query= with 1 occurrences\n* http://localhost/query=foo@bar with 1 occurrences\n* http://localhost/resources/child/response.txt with 1 occurrences\n* http://localhost/resources/foo with 2 occurrences\n* http://localhost/resources/foo.txt with 1 occurrences\n* http://localhost/resources/response.txt with 2 occurrences\n* http://localhost/rest/books/6/pages/1.json with 1 occurrences\n* http://localhost/something/1/foo with 1 occurrences\n* http://localhost/something/optional-param with 1 occurrences\n* http://localhost/test with 4 occurrences\n* http://localhost/test.html with 1 occurrences\n* http://localhost/test/this with 2 occurrences\n* http://localhost:7070/example/adminhandle.vm with 1 occurrences\n* http://localhost:7070/example/bingo.html with 1 occurrences\n* http://localhost:80/jquery-1.11.0.min.js with 1 occurrences\n* http://localhost:8080 with 34 occurrences\n* http://localhost:8080/ with 4 occurrences\n* http://localhost:8080/OrderService with 3 occurrences\n* http://localhost:8080/aA/bB/cC with 1 occurrences\n* http://localhost:8080/context with 1 occurrences\n* http://localhost:8080/context/myapiresource with 1 occurrences\n* http://localhost:8080/gamecast/admin/index.html with 1 occurrences\n* http://localhost:8080/gamecast/display.html with 1 occurrences\n* http://localhost:8080/gamecast/displayShoppingCart.html with 1 occurrences\n* http://localhost:8080/jquery-1.11.0.min.js with 1 occurrences\n* http://localhost:8080/mvc-showcase with 1 occurrences\n* http://localhost:8080/myapiresource with 1 occurrences\n* http://localhost:8080/myapp/js/sockjs-client.js with 1 occurrences\n* http://localhost:8080/path with 3 occurrences\n* http://localhost:8080/people with 2 occurrences\n* http://localhost:8080/portfolio with 1 occurrences\n* http://localhost:8080/spring/ with 2 occurrences\n* http://localhost:8080/test/ with 2 occurrences\n* http://localhost:8080/test/print?value=%EA%B0%80+%EB%82%98 with 1 occurrences\n* http://localhost:8081 with 1 occurrences\n* http://localhost:8081/ with 1 occurrences\n* http://localhost:8181 with 1 occurrences\n* http://localhost:8888/AccountServiceEndpoint?WSDL with 1 occurrences\n* http://localhost:9000 with 7 occurrences\n* http://localhost:9090 with 18 occurrences\n* http://localhost:9090/jquery-1.11.0.min.js with 2 occurrences\n* http://localhost:9990/mail/messages/form with 1 occurrences\n* http://localhost:9999/ with 1 occurrences\n* http://localhost:9999/OrderService?wsdl with 4 occurrences\n* http://localhosta/testbean with 3 occurrences\n* http://samples.springframework.org/flight with 27 occurrences\n* http://springframework.org/spring-ws with 17 occurrences\n* http://test.com with 1 occurrences\n* http://test.com/ with 1 occurrences\n* http://testng.org/ with 1 occurrences\n* http://tiles.apache.org/tags-tiles with 1 occurrences\n* http://www.foo.com/schema/component with 6 occurrences\n* http://www.mycompany.com/schema/myns with 4 occurrences\n* http://www.springframework.org/schema/aop with 30 occurrences\n* http://www.springframework.org/schema/beans with 169 occurrences\n* http://www.springframework.org/schema/beans/test with 2 occurrences\n* http://www.springframework.org/schema/c with 1 occurrences\n* http://www.springframework.org/schema/cache with 5 occurrences\n* http://www.springframework.org/schema/context with 28 occurrences\n* http://www.springframework.org/schema/jdbc with 8 occurrences\n* http://www.springframework.org/schema/jee with 9 occurrences\n* http://www.springframework.org/schema/jms with 5 occurrences\n* http://www.springframework.org/schema/lang with 10 occurrences\n* http://www.springframework.org/schema/mvc with 8 occurrences\n* http://www.springframework.org/schema/oxm with 4 occurrences\n* http://www.springframework.org/schema/p with 4 occurrences\n* http://www.springframework.org/schema/task with 2 occurrences\n* http://www.springframework.org/schema/tool with 27 occurrences\n* http://www.springframework.org/schema/tx with 18 occurrences\n* http://www.springframework.org/schema/util with 8 occurrences\n* http://www.springframework.org/schema/websocket with 26 occurrences\n* http://www.springframework.org/spring-ws with 1 occurrences\n* http://www.springframework.org/tags with 4 occurrences\n* http://www.springframework.org/tags/form with 2 occurrences\n* http://www.w3.org/1999/XSL/Transform with 8 occurrences\n* http://www.w3.org/2001/XMLSchema with 24 occurrences\n* http://www.w3.org/2001/XMLSchema-instance with 79 occurrences\n* http://www.w3.org/2005/Atom with 4 occurrences\n* http://www.w3.org/TR/html4/charset.html with 5 occurrences\n* http://www.w3.org/TR/html4/sgml/entities.html with 14 occurrences']","['closed', 'closed', 'closed']","[1, 0, 1]",['Merged into `master` in 7fe12cc23e.']
6887802526dbef2857c4c0106153c0650ec5e4aa,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java,Condition_Change,"-				MethodHandles.Lookup lookup =
-						(MethodHandles.Lookup) privateLookupInMethod.invoke(null, contextClass, MethodHandles.lookup());
+				MethodHandles.Lookup lookup = (MethodHandles.Lookup)
+						privateLookupInMethod.invoke(null, contextClass, MethodHandles.lookup());
-				if (!(ex.getTargetException() instanceof IllegalArgumentException)) {
-					throw new CodeGenerationException(ex.getTargetException());
+				Throwable target = ex.getTargetException();
+				if (target.getClass() != LinkageError.class && target.getClass() != IllegalArgumentException.class) {
+					throw new CodeGenerationException(target);
-				// in case of IllegalArgumentException: fall through to defineClass
+				// in case of plain LinkageError (class already defined)
+				// or IllegalArgumentException (class in different package):
+				// fall through to traditional ClassLoader.defineClass below",9,condition,Fallback to ClassLoader.defineClass for Lookup.defineClass LinkageError,"Issue: SPR-16902
",,21441,1,['Spring Boot DevTools on 5.1 fails with java.lang.LinkageError: loader attempted duplicate class definition [SPR-16902]'],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16902](https://jira.spring.io/browse/SPR-16902?redirect=false)** and commented\n\nSpring Boot recently upgrade to Framework 5.1 SNAPSHOTS and we\'re now seeing ""loader attempted duplicate class definition"" errors with our devtools integration tests on Java 9 and Java 10 (Java 8 is fine).\n\n[Here\'s an example of a failing build](https://ci.spring.io/teams/spring-boot/pipelines/spring-boot/jobs/jdk9-build/builds/1283).\n\n```\nCaused by: org.springframework.aop.framework.AopConfigException: Could not generate CGLIB subclass of class org.springframework.boot.autoconfigure.http.HttpMessageConverters: Common causes of this problem include using a final class or a non-visible class; nested exception is org.springframework.cglib.core.CodeGenerationException: java.lang.LinkageError-->loader (instance of  jdk/internal/loader/ClassLoaders$AppClassLoader): attempted  duplicate class definition for name: ""org/springframework/boot/autoconfigure/http/HttpMessageConverters$$EnhancerBySpringCGLIB$$1d90bff9""\n\tat org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:208) ~[spring-aop-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.aop.framework.ProxyFactory.getProxy(ProxyFactory.java:110) ~[spring-aop-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver.buildLazyResolutionProxy(ContextAnnotationAutowireCandidateResolver.java:117) ~[spring-context-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.context.annotation.ContextAnnotationAutowireCandidateResolver.getLazyResolutionProxyIfNecessary(ContextAnnotationAutowireCandidateResolver.java:52) ~[spring-context-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1062) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:818) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:724) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.beans.factory.support.ConstructorResolver.autowireConstructor(ConstructorResolver.java:197) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.autowireConstructor(AbstractAutowireCapableBeanFactory.java:1276) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1133) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:503) ~[spring-beans-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\t... 34 common frames omitted\nCaused by: org.springframework.cglib.core.CodeGenerationException: java.lang.LinkageError-->loader (instance of  jdk/internal/loader/ClassLoaders$AppClassLoader): attempted  duplicate class definition for name: ""org/springframework/boot/autoconfigure/http/HttpMessageConverters$$EnhancerBySpringCGLIB$$1d90bff9""\n\tat org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:502) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.cglib.core.AbstractClassGenerator.generate(AbstractClassGenerator.java:359) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.cglib.proxy.Enhancer.generate(Enhancer.java:582) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:106) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData$3.apply(AbstractClassGenerator.java:104) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.cglib.core.internal.LoadingCache$2.call(LoadingCache.java:54) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264) ~[na:na]\n\tat org.springframework.cglib.core.internal.LoadingCache.createEntry(LoadingCache.java:61) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.cglib.core.internal.LoadingCache.get(LoadingCache.java:34) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.cglib.core.AbstractClassGenerator$ClassLoaderData.get(AbstractClassGenerator.java:130) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.cglib.core.AbstractClassGenerator.create(AbstractClassGenerator.java:315) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.cglib.proxy.Enhancer.createHelper(Enhancer.java:569) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.cglib.proxy.Enhancer.createClass(Enhancer.java:416) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.aop.framework.ObjenesisCglibAopProxy.createProxyClassAndInstance(ObjenesisCglibAopProxy.java:58) ~[spring-aop-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\tat org.springframework.aop.framework.CglibAopProxy.getProxy(CglibAopProxy.java:205) ~[spring-aop-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\t... 45 common frames omitted\nCaused by: java.lang.LinkageError: loader (instance of  jdk/internal/loader/ClassLoaders$AppClassLoader): attempted  duplicate class definition for name: ""org/springframework/boot/autoconfigure/http/HttpMessageConverters$$EnhancerBySpringCGLIB$$1d90bff9""\n\tat java.base/java.lang.ClassLoader.defineClass1(Native Method) ~[na:na]\n\tat java.base/java.lang.System$2.defineClass(System.java:2120) ~[na:na]\n\tat java.base/java.lang.invoke.MethodHandles$Lookup.defineClass(MethodHandles.java:964) ~[na:na]\n\tat java.base/jdk.internal.reflect.GeneratedMethodAccessor25.invoke(Unknown Source) ~[na:na]\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:564) ~[na:na]\n\tat org.springframework.cglib.core.ReflectUtils.defineClass(ReflectUtils.java:498) ~[spring-core-5.1.0.BUILD-SNAPSHOT.jar:5.1.0.BUILD-SNAPSHOT]\n\t... 59 common frames omitted\n```\n\nThe same tests on Spring Boot 2.0 (which uses Framework 5.0) pass fine on Java 8, 9 and 10.\n\nMy guess is this relates to #20414 and is probably caused by our slightly unusual DevTools classloader arrangement.\n\n---\n\n**Affects:** 5.1 RC1\n\n**Issue Links:**\n- #20414 MethodHandles.Lookup.defineClass for CGLIB class definition purposes\n- #21556 Revise ClassUtils.isPresent for exposing resolution exceptions in jlinked modules\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6887802526dbef2857c4c0106153c0650ec5e4aa\n']",['closed'],[3],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nSince this is definitely a consequence of #20414 where we can't enforce the generation of a such a derived class into a specific `ClassLoader`, there is probably only one way out: keep using the old `ClassLoader.defineClass` approach for DevTools, even on JDK 9+. We already have a fallback for `IllegalArgumentException` coming out of the JDK 9 `MethodHandles.Lookup` API, so I guess we should simply fall back for `LinkageError` as well.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe're falling back for `IllegalArgumentException} (class in different package) as well as plain {{LinkageError` (class already defined) now, matching the implementation of `MethodHandles.Lookup.defineClass` in JDK 9/10/11. We keep rethrowing all variants of `LinkageError` subclasses which typically indicate actual class definition issues.\n\nThis will be in the upcoming 5.1 snapshot. Please give it a try with DevTools and let me know how it goes...\n"", ""**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** commented\n\nThanks, Juergen. Boot 2.1's build is now passing on both Java 9 and Java 10.\n""]"
68cc57549a56480b723b6112e1bee0de114eeda1,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ReactiveTypeHandler.java,Condition_Change,"-				
+
+			// Check terminal signal before processing element..
+			boolean isTerminated = this.terminated;
+
-			if (this.terminated) {
+			if (isTerminated) {",6,condition,Restore correct order of terminated flag check,,,,0,N/A,N/A,N/A,N/A,N/A
692c5f292da714c251280058d58e8c05176ef478,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Condition_Change,"-			// A clone of the AutowireCandidateResolver since it is potentially BeanFactoryAware...
+			// A clone of the AutowireCandidateResolver since it is potentially BeanFactoryAware
-			// Make resolvable dependencies (e.g. ResourceLoader) available here as well...
+			// Make resolvable dependencies (e.g. ResourceLoader) available here as well
-	public <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType)  {
+	public <T> ObjectProvider<T> getBeanProvider(Class<T> requiredType) {
-						else  {
+						else {",4,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
6c74fee5e88073ec321e956f7c5a1dd5b00f2b08,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/client/DefaultRestClient.java,Remove_Condition,"-			UnknownContentTypeException unknownContentTypeException = new UnknownContentTypeException(bodyType, contentType,
+
+			throw new UnknownContentTypeException(bodyType, contentType,
-			if (observation != null) {
-				observation.error(unknownContentTypeException);
-			}
-			throw unknownContentTypeException;",7,condition,Remove unnecessary error signal from DefaultRestClient,"Before UnknownContentTypeException is thrown, it is added to the current
Observation but since UnknownContentTypeException is a
RestClientException, the exception is added again in one of the
catch blocks later on.

Closes gh-33347
",,33347,1,['RestClient observation flags error for UnknownContentTypeException twice'],"[""When an `UnknownContentTypeException` is thrown by `RestClient` it flags the observation in error with it but that isn't necessary as this exception is a `RestClientException` and that's done higher in the stack already.""]",['closed'],[0],[]
6d5080825cd26ec29957de2626da9f117e32e41b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/KotlinDetector.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-import org.apache.commons.logging.Log;
-import org.apache.commons.logging.LogFactory;
-
-	private static final Log logger = LogFactory.getLog(KotlinDetector.class);
-
-		if (kotlinMetadata != null && !kotlinReflectPresent) {
-			logger.info(""Kotlin reflection implementation not found at runtime, related features won't be available."");
-		}",8,condition,Remove potentially confusing kotlin-reflect related log message,"Closes gh-24935
",,24935,1,['Remove potentially confusing kotlin-reflect related log message'],"[""When using Spring Boot 2.2.6.RELEASE in Java, and I add a dependency that is written in Kotlin, Spring mentions \r\n\r\n> org.springframework.core.KotlinDetector - Kotlin reflection implementation not found at runtime, related features won't be available.\r\n\r\nThat's fine, the dependency doesn't use Kotlin reflection. What makes me concerned is that, after quickly looking around in the code it seems that Spring would change its behavior to use Kotlin internally if I were to add kotlin-reflect to the classpath. \r\n\r\nThis means that, if a dependency written in Kotlin, that also has kotlin-reflect, Spring will alter its behavior?\r\n\r\nI don't know if this poses a problem but it feels wrong and there doesn't seem to be a way to prevent Spring from using Kotlin even if it's on the classpath.\r\n\r\nAlso, the message cannot be hidden unless I overwrite the logger configuration outside of Spring.\r\nI want to make the warning go away and I don't want to alter my logger configuration outside of Spring. Alternatively I could add kotlin-reflect to make the warning go away, but then I'm wondering what is happening under the hood if all Kotlin requirements are met.\r\n\r\nSo I suggest some kind of mechanism to completely prevent using Kotlin as well as any warnings about it if not desired.\r\n\r\nPlease let me know if this is a non-issue!""]",['closed'],[2],"[""The `KotlinDetector` class is part of the core spring-framework project. I'm going to transfer this issue for that team to review."", 'It is true that nowadays there are JVM libraries developed with Kotlin, like OkHttp, and we should not display a log message for that use case. Since the behavior of the framework is already fine with the relevant conditional checks already in place, let just drop this log message potentially confusing.']"
6d55b3a592547fc335c73e7d071e511fea8f89b9,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/connection/SingleConnectionFactory.java,Condition_Change,"+			// Iterate over temporary copy in order to avoid ConcurrentModificationException,
+			// since listener invocations may in turn trigger registration of listeners...
+			Set<ExceptionListener> copy;
-				// Iterate over temporary copy in order to avoid ConcurrentModificationException,
-				// since listener invocations may in turn trigger registration of listeners...
-				for (ExceptionListener listener : new LinkedHashSet<>(this.delegates)) {
-					listener.onException(ex);
-				}
+				copy = new LinkedHashSet<>(this.delegates);
+			}
+			for (ExceptionListener listener : copy) {
+				listener.onException(ex);",8,iteration,Perform onException delegation outside of connection monitor,"Issue: SPR-15738
",,20294,1,['JMS Integration with Tibco causes deadlock while using DefaultMessageListenerContainer [SPR-15738]'],"['**[Anup Tagalpallewar](https://jira.spring.io/secure/ViewProfile.jspa?name=tanup02)** opened **[SPR-15738](https://jira.spring.io/browse/SPR-15738?redirect=false)** and commented\n\nI am facing this issue while using\nSpring-jms version 4.1.6\ntibjms version 6.3 (Tibco jar)\n\nWhen using a DefaultMessageListenerContainer, if there is an exception on established connection we intermittently get this deadlock issue.\n\nPlease find following stack trace for more information.\n\n    ""clientResponseListener-16"" - Thread t@242\n\njava.lang.Thread.State: BLOCKED\nat org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.localStop(SingleConnectionFactory.java:640)\n- waiting to lock <1768ffa4> (a java.lang.Object) owned by ""TIBCO EMS TCPLink Reader (Server-999487)"" t@241\n  at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:573)\n  at com.sun.proxy.$Proxy54.stop(Unknown Source)\n  at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.localStop(SingleConnectionFactory.java:644)\n- locked <1ea19285> (a java.lang.Object)\n  at org.springframework.jms.connection.SingleConnectionFactory$SharedConnectionInvocationHandler.invoke(SingleConnectionFactory.java:577)\n  at com.sun.proxy.$Proxy54.close(Unknown Source)\n  at org.springframework.jms.connection.ConnectionFactoryUtils.releaseConnection(ConnectionFactoryUtils.java:80)\n  at org.springframework.jms.listener.AbstractJmsListeningContainer.refreshSharedConnection(AbstractJmsListeningContainer.java:395)\n- locked <78213c8c> (a java.lang.Object)\n  at org.springframework.jms.listener.DefaultMessageListenerContainer.refreshConnectionUntilSuccessful(DefaultMessageListenerContainer.java:909)\n  at org.springframework.jms.listener.DefaultMessageListenerContainer.recoverAfterListenerSetupFailure(DefaultMessageListenerContainer.java:884)\n  at org.springframework.jms.listener.DefaultMessageListenerContainer$AsyncMessageListenerInvoker.run(DefaultMessageListenerContainer.java:1055)\n- locked <5f74909f> (a java.lang.Object)\n  at java.lang.Thread.run(Thread.java:745)\n\nLocked ownable synchronizers:\n- None\n\n  ""TIBCO EMS TCPLink Reader (Server-999487)"" - Thread t@241\n\njava.lang.Thread.State: BLOCKED\nat org.springframework.jms.connection.SingleConnectionFactory$AggregatedExceptionListener.onException(SingleConnectionFactory.java:670)\n- waiting to lock <1ea19285> (a java.lang.Object) owned by ""clientResponseListener-16"" t@242\n  at org.springframework.jms.connection.SingleConnectionFactory$AggregatedExceptionListener.onException(SingleConnectionFactory.java:671)\n- locked <1768ffa4> (a java.lang.Object)\n  at com.tibco.tibjms.TibjmsConnection._invokeOnExceptionCallback(TibjmsConnection.java:2054)\n  at com.tibco.tibjms.TibjmsConnection._onDisconnected(TibjmsConnection.java:2394)\n  at com.tibco.tibjms.TibjmsConnection$ServerLinkEventHandler.onEventDisconnected(TibjmsConnection.java:349)\n  at com.tibco.tibjms.TibjmsxLinkTcp$LinkReader.work(TibjmsxLinkTcp.java:330)\n  at com.tibco.tibjms.TibjmsxLinkTcp$LinkReader.run(TibjmsxLinkTcp.java:259)\n\nLocked ownable synchronizers:\n- None\n\n---\n\n**Affects:** 4.2.7\n\n**Issue Links:**\n- #15030 Memory leak with SimpleMessageListenerContainer and ChainedExceptionListener on Single/CachingConnectionFactory\n- #18000 ConcurrentModificationException in SingleConnectionFactory$AggregatedExceptionListener\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6d55b3a592547fc335c73e7d071e511fea8f89b9, https://github.com/spring-projects/spring-framework/commit/a9a4d7cf78c980d143c04f55551c04dca1ae545a\n']",['closed'],[2],"['**[Anup Tagalpallewar](https://jira.spring.io/secure/ViewProfile.jspa?name=tanup02)** commented\n\nHi Juergen,\n\nCan you please suggest any workaround that might help avoid the deadlock?\n\nThanks\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've addressed this through moving `AggregatedExceptionListener`'s `onException` delegate calls outside of the `connectionMonitor` there, just taking a temporary copy of the current listeners within the monitor now. Fixed for 5.0 RC3, and to be backported to 4.3.10.\n\nI don't think Tibco should be using such a hard lock for `onException` callbacks in the first place... but I doubt they'll change that any time soon. So not taking a lock for those callbacks on Spring's side is the only thing we can do there.\n\nAs a workaround, you could try to get rid of your `SingleConnectionFactory` setup. `DefaultMessageListenerContainer` manages its own shared connection in any case, so you might not actually benefit from the additional `SingleConnectionFactory`...\n""]"
6d7573262e604b5c8e58cd97309bd2486c478016,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/FormTag.java,Condition_Change,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
+import org.springframework.util.CollectionUtils;
-		if ((processor != null) && (request instanceof HttpServletRequest)) {
+		if (processor != null && request instanceof HttpServletRequest) {
-		if (hiddenFields != null) {
+		if (!CollectionUtils.isEmpty(hiddenFields)) {
+",6,condition,FormTag skips rendering of hidden fields in case of empty Map,"Issue: SPR-16498
",,21041,1,['FormTag renders empty <div> tag [SPR-16498]'],"['**[Delete this account](https://jira.spring.io/secure/ViewProfile.jspa?name=todr)** opened **[SPR-16498](https://jira.spring.io/browse/SPR-16498?redirect=false)** and commented\n\nThe doEndTag method in org/springframework/web/servlet/tags/form/FormTag.java uses writeHiddenFields to write the ExtraHiddenFields to a \\<div> tag. The if statement inside writeHiddenFields checks for hiddenFields being null, but in the case of it being an empty Map will write an empty \\<div>\\</div> at the end of the \\<form>.\n\nPossible solutions:\n- remove encapsulating \\<div>, possible hidden inputs would be direct children of the \\<form> tag\n- check hiddenFields not only for null but also for empty keyset in the if condition\n\n\n\n---\n\n**Affects:** 4.3.14\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/350f318d2ec3f19855df0124a117ff3a30cdabc0, https://github.com/spring-projects/spring-framework/commit/6d7573262e604b5c8e58cd97309bd2486c478016\n\n**Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)\n']",['closed'],[1],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point, we're simply checking `CollectionUtils.isEmpty` there now. To be backported to 4.3.15.\n""]"
6d91d54fc9e93bbecbfb2778cf4d1fed1a39b7f6,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeConverter.java,Condition_Change,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-	private static ConversionService defaultConversionService;
+	private static volatile ConversionService defaultConversionService;
-		synchronized (this) {
-			if (defaultConversionService == null) {
-				defaultConversionService = new DefaultConversionService();
-			}
+		if (defaultConversionService == null) {
+			defaultConversionService = new DefaultConversionService();",8,condition,StandardTypeConverter initializes default ConversionService against volatile field,"Issue: SPR-14465
",,19034,1,['Ineffective synchronization in StandardTypeConverter constructor [SPR-14465]'],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-14465](https://jira.spring.io/browse/SPR-14465?redirect=false)** and commented\n\n`StandardTypeConverter`'s default constructor uses `synchronized (this)` for initializing a shared static `DefaultConversionService`. However, in a constructor, synchronization on `this` is effectively a no-op. Let's rather simply use a `volatile` variable there.\n\n---\n\n**Affects:** 3.2.17, 4.2.7, 4.3.1\n\n**Issue Links:**\n- #19515 Shared DefaultConversionService instance e.g. for BeanPropertyRowMapper\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/0065a160cc8316fec43adb8da80078d1ff3be242, https://github.com/spring-projects/spring-framework/commit/97d73eb70c46865f877c146978d96d7a380d2483, https://github.com/spring-projects/spring-framework/commit/6d91d54fc9e93bbecbfb2778cf4d1fed1a39b7f6, https://github.com/spring-projects/spring-framework/commit/cb64dd15838ee073631e145b21d3c9f78b35dcb8\n\n**Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1), [3.2.18](https://github.com/spring-projects/spring-framework/milestone/106?closed=1)\n""]",['closed'],[0],[]
6e0dfd6999aaec4590625de9f818abab16c3aa92,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
+import org.springframework.http.HttpHeaders;
-	 * Indicates whether the {@code Accept-Charset} should be written to any outgoing request.
+	 * Whether the {@code Accept-Charset} header should be written to any outgoing
+	 * request sourced from the value of {@link Charset#availableCharsets()}.
+	 * The behavior is suppressed if the header has already been set.
-		if (this.writeAcceptCharset) {
-			outputMessage.getHeaders().setAcceptCharset(getAcceptedCharsets());
+		HttpHeaders headers = outputMessage.getHeaders();
+		if (this.writeAcceptCharset && headers.get(HttpHeaders.ACCEPT_CHARSET) == null) {
+			headers.setAcceptCharset(getAcceptedCharsets());
-		Charset charset = getContentTypeCharset(outputMessage.getHeaders().getContentType());
+		Charset charset = getContentTypeCharset(headers.getContentType());",8,condition,Check if Accept-Charset is present before adding it,"Closes gh-22506
",,22506,1,['StringHttpMessageConverter will add all the default charsets even if Accept-Charset is set explicitly'],"[""<!--\r\n!!! For Security Vulnerabilities, please go to https://pivotal.io/security !!!\r\n-->\r\n**Affects:** 5.1.5\r\n\r\n---\r\nHi,\r\nFirst, I would like to check if the current behavior of StringHttpMessageConverter is intentional. I found #15437 to be the same issue as I'm describing here, but its closed due to inactivity.\r\n\r\nCurrent Behavior\r\n============\r\nStringHttpMessageConverter will add all the available charsets available to the jvm in the `Accept-Charset` header when used to call apis with `RestTemplate`. This has two problems\r\n1) The outgoing request size can be huge\r\n2) The external system may not recognize all the charsets and throw errors (the issue I'm facing)\r\n\r\nIf this is not the intended behavior please see the proposal below\r\n\r\nProposal\r\n======\r\n```java\r\nprotected void writeInternal(String str, HttpOutputMessage outputMessage) throws IOException {\r\n  if (this.writeAcceptCharset) {\r\n    // Also check if Accept-Charset is already in headers before setting it        <----\r\n    outputMessage.getHeaders().setAcceptCharset(getAcceptedCharsets());\r\n  }\r\n  ...\r\n}\r\n```\r\n\r\n**NB: At the moment I'm using the below workaround. If this is intentional, please let me know if there is a better way. If not I'd be glad to work on the above proposal**\r\n```java\r\nRestTemplate restClient = new RestTemplate();\r\nList<HttpMessageConverter<?>> messageConverters = restClient.getMessageConverters();\r\nmessageConverters.forEach(\r\n    messageConverter -> {\r\n      if (messageConverter instanceof StringHttpMessageConverter) {\r\n        ((StringHttpMessageConverter) messageConverter).setWriteAcceptCharset(false);\r\n      }\r\n    }\r\n);\r\n```""]",['closed'],[1],"[""Thanks for the suggestion to make the change. To ensure this makes it for 5.1.7 tomorrow, I've applied it myself. Also in master for 5.2 I've switched the default from `true` to `false`.""]"
6e3f974951b71b6566392f58135b71ffca6fd135,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/HttpHeaders.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-	 * Return a {@code HttpHeaders} object that can read and written to.
+	 * Return a {@code HttpHeaders} object that can be read and written to.
+	 * @since 5.1.1
-		if (headers instanceof ReadOnlyHttpHeaders) {
+		if (headers == EMPTY) {
+			return new HttpHeaders();
+		}
+		else if (headers instanceof ReadOnlyHttpHeaders) {",5,condition,HttpHeaders.writableHttpHeaders properly handles HttpHeaders.EMPTY,"Issue: SPR-17633
",,22164,1,['HttpHeaders.EMPTY is not immutable [SPR-17633]'],"['**[Alfred Thomas](https://jira.spring.io/secure/ViewProfile.jspa?name=alfred.thomas)** opened **[SPR-17633](https://jira.spring.io/browse/SPR-17633?redirect=false)** and commented\n\nAccording to the Javadoc, HttpHeaders.EMPTY is immutable.\r\nI found that by using the following code, headers could be added to HttpHeaders.EMPTY.\r\nFrom then on, any further calls will result in a non-empty HttpHeaders.\n\n```java\nHttpHeaders myHeaders = HttpHeaders.writableHttpHeaders(HttpHeaders.EMPTY);\r\nmy.add(HttpHeaders.ACCEPT_ENCODING, ""gzip"");\r\n```\n\nI have written a simple unit test to explain this issue:\n\n```java\n@Test\r\npublic void testUpdateEmptyHeaders() {\r\n    assertEquals(0, HttpHeaders.EMPTY.size()); // **Success**\r\n    HttpHeaders myHeaders = HttpHeaders.writableHttpHeaders(HttpHeaders.EMPTY);\r\n    myHeaders.add(HttpHeaders.ACCEPT_ENCODING, ""gzip"");\r\n    assertEquals(0, HttpHeaders.EMPTY.size()); // **Assert Fails**\r\n}\r\n```\n\nThis caused a bug in my code where I subsequently used HttpHeaders.EMPTY again to create a new writable HttpHeaders object. I then unknowingly introduced headers used in the previous object\n\n---\n\n**Affects:** 5.1.3\n\n**Reference URL:** https://stackoverflow.com/questions/53982635/possible-bug-in-spring-httpheaders\n\n**Issue Links:**\n- #21783 Improve WebFlux performance for header management\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/6e3f974951b71b6566392f58135b71ffca6fd135\n']",['closed'],[0],[]
6e936a408195f95d41f3463bb93e255218493664,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/client/reactive/ReactorClientHttpConnector.java,Remove_Condition,"-		if (!uri.isAbsolute()) {
-			return Mono.error(new IllegalArgumentException(""URI is not absolute: "" + uri));
-		}
-",4,condition,Remove absolute URI check from ReactorClientHttpConnector,"This allows maknig use of the Unix Domain Socket support in Reactor 1.0.

Closes gh-25929
",,25929,1,['Removes absolute URI check to support Unix Domain Socket URIs'],['With support coming for [Unix Domain Sockets from io.projectreactor.netty](https://projectreactor.io/docs/netty/1.0.0-RC2/reference/index.html#_unix_domain_sockets_4) URIs no longer need to be absolute.'],['closed'],[0],[]
6f1acdd561e60b389fa2eefdecf1f2811018253d,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ResolvableType.java,Add_Condition,"+
+		if (type instanceof Class<?>) {
+			return new ResolvableType(type, typeProvider, variableResolver, null);
+		}",4,condition,Optimize ResolvableType cache,"Prior to this commit, the ResolvableType static cache was holding a lot
of duplicates for simple types. We are using too much metadata to compute
the key when the class has no generic information. so setFoo(String foo)
and setBar(String bar) would result in two entries in the cache because
the TypeProvider is different. On a very simple application 65% of the
entries in the cache were duplicate.

When the type is a Class with no generic information, the ResolvableType
instance is a simple wrapper around it so we might just as well not cache
it at all as the cost of finding it back from the cache is higher than
creating that simple wrapper.

This commit adds an explicit check; if the type is a simple Class we just
return a ""resolved"" ResolvableType instance for it. On a few test cases,
this reduces the size of the cache by 85%

Issue: SPR-12275
",,16880,1,['Duplicate entries in ResolvableType cache [SPR-12275]'],"['**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12275](https://jira.spring.io/browse/SPR-12275?redirect=false)** and commented\n\nWhile doing some investigations on #16021 we discovered that the `ResolvableType` internal cache was holding a **lot** of duplicates for simple types (i.e. `String`, `Integer`, etc).\n\nIt turns out that we are using too much metadata to compute the key when the class has no generic information. so `setFoo(String foo)` and `setBar(String bar)` would result in two entries in the cache because the `TypeProvider` is different.\n\n---\n\n**Affects:** 4.0.7, 4.1 GA\n\n**Issue Links:**\n- #16021 memory leak in class org.springframework.core.ResolvableType\n\n**Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)\n']",['closed'],[1],"[""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nInvestigating this a bit further, the cost of creating a simple wrapper around the class is lower than checking the cache so we're now avoiding the cache altogether for simple types (i.e. non generic, simple types).\n""]"
6f2f5bb8c1a0926c0d2be683bb721c3966cf9c80,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java,Condition_Change,"-		if (target == attribute) {
+		if (target.equals(attribute)) {
-			if (mirror != attribute) {
+			if (!mirror.equals(attribute)) {",4,condition,Fix annotation exceptions in tight memory,"Update `AnnotationTypeMapping` so that instance comparisons are no
longer used when checking attribute methods. Prior to this commit,
in an environment with tightly constrained memory, the method cache
could be cleared and different method instances would be returned.

Closes gh-23010
",,23010,1,['Soft reference-based cache causes confusing exception message from AnnotationTypeMapping resolveAliasTarget'],"[""https://github.com/spring-projects/spring-framework/blob/9b3c92e8d2a9a284ec031687fdb6aad5c2407f67/spring-core/src/main/java/org/springframework/core/annotation/AnnotationTypeMapping.java#L184-L190\r\n\r\nI have a situation where `mirror` and `attribute` are different instances of the `name` attribute on `@Bean`. The use of `!=` then results in the following exception:\r\n\r\n```\r\nCaused by: org.springframework.core.annotation.AnnotationConfigurationException: Attribute 'value' in annotation [org.springframework.context.annotation.Bean] must be declared as an @AliasFor 'name', not 'name'.\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.resolveAliasTarget(AnnotationTypeMapping.java:186) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.resolveAliasTarget(AnnotationTypeMapping.java:130) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.resolveAliasedForTargets(AnnotationTypeMapping.java:122) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:99) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:107) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:68) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:61) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:215) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_181]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:211) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:179) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.process(TypeMappedAnnotations.java:417) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.doWithAnnotations(TypeMappedAnnotations.java:400) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.doWithAnnotations(TypeMappedAnnotations.java:366) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.processMethodAnnotations(AnnotationsScanner.java:382) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.processMethodInheritedAnnotations(AnnotationsScanner.java:248) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.processMethod(AnnotationsScanner.java:231) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.process(AnnotationsScanner.java:109) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.scan(AnnotationsScanner.java:96) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.scan(AnnotationsScanner.java:77) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.TypeMappedAnnotations.scan(TypeMappedAnnotations.java:244) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.TypeMappedAnnotations.get(TypeMappedAnnotations.java:151) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.TypeMappedAnnotations.get(TypeMappedAnnotations.java:133) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.findAutowiredAnnotation(AutowiredAnnotationBeanPostProcessor.java:508) ~[spring-beans-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.lambda$buildAutowiringMetadata$2(AutowiredAnnotationBeanPostProcessor.java:476) ~[spring-beans-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.util.ReflectionUtils.doWithLocalMethods(ReflectionUtils.java:320) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.buildAutowiringMetadata(AutowiredAnnotationBeanPostProcessor.java:471) ~[spring-beans-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.findAutowiringMetadata(AutowiredAnnotationBeanPostProcessor.java:438) ~[spring-beans-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessMergedBeanDefinition(AutowiredAnnotationBeanPostProcessor.java:233) ~[spring-beans-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyMergedBeanDefinitionPostProcessors(AbstractAutowireCapableBeanFactory.java:1081) ~[spring-beans-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:567) ~[spring-beans-5.2.0.M2.jar:5.2.0.M2]\r\n\t... 15 common frames omitted\r\n```\r\n\r\nThe problem occurs when running a Spring Boot application with a very tightly constrained max heap. I suspect it's due to eviction from the soft reference cache used by `AnnotationTypeMappings`. It's not limited to `@Bean` as I have also seen it with `@RequestMapping`:\r\n\r\n```\r\nCaused by: org.springframework.core.annotation.AnnotationConfigurationException: Attribute 'value' in annotation [org.springframework.web.bind.annotation.RequestMapping] must be declared as an @AliasFor 'path', not 'path'.\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.resolveAliasTarget(AnnotationTypeMapping.java:186) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.resolveAliasTarget(AnnotationTypeMapping.java:130) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.resolveAliasedForTargets(AnnotationTypeMapping.java:122) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMapping.<init>(AnnotationTypeMapping.java:99) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.addIfPossible(AnnotationTypeMappings.java:107) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.addAllMappings(AnnotationTypeMappings.java:68) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:61) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.<init>(AnnotationTypeMappings.java:46) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings$Cache.createMappings(AnnotationTypeMappings.java:215) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat java.util.concurrent.ConcurrentMap.computeIfAbsent(ConcurrentMap.java:324) ~[na:1.8.0_181]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings$Cache.get(AnnotationTypeMappings.java:211) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationTypeMappings.forAnnotationType(AnnotationTypeMappings.java:179) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.process(TypeMappedAnnotations.java:417) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.doWithAnnotations(TypeMappedAnnotations.java:400) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.TypeMappedAnnotations$MergedAnnotationFinder.doWithAnnotations(TypeMappedAnnotations.java:366) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.processMethodAnnotations(AnnotationsScanner.java:382) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.processMethodHierarchy(AnnotationsScanner.java:266) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.processMethod(AnnotationsScanner.java:236) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.process(AnnotationsScanner.java:109) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.scan(AnnotationsScanner.java:96) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotationsScanner.scan(AnnotationsScanner.java:77) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.TypeMappedAnnotations.scan(TypeMappedAnnotations.java:244) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.TypeMappedAnnotations.get(TypeMappedAnnotations.java:151) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.core.annotation.AnnotatedElementUtils.findMergedAnnotation(AnnotatedElementUtils.java:633) ~[spring-core-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.createRequestMappingInfo(RequestMappingHandlerMapping.java:262) ~[spring-webmvc-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getMappingForMethod(RequestMappingHandlerMapping.java:225) ~[spring-webmvc-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping.getMappingForMethod(RequestMappingHandlerMapping.java:65) ~[spring-webmvc-5.2.0.M2.jar:5.2.0.M2]\r\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodMapping.lambda$detectHandlerMethods$0(AbstractHandlerMethodMapping.java:271) ~[spring-webmvc-5.2.0.M2.jar:5.2.0.M2]\r\n\t... 26 common frames omitted\r\n```""]",['closed'],[2],"[""I unfortunately couldn't easily add a unit test for this. @wilkinsona could you run your sample again with the latest snapshot and confirm things are now OK?"", 'Looks good to me. Thanks.']"
6fdf5ef6eeba50387686082f2dd4d1407a669f39,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-			Class<?>[] interfaces = ia.getInterfaces();
-			for (Class<?> iface : interfaces) {
-				removeInterface(iface);
+			for (Class<?> ifc : ia.getInterfaces()) {
+				removeInterface(ifc);",5,iteration,Polish contribution,"See gh-24205
",,24205,1,['Simplify AdvisedSupport.removeAdvisor()'],"[""1) it's not necessary to call `IntroductionAdvisor.getInterfaces()` twice for each iteration\r\n2) instead of calling `ArrayList.get()` and then `ArrayList.remove()` we can once call `ArrayList.remove()` to get and remove item by its index""]",['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks']
6fed3425437ab1736244a8d77005b4fa8fa3e57b,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/DefaultPersistenceUnitManager.java,Add_Condition,"+			if (ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION.equals(this.defaultPersistenceUnitRootLocation)) {
+				logger.debug(""Unable to resolve classpath root as persistence unit root URL"");
+				return null;
+			}",4,condition,Refine DefaultPersistenceUnitManager#determineDefaultPersistenceUnitRootUrl,"This commit refines the implementation to be more
lenient when defaultPersistenceUnitRootLocation is equals
to ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION and an
IOException is thrown, which happens when running on
native image.

Closes gh-29137
",,29137,1,['DefaultPersistenceUnitManager.determineDefaultPersistenceUnitRootUrl is unable to resolve root url in native image'],['Bootstrapping the `DefaultPersistenceUnitManager` fails in native image being unable to resolve the root url. Replacing `determineDefaultPersistenceUnitRootUrl` via a substitution that returns `null` allowed to initialize the `PersistenceUnitManager`.  \r\n\r\nSee: [pring-aot-smoke-tests#113](https://github.com/spring-projects/spring-aot-smoke-tests/pull/113/files#diff-3f810a09badaf6852c87168c71c77aa4871afec6e8a526ed5c512c0e600156f6)'],['closed'],[1],"['I guess it would also help to call `setDefaultPersistenceUnitRootLocation(null)` since the implementation already has that escape hatch? We should make the default implementation more defensive though, there is no need to fail hard, at least not with the `ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION` as input. This could be as straightforward as just logging the ""Unable to resolve persistence unit root URL"" message and returning `null` instead of throwing a `PersistenceException` there, potentially with an `if` check to only perform such a lenient return in case of `defaultPersistenceUnitRootLocation == ORIGINAL_DEFAULT_PERSISTENCE_UNIT_ROOT_LOCATION`.']"
70cb96c1d832eccd0d7e8ab5768cf63bda6879c1,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,Condition_Change,"-					if (method.getParameterCount() == 0) {
+					if (!method.getDeclaringClass().isRecord() && method.getParameterCount() == 0) {",2,condition,Ignore @Value on record property,"See gh-31433
",,31433,1,['Use of @Value in compact constructor of a record should not register method injection'],"['When I try to use `@Value` annotation a record property, I get a warning in the logs that autowiring should only be used on methods with parameters. What that seems to imply is that attaching `@Value` on the property is actually attaching it on the generated method `property()`, which has no parameters.\r\n\r\nExample:\r\n```java\r\n@Component\r\npublic record MyRecord(@Value(""${myProp}"") String prop) {}\r\n```\r\n\r\nOutput:\r\n```\r\n02:21:15.043 [main] INFO  o.s.b.f.a.AutowiredAnnotationBeanPostProcessor - Autowired annotation should only be used on methods with parameters: public java.lang.String com.example.MyRecord.prop()\r\n```\r\n\r\nMy fix is to just check first, if the bean is a record or not.']",['closed'],[6],"[""Thanks for the PR but are you sure that the code you've shared above currently triggers the warning? Does it work at all? \r\n\r\nIt fails for me as follows:\r\n\r\n```\r\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myComponent': Injection of autowired dependencies failed; nested exception is java.lang.IllegalAccessException: Can not set final java.lang.String field com.example.demo.MyComponent.prop to java.lang.String\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:921) ~[spring-context-5.3.29.jar:5.3.29]\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583) ~[spring-context-5.3.29.jar:5.3.29]\r\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:731) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:307) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1303) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1292) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat com.example.demo.DemoApplication.main(DemoApplication.java:12) ~[classes/:na]\r\nCaused by: java.lang.IllegalAccessException: Can not set final java.lang.String field com.example.demo.MyComponent.prop to java.lang.String\r\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:76) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:80) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.UnsafeQualifiedObjectFieldAccessorImpl.set(UnsafeQualifiedObjectFieldAccessorImpl.java:79) ~[na:na]\r\n\tat java.base/java.lang.reflect.Field.set(Field.java:799) ~[na:na]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:646) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\t... 17 common frames omitted\r\n```\r\n\r\nTurning a `record` into a bean is a bit odd. In any case, please clarify your assumptions as we can't really process this until we understand it."", '@snicoll I confirm that log is triggered.\r\n```\r\n o.s.b.f.a.AutowiredAnnotationBeanPostProcessor INFO Autowired annotation should only be used on methods with parameters: public java.lang.String io.example.showcase.MyRecord.prop()\r\n\r\n```', 'Thanks. ""logging a warning"" broke my brain, I was looking for a warning, not an info message. The bits on testing and use of record remains though.', '@snicoll Sorry for the misunderstanding, it is an INFO log, but communicating a sort of warning, didn\'t know how to call it. \r\n\r\nIt works well for me with the code I provided (+ basic Spring Boot project, latest, JDK 21 or 17).\r\n\r\nAs for `record` being odd when used as a bean. I was just experimenting with records + Spring. Using records as a bean seems mostly equivalent to e.g.:\r\n```java\r\n@Component\r\npublic class MyClass {\r\n  private String prop;\r\n  public MyClass(@Value(""${myProp}"") String prop) {\r\n    this.prop = prop;\r\n  }\r\n  // getter\r\n}\r\n```\r\n\r\nBut you\'re kinda right. Now that I think about the use cases, it might not be that needed. If I have some service that needs a property value, and I use a record for it, I\'d get an unwanted property accessor automatically, which is not great. I was thinking more like loading properties into a ""configuration"" carrying bean, but that\'s also possible with e.g.:\r\n```java\r\n@ConfigurationProperties(prefix = ""config"")\r\npublic record Config(String first, String second) {}\r\n```\r\nwhich works well.', '>  I was thinking more like loading properties into a ""configuration"" carrying bean,\r\n\r\nYeah, sorry. You\'re totally right. The `@Value` with a record makes sense indeed.', '@martin-lukas thanks very much for making your first contribution to Spring Framework.']"
70e6e3bb39c9db1a85a77411707fb560292b7b3e,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/sockjs/client/SockJsClient.java,Condition_Change,"-		if (!isRunning()) {
+		if (isRunning()) {",2,condition,Fix condition check in SockJsClient lifecycle method,,,,0,N/A,N/A,N/A,N/A,N/A
71463fb3991a2b7e8e79cafa91a824c51f4fc73a,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,Condition_Change,"-				if (this.alreadyCreated.add(beanName)) {
+				if (!this.alreadyCreated.contains(beanName)) {
+					this.alreadyCreated.add(beanName);
-		this.alreadyCreated.remove(beanName);
+		synchronized (this.mergedBeanDefinitions) {
+			this.alreadyCreated.remove(beanName);
+		}",7,condition,AbstractBeanFactory consistently guards add/remove operations against alreadyCreated Set,"Issue: SPR-14269
",,18841,1,['markBeanAsCreated does not clear merged bean definition in a thread-safe fashion [SPR-14269]'],"['**[Marcin Piela](https://jira.spring.io/secure/ViewProfile.jspa?name=mpiela)** opened **[SPR-14269](https://jira.spring.io/browse/SPR-14269?redirect=false)** and commented\n\nWhen creating a context and then calling `getBean` on it from multiple threads we sometimes get a `BeanInitializationException` from `RequiredAnnotationBeanPostProcessor.postProcessPropertyValues`.\nAttached is a simple maven project to reproduce. In a loop it:\n1. creates a fresh spring context\n2. attempts to fetch some beans from it in parallel.\n   The number of threads and max number of loop iterations can be passed as the first and second argument to the Main class.\n   Usage:\n   `mvn clean package && java -jar target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar`\n   We never get any errors when the getBean method is called from a single thread, so:\n   `java -jar target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar 1`\n   always works.\n   We don\'t get any errors for spring version 4.1.9, but as long as we switch to 4.2.0 or later the errors start occuring.\n   Example exception:\n\n```\nException in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'service-2\' defined in class path resource [example-context.xml]: Cannot resolve reference to bean \'bean_0_1\' while setting bean property \'bean_0_1\'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'bean_0_1\' defined in URL [jar:file:/home/mpiela/devel/repo/spring-bug/target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar!/test/Bean_0_1.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanInitializationException: Properties \'bean_1_0\' and \'bean_1_1\' are required for bean \'bean_0_1\'\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1481)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1226)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)\n\tat test.Main.lambda$tryToGetBean$0(Main.java:75)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'bean_0_1\' defined in URL [jar:file:/home/mpiela/devel/repo/spring-bug/target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar!/test/Bean_0_1.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanInitializationException: Properties \'bean_1_0\' and \'bean_1_1\' are required for bean \'bean_0_1\'\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)\n\t... 13 more\nCaused by: org.springframework.beans.factory.BeanInitializationException: Properties \'bean_1_0\' and \'bean_1_1\' are required for bean \'bean_0_1\'\n\tat org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.postProcessPropertyValues(RequiredAnnotationBeanPostProcessor.java:156)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)\n\t... 17 more\n```\n\n---\n\n**Affects:** 4.2.6\n\n**Attachments:**\n- [spring-bug.tar.gz](https://jira.spring.io/secure/attachment/23392/spring-bug.tar.gz) (_2.25 kB_)\n\n**Issue Links:**\n- #16851 Reduce BeanDefinition cloning in AbstractBeanFactory.getMergedBeanDefinition\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9064d38e4c77addbb5682e28e8c04df9fc8cd652, https://github.com/spring-projects/spring-framework/commit/71463fb3991a2b7e8e79cafa91a824c51f4fc73a, https://github.com/spring-projects/spring-framework/commit/933bbf2de90c720e6ada08089c3401317230d3b0, https://github.com/spring-projects/spring-framework/commit/6efa0589170fbcdd7fc0fe850d5b55b75918fdb2\n\n**Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)\n']",['closed'],[18],"['**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nthe method **markBeanAsCreated(String beanName)**  in AbstractBeanFactory is not thread safe.\nthread A and thread B try to call this method, A check **!this.alreadyCreated.contains(beanName)** return true, then call **this.alreadyCreated.add(beanName);** at this time B check **!this.alreadyCreated.contains(beanName)** return false, then B out of this method, but now A does not finish **clearMergedBeanDefinition(beanName);** then B call **getMergedLocalBeanDefinition(String beanName)** may return old BeanDefinition\n', '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nI have a pull request, https://github.com/spring-projects/spring-framework/pull/1059, please help to review.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nMoving the `this.alreadyCreated.add(beanName)` call right after `clearMergedBeanDefinition(beanName)` seems to be the most efficient way out here: In case of a race condition, we'll clear the merged bean definition too often but that's acceptable; we'll at least guarantee that subsequent steps will always see an up-to-date bean definition then.\n"", '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\n`@Juergen` Hoeller I have tried not adding synchronized (this.alreadyCreated), when running the test still throw the same exception with more attempts(one test happened after 239 attempts of 4 threads). You can have a try. I still do not know why it is happen, but it is actually happened.\n', '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nthe error just occurs just because the too ofter clear the merged bean definition in multi threads for method **protected RootBeanDefinition getMergedBeanDefinition(String beanName, BeanDefinition bd, BeanDefinition containingBd) throws BeanDefinitionStoreException** If thread A first clear merged bean then call **getMergedBeanDefinition** and create a new **RootBeanDefinition**, but thread B first clear the merged bean definition then call **getMergedBeanDefinition** and create another new **RootBeanDefinition**, there will be two different BeanDefinitions.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nSince `getMergedBeanDefinition` operates within a full lock, there should never be two different bean definitions stored there. Temporary use of two different (but equivalent) merged bean definitions is not an issue; we do that in other scenarios as well.\n\nHave you tried to reproduce this against the latest `4.3.0.BUILD-SNAPSHOT`? It would help a lot to isolate failures against that re-ordered but non-synchronized scenario since there might be some related bug lurking in our merged bean definition handling.\n', '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nI have download latest code and running ./gradlew install then using 4.3.0.BUILD-SNAPSHOT, the issues can be reproduced.\n', '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nif there are two different merged bean definitions for same beanName, the method **InjectionMetadata.checkPropertySkipping(PropertyValues pvs)** will not work correctly because same InjectionMetadata cached from **CommonAnnotationBeanPostProcessor.findResourceMetadata** for same beanName but different PropertyValues.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch! Thanks for the insight, I'll have another pass today.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've addressed this through synchronizing on `this.mergedBeanDefinitions` now, checking for `this.alreadyCreated.add(beanName)` within and clearing the merged bean definition if the `add` call returned `true`. We still do an non-synchronized `!this.alreadyCreated.contains(beanName)` first, so overall this should not cause any inefficiency in a fully initialized system.\n\nThe use of the `this.mergedBeanDefinitions` lock is in sync with `getMergedBeanDefinition`, in order to prevent interleaving with ongoing merge attempts as well (where an old version might get cached in certain race condition cases otherwise, e.g. with concurrent type matching attempts touching the same bean and the bean definition having been modified inbetween).\n"", '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\n`@Juergen` Do you test your code? I have test it and still can reproduce the issue. I have test my pull request via 8 thread and 40000 attempts without reproduce the issue.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIt'd be great if you could run your tests against the latest `4.3.0.BUILD-SNAPSHOT` again... Please make sure that it's actually the latest, not a locally cached old snapshot.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nOuch, there might indeed be a remaining issue since the `add` exposes itself for early `contains` checks again... I was just checking the re-merge behavior but not potential access to an old bean definition. Alright, one more pass coming here, moving the `add` to the end of the `synchronized` block.\n', '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nnot the issue of add method, the issue in your commit is same with no synchronized because the method getMergedLocalBeanDefinition(String beanName) are not synchronized in line 1176.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAs far as I can see, with the `add` moved, the code is analogous to your pull request now, just using a different lock to synchronize on.\n\n`getMergedLocalBeanDefinition` does not have to be synchronized from my perspective. As long as the `clearMergedBeanDefinition` call happens before we expose a bean as already created, any actual creation attempts will see the fresh bean definition. And for concurrent type matching purposes, an old bean definition is good enough.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nBTW, I'm currently working on a whole range of 4.2.x backports, so this fix will appear in the upcoming `4.2.7.BUILD-SNAPSHOT` as well (actually, there first).\n"", '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nI do not mean getMergedLocalBeanDefinition need synchronized, I mean non-syncrhonzied getMergedLocalBeanDefinition case your commit not work.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThat's true but it isn't meant to cover that case: The common lock is just intended to cover `mergedBeanDefinitions` add/remove attempts, where a remove does not happen while another thread is currently doing a merge (e.g. from a type match attempt) based on potentially outdated metadata... so it rather happens right afterwards then.\n\nIn any case, I can't reproduce the reported issue anymore with the `add` moved to the end of the `synchronized (mergedBeanDefinitions)` block, not even with 8 threads and 40.000 attempts. So I guess we can consider your case covered now? The current `4.2.7.BUILD-SNAPSHOT` and the upcoming `4.3.0.BUILD-SNAPSHOT` contain that candidate state.\n""]"
716e7de8415485dffe25aee446458deebf540c5c,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/SpelNodeImpl.java,Condition_Change,"-		if (typeDescriptor.startsWith(""["") || typeDescriptor.startsWith(""L"")) {
+		// If the SpEL exitDescriptor is not for a primitive (single character),
+		// ASM expects the typeDescriptor to end with a ';'.
+		if (typeDescriptor.length() > 1) {",2,condition,Simplify implementation of SpelNodeImpl.loadClassForExitDescriptor(...),,,,0,N/A,N/A,N/A,N/A,N/A
7244c9aea191d5afba4179e69a0139925206a9bd,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationsScanner.java,Condition_Change,"-		while (source != null && source != Object.class
-				&& !hasPlainJavaAnnotationsOnly(source) && remaining > 0) {
+		while (source != null && source != Object.class && remaining > 0
+				&& !hasPlainJavaAnnotationsOnly(source)) {
-				name.startsWith(""org.springframework.lang."");
+				name.startsWith(""org.springframework.lang."") ||
+				name.startsWith(""org.springframework.util."") ||
+				(name.startsWith(""com.sun"") && !name.contains(""Proxy""));",8,iteration,Add more aggressive annotation element filtering,"Refine the element filtering performed by `AnnotationsScanner` to also
cover `org.springframework.util` and most `com.sun` classes which turn
out to be referenced quite frequently and which we know contain no
useful annotations.

See gh-21697
",,21697,1,['Create replacement API for handling merged annotations [SPR-17161]'],"[""**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-17161](https://jira.spring.io/browse/SPR-17161?redirect=false)** and commented\r\n\r\nThe existing `AnnotationUtils` and `AnnotatedElementUtils` have grown quite a bit over the years and could do with being revisited now that we have pretty comprehensive support for merged annotations throughout the framework.\r\n\r\nSome common issues with the current utils classes include:\r\n\r\n* Quite a broad API (~58 public methods between them) that can make it hard for users to find the right method.\r\n* Some performance concerns. The classes often appear near the top when profiling applications and a typical application will synthesize quite a few annotations.\r\n* Difficult to evolve. We have some ideas around using annotation processing at compile time to pre-compute some information. It's quite hard to currently plug this in to the existing code.\r\n* Complicated meta-data relationships. There's quite a complicated relationship between `AnnotatedTypeMetadata` and the utils and the meta-data API is different.\r\n\r\nA new API could help us to determine which methods are really needed and provide the potential for more intelligent caching or pre-computed data.\r\n\r\n---\r\n\r\n**Affects:** 5.1 RC1\r\n""]",['closed'],[1],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nSome initial prototype work for this is here: https://github.com/philwebb/spring-framework/tree/annotations\n\nThe new API tries to separate the representation of merged annotations from the way that they\'re discovered. This helps to reduce the surface area of the API since `find...` vs `get...` semantic methods are no longer needed. For example, to get only the direct annotations and related meta-annotations you would call `MergedAnnotations.from(element, SearchStrategy.DIRECT)`. For a complete search of all superclasses and interface you would do  `MergedAnnotations.from(element, SearchStrategy.EXHAUSTIVE)`. Regardless of the method used to find the `MergedAnnotations`, the API is identical and contains contains methods to:\n\n* Determine if an annotation is present\n* Get a single merged annotation\n* Get a stream of a specific annotation type\n* Get a stream of all annotations\n\nThe `MergedAnnotation` interface allows you to inspect information about the annotation and `synthesize` it if required. The method on the interface are also designed to be used when working with streams. Some typical examples:\n\n```java\n// is an annotation present or meta-present\nmergedAnnotations.isPresent(ExampleAnnotation.class);\n\n// get the merged ""value"" attribute of ExampleAnnotation (either direct or meta-present)\nmergedAnnotations.get(ExampleAnnotation.class).getString(""value"");\n\n// get all meta-annotations but no direct annotations\nmergedAnnotations.stream().anyMatch(MergedAnnotation::isMetaPresent);\n\n// get all ExampleAnnotation declarations (include any meta-annotations) and print the merged ""value"" attributes\nmergedAnnotations.stream(ExampleAnnotation.class).map(a -> a.getString(""value"")).forEach(System.out::println);\n \n```\n\n']"
72590dbb21048245e0af2ea507e7b0896330e89d,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java,Add_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-					return getCachedProducer((Destination) args[0]);
+					Destination dest = (Destination) args[0];
+					if (!(dest instanceof TemporaryQueue || dest instanceof TemporaryTopic)) {
+						return getCachedProducer(dest);
+					}",5,condition,CachingConnectionFactory does not cache producer for temporary queue/topic,"Issue: SPR-16353
",,20900,1,['JMS Producers are cached even when the destination is a temporary queue causing a memory leak [SPR-16353]'],"[""**[Facundo Velazquez](https://jira.spring.io/secure/ViewProfile.jspa?name=facundovs)** opened **[SPR-16353](https://jira.spring.io/browse/SPR-16353?redirect=false)** and commented\n\nLooking at the code, in CachingConnectionFactory class, I can see [this fix](https://github.com/spring-projects/spring-framework/commit/b91e989ad4eb99999fc16944f37509b6bec06901) was added some years ago for fixing the same case but on the consumer side.\nHowever, [Temporary queue producers are always cached](https://github.com/spring-projects/spring-framework/blob/master/spring-jms/src/main/java/org/springframework/jms/connection/CachingConnectionFactory.java#L325).\n\nThis scenario was discovered in a request-response scenario which is causing a memory leak in the Mule ESB.  At least from my perspective, it doesn't make sense, since temporary queues producers won't be used more than once.\n\n---\n\n**Affects:** 4.3.13, 5.0.2\n\n**Issue Links:**\n- #20995 CachingConnectionFactory - Invalid session in session cache\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/72590dbb21048245e0af2ea507e7b0896330e89d, https://github.com/spring-projects/spring-framework/commit/bf4cadaddaae4c89c1015bf9a75b6954f0637313\n\n**Backported to:** [4.3.14](https://github.com/spring-projects/spring-framework/milestone/163?closed=1)\n""]",['closed'],[4],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIndeed, we need to skip caching for temporary destinations with producers as well. Fixed for 5.0.3 now, and to be backported to 4.3.14.\n', '**[Facundo Velazquez](https://jira.spring.io/secure/ViewProfile.jspa?name=facundovs)** commented\n\nHi Juergen Hoeller. Thank you very much for the fix!\nPlease let me know if you have an ETA for the 4.3.14 release.\nRegards.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nOur current target dates are always up on the roadmap page: https://jira.spring.io/browse/SPR/?selectedTab=com.atlassian.jira.jira-projects-plugin:roadmap-panel\n\nFor 4.3.14, it's currently January 18th. It may move by a few days but it's definitely going out in January still.\n"", '**[Facundo Velazquez](https://jira.spring.io/secure/ViewProfile.jspa?name=facundovs)** commented\n\nThank you!\n']"
72685b1d819d0fda74ebf17a489080059051baed,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/FileCopyUtils.java,Remove_Condition,"-	 * Close the {@link Closeable} as a null-safety.
-	 *
-	 * @param closeable to close, may be null.
+	 * Attempt to close the supplied {@link Closeable}, silently swallowing any
+	 * exceptions.
+	 * @param closeable the {@code Closeable} to close
-	private static void close(@Nullable Closeable closeable) {
-		if (closeable == null) return;
+	private static void close(Closeable closeable) {
-		} catch (IOException e) {
-			// do nothing
+		} catch (IOException ex) {
+			// ignore",5,condition,Polish contribution,"See gh-24393
",,24393,1,['Add close() method in FileCopyUtils to reduce duplication'],['That can be reduced by the close method.'],['closed'],[1],['This has been merged into `master` and revised in 72685b1d819d0fda74ebf17a489080059051baed.\r\n\r\nThanks']
739d2881faf7d98bfbf09cab3a5fae0f2e87497d,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/annotation/support/PrincipalMethodArgumentResolver.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
- * {@link HandlerMethodArgumentResolver} to a {@link Principal} or {@link Optional} of {@link Principal}.
+ * Resolver for arguments of type {@link Principal}, including {@code Optional<Principal>}.
-		if (parameter.isOptional()) {
-			return Optional.ofNullable(user);
-		} else {
-			return user;
-		}
+		return parameter.isOptional() ? Optional.ofNullable(user) : user;",6,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
7582adc0bc4d9456465338f92198fbcbdc84151a,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/server/RequestPredicates.java,Add_Condition,"+			if (requestPath.endsWith(""/"") && !subPath.endsWith(""/"")) {
+				subPath += ""/"";
+			}",3,condition,Fix trailing slash in nested path,"This commit adds a trailing slash to the nested path if the request path
also ends with a slash. For instance, given the request ""/foo/bar/"", and
nested path pattern ""/foo/**"", we expect the nested path to be “/bar/”,
not “/bar"".
",,,0,N/A,N/A,N/A,N/A,N/A
772a26a743466ef84239aa97f1e07560426ad71b,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java,Condition_Change,"-			if (beanName != null && this.beanFactory.containsBean(beanName)) {
+			if (beanName != null && this.beanFactory.containsBeanDefinition(beanName)) {",2,condition,polishing,"Issue: SPR-12761
",,17358,1,['ProxyAsyncConfiguration is eagerly loaded due to AsyncAnnotationBeanPostProcessor [SPR-12761]'],"[""**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** opened **[SPR-12761](https://jira.spring.io/browse/SPR-12761?redirect=false)** and commented\n\nThe test-case to reproduce:\n\n```java\n@ContextConfiguration\n@RunWith(SpringJUnit4ClassRunner.class)\npublic class EnableAsyncTests {\n\n\t@Test\n\tpublic void testIt() {}\n\n\t@Configuration\n\t@EnableAsync\n\tpublic static class ContextConfiguration {\n\n\t}\n\n}\n```\n\nAnd we see in logs:\n\n```\n2015-02-27 12:47:46,007 INFO PostProcessorRegistrationDelegate$BeanPostProcessorChecker [main] : Bean 'org.springframework.scheduling.annotation.ProxyAsyncConfiguration' of type [class org.springframework.scheduling.annotation.ProxyAsyncConfiguration$$EnhancerBySpringCGLIB$$5806bc78] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)\n```\n\nAs far as I can tell making `ProxyAsyncConfiguration.asyncAdvisor()` bean-method as `static` should fix the issue, because `AsyncAnnotationBeanPostProcessor` is `BeanPostProcessor`.\n\n\n---\n\n**Affects:** 4.1.5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/772a26a743466ef84239aa97f1e07560426ad71b, https://github.com/spring-projects/spring-framework/commit/31df7155ab40e6f4b98f4fd46ad9229031a716c4\n""]",['closed'],[3],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nUnfortunately, just making it `static` won't work since the arrangement relies on `ImportAware` processing which is only available for non-static configuration class instances.\n\nI suppose this eager loading of the configuration class doesn't cause any actual issues to begin with. So we could also re-consider refining `BeanPostProcessorChecker` towards ignoring synthetic beans, and making sure that `@Enable`-triggered beans are indeed marked as synthetic. This is not the first time we're considering this, after all.\n\nJuergen\n"", ""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nRevisited the condition to exclude infrastructure beans as those won't be a target for such post-processing.\n"", '**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** commented\n\nGreat! Thank you, [Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)!\nWith that we can mark some our internal beans with `ROLE_INFRASTRUCTURE` to avoid that noise as well.\n']"
775ffbe10b89d419a4d2a1409eccaf51188f93a9,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java,Condition_Change,"-		if (path.contains(""../"")) {
+		if (path.contains("".."")) {",2,condition,Improve static resource path check,,,,0,N/A,N/A,N/A,N/A,N/A
7772b914c694b5b16d6e9c9f56acf7b03b47f9d4,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,Condition_Change,"-			if (ex instanceof BeanCurrentlyInCreationException) {
+			if (ex.contains(BeanCurrentlyInCreationException.class)) {",2,condition,Deep BeanCurrentlyInCreationException check in getTypeForFactoryBean,"Issue: SPR-16427
",,20973,1,"[""Spurious WARNINGs when XML declared TransactionProxyFactoryBean's target bean depends on an annotation declared bean that depends on another bean [SPR-16427]""]","['**[Andrew H](https://jira.spring.io/secure/ViewProfile.jspa?name=meowpressreturn)** opened **[SPR-16427](https://jira.spring.io/browse/SPR-16427?redirect=false)** and commented\n\nWhile trying to update some old XML configured code to use annotation configuration for bean declarations I started to see many WARNINGs about BeanCreationException in my log on startup.\n\nHaving spend quite some time trying to find where I had created a circular dependency in my beans, I realised that I hadn\'t and that the WARNINGs were all associated with XML declarations of TransactionProxyFactoryBean. I did some experimentation and created a small project to reproduce the issue in isolation.\n\nConsider the following bean configuration:\n\n**transactionManager**- A no-op dummy implementation of PlatformTransactionManager declared in XML\n\n**bazBean**- A TransactionProxyFactoryBean whose target is bazBean_target\n\n**bazBean_target**, A BazBean that can be declared with XML or with `@Component`, its constructor takes a BarBean\n\n**barBean**- A BarBean declared using `@Component`, its constructor takes a FooBean\n\n**fooBean** - A FooBean declared using XML or `@Component`, its constructor takes no arguments\n\nFor the example, none of these beans need have any methods or actually do anything. The BazBean and BarBean classes use constructor injection, and FooBean has no dependencies. It is necessary for BarBean to depend on another bean. If BarBean has no dependencies then the WARNING doesn\'t occur.\n\nThe above configuration (with bazBean_target in xml) will result in the following 1 warning being logged on startup:\n\n_WARNING: Bean creation exception on non-lazy FactoryBean type check: org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'bazBean\' defined in class path resource [context.xml]: Cannot resolve reference to bean \'bazBean_target\' while setting bean property \'target\'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'bazBean_target\' defined in class path resource [context.xml]: Cannot resolve reference to bean \'barBean\' while setting constructor argument; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name \'barBean\': Requested bean is currently in creation: Is there an unresolvable circular reference?_\n\nIf you define bazBean_target using `@Component` you will get the following 2 warnings logged:\n\n\\_WARNING: Bean creation exception on non-lazy FactoryBean type check: org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'bazBean\' defined in class path resource [context.xml]: Cannot resolve reference to bean \'bazBean_target\' while setting bean property \'target\'; nested exception is org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name \'bazBean_target\' defined in file [C:\\dev\\beancreationwarning\\target\\classes\\com\\example\\beancreationwarning\\beans\\BazBean.class]: Unsatisfied dependency expressed through constructor parameter 0; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name \'barBean\': Requested bean is currently in creation: Is there an unresolvable circular reference?\nJan 28, 2018 7:51:12 PM org.springframework.beans.factory.support.AbstractBeanFactory getTypeForFactoryBean\nWARNING: Bean creation exception on non-lazy FactoryBean type check: org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'bazBean\' defined in class path resource [context.xml]: Cannot resolve reference to bean \'bazBean_target\' while setting bean property \'target\'; nested exception is org.springframework.beans.factory.BeanCurrentlyInCreationException: Error creating bean with name \'bazBean_target\': Requested bean is currently in creation: Is there an unresolvable circular reference?_\n\nThe beans do get created and work fine.\n\nThe order of annotated bean creation plays a role:\n\nIn the above example, if you declare another bean using `@Component` that depends on a BarBean and its classname comes alphabetically before BarBean - say ""Aardvard"" for example, then the warning on bazBean vanishes, but if you rename Aardvark to Zebra, the warning will return.\n\nI have not experimented to determine if the issue occurs with Java Config or with other types of ProxyFactoryBean. It is present in Spring 4.3.14 and 5.0.3 (and I would suspect earlier versions, but haven\'t verified)\n\n---\n\n**Affects:** 4.3.14, 5.0.3\n\n**Attachments:**\n- [beancreationwarning_20180129T123600.zip](https://jira.spring.io/secure/attachment/25355/beancreationwarning_20180129T123600.zip) (_7.43 kB_)\n\n**Issue Links:**\n- #21024 Errors when Java Config declared TransactionProxyFactoryBean\'s target bean depends on an annotation declared bean that depends on another bean\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/65743a68e6c3c4a12128d2093ec9be2f4954767f, https://github.com/spring-projects/spring-framework/commit/7772b914c694b5b16d6e9c9f56acf7b03b47f9d4\n\n**Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)\n']",['closed'],[1],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis turns out to be a suboptimal check in `getTypeForFactoryBean`: We should not only check the outer exception for a `BeanCurrentlyInCreationException` but also its underlying causes. Fixed for 5.0.4 now, and to be backported to 4.3.15.\n']"
7816c9e411578493407533315030c476daf160c3,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java,Condition_Change,"-import org.springframework.aot.AotDetector;
-
- * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} (when not using
- * AOT-processed optimizations) for checking debug information in the class file.
+ * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} (when not in
+ * a native image) for checking debug information in the class file.
-		if (!AotDetector.useGeneratedArtifacts()) {
+		if (!NativeDetector.inNativeImage()) {",4,condition,Exclude LocalVariableTableParameterNameDiscoverer based on native image check,"See gh-29531
",,29531,1,['Deprecate `LocalVariableTableParameterNameDiscoverer` completely (avoiding its exposure in native images)'],['`DefaultParameterNameDiscoverer` should be updated to not use `LocalVariableTableParameterNameDiscoverer` when running as a native image.'],['closed'],[7],"['I think this should behave the same way on the JVM. the check should be on AOT not native. ', ""Could be great for consistency indeed even if technically on JVM + AOT we have to the capability to use it. Let's validate the choice in today's Framework meeting."", 'I updated the PR accordingly.', ""An interesting case in terms of automatic exclusion indeed.\r\n\r\nWe certainly don't want to support that parameter name discovery strategy in a native image (where the underlying class files are generally not available), and it's not recommended in any other scenario either... since you can always compile with `-parameters` instead, with no need to parse class files then. In such a recommended setup, `StandardReflectionParameterNameDiscoverer` will always be able to resolve the parameter names first, so `LocalVariableTableParameterNameDiscoverer` will never actually be reached.\r\n\r\nFrom that perspective, for a setup following Java 8+ recommendations, `LocalVariableTableParameterNameDiscoverer` could even be removed completely. It's only really there for backwards compatibility with older setups that got migrated without `-parameters`. Baking that assumption into our AOT arrangement - namely that you need to compile with `-parameters` when you are optimizing for AOT, completely avoiding unnecessary class file parsing - seems sensible."", ""I'm afraid we'll have to return to a `NativeDetector` check here since `AotDetector` is in the higher-level `aot` package whereas `DefaultParameterNameDiscoverer` is a very low-level `core` component. Since there is no significant difference to be expected in practice, I don't think the cycle-free narrower check matters. After all, `LocalVariableTableParameterNameDiscoverer` is effectively not applicable in a native image due to its class file parsing approach, so it arguably does make sense to exclude it on that basis and rely on `-parameters` usage by convention."", ""Reopening this one after a team discussion: It is ultimately preferable to deprecate `LocalVariableTableParameterNameDiscoverer` completely, not using it by default in any setup anymore, since that class file parsing strategy has been long superseded by the Java 8 `-parameters` flag on `javac` already.\r\n\r\nWe have considered doing this before and meant to address the native image impact of it in 6.0 but somehow missed this last week. So let's fix this glitch now, in time for the Boot 3.0 GA release, with a note in the upgrade wiki page."", ""As a lenient measure for the transition period, we'll keep `LocalVariableTableParameterNameDiscoverer` active on the JVM but log a warning for each successful parameter name resolution. This will only be logged when parameter names actually need to be inspected, and only when `StandardReflectionParameterNameDiscoverer` did not return anything, suggesting that compilation with `-parameters` has been missed somewhere.""]"
78549d4963a15c6decfd17ea9be15f27c3cdc03c,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/client/reactive/JdkClientHttpRequest.java,Add_Condition,"+import org.springframework.util.MultiValueMap;
-		this.builder.header(HttpHeaders.COOKIE, getCookies().values().stream()
-				.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining("";"")));
+		MultiValueMap<String, HttpCookie> cookies = getCookies();
+		if (!cookies.isEmpty()) {
+			this.builder.header(HttpHeaders.COOKIE, cookies.values().stream()
+					.flatMap(List::stream).map(HttpCookie::toString).collect(Collectors.joining("";"")));
+		}",8,condition,Fix cookie management in reactive JdkClientHttpRequest,"Prevent cookies to be set to empty in the HTTP request if no cookie
is present

See gh-32799
",,32799,1,['Do not send Cookie header in reactive JdkClientHttpRequest if no cookies added'],['Prevent cookies to be set to empty in the HTTP request if no cookie is present.\r\nThe `Cookie` header should not be sent if no cookie is set in the HTTP message.'],['closed'],[0],[]
787b09b202f0eb507d5e5c687bde5282c5a6bb22,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
- * {@link KotlinReflectionParameterNameDiscoverer} is added first in the list and used
- * for Kotlin classes and interfaces. When compiling or running as a Graal native image,
- * no {@link ParameterNameDiscoverer} is used.
+ * {@link KotlinReflectionParameterNameDiscoverer} is added first in the list and
+ * used for Kotlin classes and interfaces. When compiling or running as a GraalVM
+ * native image, the {@code KotlinReflectionParameterNameDiscoverer} is not used.
+ * @author Sam Brannen
-		if (!GraalDetector.inImageCode()) {
-			if (KotlinDetector.isKotlinReflectPresent()) {
-				addDiscoverer(new KotlinReflectionParameterNameDiscoverer());
-			}
-			addDiscoverer(new StandardReflectionParameterNameDiscoverer());
-			addDiscoverer(new LocalVariableTableParameterNameDiscoverer());
+		if (KotlinDetector.isKotlinReflectPresent() && !GraalDetector.inImageCode()) {
+			addDiscoverer(new KotlinReflectionParameterNameDiscoverer());
+		addDiscoverer(new StandardReflectionParameterNameDiscoverer());
+		addDiscoverer(new LocalVariableTableParameterNameDiscoverer());",10,condition,Relax GraalVM check in DefaultParameterNameDiscoverer,"Prior to this commit, DefaultParameterNameDiscoverer did not register
any discovers when compiling or running as a GraalVM native image.

This commit relaxes the GraalVM check so that it is only applied to the
registration of KotlinReflectionParameterNameDiscoverer.

Consequently, StandardReflectionParameterNameDiscoverer and
LocalVariableTableParameterNameDiscoverer are once again always
registered by DefaultParameterNameDiscoverer.

Closes gh-24600
",,24600,1,['Relax GraalVM checks in DefaultParameterNameDiscoverer'],"['## Status Quo\r\n\r\n`DefaultParameterNameDiscoverer` does not register any default discoverers when running within a GraalVM native image; however, the `LocalVariableTableParameterNameDiscoverer` works properly given appropriate entries in the `resource-config.json` and `reflect-config.json` GraalVM native image configuration files.\r\n\r\nThough not yet verified, `StandardReflectionParameterNameDiscoverer` may potentially work in a current (or future) GraalVM release.\r\n\r\n## Proposal \r\n\r\nWe should relax the checks performed in `DefaultParameterNameDiscoverer` in order to give `LocalVariableTableParameterNameDiscoverer` and `StandardReflectionParameterNameDiscoverer` a chance to work.']",['closed'],[0],[]
7a0e5a378a04817805ddaac30310fb10b12970b7,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ChannelSendOperator.java,Condition_Change,"-		if (key == IntAttr.PREFETCH) {
+		if (key == Attr.PREFETCH) {
-		if (key == ScannableAttr.PARENT) {
+		if (key == Attr.PARENT) {",4,condition,Update for reactor-core change,,,,0,N/A,N/A,N/A,N/A,N/A
7b2c74b05c5ca195f7259e1c4e6a2e94737eb613,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/beanvalidation/MethodValidationPostProcessor.java,Add_Condition,"-		this.validator = validator;
+		if(validator instanceof LocalValidatorFactoryBean) {
+			this.validator = ((LocalValidatorFactoryBean) validator).getValidator();
+		}
+		else {
+			this.validator = validator;
+		}",7,condition,Improving method validation support for BV 1.1,"Update MethodValidationPostProcessor.setValidator(...) to use
LocalValidatorFactoryBean.getValidator() when possible.

This is required because LocalValidatorFactoryBean does not directly
implement the forExecutables() method introduced in bean validation v1.1.

Issue: SPR-10644
",,15272,1,['AbstractMethodError thrown within MethodValidationInterceptor [SPR-10644]'],"['**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** opened **[SPR-10644](https://jira.spring.io/browse/SPR-10644?redirect=false)** and commented\n\nI\'ve filed so many bugs since 4.M1 came out, I don\'t know whether y\'all are gonna love me or hate me. :-)\n\nI have the following interface and implementation:\n\n```\n@Validated\npublic interface EmployeeService\n{\n    public void saveEmployee(\n            @NotNull(message = ""{validate.employeeService.saveEmployee}"")\n            @Valid Employee employee\n    );\n\n    public Employee getEmployee(\n            @Min(value = 1L,\n                    message = ""{validate.employeeService.getEmployee.id}"") long id\n    );\n\n    @NotNull\n    public List<Employee> getAllEmployees();\n}\n```\n\n```\n@Service\npublic class DefaultEmployeeService implements EmployeeService\n{\n    @Override\n    public void saveEmployee(Employee employee)\n    {\n        // no-op\n    }\n\n    @Override\n    public Employee getEmployee(long id)\n    {\n        return null;\n    }\n\n    @Override\n    public List<Employee> getAllEmployees()\n    {\n        return null; // to force trigger a validation error\n    }\n}\n```\n\nI then have a simple controller that uses the service:\n\n```\n@Controller\npublic class EmployeeController\n{\n    @Inject EmployeeService employeeService;\n\n    @RequestMapping(value = ""/"", method = RequestMethod.GET)\n    public String listEmployees(Map<String, Object> model)\n    {\n        model.put(""employees"", this.employeeService.getAllEmployees());\n        return ""employee/list"";\n    }\n}\n```\n\nI defined a `MethodValidationPostProcessor`, which attaches a `MethodValidationInterceptor` to my `DefaultEmployeeService` methods. When I go to the handler method in the browser, I get this error:\n\n```\njava.lang.AbstractMethodError: org.springframework.validation.beanvalidation.LocalValidatorFactoryBean.forExecutables()Ljavax/validation/executable/ExecutableValidator;\n\tsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tjava.lang.reflect.Method.invoke(Method.java:491)\n\torg.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:191)\n\torg.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:176)\n\torg.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:118)\n\torg.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\torg.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:207)\n\tcom.sun.proxy.$Proxy36.getAllEmployees(Unknown Source)\n\tcom.wrox.site.EmployeeController.listEmployees(EmployeeController.java:23)\n\tsun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tsun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tsun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tjava.lang.reflect.Method.invoke(Method.java:491)\n\torg.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:219)\n\torg.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)\n\torg.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)\n\torg.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:747)\n\torg.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:688)\n\torg.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)\n\torg.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)\n\torg.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)\n\torg.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:946)\n\torg.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:837)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:621)\n\torg.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:822)\n\tjavax.servlet.http.HttpServlet.service(HttpServlet.java:728)\n\torg.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:83)\n```\n\nThis is because `LocalValidatorFactoryBean` (`SpringValidatorAdapter`) does not implement `forExecutables`. Here\'s what the JavaDoc has to say about that:\n\n> Note that Bean Validation 1.1\'s #forExecutables method isn\'t supported: We do not expect that method to be called by application code; consider MethodValidationInterceptor instead. If you really need programmatic #forExecutables access, inject this class as a ValidatorFactory and call getValidator() on it, then #forExecutables on the returned native Validator reference instead of directly on this class.\n\nWell, I am using a `MethodValidationInterceptor`. `MethodValidationInterceptor` calls `forExecutables`, so I\'m sure you can see the problem here. I managed to work around this by changing my post-processor definition from this:\n\n```\n@Bean\npublic MethodValidationPostProcessor methodValidationPostProcessor()\n{\n    MethodValidationPostProcessor processor =\n            new MethodValidationPostProcessor();\n    processor.setValidator(this.localValidatorFactoryBean());\n    return processor;\n}\n```\n\nTo this:\n\n```\n@Bean\npublic MethodValidationPostProcessor methodValidationPostProcessor()\n{\n    MethodValidationPostProcessor processor =\n            new MethodValidationPostProcessor();\n    processor.setValidator(this.localValidatorFactoryBean().getValidator());\n    return processor;\n}\n```\n\nHowever, this is non-obvious and certainly not documented clearly.\n\nI see no reason for the restriction documented on `LocalValidatorFactoryBean` regarding `forExecutables`. There\'s no reason that `SpringValidatorAdapter` can\'t implement this method. If the underlying `Validator` is BV 1.1, great. If it\'s not, the call to the method will throw an `AbstractMethodError`. But it already does that now, just always, even if the `Validator` is BV 1.1.\n\nI\'ll send in a pull request shortly.\n\n\n---\n\n**Affects:** 4.0 M1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7b2c74b05c5ca195f7259e1c4e6a2e94737eb613, https://github.com/spring-projects/spring-framework/commit/84249740b85e6b414a6969d79aa2bb73602dedd6\n']",['closed'],[4],"[""**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** commented\n\nHmmm. This wasn't as easy as I thought it was going to be. `forExecutables` returns a type that is also new to BV 1.1, so I can't just add a method that isn't `@Override` but has the same signature and return type. So, the way I see it, we have two options:\n\n1) Upgrade the library to BV 1.1, implement the method, and then document that the method is not supported and throws `AbstractMethodError` if you're using BV 1.0 instead of 1.1 (not a huge change from now, but makes configuration more obvious, so I'm for this one).\n\n2) Update the `MethodValidationInterceptor` (or would `MethodValidationPostProcessor` be better?) to detect if its `Validator` is a `SpringValidatorAdapter` and get the underlying `Validator` in that case. This would achieve the simplification of configuration without upgrading to BV 1.1. However, it feels like a hack to me. I'm open to this idea, and will submit a pull request if y'all think it's the best route to take.\n\nThoughts?\n"", '**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nI think we will want to retain BV 1.0 support at least with Spring 4.0 so option 2 would look better to me.\n\nWhat about changing `MethodValidationPostProcessor.setValidator`\n\n```java\npublic void setValidator(Validator validator) {\n\tif(validator instanceof ValidatorFactory) {\n\t\tthis.validator = ((ValidatorFactory) validator).getValidator();\n\t}\n\telse {\n\t\tthis.validator = validator;\n\t}\n}\n```\n\nWould that work?\n', '**[Nick Williams](https://jira.spring.io/secure/ViewProfile.jspa?name=guitarking117)** commented\n\nAgreed. I had already implemented this in my local repository and verified that it resolved the issue I was seeing. I have now pushed the commit and submitted a pull request.\n\nhttps://github.com/SpringSource/spring-framework/pull/305\n', '**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nThanks, I have applied this with the minor change of checking for `LocalValidatorFactoryBean` rather than `ValidatorFactory`.\n']"
7b3f5fd855fe822ef1bfb21c3fa0d430c0713e39,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ResourceUtils.java,Add_Condition,"-			// Tomcat's ""jar:war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt""
+			// Tomcat's ""war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt""
+			if (URL_PROTOCOL_WAR.equals(jarUrl.getProtocol())) {
+				return new URL(warFile);
+			}
-	 * <p>Furthermore, this method works on JDK 1.4 as well,
-	 * in contrast to the {@code URL.toURI()} method.",3,condition,ResourceUtils.extractArchiveURL properly deals with top-level war URLs,"Issue: SPR-15556
",,20115,1,['ResourceUtils.extractArchiveURL fails to work under Tomcat 8.0.41 with unpackWARs=false [SPR-15556]'],"['**[Alexey Veklov](https://jira.spring.io/secure/ViewProfile.jspa?name=veklov)** opened **[SPR-15556](https://jira.spring.io/browse/SPR-15556?redirect=false)** and commented\n\nHi\n\nIt looks like ResourceUtils.extractArchiveURL also has an issue (Spring 4.3.8.RELEASE).\n\nSee comments in below snippet (marked with AV):\n\n```\npublic static URL extractArchiveURL(URL jarUrl) throws MalformedURLException {\n           // AV jarUrl = war:file:/C:/<...>.war*/<...>/<...>.css\n     String urlFile = jarUrl.getFile();\n           // AV urlFile = file:/C:/<...>.war*/<...>/<...>.css\n     int endIndex = urlFile.indexOf(WAR_URL_SEPARATOR);\n     if (endIndex != -1) {\n          // Tomcat\'s ""jar:war:file:...mywar.war*/WEB-INF/lib/myjar.jar!/myentry.txt""\n          String warFile = urlFile.substring(0, endIndex);\n          int startIndex = warFile.indexOf(WAR_URL_PREFIX); // AV <-- startIndex == -1\n          if (startIndex != -1) {\n                    return new URL(warFile.substring(startIndex + WAR_URL_PREFIX.length()));\n           }\n      }\n      // Regular ""jar:file:...myjar.jar!/myentry.txt""\n      return extractJarFileURL(jarUrl);\n }\n```\n\n---\n\n**Affects:** 4.3.8\n\n**Issue Links:**\n- #19895 PathMatchingResourcePatternResolver fails to work under Tomcat 8.0.41 with unpackWARs=false\n- #20240 Classpath Resource URL handling still wrong with Tomcat 8.5.12\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c6deeb31ecc73f56b3b5d43df4cd87fe8112814d, https://github.com/spring-projects/spring-framework/commit/7b3f5fd855fe822ef1bfb21c3fa0d430c0713e39\n']",['closed'],[0],[]
7b95bd72f7e9922f655c582f47c2fe80d8664a1b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java,Condition_Change,"-		if (mimeTypes.size() >= 50) {
+		if (mimeTypes.size() > 50) {",2,condition,"Fix condition for ""Too many elements"" in MimeTypeUtils.sortBySpecificity()","See gh-31254
Closes gh-31769
",,"31254, 31769",2,"['HeaderContentNegotiationStrategy.resolveMediaTypes throws unexpected IllegalArgumentException ', 'Fix condition for ""Too many elements"" in `MimeTypeUtils.sortBySpecificity()`']","['**Affects:** 6.0.11\r\n\r\nParsing of http accept header throws IllegalArguemntException which is unexpected, and causes unexpected application behavior.\r\nExample stack trace\r\n\r\n```\r\nToo many elements\r\njava.lang.IllegalArgumentException: Too many elements\r\nat org.springframework.util.Assert.isTrue(Assert.java:122)\r\nat org.springframework.util.MimeTypeUtils.sortBySpecificity(MimeTypeUtils.java:365)\r\nat org.springframework.web.accept.HeaderContentNegotiationStrategy.resolveMediaTypes(HeaderContentNegotiationStrategy.java:55)\r\nat org.springframework.web.accept.ContentNegotiationManager.resolveMediaTypes(ContentNegotiationManager.java:128)\r\nat org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getAcceptedMediaTypes(ProducesRequestCondition.java:290)\r\nat org.springframework.web.servlet.mvc.condition.ProducesRequestCondition.getMatchingCondition(ProducesRequestCondition.java:208)\r\nat org.springframework.web.servlet.mvc.method.RequestMappingInfo.getMatchingCondition(RequestMappingInfo.java:401)\r\nat org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:110)\r\nat org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping.getMatchingMapping(RequestMappingInfoHandlerMapping.java:68)\r\n```\r\n\r\nClass HeaderContentNegotiationStrategy currently catches only InvalidMediaTypeException, but IllegalArgumentException can also be thrown here.\r\n```\r\npublic List<MediaType> resolveMediaTypes(NativeWebRequest request)\r\n\t\t\tthrows HttpMediaTypeNotAcceptableException {\r\n\r\n\t\tString[] headerValueArray = request.getHeaderValues(HttpHeaders.ACCEPT);\r\n\t\tif (headerValueArray == null) {\r\n\t\t\treturn MEDIA_TYPE_ALL_LIST;\r\n\t\t}\r\n\r\n\t\tList<String> headerValues = Arrays.asList(headerValueArray);\r\n\t\ttry {\r\n\t\t\tList<MediaType> mediaTypes = MediaType.parseMediaTypes(headerValues);\r\n\t\t\tMimeTypeUtils.sortBySpecificity(mediaTypes);\r\n\t\t\treturn !CollectionUtils.isEmpty(mediaTypes) ? mediaTypes : MEDIA_TYPE_ALL_LIST;\r\n\t\t}\r\n\t\tcatch (InvalidMediaTypeException ex) {\r\n\t\t\tthrow new HttpMediaTypeNotAcceptableException(\r\n\t\t\t\t\t""Could not parse \'Accept\' header "" + headerValues + "": "" + ex.getMessage());\r\n\t\t}\r\n\t}\r\n```\r\nplease consider changing of this catch to IllegalArgumentException (InvalidMediaTypeException  is a subclass of IllegalArgumentException). This change would make behavior more predictable. \r\n\r\n\r\n\r\n\r\n', 'This PR fixes condition for ""Too many elements"" in `MimeTypeUtils.sortBySpecificity()` that seems to have been changed accidentally in 05c3ffb2fbdf358c6a23309a3118b0a64ecb4b40 to align with its Javadoc again.\r\n\r\nSee gh-31254']","['closed', 'closed']","[5, 5]","[""Good catch!\r\n\r\nAlthough this is very minor, it is technically a regression. \r\n\r\nSo I've labeled it as such, and we'll back port it to 6.0.x"", ""@sbrannen in #31254 it was notified `MimeTypeUtils.sortBySpecificity` was throwing an `IllegalArgumentException` when the number of MimeTypes in the Accept header was greater than 50. \r\n\r\nTo fix it, the proposed change was to modify `HeaderContentNegotiationStrategy` to catch `IllegalArgumentExceptiion` instead of `InvalidMediaTypeException` (`InvalidMediaTypeException` is a sub-type of `IllegalArgumentException`).\r\n\r\nInstead, the `assert` that was throwing the `IllegalArgumentException` was replaced by an `if` condition that throws `InvalidMimeTypeException` which is a sub-type of `IllegalArgumentException`.\r\n\r\nTherefore, the same runtime problem is being reproduced. Only changed `IllegalArgumentException` with `InvalidMimeTypeException`.\r\n\r\nThis problem was reported in this issue and it was just changed the `if` statement replacing the `>=` with `>`.\r\n\r\nWhy haven't you changed the `catch` clause as originally requested in #31254? The same runtime crash is still happening."", '@jandroalvarez, please note that this PR was closed over 3 months ago in 6.1.2.\r\n\r\nIf you believe you have discovered a further regression or bug, please open a new issue.\r\n\r\nThanks', 'To answer your question, it appears there may have been an oversight.\r\n\r\n> Why haven\'t you changed the `catch` clause as originally requested in #31254? The same runtime crash is still happening.\r\n\r\nI suppose you\'re proposing to change what we currently have from:\r\n\r\n```java\r\ncatch (InvalidMediaTypeException ex) {\r\n\tthrow new HttpMediaTypeNotAcceptableException(\r\n\t\t\t""Could not parse \'Accept\' header "" + headerValues + "": "" + ex.getMessage());\r\n}\r\n```\r\n\r\nTo:\r\n\r\n```java\r\ncatch (InvalidMediaTypeException | InvalidMimeTypeException ex) {\r\n\tthrow new HttpMediaTypeNotAcceptableException(\r\n\t\t\t""Could not parse \'Accept\' header "" + headerValues + "": "" + ex.getMessage());\r\n}\r\n```\r\n\r\nOr:\r\n\r\n```java\r\ncatch (IllegalArgumentException ex) {\r\n\tthrow new HttpMediaTypeNotAcceptableException(\r\n\t\t\t""Could not parse \'Accept\' header "" + headerValues + "": "" + ex.getMessage());\r\n}\r\n```\r\n\r\nI\'m not convinced that we should catch `IllegalArgumentException` there.\r\n\r\nBut if you\'re effectively suggesting the former (`InvalidMediaTypeException | InvalidMimeTypeException`), then please [create a new issue](https://github.com/spring-projects/spring-framework/issues/new).\r\n\r\nCheers!', ""@jandroalvarez, to ensure the issue you've reported does not get lost, I am going to go ahead and create a new issue based on your input now.\r\n\r\nSo, there's no need for you to create a new issue.\r\n\r\n- See #32483""]"
7c47f554c02a506a8f69af2f7d664794b0df3479,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,Condition_Change,"-			if (asyncManager.hasConcurrentResult() &&
-					asyncManager.getConcurrentResultContext().length > 0 &&
-					asyncManager.getConcurrentResultContext()[0] instanceof ModelAndViewContainer) {
-
+			if (asyncManager.hasConcurrentResult()) {",5,condition,Remove unnecessary check in RequestMappingHandlerAdapter,,,,0,N/A,N/A,N/A,N/A,N/A
7d3f42b27bd0042f1461e3e2ef45bbd641b05fa3,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/config/AbstractJmsListenerEndpoint.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
+import org.springframework.util.StringUtils;
+	/**
+	 * Set a custom id for this endpoint.
+	 */
+	/**
+	 * Return the id of this endpoint (possibly generated).
+	 */
+		if (StringUtils.hasText(getId())) {
+			listenerContainer.setBeanName(getId());
+		}",6,condition,Expose endpoint id as listener container name (for transaction/thread name),"Closes gh-26683
",,26683,1,['Expose @JmsListener endpoint id to annotation-derived listener container (for transaction definition name)'],['\r\nTransaction name is always null when debug logging `@Transactional`` @JmsListener` methods.\r\n\r\nThis chunk of code in `AbstractPollingMessageListenerContainer `returns null for` getBeanName():`\r\n\r\n```\r\n                                // Use bean name as default transaction name.\r\n                                if (this.transactionDefinition.getName() == null) {\r\n                                                String beanName = getBeanName();\r\n                                                if (beanName != null) {\r\n                                                                this.transactionDefinition.setName(beanName);\r\n                                                }\r\n                                }\r\n```\r\n\r\nIt should be easy to support by setting the beanName from the endpoint passed into `createListenerContainer(JmsListenerEndpoint endpoint) {  ... }` in `AbstractJmsListenerContainerFactory`.'],['closed'],[1],"['As a side note, exposing the endpoint id also enables the listener container to use specific thread names based on that id, just like the bean name for a manually defined listener container is also showing up in the thread names (with the default task executor).']"
7defbfc18b5e43f1de271419ea37ace7a2984d43,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java,Add_Condition,"+		WebSocketSessionHolder holder = this.sessions.get(session.getId());
+		if (holder != null) {
+			session = holder.getSession();
+		}
-		WebSocketSessionHolder holder = this.sessions.get(session.getId());",5,condition,Ensure concurrent WebSocketSession wrapper is used,"Issue: SPR-13326
",,17911,1,['Race condition when inbound message handling fails and StompSubProtocolHandler sends ERROR frame [SPR-13326]'],"['**[Tong Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=chentong)** opened **[SPR-13326](https://jira.spring.io/browse/SPR-13326?redirect=false)** and commented\n\nIf for any reason such as some message parsing failed, StompSubProtocolHandler.sendErrorMessage is called and it ultimately calling StandardWebSocketSession.sendTextMessage to send the error msg back to client.\n\nBut from that method call I am getting exception:\n""The remote endpoint was in state [TEXT_PARTIAL_WRITING] which is an invalid state for called method"".\n\nIt looks like a race condition because when it is trying to use the native session to send msg back, the native session is also used by other normal messages.\nAdding the following work around seems to fixed the problem.\n\n```java\n@Override\nprotected void sendTextMessage(TextMessage message) throws IOException {\n    Session nativeSession = getNativeSession();\n    synchronized (nativeSession) {\n        nativeSession.getBasicRemote().sendText(message.getPayload(), message.isLast());\n    }\n}\n```\n\nThe message calling flow is quite complicated so I may have missed something obvious please let me know if my observation is flawed.\n\n---\n\n**Issue Links:**\n- #18029 Lock acquired on object responseLock in method sendMessageInternal of class AbstractHttpSockJsSession is not released in some error condition resulting in deadlock\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/33f9eadd6a2e2eceacdb78bb2432d1a788024512, https://github.com/spring-projects/spring-framework/commit/7defbfc18b5e43f1de271419ea37ace7a2984d43\n\n**Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)\n']",['closed'],[8],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nWhat version of Spring Framework are you using and also what server/version?\n\nThe `SubProtocolWebSocketHandler` which delegates to `StompSubProtocolHandler` wraps every WebSocketSession with `ConcurrentWebSocketSessionDecorator` and that has been the case since 4.0.3. Can you provide a stack trace that will confirm if the session decoration is in place? Also are you using more or less standard `@EnableWebSocketMessageBroker` setup or something else?\n', '**[Tong Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=chentong)** commented\n\nI am using spring 4.1.5.RELEASE\nAnd I am using WebSocketMessageBrokerConfigurationSupport (rather than `@EnableWebSocketMessageBroker`) and only configured     \nregistry.addEndpoint(""/dashboard"").withSockJS()\nand\nregistry.enableSimpleBroker(""/topic/"");\nregistry.setApplicationDestinationPrefixes(""/"");\n\nStacktrace\njava.lang.IllegalStateException: The remote endpoint was in state [TEXT_PARTIAL_WRITING] which is an invalid state for called method\nat org.apache.tomcat.websocket.WsRemoteEndpointImplBase$StateMachine.checkState(WsRemoteEndpointImplBase.java:1148)\nat org.apache.tomcat.websocket.WsRemoteEndpointImplBase$StateMachine.textPartialStart(WsRemoteEndpointImplBase.java:1106)\nat org.apache.tomcat.websocket.WsRemoteEndpointImplBase.sendPartialString(WsRemoteEndpointImplBase.java:224)\nat org.apache.tomcat.websocket.WsRemoteEndpointBasic.sendText(WsRemoteEndpointBasic.java:49)\nat org.springframework.web.socket.adapter.standard.StandardWebSocketSession.sendTextMessage(StandardWebSocketSession.java:199)\nat org.springframework.web.socket.adapter.AbstractWebSocketSession.sendMessage(AbstractWebSocketSession.java:105)\nat org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.writeFrameInternal(WebSocketServerSockJsSession.java:222)\nat org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.writeFrame(AbstractSockJsSession.java:325)\nat org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.sendMessageInternal(WebSocketServerSockJsSession.java:212)\nat org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.sendMessage(AbstractSockJsSession.java:161)\nat org.springframework.web.socket.messaging.StompSubProtocolHandler.sendErrorMessage(StompSubProtocolHandler.java:312)\nat org.springframework.web.socket.messaging.StompSubProtocolHandler.handleMessageFromClient(StompSubProtocolHandler.java:276)\nat org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:309)\nat org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75)\nat org.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleMessage(LoggingWebSocketHandlerDecorator.java:56)\nat org.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.handleMessage(ExceptionWebSocketHandlerDecorator.java:72)\nat org.springframework.web.socket.sockjs.transport.session.AbstractSockJsSession.delegateMessages(AbstractSockJsSession.java:385)\nat org.springframework.web.socket.sockjs.transport.session.WebSocketServerSockJsSession.handleMessage(WebSocketServerSockJsSession.java:194)\nat org.springframework.web.socket.sockjs.transport.handler.SockJsWebSocketHandler.handleTextMessage(SockJsWebSocketHandler.java:92)\nat org.springframework.web.socket.handler.AbstractWebSocketHandler.handleMessage(AbstractWebSocketHandler.java:43)\nat org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.handleTextMessage(StandardWebSocketHandlerAdapter.java:112)\nat org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.access$000(StandardWebSocketHandlerAdapter.java:42)\nat org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:82)\nat org.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:79)\nat org.apache.tomcat.websocket.WsFrameBase.sendMessageText(WsFrameBase.java:393)\nat org.apache.tomcat.websocket.WsFrameBase.processDataText(WsFrameBase.java:494)\nat org.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:289)\nat org.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:130)\nat org.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:60)\nat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:203)\nat org.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:198)\nat org.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:96)\nat org.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:654)\nat org.apache.coyote.http11.Http11NioProtocol$Http11ConnectionHandler.process(Http11NioProtocol.java:223)\nat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1558)\nat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1515)\nat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\nat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\nat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\nat java.lang.Thread.run(Thread.java:745)\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nOops, looks like we are only passing the concurrent session decorator to SubProtocolHandler for outbound messages and never did so for inbound messages for which we don't typically use the session unless inbound message handling fails and we try to send an ERROR frame to the client. Thanks for reporting!\n"", '**[Tong Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=chentong)** commented\n\nThanks Rossen, in the mean time, can you suggest a nicer workaround (rather than the synchronized block I put in)?\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nSince you're already using WebSocketMessageBrokerConfigurationSupport, you could override subProtocolWebSocketHandler and return a SubProtocolWebSocketHandler sub-class overriding `handleMessage(WebSocketSession session, WebSocketMessage<?> message)` and delegating to `super` with a decorated session. The only catch is that the map with decorated sessions is a private field in SubProtocolWebSocketHandler so you'll have to get it with reflection I'm afraid (e.g. using ReflectionUtils#makeAccessible).\n"", '**[Chandan](https://jira.spring.io/secure/ViewProfile.jspa?name=cpandey05)** commented\n\nIs this issue Only with Stomp? I am observing similar issue while using SockJs support -client is sockjs which uses JSON RPC protocol. For some conditions it is resulting in Race Conditions:\nWaiting for Monitor Lock on java/lang/Object@0x000000000C9465E0\nat org/springframework/web/socket/sockjs/transport/session/AbstractHttpSockJsSession.sendMessageInternal(AbstractHttpSockJsSession.java:279(Compiled Code))\nat org/springframework/web/socket/sockjs/transport/session/AbstractSockJsSession.sendMessage(AbstractSockJsSession.java:161(Compiled Code))\n\nAbstractHttpSockJsSession acquires a lock while sending message :\n`@Override`\nprotected final void sendMessageInternal(String message) throws SockJsTransportFailureException {\nsynchronized (this.responseLock) {\n\nFor this reason, I was not using lock in my handlers. When a synchronised block, it alleviates the issue\n\n`@Override`\npublic void handleTextMessage(WebSocketSession session,\nTextMessage message) {\nsynchronized (engine) {\nengine.handle(message.getPayload());\n}\n}\n\nI am using 4.1.5 but I am unable to assess the exact cause of race condition. If possible, please confirm if this issue is for HTTP handlers as well -then I can propose a lib upgrade (We use platform so it might be a tedious process and needs concrete validations)\n', ""**[Andre Gonçalves](https://jira.spring.io/secure/ViewProfile.jspa?name=andrepcg)** commented\n\n`@Chandan` I'm having the same issue with SockJS. I'm on 4.2.7\n"", ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nAre you at the WebSocket/SockJS level, i.e. not using the sub-protocol support? The STOMP support also takes care of sending messages concurrently. If using a WebSocketSession directly you need take care of synchronizing the sends. This shouldn't be too hard however if you wrap the session. See my response under #18029.\n""]"
7e8ffc7bf56dcc9d7fcc3992589b126b0eecf22f,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/env/CompositePropertySource.java,Condition_Change,"- * Copyright 2002-2014 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
-			if (propertySource instanceof EnumerablePropertySource) {
-				names.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));
+			if (!(propertySource instanceof EnumerablePropertySource)) {
+				throw new IllegalStateException(
+						""Failed to enumerate property names due to non-enumerable property source: "" + propertySource);
+			names.addAll(Arrays.asList(((EnumerablePropertySource<?>) propertySource).getPropertyNames()));",6,condition,CompositePropertySource rejects getPropertyNames call when containing a non-enumerable source,"Issue: SPR-12788
",,17385,1,"[""CompositePropertySource doesn't fulfil EnumerablePropertySource [SPR-12788]""]","[""**[Konrad Garus](https://jira.spring.io/secure/ViewProfile.jspa?name=konrad.garus)** opened **[SPR-12788](https://jira.spring.io/browse/SPR-12788?redirect=false)** and commented\n\nIn #16897 `CompositePropertySource` became `EnumerablePropertySource`. It doesn't fully satisfy its contract though and it violates Liskov substitution principle.\n\nFor example, Spring Boot assumes that `EnumerablePropertySource.getPropertyNames` contains names of all properties available on the property source. That is not the case with `CompositePropertySource` containing non-enumerable property sources. See also https://github.com/spring-projects/spring-boot/issues/2608\n\n---\n\n**Affects:** 4.1.5\n\n**Issue Links:**\n- #16897 CompositePropertySource should extend EnumerablePropertySource\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7e8ffc7bf56dcc9d7fcc3992589b126b0eecf22f\n""]",['closed'],[3],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point, but I wonder what we can do about this... A `CompositePropertySource` won't be able to retrieve property names from a contained non-enumerable source. We cannot un-implement `EnumerablePropertySource`, so the only option seems to be to refine the latter's javadoc and clarify that the exposed property names are not necessarily complete. (And that separately checking for `CompositePropertySource` may make sense.)\n\nJuergen\n"", '**[Konrad Garus](https://jira.spring.io/secure/ViewProfile.jspa?name=konrad.garus)** commented\n\nIf you change the contract on `EnumerablePropertySource`, what would this class represent? A `PropertySource` that provides a way to see **some** of its property names?\n\nIf that was the official specification, it would pretty much mean: ""Use at your own risk, but in the end you\'ll have to call `getProperty` to **really** see if it contains given property"".\n\n`EnumerablePropertySource` has very clean, but strong specification. I\'d say if some property source cannot satisfy it, it shouldn\'t pretend it does. Maybe it should throw something like `IllegalStateException` if you call `getPropertyNames` and it finds itself containing a non-enumerable `PropertySource`?\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI like that idea: an `IllegalStateException` when it encounters a non-enumerable property source underneath sounds like a fine compromise.\n\nWe can easily make this change for 4.2. However, for 4.1.x, it's probably better to preserve the existing behavior, avoiding any disruption at this late maintenance stage of the branch.\n\nJuergen\n""]"
7ea85a959c810c1689fc04b8d0c2bd17e5fe6e08,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java,Add_Condition,"- * Copyright 2002-2011 the original author or authors.
+ * Copyright 2002-2012 the original author or authors.
-		// To be on the safe side: explicitly delete all parts.
+		// To be on the safe side: explicitly delete the parts,
+		// but only actual file parts (for Resin compatibility)
-				part.delete();
+				if (request.getFile(part.getName()) != null) {
+					part.delete();
+				}",4,condition,Fix MultipartResolver Resin compatibility,"StandardServletMultipartResolver#cleanupMultipart now takes care to
delete only actual file parts for Resin compatibility.

Issue: SPR-9299
",,13937,1,['org.springframework.web.multipart.support.StandardServletMultipartResolver.cleanupMultipart causes an IOException on Resin [SPR-9299]'],"['**[Ralph Schaer](https://jira.spring.io/secure/ViewProfile.jspa?name=ralsa)** opened **[SPR-9299](https://jira.spring.io/browse/SPR-9299?redirect=false)** and commented\n\nTesting the StandardServletMultipartResolver on Resin 4.0.27 with this form.\n\n\\<form action=""uploadTest"" method=""post"" enctype=""multipart/form-data"">\n\\<input type=""hidden"" name=""hiddenParameter"" value=""theHiddenValue"" />\n...\n\\</form>\n\nThe resolver tries to cleanup the parts with the cleanupMultipart method\nby calling part.delete();\n\nResin throws this exception\n\n8:08:25.093 [resin-port-8080-19] WARN  o.s.w.m.s.StandardServletMultipartResolver - Failed to perform cleanup of multipart items\nava.io.IOException: Part.delete() is not applicable to part \'hiddenParameter\':\'theHiddenValue\'\nat com.caucho.server.http.AbstractCauchoRequest$PartImpl.delete(AbstractauchoRequest.java:1086) ~[resin.jar:4.0.27]       \nat org.springframework.web.multipart.support.StandardServletMultipartResolver.cleanupMultipart(StandardServletMultipartResolver.java:65) ~[spring-web-3.1.1.RELEASE.jar:3.1.1.RELEASE]\n\nNot sure why Resin not simply ignores the call to delete() for this kind of parts, as all the other servers (Tomcat, Jetty) do.\n\n\n\n---\n\n**Affects:** 3.1.1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9fcb5781873417e3e9ce8f2a932d3de4649a26c4, https://github.com/spring-projects/spring-framework/commit/7ea85a959c810c1689fc04b8d0c2bd17e5fe6e08\n']",['closed'],[0],[]
7ef3257b031000b9f092d4014902bd676c607c9c,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java,Add_Condition,"+import javax.servlet.RequestDispatcher;
-			HttpServletMapping mapping = request.getHttpServletMapping();
+			HttpServletMapping mapping = (HttpServletMapping) request.getAttribute(RequestDispatcher.INCLUDE_MAPPING);
+			if (mapping == null) {
+				mapping = request.getHttpServletMapping();
+			}",6,condition,Correctly determine HttpServletMapping for INCLUDE,"Closes gh-26216
",,26216,1,['Wrong HttpServletMapping used on INCLUDE in UrlPathHelper.skipServletPathDetermination'],"['<!--\r\n!!! For Security Vulnerabilities, please go to https://pivotal.io/security !!!\r\n-->\r\n**Affects:** 5.3.1\r\n\r\nIn `UrlPathHelper.skipServletPathDetermination()` the servlet mapping from the request is used. But if the request is processing an include then the mapping in the request is for the original path. The servlet mapping for the include is in the request attribute `RequestDispatcher.INCLUDE_MAPPING` (""javax.servlet.include.mapping"").\r\n\r\nSo that method uses the wrong servlet mapping and therefore in some cases return the wrong result. And I\'m guessing the same goes for when there\'s a forward, but that I haven\'t verified. Then the servlet mapping is in `RequestDispatcher.FORWARD_MAPPING`.\r\n\r\nOr is this an issue with the container? In my case I use tomcat 9.0.39.']",['closed'],[4],"['Mainly we check it isn\'t a PATH mapping (e.g. `""/path/*""`). That\'s the more problematic case where the Servlet path prefix needs to be determined and stripped. Presumably on a given server, mapping by path prefix is either used or not. Can you provide more details for a more specific case?', ""Let me give you some more background on the issue.\r\n\r\nIf you have a **jsp** page with an **include tag** which includes the result of a spring controller method, then it will fail when using spring-framework 5.3.1. In 5.2.10.RELEASE it works just fine.\r\n\r\nAnd the reason for the failure is that when processing the include it's still in the context of the request for the jsp file. So the servlet mapping of the request will contain the servlet mapping for the jsp which usually is EXTENSION (*.jsp). But the include path might be of type PATH and then the `UrlPathHelper.skipServletPathDetermination()` will return the wrong result for the include and therefore generate a `NoHandlerFoundException`.\r\n\r\nI've attached a sample war project which demonstrates the problem: [spring-example.zip](https://github.com/spring-projects/spring-framework/files/5651733/spring-example.zip). In index.jsp there's an include tag which includes the result of a spring controller (/spring/example). But that include fails with a `NoHandlerFoundException`. But if I go directly to that url I'll get the result without any `NoHandlerFoundException`.\r\n\r\nTo solve this issue the correct servlet mapping must be used in `UrlPathHelper.skipServletPathDetermination(`). And the servlet mapping for the include is in the request attribute _javax.servlet.include.mapping_ according to Servlet 4 spec (chapter 9.3.1).\r\n\r\nAnd the same problem might affect forwards, but I haven't investigated that. But then then servlet mapping is in _javax.servlet.forward.mapping_."", ""Thanks for the sample and extra detail. So in your case, the request starts with a JSP page that includes a request to a Servlet mapped by prefix, and on an include the Servlet container returns original request details by default. For forward it's the other way around, with the Servlet container returning current request details by default. Hence I think only include is affected."", '@rstoyanchev A big thanks for the quick response and fix! I can confirm that it resolves my issue.']"
7f1062159ee9926d5abed7cadc2b36b6b7fc242e,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/HttpStatus.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
+	private static final HttpStatus[] VALUES;
+
+	static {
+		VALUES = values();
+	}
+
+
-		for (HttpStatus status : values()) {
+		// used cached VALUES instead of values() to prevent array allocation
+		for (HttpStatus status : VALUES) {",9,iteration,Copy HttpStatus::values to prevent allocation,"Before this commit, HttpStatus::resolve used the values() method in its
logic. This causes a new array to be allocated for each invocation,
and results in memory overhead.

This commit makes a copy of the HttpStatus values array, and uses that
to resolve status codes.

Closes gh-26842
",,26842,1,['HttpStatus.resolve allocates HttpStatus.values() once per invocation'],"['I just noticed looking at profiles of some reactor based benchmarks we run to measure Datadog tracer overhead that `HttpStatus.resolve` allocates an `HttpStatus[]` once per invocation, so once per response. In a very modest throughput benchmark (~600rps) this is allocating 1MB/s just to resolve the integer status code to the `HttpStatus` enum value.\r\n<img width=""997"" alt=""Screenshot 2021-04-21 at 22 35 38"" src=""https://user-images.githubusercontent.com/16439049/115624009-e81d8980-a2f1-11eb-8e95-024611d0009d.png"">\r\n\r\nI tracked the spring framework code down [here](https://github.com/spring-projects/spring-framework/blob/5b1ab31559798df83f1e8d54d2b754f12c69c14e/spring-web/src/main/java/org/springframework/http/HttpStatus.java#L553).\r\n\r\nThis could be fixed by caching `HttpStatus.values()` in an array, which could be iterated over as many times as one likes without any further allocation.\r\n\r\n']",['closed'],[4],"['I think we can do better than a cached array, and might as well start using a `Map<Integer, HttpStatus>`.', 'Boxing HTTP status codes can be problematic because the common ones all fall outside the range of the `Integer` cache. We use [this](https://github.com/DataDog/dd-trace-java/blob/master/internal-api/src/main/java/datadog/trace/api/cache/RadixTreeCache.java) data structure for representing mappings between small, sparse finite sets of integers (such as status codes or ports) and arbitrary things, which works very well for tracing, and something similar may be applicable here. ', ""Thanks you for help.\r\n\r\nI am not sure if we want to introduce a new data structure into the framework to resolve this. I'll make a copy of the array instead, as originally suggested."", ""That makes sense - we don't record any time spent in `HttpStatus.resolve` at all, it only shows up for the allocations.""]"
7f1d5d790ed4f96a03b4f604ff8e9358bb086952,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/AbstractMethodMessageHandler.java,Condition_Change,"-		if (this.applicationContext == null) {
-			logger.warn(""No ApplicationContext available for detecting beans with message handling methods."");
-			return;
-		}
+		if (this.applicationContext == null) {
+			logger.warn(""No ApplicationContext available "" +
+					""for auto-detection of beans with message handling methods."");
+			return;
+		}",9,condition,Polish,,,,0,N/A,N/A,N/A,N/A,N/A
7f26e8cfc6798187ec463d0ee9d9cdd26d9605be,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/SynthesizedMergedAnnotationInvocationHandler.java,Add_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+		if (classLoader == interfaceClass.getClassLoader()) {
+			return true;
+		}",3,condition,Short-circuit interface visibility check in case of same ClassLoader,"Closes gh-24664
",,24664,1,['Short circuit check in SynthesizedMergedAnnotationInvocationHandler.isVisible()'],"['While testing `spring-core` within a GraalVM native image (which uses a single, system-wide `ClassLoader`), it became apparent that the visibility check within `SynthesizedMergedAnnotationInvocationHandler.isVisible(ClassLoader, Class<?>)` could be short circuited to avoid an unnecessary invocation of `Class.forName`.\r\n\r\n@jhoeller suggested something along the lines of the following.\r\n\r\n```java\r\n\tprivate static boolean isVisible(ClassLoader classLoader, Class<?> interfaceClass) {\r\n\t\t// short circuit?\r\n\t\tif (interfaceClass.getClassLoader() == classLoader) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\t\ttry {\r\n\t\t\treturn Class.forName(interfaceClass.getName(), false, classLoader) == interfaceClass;\r\n\t\t}\r\n\t\tcatch (ClassNotFoundException ex) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\t}\r\n```']",['closed'],[0],[]
7f5d6ea3f9ac682b4c73d93bb148f2b906e1acb4,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CollectionFactory.java,Condition_Change,"-	private static Class<?> navigableSetClass = null;
-
-	private static Class<?> navigableMapClass = null;
-
-			else if (SortedSet.class.equals(collectionType) || collectionType.equals(navigableSetClass)) {
+			else if (SortedSet.class.equals(collectionType) || NavigableSet.class.equals(collectionType)) {
-			else if (SortedMap.class.equals(mapType) || mapType.equals(navigableMapClass)) {
+			else if (SortedMap.class.equals(mapType) || NavigableMap.class.equals(mapType)) {",8,condition,Fixed NavigableSet/NavigableMap detection in createCollection/createMap,"Issue: SPR-11257
",,15882,1,['NavigableSet and NavigableMap lookup missing in CollectionFactory class in spring-core [SPR-11257]'],"['**[Mark Rekveld](https://jira.spring.io/secure/ViewProfile.jspa?name=markrekveld)** opened **[SPR-11257](https://jira.spring.io/browse/SPR-11257?redirect=false)** and commented\n\nI ran into this issue\n\n```\nCaused by: java.lang.IllegalArgumentException: Unsupported Collection interface: java.util.NavigableSet\n\tat org.springframework.core.CollectionFactory.createCollection(CollectionFactory.java:147) ~[spring-core-4.0.0.RELEASE.jar:4.0.0.RELEASE]\n\tat org.springframework.core.convert.support.CollectionToCollectionConverter.convert(CollectionToCollectionConverter.java:68) ~[spring-core-4.0.0.RELEASE.jar:4.0.0.RELEASE]\n\tat org.springframework.core.convert.support.ConversionUtils.invokeConverter(ConversionUtils.java:35) ~[spring-core-4.0.0.RELEASE.jar:4.0.0.RELEASE]\n\tat org.springframework.core.convert.support.GenericConversionService.convert(GenericConversionService.java:178) ~[spring-core-4.0.0.RELEASE.jar:4.0.0.RELEASE]\n\tat org.springframework.integration.util.BeanFactoryTypeConverter.convertValue(BeanFactoryTypeConverter.java:123) ~[spring-integration-core-3.0.0.RELEASE.jar:?]\n\tat org.springframework.expression.spel.support.ReflectionHelper.convertArguments(ReflectionHelper.java:284) ~[spring-expression-4.0.0.RELEASE.jar:4.0.0.RELEASE]\n\tat org.springframework.expression.spel.support.ReflectiveMethodExecutor.execute(ReflectiveMethodExecutor.java:62) ~[spring-expression-4.0.0.RELEASE.jar:4.0.0.RELEASE]\n\tat org.springframework.expression.spel.ast.MethodReference.getValueInternal(MethodReference.java:122) ~[spring-expression-4.0.0.RELEASE.jar:4.0.0.RELEASE]\n\t... 97 more\n```\n\nWhen looking into this, I found that in 4.0.0.RELEASE is missing some code that is present in 3.2.6.RELEASE\n\n```\nClassLoader cl = CollectionFactory.class.getClassLoader();\ntry {\n  navigableSetClass = cl.loadClass(""java.util.NavigableSet"");\n  navigableMapClass = cl.loadClass(""java.util.NavigableMap"");\n  approximableCollectionTypes.add(navigableSetClass);\n  approximableMapTypes.add(navigableMapClass);\n}\ncatch (ClassNotFoundException ex)\n{\n}\n```\n\nIs missing in `CollectionFactory` class in version 4.0.0.RELEASE\n\n\n---\n\n**Affects:** 4.0 GA\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7f5d6ea3f9ac682b4c73d93bb148f2b906e1acb4\n']",['closed'],[1],['**[Mark Rekveld](https://jira.spring.io/secure/ViewProfile.jspa?name=markrekveld)** commented\n\nSome digging and I found that the JDK support was updated to 1.6 for Spring 4 but the `navigableSetClass` is always `null` since the lookup code was removed and so it cannot create a `TreeSet` if the collection type is `NavigableSet`\n']
7f700cc63eadacfec243857bf5c9a13397bebca7,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/HttpEntityMethodProcessor.java,Condition_Change,"-			if (inputMessage.getServletRequest().getMethod() == ""GET""
+			if (""GET"".equals(inputMessage.getServletRequest().getMethod())",2,condition,Polish,,,,0,N/A,N/A,N/A,N/A,N/A
7f79ccbec0bad256aa7b3bfdd11af1db1f8976b4,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/config/ScopedProxyBeanDefinitionDecorator.java,Remove_Condition,"-		if (node instanceof Element ele) {
-			if (ele.hasAttribute(PROXY_TARGET_CLASS)) {
-				proxyTargetClass = Boolean.parseBoolean(ele.getAttribute(PROXY_TARGET_CLASS));
-			}
+		if (node instanceof Element ele && ele.hasAttribute(PROXY_TARGET_CLASS)) {
+			proxyTargetClass = Boolean.parseBoolean(ele.getAttribute(PROXY_TARGET_CLASS));",6,condition,Combine conditions for better readability and simplicity,,,,0,N/A,N/A,N/A,N/A,N/A
7ff257c0ea00c02e453c8390c641835ebe778955,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/view/script/ScriptTemplateViewResolver.java,Add_Condition,"-		view.setLocale(locale);
+		if (view != null) {
+			view.setLocale(locale);
+		}",4,condition,Prevent NPE in ScriptTemplateView when no view is found,"Issue: SPR-15064
",,19630,1,['Support i18n and nested template loading in ScriptTemplateView render function [SPR-15064]'],"['**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-15064](https://jira.spring.io/browse/SPR-15064?redirect=false)** and commented\n\nThe render function called by `ScriptTemplateView` has currently 3 parameters provided:\n- `String template`: the content of the template resource\n- `Map<String, Object>`: the model to use to render the view\n- `String url`: the url of the 2 view\n\nTo achieve i18n support for messages and nested template loading, we need to provide these additional informations:\n- a `ResourceBundleMessageSource` instance (or the `ApplicationContext` that allows to retrieve it)\n- the view `Locale`\n- a `Function<String, String>` that allows the render function to call `ScriptTemplateView#getTemplate(String)`\n\nI see mainly 2 ways to support that:\n\n1) We could be possible leverage `setExposeContextBeansAsAttributes()` or `setExposedContextBeanNames()` to access to context beans and expose them via model attributes.\n\n2) We could transform the 3rd parameter passed to the script function (currently `String url`) to `RenderingContext` that would contains `String url`, `Locale locale`, `ResourceBundleMessageSource messageSource` and `Function<String, String> templateLoader` properties. This would be a breaking change for people using `url` but `ScriptTemplateView` is a rather feature, and `url` is not widely used, so I consider this as an option in order to be consistent and provide such flexible mechanism for further needs + it provides these properties in a type-safe way which would be valuable for Kotlin JSR-223 support.\n\n---\n\n**Issue Links:**\n- #19625 Add Kotlin ScriptTemplateView tests (_**""depends on""**_)\n- #18033 Expose view url to render function in ScriptTemplateView\n- #20992 Update and improve script templating documentation\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7ff257c0ea00c02e453c8390c641835ebe778955, https://github.com/spring-projects/spring-framework/commit/98642c7e29eb9596533341411b311c83c6aa5aa7, https://github.com/spring-projects/spring-framework/commit/2d95199466c52e26ff4c5c3e327e8ae6114e807f, https://github.com/spring-projects/spring-framework/commit/2a5d1b086f514fe4ddf0d9e8a42d09416f93d36a\n']",['closed'],[6],"[""**[Yevhenii Melnyk](https://jira.spring.io/secure/ViewProfile.jspa?name=yevhenii-melnyk)** commented\n\nNot sure if the following stuff is appropriate here but I didn't want to open a new issue without discussion. So, the situation is following:\n\nI was trying to use two different template view resolvers in my Spring mvc app. For example, kotlin and javascript at the same time. Creation of 2 ViewResolver beans is not the problem. It seems impossible to use two `ScriptTemplateConfigurer` because `ScriptTemplateConfig` is being acquired in [ScriptTemplateView.autodetectViewConfig](https://github.com/spring-projects/spring-framework/blob/b503e4679ce37ac099be668cc1e33705da3fead1/spring-web-reactive/src/main/java/org/springframework/web/reactive/result/view/script/ScriptTemplateView.java#L261-L271) by `ScriptTemplateConfig.class` from Spring context.\n\nIs there a way to use two scripting engines at the same time or this feature is not supported currently?\n"", '**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** commented\n\nIndeed this is currently not supported out of the box, but maybe you could make it works for your use case by extending `ScriptTemplateConfig*` classes for Kotlin or Javascript with specify dedicated `View` and `ViewConfigurer` classes.\n', ""**[Yevhenii Melnyk](https://jira.spring.io/secure/ViewProfile.jspa?name=yevhenii-melnyk)** commented\n\nI'll leave the [stackoverflow post regarding multiple configurers](http://stackoverflow.com/questions/41678075/multiple-scripttemplateviewresolvers-in-spring-mvc-app/41702033) here in case somebody has a same question I've got. The implementation is really easy. Thank you Sébastien Deleuze.\n"", '**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** commented\n\nSee also this related [pull request](https://github.com/spring-projects/spring-framework/pull/1262) for providing i18n support, I will try to provide a solution that fulfill that need too.\n', '**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** commented\n\n[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) Could you please have a look to [this pull request](https://github.com/spring-projects/spring-framework/pull/1304) I have just submitted to say me if you are ok with such approach.\n\nThis change would be breaking (on the script side, not on java side) for people using the third `url` parameter that we introduced as part of #18033 in `4.2.2`, but `ScriptTemplateView` is a rather young functionality, and this variant with an `url` parameter is likely to not being used very widely, so I would take the opportunity of our major `5.0` release to define a consistent and future proof render function SPI.\n\nAs you can see [here](https://github.com/spring-projects/spring-framework/pull/1304/commits/1072377ad8d35fde7cefe9281f20a7e2d3d86c54#diff-43cdb62aaabca74d4a2cd0902c934b4e) the migration path is trivial.\n\nI preferred this option over using `setExposeContextBeansAsAttributes()` or `setExposedContextBeanNames()` because:\n- It allows to be consistent about the various parameters we pass to the rendering function (`url` versus others)\n- It is type-safe which matters for Kotlin Script and more discoverable than something based on model attributes\n- It avoids to mix model attributes designed to be rendered in the template, and those informations designed to be used in the rendering function\n- It will allow us to add new rendering properties without breaking the script API\n\nI also choose to provide the `ApplicationContext` rather than directly the `ResourceBundleMessageSource` bean because that avoids to make assumption about how to retrieve it (by type, by name) and allows a wide range of use cases in addition to i18n. See it in action in [this Kotlin Script example](https://github.com/sdeleuze/spring-framework/blob/1072377ad8d35fde7cefe9281f20a7e2d3d86c54/spring-web-reactive/src/test/resources/org/springframework/web/reactive/result/view/script/kotlin/render.kts).\n', '**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** commented\n\nNotice that this improvement allow this kind of Kotlin type-safe templates with i18n and nested template support:\n\n```\nimport org.springframework.web.reactive.result.view.script.*\n\n""""""${include(""header"") }\n<p>${i18n(""hello"")} $foo</p>\n${include(""footer"")}""""""\n```\n\n']"
803fc2001907636605aa3ed2fcdf1437171761a5,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/config/annotation/WebMvcConfigurationSupport.java,Condition_Change,"-			Map<String, ViewResolver> map = BeanFactoryUtils.beansOfTypeIncludingAncestors(
+			String[] names = BeanFactoryUtils.beanNamesForTypeIncludingAncestors(
-			if (map.isEmpty()) {
+			if (names.length == 1) {",4,condition,Correct check for ViewResolver beans,"Check for bean names of type rather than actual beans.

Issue: SPR-12267
",,16872,1,['Spring 4.1 with WebMvcConfigurationSupport enabled does not register a default view resolver [SPR-12267]'],"['**[kyle leonhard](https://jira.spring.io/secure/ViewProfile.jspa?name=kyle-leonhard)** opened **[SPR-12267](https://jira.spring.io/browse/SPR-12267?redirect=false)** and commented\n\nAfter upgrading to 4.1.0 I noticed that jsp views were no longer resolving.   The app wasn\'t explicitly creating any view resolvers so I assumed some default resolvers had changed.  I went a digging a bit and found the below.\n\nThe DispatcherServlet registers, if no viewResolvers have been registered, default view resolvers in initViewResolvers.  This causes leads to an InternalResourceViewResolver being registered.  Before upgrading to 4.1 this is the resolver that was resolving my app\'s views.\n\nFirst, the app is using `@EnableWebMvc`.  In 4.1 WebMvcConfigurationSupport added the mvcViewResolver method which registers a composite view resolver.  In my case the viewResolverRegistry contains no viewResolvers so the composite resolver has nothing to delegate to.  The registered composite view resolver causes the initViewResolvers method in DispatcherServlet to skip registration of the default view resolvers.  My app ends up with no useful viewResolvers registered (just the composite with no delegates).\n\nThe issue is easy to work around (register a viewResolver), but it seems non-intuitive that enabling WebMvc support would cause this.\n\nLet me know if there are any more details I can provide or if there are suggestions on how to better configure things.\n\n---\n\n**Affects:** 4.1 GA\n\n**Issue Links:**\n- #16629 ThymeleafViewResolver not used by Spring 4.1 resulting in ""circular view path"" error\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/803fc2001907636605aa3ed2fcdf1437171761a5, https://github.com/spring-projects/spring-framework/commit/49cf30e964f1dc1e80e5e78833e55ac5f5a33f0e\n']",['closed'],[3],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nActually this is what we had initially before an issue surfaced where another ViewResolver with default order (lowest precedence) may be ""shadowed"", see #16629. Seems like we need to refine the approach and check if other ViewResolver beans exist. That was we can preserve the DispatcherServlet default behavior when no ViewResolver declarations are made.\n', '**[kyle leonhard](https://jira.spring.io/secure/ViewProfile.jspa?name=kyle-leonhard)** commented\n\nThanks. Keep up the good work!\n', '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nNo worries, thanks for the report.\n']"
80fb8ea8137975e072c7611f5ae197cadd470da7,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java,Add_Condition,"+		if (this.exitTypeDescriptor == null) {
+			return false;
+		}
-			return (this.exitTypeDescriptor != null && this.arrayTypeDescriptor != null);
+			return (this.arrayTypeDescriptor != null);
+						TypedValue result = accessor.read(this.evaluationContext, this.targetObject, this.name);
-						return accessor.read(this.evaluationContext, this.targetObject, this.name);
+						return result;",8,condition,Avoid unnecessary compilation attempts in SpEL's Indexer,"Closes gh-32677
",,32677,1,"[""Avoid unnecessary compilation attempts in SpEL's `Indexer`""]","[""In the current implementation of SpEL's `Indexer`, the `exitTypeDescriptor` is sometimes ignored when checking whether the expression is compilable, and sometimes the `exitTypeDescriptor` is tracked for a failed evaluation attempt.\r\n\r\nThat behavior results in attempts to compile expressions which cannot be compiled, which should be avoided.""]",['closed'],[0],[]
8137cc95669690f3e4055d6ccf484e98a07b6703,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/rowset/ResultSetWrappingSqlRowSet.java,Condition_Change,"+import org.springframework.util.StringUtils;
-					if (table != null && !table.isEmpty()) {
+					if (StringUtils.hasLength(table)) {",3,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
81aca78579df061e08aa0e6a6488b3e4d3ebb3dc,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/FormatHelper.java,Remove_Condition,"+import org.springframework.util.ClassUtils;
-	 * Produce a nice string for a given method name with specified arguments.
+	 * Produce a readable representation for a given method name with specified arguments.
-	 * @return nicely formatted string, eg. foo(String,int)
+	 * @return a nicely formatted representation, e.g. {@code foo(String,int)}
-	 * Produce a nice string for a given class object.
-	 * For example, a string array will have the formatted name ""java.lang.String[]"".
-	 * @param clazz The class whose name is to be formatted
-	 * @return a formatted string suitable for message inclusion
+	 * Determine a readable name for a given Class object.
+	 * <p>A String array will have the formatted name ""java.lang.String[]"".
+	 * @param clazz the Class whose name is to be formatted
+	 * @return a formatted String suitable for message inclusion
+	 * @see ClassUtils#getQualifiedName(Class)
-		if (clazz == null) {
-			return ""null"";
-		}
-		return clazz.getTypeName();
+		return (clazz != null ? ClassUtils.getQualifiedName(clazz) : ""null"");",6,condition,Delegate to common ClassUtils.getQualifiedName,"Issue: SPR-15237
",,19802,1,['Use Class.getTypeName() where appropriate  [SPR-15237]'],"[""**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-15237](https://jira.spring.io/browse/SPR-15237?redirect=false)** and commented\n\nHey,\n\nI just noticed that we could use Class.getTypeName() in ClassUtils.getQualifiedName() and  FormatHelper.formatClassNameForMessage() now that we're on JDK 8.\n\nFind my proposal attached. Happy to read your feedback.\n\nCheers,\nChristoph\n\n\n---\n\n**Affects:** 5.0 M4\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1320, and commits https://github.com/spring-projects/spring-framework/commit/ab50f7b0d583565f9428a1d917524c6bbe1e4237, https://github.com/spring-projects/spring-framework/commit/81aca78579df061e08aa0e6a6488b3e4d3ebb3dc, https://github.com/spring-projects/spring-framework/commit/5cfa7e71bb878cde25b03b79cd5b9c58f12a12df, https://github.com/spring-projects/spring-framework/commit/5f90a7eee9df803bb866c74b47682f076b3e4561\n""]",['closed'],[1],['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIndeed!\n']
81fde5ec4103e3db28bf79073691938a4743b121,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/MethodParameter.java,Add_Condition,"+		// Try first with identity checks for greater performance.
+		// Potentially try again with object equality checks in order to avoid race
+		// conditions while invoking java.lang.reflect.Executable.getParameters().
+		for (int i = 0; i < allParams.length; i++) {
+			if (parameter.equals(allParams[i])) {
+				return i;
+			}
+		}",5,"condition, iteration",Ensure that MethodParameter.findParameterIndex() is thread-safe,"Prior to this commit, parallel invocations of
MethodParameter.findParameterIndex() (invoked indirectly via
SynthesizingMethodParameter.forParameter() and
MethodParameter.forParameter()) could intermittently lead to an
IllegalArgumentException being thrown due to a race condition in the
internal implementation of the JDK's
java.lang.reflect.Executable.getParameters() method.

This commit addresses this issue by introducing a fallback for-loop
that iterates over the candidate parameters a second time using
equality checks instead of identity checks.

Issue: SPR-17534
",,22066,1,['MethodParameter.findParameterIndex() is not thread-safe [SPR-17534]'],"['**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** opened **[SPR-17534](https://jira.spring.io/browse/SPR-17534?redirect=false)** and commented\n\n## Status Quo\n\nAs discussed in #22065, `org.springframework.core.MethodParameter.findParameterIndex(Parameter)` is not thread-safe due to the manner in which `java.lang.reflect.Executable.getParameters()` is implemented in the JDK.\n\n## Proposed Solution\n\nThe following change has been verified to result in thread-safe behavior.\n\nWhether or not we want two iterations is up for debate.\n\n```java\nprotected static int findParameterIndex(Parameter parameter) {\r\n\tExecutable executable = parameter.getDeclaringExecutable();\r\n\tParameter[] allParams = executable.getParameters();\r\n\t\r\n\t// Try first with identity checks for greater performance.\r\n\tfor (int i = 0; i < allParams.length; i++) {\r\n\t\tif (parameter == allParams[i]) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\t// Potentially try again with object equality in order to avoid race\r\n\t// conditions while accessing java.lang.reflect.Executable.getParameters().\r\n\tfor (int i = 0; i < allParams.length; i++) {\r\n\t\tif (parameter.equals(allParams[i])) {\r\n\t\t\treturn i;\r\n\t\t}\r\n\t}\r\n\tthrow new IllegalArgumentException(""Given parameter ["" + parameter +\r\n\t\t\t""] does not match any parameter in the declaring executable"");\r\n}\r\n```\n\n## Deliverables\n\n1. Ensure that `MethodParameter.findParameterIndex()` is thread-safe\n\n---\n\n**Affects:** 5.0.10, 5.1 GA\n\n**Issue Links:**\n- #22065 Parameter resolution in SpringExtension is not thread-safe\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/81fde5ec4103e3db28bf79073691938a4743b121, https://github.com/spring-projects/spring-framework/commit/f0e69e06b7c0b4b1c8cbf7c17cfc21ab92ce983c\n\n**Backported to:** [5.0.11](https://github.com/spring-projects/spring-framework/milestone/192?closed=1)\n']",['closed'],[1],['**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\nThis has been fixed on `master` (5.1.3) and `5.0.x` (5.0.11).\n']
83293b39df23d91c6ea18f520912c0c4fbb5f1c2,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java,Condition_Change,"-			else if (namespaceUri.startsWith(""https://www.springframework.org/"")) {
+			else if (namespaceUri.startsWith(""http://www.springframework.org/"")) {",2,condition,URL Cleanup - fix undesirable code change,"Namespace handlers are mapped based on the canonical names for XML
namespaces which in Spring do not use ""https"" as the scheme.

See gh-22680
",,22680,1,['URL Cleanup'],"['This commit updates URLs to prefer the https protocol. Redirects are not followed to avoid accidentally expanding intentionally shortened URLs (i.e. if using a URL shortener).\n\n# HTTP URLs that Could Not Be Fixed\nThese URLs were unable to be fixed. Please review them to see if they can be manually resolved.\n\n* [ ] http://aopalliance.sourceforge.net (200) with 1 occurrences could not be migrated:  \n   ([https](https://aopalliance.sourceforge.net) result AnnotatedConnectException).\n* [ ] http://cglib.sourceforge.net (200) with 2 occurrences could not be migrated:  \n   ([https](https://cglib.sourceforge.net) result AnnotatedConnectException).\n* [ ] http://classdoc.sourceforge.net (200) with 1 occurrences could not be migrated:  \n   ([https](https://classdoc.sourceforge.net) result AnnotatedConnectException).\n* [ ] http://code.jquery.com:80/jquery.js (200) with 1 occurrences could not be migrated:  \n   ([https](https://code.jquery.com:80/jquery.js) result SSLException).\n* [ ] http://dbunit.sourceforge.net/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://dbunit.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://docs.groovy-lang.org/docs/next/html/documentation/template-engines.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://docs.groovy-lang.org/docs/next/html/documentation/template-engines.html) result SSLProtocolException).\n* [ ] http://domain3.com (200) with 6 occurrences could not be migrated:  \n   ([https](https://domain3.com) result ConnectTimeoutException).\n* [ ] http://forum.thymeleaf.org/Thymeleaf-3-0-8-JUST-PUBLISHED-td4030687.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://forum.thymeleaf.org/Thymeleaf-3-0-8-JUST-PUBLISHED-td4030687.html) result SSLHandshakeException).\n* [ ] http://gregfranko.com/jquery.tocify.js/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://gregfranko.com/jquery.tocify.js/) result SSLHandshakeException).\n* [ ] http://grinder.sourceforge.net/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://grinder.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://groovy-lang.org/templating.html (200) with 3 occurrences could not be migrated:  \n   ([https](https://groovy-lang.org/templating.html) result SSLProtocolException).\n* [ ] http://hsqldb.org (200) with 1 occurrences could not be migrated:  \n   ([https](https://hsqldb.org) result SSLHandshakeException).\n* [ ] http://htmlunit.sourceforge.net/ (200) with 3 occurrences could not be migrated:  \n   ([https](https://htmlunit.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://htmlunit.sourceforge.net/gettingStarted.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://htmlunit.sourceforge.net/gettingStarted.html) result AnnotatedConnectException).\n* [ ] http://htmlunit.sourceforge.net/javascript.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://htmlunit.sourceforge.net/javascript.html) result AnnotatedConnectException).\n* [ ] http://javadiff.cvs.sourceforge.net/ (200) with 3 occurrences could not be migrated:  \n   ([https](https://javadiff.cvs.sourceforge.net/) result SSLHandshakeException).\n* [ ] http://jibx.sourceforge.net/ (200) with 2 occurrences could not be migrated:  \n   ([https](https://jibx.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://joda-time.sourceforge.net (200) with 1 occurrences could not be migrated:  \n   ([https](https://joda-time.sourceforge.net) result AnnotatedConnectException).\n* [ ] http://jotm.objectweb.org/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://jotm.objectweb.org/) result NotSslRecordException).\n* [ ] http://json-b.net/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://json-b.net/) result SSLHandshakeException).\n* [ ] http://mx4j.sourceforge.net (200) with 1 occurrences could not be migrated:  \n   ([https](https://mx4j.sourceforge.net) result AnnotatedConnectException).\n* [ ] http://mx4j.sourceforge.net/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://mx4j.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://mydomain3.com (200) with 9 occurrences could not be migrated:  \n   ([https](https://mydomain3.com) result ConnectTimeoutException).\n* [ ] http://objenesis.org (200) with 1 occurrences could not be migrated:  \n   ([https](https://objenesis.org) result SSLHandshakeException).\n* [ ] http://objenesis.org/tutorial.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://objenesis.org/tutorial.html) result SSLHandshakeException).\n* [ ] http://other.com/ (200) with 2 occurrences could not be migrated:  \n   ([https](https://other.com/) result SSLHandshakeException).\n* [ ] http://reactivex.io/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://reactivex.io/) result SSLHandshakeException).\n* [ ] http://reactivex.io/documentation/operators.html (200) with 1 occurrences could not be migrated:  \n   ([https](https://reactivex.io/documentation/operators.html) result SSLHandshakeException).\n* [ ] http://url.somewhereelse.com (200) with 4 occurrences could not be migrated:  \n   ([https](https://url.somewhereelse.com) result SSLHandshakeException).\n* [ ] http://www.beanshell.org (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.beanshell.org) result SSLHandshakeException).\n* [ ] http://www.beanshell.org/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.beanshell.org/) result SSLHandshakeException).\n* [ ] http://www.doclet.com (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.doclet.com) result AnnotatedConnectException).\n* [ ] http://www.gebish.org/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.gebish.org/) result SSLHandshakeException).\n* [ ] http://www.gebish.org/manual/current/ (200) with 3 occurrences could not be migrated:  \n   ([https](https://www.gebish.org/manual/current/) result SSLHandshakeException).\n* [ ] http://www.groovy-lang.org/ (200) with 2 occurrences could not be migrated:  \n   ([https](https://www.groovy-lang.org/) result SSLProtocolException).\n* [ ] http://www.groovy-lang.org/operators.html (200) with 2 occurrences could not be migrated:  \n   ([https](https://www.groovy-lang.org/operators.html) result SSLProtocolException).\n* [ ] http://www.hsqldb.org (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.hsqldb.org) result SSLHandshakeException).\n* [ ] http://www.jensgulden.de (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.jensgulden.de) result AnnotatedConnectException).\n* [ ] http://www.mockobjects.com (200) with 2 occurrences could not be migrated:  \n   ([https](https://www.mockobjects.com) result ClosedChannelException).\n* [ ] http://www.mockobjects.com/ (200) with 1 occurrences could not be migrated:  \n   ([https](https://www.mockobjects.com/) result ClosedChannelException).\n* [ ] http://xmlunit.sourceforge.net/ (200) with 2 occurrences could not be migrated:  \n   ([https](https://xmlunit.sourceforge.net/) result AnnotatedConnectException).\n* [ ] http://192.168.0.1/mvc-showcase (301) with 1 occurrences could not be migrated:  \n   ([https](https://192.168.0.1/mvc-showcase) result ConnectTimeoutException).\n* [ ] http://www.easymock.org (301) with 2 occurrences could not be migrated:  \n   ([https](https://www.easymock.org) result SSLHandshakeException).\n* [ ] http://www.easymock.org/ (301) with 1 occurrences could not be migrated:  \n   ([https](https://www.easymock.org/) result SSLHandshakeException).\n* [ ] http://www.jmock.org/ (301) with 1 occurrences could not be migrated:  \n   ([https](https://www.jmock.org/) result SSLHandshakeException).\n* [ ] http://foo.com (301) with 4 occurrences could not be migrated:  \n   ([https](https://foo.com) result SSLHandshakeException).\n* [ ] http://foo.com/ (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/) result SSLHandshakeException).\n* [ ] http://foo.com/a (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/a) result SSLHandshakeException).\n* [ ] http://foo.com/a?foo=bar&foo=baz (301) with 4 occurrences could not be migrated:  \n   ([https](https://foo.com/a?foo=bar&foo=baz) result SSLHandshakeException).\n* [ ] http://foo.com/bar (301) with 5 occurrences could not be migrated:  \n   ([https](https://foo.com/bar) result SSLHandshakeException).\n* [ ] http://foo.com/baz (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/baz) result SSLHandshakeException).\n* [ ] http://foo.com/rest/books/6.json (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/rest/books/6.json) result SSLHandshakeException).\n* [ ] http://foo.com/rest/books/6/pages/1.json (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/rest/books/6/pages/1.json) result SSLHandshakeException).\n* [ ] http://foo.com/v1 (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/v1) result SSLHandshakeException).\n* [ ] http://foo.com/v1/123 (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/v1/123) result SSLHandshakeException).\n* [ ] http://foo.com/v1/bar (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/v1/bar) result SSLHandshakeException).\n* [ ] http://foo.com/v1?id=123 (301) with 2 occurrences could not be migrated:  \n   ([https](https://foo.com/v1?id=123) result SSLHandshakeException).\n* [ ] http://foo.com/wrong (301) with 1 occurrences could not be migrated:  \n   ([https](https://foo.com/wrong) result SSLHandshakeException).\n* [ ] http://mydomain4.com (301) with 3 occurrences could not be migrated:  \n   ([https](https://mydomain4.com) result SSLHandshakeException).\n* [ ] http://www.caucho.com/hessian (302) with 6 occurrences could not be migrated:  \n   ([https](https://www.caucho.com/hessian) result SSLHandshakeException).\n* [ ] http://mydomain2.com (302) with 22 occurrences could not be migrated:  \n   ([https](https://mydomain2.com) result ConnectTimeoutException).\n* [ ] http://www.jdiff.org (302) with 1 occurrences could not be migrated:  \n   ([https](https://www.jdiff.org) result ConnectTimeoutException).\n* [ ] http://example.com:80/test/this/here (404) with 3 occurrences could not be migrated:  \n   ([https](https://example.com:80/test/this/here) result NotSslRecordException).\n* [ ] http://www.foo.com/schema/component/component.xsd (404) with 1 occurrences could not be migrated:  \n   ([https](https://www.foo.com/schema/component/component.xsd) result SSLHandshakeException).\n* [ ] http://www.foo.com/schema/jcache (404) with 2 occurrences could not be migrated:  \n   ([https](https://www.foo.com/schema/jcache) result SSLHandshakeException).\n* [ ] http://www.mycompany.com/schema/myns/myns.xsd (404) with 1 occurrences could not be migrated:  \n   ([https](https://www.mycompany.com/schema/myns/myns.xsd) result ConnectTimeoutException).\n* [ ] http://xunitpatterns.com/Test%20Spy.html (404) with 1 occurrences could not be migrated:  \n   ([https](https://xunitpatterns.com/Test%20Spy.html) result AnnotatedConnectException).\n\n# Fixed URLs\n\n## Fixed But Review Recommended\nThese URLs were fixed, but the https status was not OK. However, the https status was the same as the http request or http redirected to an https URL, so they were migrated. Your review is recommended.\n\n* [ ] http://bugs.sun.com/view_bug.do?bug_id=6342411 (302) with 1 occurrences migrated to:  \n  https://bugs.java.com/view_bug.do?bug_id=6342411 ([https](https://bugs.sun.com/view_bug.do?bug_id=6342411) result SSLHandshakeException).\n* [ ] http://bugs.sun.com/view_bug.do?bug_id=7023180 (302) with 2 occurrences migrated to:  \n  https://bugs.java.com/view_bug.do?bug_id=7023180 ([https](https://bugs.sun.com/view_bug.do?bug_id=7023180) result SSLHandshakeException).\n* [ ] http://www.freemarker.org (301) with 5 occurrences migrated to:  \n  https://freemarker.apache.org/ ([https](https://www.freemarker.org) result ConnectTimeoutException).\n* [ ] http://sockjs.org (303) with 2 occurrences migrated to:  \n  https://github.com/sockjs/sockjs-client ([https](https://sockjs.org) result AnnotatedConnectException).\n* [ ] http://network.pivotal.io/open-source (301) with 1 occurrences migrated to:  \n  https://network.pivotal.io/open-source ([https](https://network.pivotal.io/open-source) result ReadTimeoutException).\n* [ ] http://projects.eclipse.org/projects/tools.buildship (301) with 1 occurrences migrated to:  \n  https://projects.eclipse.org/projects/tools.buildship ([https](https://projects.eclipse.org/projects/tools.buildship) result SSLException).\n* [ ] http://aaa.org:8080/a (301) with 1 occurrences migrated to:  \n  https://www.aaa.org/articles/ ([https](https://aaa.org:8080/a) result NotSslRecordException).\n* [ ] http://aaa.org:8080/b/c/d (301) with 1 occurrences migrated to:  \n  https://www.aaa.org/b/c/d ([https](https://aaa.org:8080/b/c/d) result ReadTimeoutException).\n* [ ] http://www.caucho.com (302) with 1 occurrences migrated to:  \n  https://www.caucho.com/ ([https](https://www.caucho.com) result SSLHandshakeException).\n* [ ] http://jruby.org (301) with 4 occurrences migrated to:  \n  https://www.jruby.org ([https](https://jruby.org) result SSLHandshakeException).\n* [ ] http://jruby.org/ (301) with 1 occurrences migrated to:  \n  https://www.jruby.org ([https](https://jruby.org/) result SSLHandshakeException).\n* [ ] http://bbb.org:9090/b (AnnotatedConnectException) with 2 occurrences migrated to:  \n  https://bbb.org:9090/b ([https](https://bbb.org:9090/b) result AnnotatedConnectException).\n* [ ] http://192.168.28.42/1.jsp (ConnectTimeoutException) with 3 occurrences migrated to:  \n  https://192.168.28.42/1.jsp ([https](https://192.168.28.42/1.jsp) result ConnectTimeoutException).\n* [ ] http://example.com:8080/ (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.com:8080/ ([https](https://example.com:8080/) result ConnectTimeoutException).\n* [ ] http://example.com:8080/bar (ConnectTimeoutException) with 5 occurrences migrated to:  \n  https://example.com:8080/bar ([https](https://example.com:8080/bar) result ConnectTimeoutException).\n* [ ] http://example.org:9090 (ConnectTimeoutException) with 2 occurrences migrated to:  \n  https://example.org:9090 ([https](https://example.org:9090) result ConnectTimeoutException).\n* [ ] http://example.org:9090/base (ConnectTimeoutException) with 12 occurrences migrated to:  \n  https://example.org:9090/base ([https](https://example.org:9090/base) result ConnectTimeoutException).\n* [ ] http://example.org:9090/base/people (ConnectTimeoutException) with 2 occurrences migrated to:  \n  https://example.org:9090/base/people ([https](https://example.org:9090/base/people) result ConnectTimeoutException).\n* [ ] http://example.org:9090/base/something/1/foo (ConnectTimeoutException) with 2 occurrences migrated to:  \n  https://example.org:9090/base/something/1/foo ([https](https://example.org:9090/base/something/1/foo) result ConnectTimeoutException).\n* [ ] http://example.org:9090/base/something/else (ConnectTimeoutException) with 2 occurrences migrated to:  \n  https://example.org:9090/base/something/else ([https](https://example.org:9090/base/something/else) result ConnectTimeoutException).\n* [ ] http://example.org:9999/base (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/base ([https](https://example.org:9999/base) result ConnectTimeoutException).\n* [ ] http://example.org:9999/base/api/people/123/addresses (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/base/api/people/123/addresses ([https](https://example.org:9999/base/api/people/123/addresses) result ConnectTimeoutException).\n* [ ] http://example.org:9999/base/api/people/123/addresses/DE (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/base/api/people/123/addresses/DE ([https](https://example.org:9999/base/api/people/123/addresses/DE) result ConnectTimeoutException).\n* [ ] http://example.org:9999/base/people/123/addresses/DE (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/base/people/123/addresses/DE ([https](https://example.org:9999/base/people/123/addresses/DE) result ConnectTimeoutException).\n* [ ] http://example.org:9999/next (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/next ([https](https://example.org:9999/next) result ConnectTimeoutException).\n* [ ] http://example.org:9999/path?q=foo (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://example.org:9999/path?q=foo ([https](https://example.org:9999/path?q=foo) result ConnectTimeoutException).\n* [ ] http://foo.com:8080/v1/bar?id=123 (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://foo.com:8080/v1/bar?id=123 ([https](https://foo.com:8080/v1/bar?id=123) result ConnectTimeoutException).\n* [ ] http://mydomain1.com:123 (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://mydomain1.com:123 ([https](https://mydomain1.com:123) result ConnectTimeoutException).\n* [ ] http://site1.com (ConnectTimeoutException) with 13 occurrences migrated to:  \n  https://site1.com ([https](https://site1.com) result ConnectTimeoutException).\n* [ ] http://wwws.sun.com/software/xml/developers/diffmk/ (ConnectTimeoutException) with 1 occurrences migrated to:  \n  https://wwws.sun.com/software/xml/developers/diffmk/ ([https](https://wwws.sun.com/software/xml/developers/diffmk/) result ConnectTimeoutException).\n* [ ] http://www.w3.org/TR/html4/loose.dtd (ReadTimeoutException) with 5 occurrences migrated to:  \n  https://www.w3.org/TR/html4/loose.dtd ([https](https://www.w3.org/TR/html4/loose.dtd) result ReadTimeoutException).\n* [ ] http://DOMAIN2.com (UnknownHostException) with 2 occurrences migrated to:  \n  https://DOMAIN2.com ([https](https://DOMAIN2.com) result UnknownHostException).\n* [ ] http://a.example.org/mvc-showcase (UnknownHostException) with 1 occurrences migrated to:  \n  https://a.example.org/mvc-showcase ([https](https://a.example.org/mvc-showcase) result UnknownHostException).\n* [ ] http://arjen:foobar@java.sun.com:80 (UnknownHostException) with 1 occurrences migrated to:  \n  https://arjen:foobar@java.sun.com:80 ([https](https://arjen:foobar@java.sun.com:80) result UnknownHostException).\n* [ ] http://dev.bar.com (UnknownHostException) with 3 occurrences migrated to:  \n  https://dev.bar.com ([https](https://dev.bar.com) result UnknownHostException).\n* [ ] http://domain1.com (UnknownHostException) with 25 occurrences migrated to:  \n  https://domain1.com ([https](https://domain1.com) result UnknownHostException).\n* [ ] http://domain1.com/test.html (UnknownHostException) with 4 occurrences migrated to:  \n  https://domain1.com/test.html ([https](https://domain1.com/test.html) result UnknownHostException).\n* [ ] http://domain2.com (UnknownHostException) with 98 occurrences migrated to:  \n  https://domain2.com ([https](https://domain2.com) result UnknownHostException).\n* [ ] http://example.com&quot;,HttpMethod.GET (UnknownHostException) with 6 occurrences migrated to:  \n  https://example.com&quot;,HttpMethod.GET ([https](https://example.com&quot;,HttpMethod.GET) result UnknownHostException).\n* [ ] http://foo.bar.com (UnknownHostException) with 4 occurrences migrated to:  \n  https://foo.bar.com ([https](https://foo.bar.com) result UnknownHostException).\n* [ ] http://joe.openid.example.org/ (UnknownHostException) with 2 occurrences migrated to:  \n  https://joe.openid.example.org/ ([https](https://joe.openid.example.org/) result UnknownHostException).\n* [ ] http://myserver/logo.png (UnknownHostException) with 1 occurrences migrated to:  \n  https://myserver/logo.png ([https](https://myserver/logo.png) result UnknownHostException).\n* [ ] http://samples.springframework.org/order (UnknownHostException) with 2 occurrences migrated to:  \n  https://samples.springframework.org/order ([https](https://samples.springframework.org/order) result UnknownHostException).\n* [ ] http://url.somewhere.com (UnknownHostException) with 25 occurrences migrated to:  \n  https://url.somewhere.com ([https](https://url.somewhere.com) result UnknownHostException).\n* [ ] http://url.somewhere.com/path (UnknownHostException) with 1 occurrences migrated to:  \n  https://url.somewhere.com/path ([https](https://url.somewhere.com/path) result UnknownHostException).\n* [ ] http://url.somewhere.com/path?id=1 (UnknownHostException) with 1 occurrences migrated to:  \n  https://url.somewhere.com/path?id=1 ([https](https://url.somewhere.com/path?id=1) result UnknownHostException).\n* [ ] http://url.somewhere.com/test.htm (UnknownHostException) with 2 occurrences migrated to:  \n  https://url.somewhere.com/test.htm ([https](https://url.somewhere.com/test.htm) result UnknownHostException).\n* [ ] http://url.somewhere.com?a=b&c=d (UnknownHostException) with 1 occurrences migrated to:  \n  https://url.somewhere.com?a=b&c=d ([https](https://url.somewhere.com?a=b&c=d) result UnknownHostException).\n* [ ] http://url.somewhere.com?foo= (UnknownHostException) with 2 occurrences migrated to:  \n  https://url.somewhere.com?foo= ([https](https://url.somewhere.com?foo=) result UnknownHostException).\n* [ ] http://url.somewhere.com?foo=bar (UnknownHostException) with 4 occurrences migrated to:  \n  https://url.somewhere.com?foo=bar ([https](https://url.somewhere.com?foo=bar) result UnknownHostException).\n* [ ] http://url.somewhere.com?foo=bar&a=b&c=d (UnknownHostException) with 2 occurrences migrated to:  \n  https://url.somewhere.com?foo=bar&a=b&c=d ([https](https://url.somewhere.com?foo=bar&a=b&c=d) result UnknownHostException).\n* [ ] http://wiki.fasterxml.com/JacksonHome (UnknownHostException) with 3 occurrences migrated to:  \n  https://wiki.fasterxml.com/JacksonHome ([https](https://wiki.fasterxml.com/JacksonHome) result UnknownHostException).\n* [ ] http://wiki.fasterxml.com/JacksonJsonViews (UnknownHostException) with 4 occurrences migrated to:  \n  https://wiki.fasterxml.com/JacksonJsonViews ([https](https://wiki.fasterxml.com/JacksonJsonViews) result UnknownHostException).\n* [ ] http://x.y.z (UnknownHostException) with 2 occurrences migrated to:  \n  https://x.y.z ([https](https://x.y.z) result UnknownHostException).\n* [ ] http://abc.com/v1 (301) with 1 occurrences migrated to:  \n  https://abc.go.com/v1 ([https](https://abc.com/v1) result 404).\n* [ ] http://abc.com/v1/accounts/43 (301) with 1 occurrences migrated to:  \n  https://abc.go.com/v1/accounts/43 ([https](https://abc.com/v1/accounts/43) result 404).\n* [ ] http://abc.com/v1/accounts?q=12 (301) with 1 occurrences migrated to:  \n  https://abc.go.com/v1/accounts?q=12 ([https](https://abc.com/v1/accounts?q=12) result 404).\n* [ ] http://abc.com/v2/accounts?q=12 (301) with 1 occurrences migrated to:  \n  https://abc.go.com/v2/accounts?q=12 ([https](https://abc.com/v2/accounts?q=12) result 404).\n* [ ] http://docs.spring.io/v1/bar (301) with 1 occurrences migrated to:  \n  https://docs.spring.io/v1/bar ([https](https://docs.spring.io/v1/bar) result 404).\n* [ ] http://example.com/-foo (404) with 2 occurrences migrated to:  \n  https://example.com/-foo ([https](https://example.com/-foo) result 404).\n* [ ] http://example.com/1 (404) with 1 occurrences migrated to:  \n  https://example.com/1 ([https](https://example.com/1) result 404).\n* [ ] http://example.com/1/2 (404) with 2 occurrences migrated to:  \n  https://example.com/1/2 ([https](https://example.com/1/2) result 404).\n* [ ] http://example.com/2 (404) with 1 occurrences migrated to:  \n  https://example.com/2 ([https](https://example.com/2) result 404).\n* [ ] http://example.com/a%20b?q=a%2Bb (404) with 1 occurrences migrated to:  \n  https://example.com/a%20b?q=a%2Bb ([https](https://example.com/a%20b?q=a%2Bb) result 404).\n* [ ] http://example.com/abc/ (404) with 1 occurrences migrated to:  \n  https://example.com/abc/ ([https](https://example.com/abc/) result 404).\n* [ ] http://example.com/abc/x/y (404) with 1 occurrences migrated to:  \n  https://example.com/abc/x/y ([https](https://example.com/abc/x/y) result 404).\n* [ ] http://example.com/abc/x/y/z (404) with 3 occurrences migrated to:  \n  https://example.com/abc/x/y/z ([https](https://example.com/abc/x/y/z) result 404).\n* [ ] http://example.com/app/login/authenticate (404) with 1 occurrences migrated to:  \n  https://example.com/app/login/authenticate ([https](https://example.com/app/login/authenticate) result 404).\n* [ ] http://example.com/arbitrary/path (404) with 1 occurrences migrated to:  \n  https://example.com/arbitrary/path ([https](https://example.com/arbitrary/path) result 404).\n* [ ] http://example.com/bar (404) with 6 occurrences migrated to:  \n  https://example.com/bar ([https](https://example.com/bar) result 404).\n* [ ] http://example.com/context.xml (404) with 4 occurrences migrated to:  \n  https://example.com/context.xml ([https](https://example.com/context.xml) result 404).\n* [ ] http://example.com/example (404) with 6 occurrences migrated to:  \n  https://example.com/example ([https](https://example.com/example) result 404).\n* [ ] http://example.com/example/?name (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name ([https](https://example.com/example/?name) result 404).\n* [ ] http://example.com/example/?name= (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name= ([https](https://example.com/example/?name=) result 404).\n* [ ] http://example.com/example/?name=%20 (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name=%20 ([https](https://example.com/example/?name=%20) result 404).\n* [ ] http://example.com/example/?name=row%5B0%5D (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name=row%5B0%5D ([https](https://example.com/example/?name=row%5B0%5D) result 404).\n* [ ] http://example.com/example/?name=value (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name=value ([https](https://example.com/example/?name=value) result 404).\n* [ ] http://example.com/example/?name=value&param2=value+2 (404) with 1 occurrences migrated to:  \n  https://example.com/example/?name=value&param2=value+2 ([https](https://example.com/example/?name=value&param2=value+2) result 404).\n* [ ] http://example.com/example/?row%5B0%5D=value (404) with 1 occurrences migrated to:  \n  https://example.com/example/?row%5B0%5D=value ([https](https://example.com/example/?row%5B0%5D=value) result 404).\n* [ ] http://example.com/foo (404) with 6 occurrences migrated to:  \n  https://example.com/foo ([https](https://example.com/foo) result 404).\n* [ ] http://example.com/foo/../bar (404) with 1 occurrences migrated to:  \n  https://example.com/foo/../bar ([https](https://example.com/foo/../bar) result 404).\n* [ ] http://example.com/foo/foo2?bar (404) with 1 occurrences migrated to:  \n  https://example.com/foo/foo2?bar ([https](https://example.com/foo/foo2?bar) result 404).\n* [ ] http://example.com/foo?bar (404) with 4 occurrences migrated to:  \n  https://example.com/foo?bar ([https](https://example.com/foo?bar) result 404).\n* [ ] http://example.com/foo?bar= (404) with 2 occurrences migrated to:  \n  https://example.com/foo?bar= ([https](https://example.com/foo?bar=) result 404).\n* [ ] http://example.com/foo?bar=baz (404) with 2 occurrences migrated to:  \n  https://example.com/foo?bar=baz ([https](https://example.com/foo?bar=baz) result 404).\n* [ ] http://example.com/foo?baz=42 (404) with 1 occurrences migrated to:  \n  https://example.com/foo?baz=42 ([https](https://example.com/foo?baz=42) result 404).\n* [ ] http://example.com/foo?foo=bar&baz=qux (404) with 2 occurrences migrated to:  \n  https://example.com/foo?foo=bar&baz=qux ([https](https://example.com/foo?foo=bar&baz=qux) result 404).\n* [ ] http://example.com/hotel (404) with 3 occurrences migrated to:  \n  https://example.com/hotel ([https](https://example.com/hotel) result 404).\n* [ ] http://example.com/hotel%20list (404) with 1 occurrences migrated to:  \n  https://example.com/hotel%20list ([https](https://example.com/hotel%20list) result 404).\n* [ ] http://example.com/hotel%20list/Z (404) with 1 occurrences migrated to:  \n  https://example.com/hotel%20list/Z ([https](https://example.com/hotel%20list/Z) result 404).\n* [ ] http://example.com/hotel%20list/Z%C3%BCrich (404) with 3 occurrences migrated to:  \n  https://example.com/hotel%20list/Z%C3%BCrich ([https](https://example.com/hotel%20list/Z%C3%BCrich) result 404).\n* [ ] http://example.com/hotels (404) with 3 occurrences migrated to:  \n  https://example.com/hotels ([https](https://example.com/hotels) result 404).\n* [ ] http://example.com/hotels/ (404) with 15 occurrences migrated to:  \n  https://example.com/hotels/ ([https](https://example.com/hotels/) result 404).\n* [ ] http://example.com/hotels/1/bookings/42 (404) with 1 occurrences migrated to:  \n  https://example.com/hotels/1/bookings/42 ([https](https://example.com/hotels/1/bookings/42) result 404).\n* [ ] http://example.com/hotels/1/pic/pics%2Flogo.png/size/150x150 (404) with 2 occurrences migrated to:  \n  https://example.com/hotels/1/pic/pics%2Flogo.png/size/150x150 ([https](https://example.com/hotels/1/pic/pics%2Flogo.png/size/150x150) result 404).\n* [ ] http://example.com/hotels/1/pic/pics/logo.png (404) with 1 occurrences migrated to:  \n  https://example.com/hotels/1/pic/pics/logo.png ([https](https://example.com/hotels/1/pic/pics/logo.png) result 404).\n* [ ] http://example.com/hotels/42/bookings/21 (404) with 1 occurrences migrated to:  \n  https://example.com/hotels/42/bookings/21 ([https](https://example.com/hotels/42/bookings/21) result 404).\n* [ ] http://example.com/hotels/42/bookings/42 (404) with 1 occurrences migrated to:  \n  https://example.com/hotels/42/bookings/42 ([https](https://example.com/hotels/42/bookings/42) result 404).\n* [ ] http://example.com/hotels/Rest%20%26%20Relax/bookings/42 (404) with 2 occurrences migrated to:  \n  https://example.com/hotels/Rest%20%26%20Relax/bookings/42 ([https](https://example.com/hotels/Rest%20%26%20Relax/bookings/42) result 404).\n* [ ] http://example.com/info (404) with 2 occurrences migrated to:  \n  https://example.com/info ([https](https://example.com/info) result 404).\n* [ ] http://example.com/invalid (404) with 1 occurrences migrated to:  \n  https://example.com/invalid ([https](https://example.com/invalid) result 404).\n* [ ] http://example.com/jquery-1.11.0.min.js (404) with 2 occurrences migrated to:  \n  https://example.com/jquery-1.11.0.min.js ([https](https://example.com/jquery-1.11.0.min.js) result 404).\n* [ ] http://example.com/match (404) with 1 occurrences migrated to:  \n  https://example.com/match ([https](https://example.com/match) result 404).\n* [ ] http://example.com/myFileUpload (404) with 1 occurrences migrated to:  \n  https://example.com/myFileUpload ([https](https://example.com/myFileUpload) result 404).\n* [ ] http://example.com/myForm (404) with 1 occurrences migrated to:  \n  https://example.com/myForm ([https](https://example.com/myForm) result 404).\n* [ ] http://example.com/path (404) with 4 occurrences migrated to:  \n  https://example.com/path ([https](https://example.com/path) result 404).\n* [ ] http://example.com/path?query (404) with 2 occurrences migrated to:  \n  https://example.com/path?query ([https](https://example.com/path?query) result 404).\n* [ ] http://example.com/path?query=foo (404) with 1 occurrences migrated to:  \n  https://example.com/path?query=foo ([https](https://example.com/path?query=foo) result 404).\n* [ ] http://example.com/people (404) with 1 occurrences migrated to:  \n  https://example.com/people ([https](https://example.com/people) result 404).\n* [ ] http://example.com/people/ (404) with 1 occurrences migrated to:  \n  https://example.com/people/ ([https](https://example.com/people/) result 404).\n* [ ] http://example.com/prefix/path (404) with 2 occurrences migrated to:  \n  https://example.com/prefix/path ([https](https://example.com/prefix/path) result 404).\n* [ ] http://example.com/resource (404) with 5 occurrences migrated to:  \n  https://example.com/resource ([https](https://example.com/resource) result 404).\n* [ ] http://example.com/resource?access_token=123 (404) with 1 occurrences migrated to:  \n  https://example.com/resource?access_token=123 ([https](https://example.com/resource?access_token=123) result 404).\n* [ ] http://example.com/spaces (404) with 1 occurrences migrated to:  \n  https://example.com/spaces ([https](https://example.com/spaces) result 404).\n* [ ] http://example.com/spaces%20and%20%E2%82%AC (404) with 3 occurrences migrated to:  \n  https://example.com/spaces%20and%20%E2%82%AC ([https](https://example.com/spaces%20and%20%E2%82%AC) result 404).\n* [ ] http://example.com/spring/ (404) with 1 occurrences migrated to:  \n  https://example.com/spring/ ([https](https://example.com/spring/) result 404).\n* [ ] http://example.com/test/this/here (404) with 1 occurrences migrated to:  \n  https://example.com/test/this/here ([https](https://example.com/test/this/here) result 404).\n* [ ] http://example.com/upload (404) with 1 occurrences migrated to:  \n  https://example.com/upload ([https](https://example.com/upload) result 404).\n* [ ] http://example.com/user (404) with 1 occurrences migrated to:  \n  https://example.com/user ([https](https://example.com/user) result 404).\n* [ ] http://example.org/fonts/css (404) with 6 occurrences migrated to:  \n  https://example.org/fonts/css ([https](https://example.org/fonts/css) result 404).\n* [ ] http://example.org/foo/page.html (404) with 1 occurrences migrated to:  \n  https://example.org/foo/page.html ([https](https://example.org/foo/page.html) result 404).\n* [ ] http://example.org/image.png (404) with 4 occurrences migrated to:  \n  https://example.org/image.png ([https](https://example.org/image.png) result 404).\n* [ ] http://example.org/music/people (404) with 4 occurrences migrated to:  \n  https://example.org/music/people ([https](https://example.org/music/people) result 404).\n* [ ] http://example.org/page.cache.html (404) with 1 occurrences migrated to:  \n  https://example.org/page.cache.html ([https](https://example.org/page.cache.html) result 404).\n* [ ] http://example.org/path (404) with 3 occurrences migrated to:  \n  https://example.org/path ([https](https://example.org/path) result 404).\n* [ ] http://springframework.org/oxm-test (404) with 2 occurrences migrated to:  \n  https://springframework.org/oxm-test ([https](https://springframework.org/oxm-test) result 404).\n* [ ] http://aaa.org:8080/app/b/c/d (301) with 1 occurrences migrated to:  \n  https://www.aaa.org/app/b/c/d ([https](https://aaa.org:8080/app/b/c/d) result 404).\n* [ ] http://www.example.com/favicon.ico (404) with 2 occurrences migrated to:  \n  https://www.example.com/favicon.ico ([https](https://www.example.com/favicon.ico) result 404).\n* [ ] http://www.example.com/foo/bar (404) with 1 occurrences migrated to:  \n  https://www.example.com/foo/bar ([https](https://www.example.com/foo/bar) result 404).\n* [ ] http://www.example.com/hotels (404) with 2 occurrences migrated to:  \n  https://www.example.com/hotels ([https](https://www.example.com/hotels) result 404).\n* [ ] http://www.example.com/user/ (404) with 4 occurrences migrated to:  \n  https://www.example.com/user/ ([https](https://www.example.com/user/) result 404).\n* [ ] http://www.example.com/user/john%3Bdoe/dashboard (404) with 4 occurrences migrated to:  \n  https://www.example.com/user/john%3Bdoe/dashboard ([https](https://www.example.com/user/john%3Bdoe/dashboard) result 404).\n* [ ] http://www.example.com/user/john;doe/dashboard (404) with 2 occurrences migrated to:  \n  https://www.example.com/user/john;doe/dashboard ([https](https://www.example.com/user/john;doe/dashboard) result 404).\n* [ ] http://www.ibm.com/developerworks/websphere/library/techarticles/0404_tang/0404_tang.html (301) with 1 occurrences migrated to:  \n  https://www.ibm.com/developerworks/websphere/library/techarticles/0404_tang/0404_tang.html ([https](https://www.ibm.com/developerworks/websphere/library/techarticles/0404_tang/0404_tang.html) result 404).\n* [ ] http://mydomain1.com:80/path (301) with 2 occurrences migrated to:  \n  https://www.mydomain1.com/path ([https](https://mydomain1.com:80/path) result 404).\n* [ ] http://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-03 (404) with 1 occurrences migrated to:  \n  https://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-03 ([https](https://www.quartz-scheduler.org/documentation/quartz-2.1.x/tutorials/tutorial-lesson-03) result 404).\n* [ ] http://www.utoronto.ca/webdocs/HTMLdocs/Book/Book-3ed/appb/mimetype.html (301) with 1 occurrences migrated to:  \n  https://www.utoronto.ca/webdocs/HTMLdocs/Book/Book-3ed/appb/mimetype.html ([https](https://www.utoronto.ca/webdocs/HTMLdocs/Book/Book-3ed/appb/mimetype.html) result 404).\n* [ ] http://xml.apache.org/xslt (404) with 3 occurrences migrated to:  \n  https://xml.apache.org/xslt ([https](https://xml.apache.org/xslt) result 404).\n* [ ] http://myhost.com/resource/path/myTemplate.txt (500) with 1 occurrences migrated to:  \n  https://myhost.com/resource/path/myTemplate.txt ([https](https://myhost.com/resource/path/myTemplate.txt) result 500).\n\n## Fixed Success \nThese URLs were switched to an https URL with a 2xx status. While the status was successful, your review is still recommended.\n\n* [ ] http://activemq.apache.org/delete-inactive-destinations.html with 1 occurrences migrated to:  \n  https://activemq.apache.org/delete-inactive-destinations.html ([https](https://activemq.apache.org/delete-inactive-destinations.html) result 200).\n* [ ] http://activemq.apache.org/stomp.html with 1 occurrences migrated to:  \n  https://activemq.apache.org/stomp.html ([https](https://activemq.apache.org/stomp.html) result 200).\n* [ ] http://ant.apache.org with 1 occurrences migrated to:  \n  https://ant.apache.org ([https](https://ant.apache.org) result 200).\n* [ ] http://asciidoctor.org/ with 1 occurrences migrated to:  \n  https://asciidoctor.org/ ([https](https://asciidoctor.org/) result 200).\n* [ ] http://asciidoctor.org/docs/editing-asciidoc-with-live-preview/ with 2 occurrences migrated to:  \n  https://asciidoctor.org/docs/editing-asciidoc-with-live-preview/ ([https](https://asciidoctor.org/docs/editing-asciidoc-with-live-preview/) result 200).\n* [ ] http://beanvalidation.org/ with 1 occurrences migrated to:  \n  https://beanvalidation.org/ ([https](https://beanvalidation.org/) result 200).\n* [ ] http://caniuse.com/ with 2 occurrences migrated to:  \n  https://caniuse.com/ ([https](https://caniuse.com/) result 200).\n* [ ] http://castor-data-binding.github.io/castor/reference-guides/1.3.3/html-single/index.html with 2 occurrences migrated to:  \n  https://castor-data-binding.github.io/castor/reference-guides/1.3.3/html-single/index.html ([https](https://castor-data-binding.github.io/castor/reference-guides/1.3.3/html-single/index.html) result 200).\n* [ ] http://cbor.io/ with 1 occurrences migrated to:  \n  https://cbor.io/ ([https](https://cbor.io/) result 200).\n* [ ] http://code.jquery.com/jquery-1.11.0.min.js with 2 occurrences migrated to:  \n  https://code.jquery.com/jquery-1.11.0.min.js ([https](https://code.jquery.com/jquery-1.11.0.min.js) result 200).\n* [ ] http://code.jquery.com/jquery.js with 1 occurrences migrated to:  \n  https://code.jquery.com/jquery.js ([https](https://code.jquery.com/jquery.js) result 200).\n* [ ] http://commons.apache.org/proper/commons-lang/ with 2 occurrences migrated to:  \n  https://commons.apache.org/proper/commons-lang/ ([https](https://commons.apache.org/proper/commons-lang/) result 200).\n* [ ] http://docs.oracle.com/javase/6/docs/api/java/lang/instrument/package-summary.html with 1 occurrences migrated to:  \n  https://docs.oracle.com/javase/6/docs/api/java/lang/instrument/package-summary.html ([https](https://docs.oracle.com/javase/6/docs/api/java/lang/instrument/package-summary.html) result 200).\n* [ ] http://docs.oracle.com/javase/8/docs/api/java/beans/package-summary.html with 1 occurrences migrated to:  \n  https://docs.oracle.com/javase/8/docs/api/java/beans/package-summary.html ([https](https://docs.oracle.com/javase/8/docs/api/java/beans/package-summary.html) result 200).\n* [ ] http://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html with 1 occurrences migrated to:  \n  https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html ([https](https://docs.oracle.com/javase/8/docs/api/java/lang/instrument/package-summary.html) result 200).\n* [ ] http://docs.oracle.com/javase/8/docs/api/javax/script/ScriptEngineFactory.html with 2 occurrences migrated to:  \n  https://docs.oracle.com/javase/8/docs/api/javax/script/ScriptEngineFactory.html ([https](https://docs.oracle.com/javase/8/docs/api/javax/script/ScriptEngineFactory.html) result 200).\n* [ ] http://docs.oracle.com/javase/tutorial/javabeans/advanced/customization.html with 1 occurrences migrated to:  \n  https://docs.oracle.com/javase/tutorial/javabeans/advanced/customization.html ([https](https://docs.oracle.com/javase/tutorial/javabeans/advanced/customization.html) result 200).\n* [ ] http://docs.oracle.com/javase/tutorial/javabeans/writing/properties.html with 1 occurrences migrated to:  \n  https://docs.oracle.com/javase/tutorial/javabeans/writing/properties.html ([https](https://docs.oracle.com/javase/tutorial/javabeans/writing/properties.html) result 200).\n* [ ] http://docs.seleniumhq.org/ with 1 occurrences migrated to:  \n  https://docs.seleniumhq.org/ ([https](https://docs.seleniumhq.org/) result 200).\n* [ ] http://docs.seleniumhq.org/projects/webdriver/ with 1 occurrences migrated to:  \n  https://docs.seleniumhq.org/projects/webdriver/ ([https](https://docs.seleniumhq.org/projects/webdriver/) result 200).\n* [ ] http://docs.spring.io/spring-framework/docs/current/javadoc-api/ with 1 occurrences migrated to:  \n  https://docs.spring.io/spring-framework/docs/current/javadoc-api/ ([https](https://docs.spring.io/spring-framework/docs/current/javadoc-api/) result 200).\n* [ ] http://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateView.html with 1 occurrences migrated to:  \n  https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateView.html ([https](https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/web/servlet/view/script/ScriptTemplateView.html) result 200).\n* [ ] http://docs.spring.io/spring-framework/docs/current/spring-framework-reference/ with 1 occurrences migrated to:  \n  https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/ ([https](https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/) result 200).\n* [ ] http://docs.spring.io/spring-session/docs/current/reference/html5/ with 1 occurrences migrated to:  \n  https://docs.spring.io/spring-session/docs/current/reference/html5/ ([https](https://docs.spring.io/spring-session/docs/current/reference/html5/) result 200).\n* [ ] http://en.wikipedia.org/wiki/Adapter_pattern with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/Adapter_pattern ([https](https://en.wikipedia.org/wiki/Adapter_pattern) result 200).\n* [ ] http://en.wikipedia.org/wiki/Halting_Problem with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/Halting_Problem ([https](https://en.wikipedia.org/wiki/Halting_Problem) result 200).\n* [ ] http://en.wikipedia.org/wiki/List_of_HTTP_status_codes with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/List_of_HTTP_status_codes ([https](https://en.wikipedia.org/wiki/List_of_HTTP_status_codes) result 200).\n* [ ] http://en.wikipedia.org/wiki/MIME with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/MIME ([https](https://en.wikipedia.org/wiki/MIME) result 200).\n* [ ] http://en.wikipedia.org/wiki/Mock_Object with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/Mock_Object ([https](https://en.wikipedia.org/wiki/Mock_Object) result 200).\n* [ ] http://en.wikipedia.org/wiki/Polyfill with 2 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/Polyfill ([https](https://en.wikipedia.org/wiki/Polyfill) result 200).\n* [ ] http://example.com with 132 occurrences migrated to:  \n  https://example.com ([https](https://example.com) result 200).\n* [ ] http://example.com/ with 16 occurrences migrated to:  \n  https://example.com/ ([https](https://example.com/) result 200).\n* [ ] http://example.com?foo with 2 occurrences migrated to:  \n  https://example.com?foo ([https](https://example.com?foo) result 200).\n* [ ] http://example.com?foo=bar with 8 occurrences migrated to:  \n  https://example.com?foo=bar ([https](https://example.com?foo=bar) result 200).\n* [ ] http://example.com?foo=bar@baz with 1 occurrences migrated to:  \n  https://example.com?foo=bar@baz ([https](https://example.com?foo=bar@baz) result 200).\n* [ ] http://example.org with 18 occurrences migrated to:  \n  https://example.org ([https](https://example.org) result 200).\n* [ ] http://example.org/ with 1 occurrences migrated to:  \n  https://example.org/ ([https](https://example.org/) result 200).\n* [ ] http://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/DeserializationFeature.html with 2 occurrences migrated to:  \n  https://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/DeserializationFeature.html ([https](https://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/DeserializationFeature.html) result 200).\n* [ ] http://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/MapperFeature.html with 2 occurrences migrated to:  \n  https://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/MapperFeature.html ([https](https://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/MapperFeature.html) result 200).\n* [ ] http://h2database.com with 1 occurrences migrated to:  \n  https://h2database.com ([https](https://h2database.com) result 200).\n* [ ] http://handlebarsjs.com with 2 occurrences migrated to:  \n  https://handlebarsjs.com ([https](https://handlebarsjs.com) result 200).\n* [ ] http://handlebarsjs.com/ with 2 occurrences migrated to:  \n  https://handlebarsjs.com/ ([https](https://handlebarsjs.com/) result 200).\n* [ ] http://hc.apache.org/httpcomponents-asyncclient-dev/ with 1 occurrences migrated to:  \n  https://hc.apache.org/httpcomponents-asyncclient-dev/ ([https](https://hc.apache.org/httpcomponents-asyncclient-dev/) result 200).\n* [ ] http://hc.apache.org/httpcomponents-client-ga/ with 2 occurrences migrated to:  \n  https://hc.apache.org/httpcomponents-client-ga/ ([https](https://hc.apache.org/httpcomponents-client-ga/) result 200).\n* [ ] http://hc.apache.org/httpcomponents-client-ga/httpclient/ with 1 occurrences migrated to:  \n  https://hc.apache.org/httpcomponents-client-ga/httpclient/ ([https](https://hc.apache.org/httpcomponents-client-ga/httpclient/) result 200).\n* [ ] http://www.hibernate.org/ (301) with 1 occurrences migrated to:  \n  https://hibernate.org/ ([https](https://www.hibernate.org/) result 200).\n* [ ] http://www.hibernate.org (301) with 1 occurrences migrated to:  \n  https://hibernate.org/ ([https](https://www.hibernate.org) result 200).\n* [ ] http://jcp.org/aboutJava/communityprocess/final/jsr003/index3.html with 1 occurrences migrated to:  \n  https://jcp.org/aboutJava/communityprocess/final/jsr003/index3.html ([https](https://jcp.org/aboutJava/communityprocess/final/jsr003/index3.html) result 200).\n* [ ] http://jcp.org/aboutJava/communityprocess/final/jsr160/index.html with 1 occurrences migrated to:  \n  https://jcp.org/aboutJava/communityprocess/final/jsr160/index.html ([https](https://jcp.org/aboutJava/communityprocess/final/jsr160/index.html) result 200).\n* [ ] http://jcp.org/en/jsr/detail?id=107 with 1 occurrences migrated to:  \n  https://jcp.org/en/jsr/detail?id=107 ([https](https://jcp.org/en/jsr/detail?id=107) result 200).\n* [ ] http://joel-costigliola.github.io/assertj/ with 3 occurrences migrated to:  \n  https://joel-costigliola.github.io/assertj/ ([https](https://joel-costigliola.github.io/assertj/) result 200).\n* [ ] http://jsonassert.skyscreamer.org with 1 occurrences migrated to:  \n  https://jsonassert.skyscreamer.org ([https](https://jsonassert.skyscreamer.org) result 200).\n* [ ] http://jsonassert.skyscreamer.org/ with 5 occurrences migrated to:  \n  https://jsonassert.skyscreamer.org/ ([https](https://jsonassert.skyscreamer.org/) result 200).\n* [ ] http://junit.org/junit5/docs/current/user-guide/ with 2 occurrences migrated to:  \n  https://junit.org/junit5/docs/current/user-guide/ ([https](https://junit.org/junit5/docs/current/user-guide/) result 200).\n* [ ] http://kotlinlang.org/ with 2 occurrences migrated to:  \n  https://kotlinlang.org/ ([https](https://kotlinlang.org/) result 200).\n* [ ] http://kotlinlang.org/docs/reference/ with 1 occurrences migrated to:  \n  https://kotlinlang.org/docs/reference/ ([https](https://kotlinlang.org/docs/reference/) result 200).\n* [ ] http://kotlinlang.org/docs/reference/classes.html with 3 occurrences migrated to:  \n  https://kotlinlang.org/docs/reference/classes.html ([https](https://kotlinlang.org/docs/reference/classes.html) result 200).\n* [ ] http://mydomain.com with 5 occurrences migrated to:  \n  https://mydomain.com ([https](https://mydomain.com) result 200).\n* [ ] http://netty.io/ with 1 occurrences migrated to:  \n  https://netty.io/ ([https](https://netty.io/) result 200).\n* [ ] http://openjdk.java.net/jeps/290 with 1 occurrences migrated to:  \n  https://openjdk.java.net/jeps/290 ([https](https://openjdk.java.net/jeps/290) result 200).\n* [ ] http://openjdk.java.net/projects/nashorn/ with 10 occurrences migrated to:  \n  https://openjdk.java.net/projects/nashorn/ ([https](https://openjdk.java.net/projects/nashorn/) result 200).\n* [ ] http://poi.apache.org with 3 occurrences migrated to:  \n  https://poi.apache.org ([https](https://poi.apache.org) result 200).\n* [ ] http://projects.spring.io/spring-boot/ with 1 occurrences migrated to:  \n  https://projects.spring.io/spring-boot/ ([https](https://projects.spring.io/spring-boot/) result 200).\n* [ ] http://projects.spring.io/spring-data/ with 1 occurrences migrated to:  \n  https://projects.spring.io/spring-data/ ([https](https://projects.spring.io/spring-data/) result 200).\n* [ ] http://projects.spring.io/spring-framework/ with 1 occurrences migrated to:  \n  https://projects.spring.io/spring-framework/ ([https](https://projects.spring.io/spring-framework/) result 200).\n* [ ] http://projects.spring.io/spring-integration/ with 1 occurrences migrated to:  \n  https://projects.spring.io/spring-integration/ ([https](https://projects.spring.io/spring-integration/) result 200).\n* [ ] http://projects.spring.io/spring-security/ with 3 occurrences migrated to:  \n  https://projects.spring.io/spring-security/ ([https](https://projects.spring.io/spring-security/) result 200).\n* [ ] http://repo1.maven.org/maven2/javax/inject/javax.inject/1/ with 2 occurrences migrated to:  \n  https://repo1.maven.org/maven2/javax/inject/javax.inject/1/ ([https](https://repo1.maven.org/maven2/javax/inject/javax.inject/1/) result 200).\n* [ ] http://schema.spring.io/mvc/spring-mvc.xsd with 1 occurrences migrated to:  \n  https://schema.spring.io/mvc/spring-mvc.xsd ([https](https://schema.spring.io/mvc/spring-mvc.xsd) result 200).\n* [ ] http://search.maven.org/ with 2 occurrences migrated to:  \n  https://search.maven.org/ ([https](https://search.maven.org/) result 200).\n* [ ] http://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html with 3 occurrences migrated to:  \n  https://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html ([https](https://sockjs.github.io/sockjs-protocol/sockjs-protocol-0.3.3.html) result 200).\n* [ ] http://sourceforge.net with 1 occurrences migrated to:  \n  https://sourceforge.net ([https](https://sourceforge.net) result 200).\n* [ ] http://sourceforge.net/projects/javadiff/ with 1 occurrences migrated to:  \n  https://sourceforge.net/projects/javadiff/ ([https](https://sourceforge.net/projects/javadiff/) result 200).\n* [ ] http://sourceforge.net/sflogo.php?group_id=37160 with 1 occurrences migrated to:  \n  https://sourceforge.net/sflogo.php?group_id=37160 ([https](https://sourceforge.net/sflogo.php?group_id=37160) result 200).\n* [ ] http://spring.io/blog/ with 1 occurrences migrated to:  \n  https://spring.io/blog/ ([https](https://spring.io/blog/) result 200).\n* [ ] http://spring.io/blog/category/news with 1 occurrences migrated to:  \n  https://spring.io/blog/category/news ([https](https://spring.io/blog/category/news) result 200).\n* [ ] http://square.github.io/okhttp/ with 1 occurrences migrated to:  \n  https://square.github.io/okhttp/ ([https](https://square.github.io/okhttp/) result 200).\n* [ ] http://stackoverflow.com/questions/1481251/what-does-document-domain-document-domain-do with 1 occurrences migrated to:  \n  https://stackoverflow.com/questions/1481251/what-does-document-domain-document-domain-do ([https](https://stackoverflow.com/questions/1481251/what-does-document-domain-document-domain-do) result 200).\n* [ ] http://stackoverflow.com/questions/19394570/java-jre-7u45-breaks-classloader-getresources with 2 occurrences migrated to:  \n  https://stackoverflow.com/questions/19394570/java-jre-7u45-breaks-classloader-getresources ([https](https://stackoverflow.com/questions/19394570/java-jre-7u45-breaks-classloader-getresources) result 200).\n* [ ] http://stackoverflow.com/questions/22986109/testing-spring-managed-servlet with 1 occurrences migrated to:  \n  https://stackoverflow.com/questions/22986109/testing-spring-managed-servlet ([https](https://stackoverflow.com/questions/22986109/testing-spring-managed-servlet) result 200).\n* [ ] http://stackoverflow.com/questions/24725438/what-could-cause-a-class-implementing-applicationlistenercontextrefreshedevent with 1 occurrences migrated to:  \n  https://stackoverflow.com/questions/24725438/what-could-cause-a-class-implementing-applicationlistenercontextrefreshedevent ([https](https://stackoverflow.com/questions/24725438/what-could-cause-a-class-implementing-applicationlistenercontextrefreshedevent) result 200).\n* [ ] http://stackoverflow.com/questions/35733344/can-contextconfiguration-in-a-custom-annotation-be-merged with 1 occurrences migrated to:  \n  https://stackoverflow.com/questions/35733344/can-contextconfiguration-in-a-custom-annotation-be-merged ([https](https://stackoverflow.com/questions/35733344/can-contextconfiguration-in-a-custom-annotation-be-merged) result 200).\n* [ ] http://start.spring.io/ with 2 occurrences migrated to:  \n  https://start.spring.io/ ([https](https://start.spring.io/) result 200).\n* [ ] http://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html with 1 occurrences migrated to:  \n  https://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html ([https](https://stas-blogspot.blogspot.com/2010/03/java-bridge-methods-explained.html) result 200).\n* [ ] http://stomp.github.io/stomp-specification-1.2.html with 9 occurrences migrated to:  \n  https://stomp.github.io/stomp-specification-1.2.html ([https](https://stomp.github.io/stomp-specification-1.2.html) result 200).\n* [ ] http://struts.apache.org with 1 occurrences migrated to:  \n  https://struts.apache.org ([https](https://struts.apache.org) result 200).\n* [ ] http://struts.apache.org/ with 1 occurrences migrated to:  \n  https://struts.apache.org/ ([https](https://struts.apache.org/) result 200).\n* [ ] http://tapestry.apache.org/ with 2 occurrences migrated to:  \n  https://tapestry.apache.org/ ([https](https://tapestry.apache.org/) result 200).\n* [ ] http://tiles.apache.org with 4 occurrences migrated to:  \n  https://tiles.apache.org ([https](https://tiles.apache.org) result 200).\n* [ ] http://tiles.apache.org/framework/dependency-management.html with 1 occurrences migrated to:  \n  https://tiles.apache.org/framework/dependency-management.html ([https](https://tiles.apache.org/framework/dependency-management.html) result 200).\n* [ ] http://tools.ietf.org/html/rfc1945 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc1945 ([https](https://tools.ietf.org/html/rfc1945) result 200).\n* [ ] http://tools.ietf.org/html/rfc2109 with 2 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2109 ([https](https://tools.ietf.org/html/rfc2109) result 200).\n* [ ] http://tools.ietf.org/html/rfc2295 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2295 ([https](https://tools.ietf.org/html/rfc2295) result 200).\n* [ ] http://tools.ietf.org/html/rfc2324 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2324 ([https](https://tools.ietf.org/html/rfc2324) result 200).\n* [ ] http://tools.ietf.org/html/rfc2518 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2518 ([https](https://tools.ietf.org/html/rfc2518) result 200).\n* [ ] http://tools.ietf.org/html/rfc2616 with 3 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2616 ([https](https://tools.ietf.org/html/rfc2616) result 200).\n* [ ] http://tools.ietf.org/html/rfc2774 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2774 ([https](https://tools.ietf.org/html/rfc2774) result 200).\n* [ ] http://tools.ietf.org/html/rfc2817 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2817 ([https](https://tools.ietf.org/html/rfc2817) result 200).\n* [ ] http://tools.ietf.org/html/rfc2965 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc2965 ([https](https://tools.ietf.org/html/rfc2965) result 200).\n* [ ] http://tools.ietf.org/html/rfc3229 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc3229 ([https](https://tools.ietf.org/html/rfc3229) result 200).\n* [ ] http://tools.ietf.org/html/rfc3986 with 3 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc3986 ([https](https://tools.ietf.org/html/rfc3986) result 200).\n* [ ] http://tools.ietf.org/html/rfc4918 with 5 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc4918 ([https](https://tools.ietf.org/html/rfc4918) result 200).\n* [ ] http://tools.ietf.org/html/rfc5842 with 2 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc5842 ([https](https://tools.ietf.org/html/rfc5842) result 200).\n* [ ] http://tools.ietf.org/html/rfc5988 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc5988 ([https](https://tools.ietf.org/html/rfc5988) result 200).\n* [ ] http://tools.ietf.org/html/rfc6202 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc6202 ([https](https://tools.ietf.org/html/rfc6202) result 200).\n* [ ] http://tools.ietf.org/html/rfc6266 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc6266 ([https](https://tools.ietf.org/html/rfc6266) result 200).\n* [ ] http://tools.ietf.org/html/rfc6454 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc6454 ([https](https://tools.ietf.org/html/rfc6454) result 200).\n* [ ] http://tools.ietf.org/html/rfc6455 with 2 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc6455 ([https](https://tools.ietf.org/html/rfc6455) result 200).\n* [ ] http://tools.ietf.org/html/rfc6585 with 4 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc6585 ([https](https://tools.ietf.org/html/rfc6585) result 200).\n* [ ] http://tools.ietf.org/html/rfc7230 with 10 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7230 ([https](https://tools.ietf.org/html/rfc7230) result 200).\n* [ ] http://tools.ietf.org/html/rfc7231 with 56 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7231 ([https](https://tools.ietf.org/html/rfc7231) result 200).\n* [ ] http://tools.ietf.org/html/rfc7232 with 8 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7232 ([https](https://tools.ietf.org/html/rfc7232) result 200).\n* [ ] http://tools.ietf.org/html/rfc7233 with 12 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7233 ([https](https://tools.ietf.org/html/rfc7233) result 200).\n* [ ] http://tools.ietf.org/html/rfc7234 with 5 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7234 ([https](https://tools.ietf.org/html/rfc7234) result 200).\n* [ ] http://tools.ietf.org/html/rfc7235 with 6 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7235 ([https](https://tools.ietf.org/html/rfc7235) result 200).\n* [ ] http://tools.ietf.org/html/rfc7238 with 1 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7238 ([https](https://tools.ietf.org/html/rfc7238) result 200).\n* [ ] http://tools.ietf.org/html/rfc7239 with 7 occurrences migrated to:  \n  https://tools.ietf.org/html/rfc7239 ([https](https://tools.ietf.org/html/rfc7239) result 200).\n* [ ] http://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt with 3 occurrences migrated to:  \n  https://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt ([https](https://tools.ietf.org/rfcdiff?difftype=--hwdiff&url2=draft-ietf-webdav-protocol-06.txt) result 200).\n* [ ] http://unlicense.org with 1 occurrences migrated to:  \n  https://unlicense.org ([https](https://unlicense.org) result 200).\n* [ ] http://www.amazon.com/exec/obidos/tg/detail/-/0764543857/ with 10 occurrences migrated to:  \n  https://www.amazon.com/exec/obidos/tg/detail/-/0764543857/ ([https](https://www.amazon.com/exec/obidos/tg/detail/-/0764543857/) result 200).\n* [ ] http://www.apache.org with 1 occurrences migrated to:  \n  https://www.apache.org ([https](https://www.apache.org) result 200).\n* [ ] http://www.apple.com/DTDs/PropertyList-1.0.dtd with 6 occurrences migrated to:  \n  https://www.apple.com/DTDs/PropertyList-1.0.dtd ([https](https://www.apple.com/DTDs/PropertyList-1.0.dtd) result 200).\n* [ ] http://www.atomikos.com/ with 1 occurrences migrated to:  \n  https://www.atomikos.com/ ([https](https://www.atomikos.com/) result 200).\n* [ ] http://www.baeldung.com/kotlin-null-safety with 1 occurrences migrated to:  \n  https://www.baeldung.com/kotlin-null-safety ([https](https://www.baeldung.com/kotlin-null-safety) result 200).\n* [ ] http://www.eclipse.org/aspectj/doc/released/devguide/index.html with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/doc/released/devguide/index.html ([https](https://www.eclipse.org/aspectj/doc/released/devguide/index.html) result 200).\n* [ ] http://www.eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html ([https](https://www.eclipse.org/aspectj/doc/released/devguide/ltw-configuration.html) result 200).\n* [ ] http://www.eclipse.org/aspectj/dtd/aspectj.dtd with 1 occurrences migrated to:  \n  https://www.eclipse.org/aspectj/dtd/aspectj.dtd ([https](https://www.eclipse.org/aspectj/dtd/aspectj.dtd) result 200).\n* [ ] http://ehcache.sourceforge.net (301) with 1 occurrences migrated to:  \n  https://www.ehcache.org/ ([https](https://ehcache.sourceforge.net) result 200).\n* [ ] http://ehcache.org/ (301) with 1 occurrences migrated to:  \n  https://www.ehcache.org/ ([https](https://ehcache.org/) result 200).\n* [ ] http://www.embeddedjs.com/ with 2 occurrences migrated to:  \n  https://www.embeddedjs.com/ ([https](https://www.embeddedjs.com/) result 200).\n* [ ] http://www.enterpriseintegrationpatterns.com with 1 occurrences migrated to:  \n  https://www.enterpriseintegrationpatterns.com ([https](https://www.enterpriseintegrationpatterns.com) result 200).\n* [ ] http://www.example.org/?param=aGVsbG9Xb3JsZA%3D%3D with 1 occurrences migrated to:  \n  https://www.example.org/?param=aGVsbG9Xb3JsZA%3D%3D ([https](https://www.example.org/?param=aGVsbG9Xb3JsZA%3D%3D) result 200).\n* [ ] http://www.google.com with 2 occurrences migrated to:  \n  https://www.google.com ([https](https://www.google.com) result 200).\n* [ ] http://www.h2database.com with 1 occurrences migrated to:  \n  https://www.h2database.com ([https](https://www.h2database.com) result 200).\n* [ ] http://www.h2database.com/html/grammar.html with 1 occurrences migrated to:  \n  https://www.h2database.com/html/grammar.html ([https](https://www.h2database.com/html/grammar.html) result 200).\n* [ ] http://www.ietf.org with 1 occurrences migrated to:  \n  https://www.ietf.org ([https](https://www.ietf.org) result 200).\n* [ ] http://www.ietf.org/rfc/rfc1867.txt with 1 occurrences migrated to:  \n  https://www.ietf.org/rfc/rfc1867.txt ([https](https://www.ietf.org/rfc/rfc1867.txt) result 200).\n* [ ] http://www.ietf.org/rfc/rfc2396.txt with 2 occurrences migrated to:  \n  https://www.ietf.org/rfc/rfc2396.txt ([https](https://www.ietf.org/rfc/rfc2396.txt) result 200).\n* [ ] http://www.ietf.org/rfc/rfc3986.txt with 11 occurrences migrated to:  \n  https://www.ietf.org/rfc/rfc3986.txt ([https](https://www.ietf.org/rfc/rfc3986.txt) result 200).\n* [ ] http://www.infoq.com/ with 1 occurrences migrated to:  \n  https://www.infoq.com/ ([https](https://www.infoq.com/) result 200).\n* [ ] http://www.infoq.com/minibooks/JTDS with 1 occurrences migrated to:  \n  https://www.infoq.com/minibooks/JTDS ([https](https://www.infoq.com/minibooks/JTDS) result 200).\n* [ ] http://www.jetbrains.com/idea/ with 1 occurrences migrated to:  \n  https://www.jetbrains.com/idea/ ([https](https://www.jetbrains.com/idea/) result 200).\n* [ ] http://www.json.org/ with 1 occurrences migrated to:  \n  https://www.json.org/ ([https](https://www.json.org/) result 200).\n* [ ] http://www.jython.org with 2 occurrences migrated to:  \n  https://www.jython.org ([https](https://www.jython.org) result 200).\n* [ ] http://www.jython.org/ with 2 occurrences migrated to:  \n  https://www.jython.org/ ([https](https://www.jython.org/) result 200).\n* [ ] http://www.lowagie.com/iText with 2 occurrences migrated to:  \n  https://www.lowagie.com/iText ([https](https://www.lowagie.com/iText) result 200).\n* [ ] http://www.manpagez.com/man/5/crontab/ with 1 occurrences migrated to:  \n  https://www.manpagez.com/man/5/crontab/ ([https](https://www.manpagez.com/man/5/crontab/) result 200).\n* [ ] http://mydomain1.com:80/ (301) with 2 occurrences migrated to:  \n  https://www.mydomain1.com/ ([https](https://mydomain1.com:80/) result 200).\n* [ ] http://mydomain1.com:80 (301) with 1 occurrences migrated to:  \n  https://www.mydomain1.com/ ([https](https://mydomain1.com:80) result 200).\n* [ ] http://www.oracle.com/technetwork/articles/javaee/jpa-137156.html with 1 occurrences migrated to:  \n  https://www.oracle.com/technetwork/articles/javaee/jpa-137156.html ([https](https://www.oracle.com/technetwork/articles/javaee/jpa-137156.html) result 200).\n* [ ] http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html with 1 occurrences migrated to:  \n  https://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html ([https](https://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html) result 200).\n* [ ] http://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html with 1 occurrences migrated to:  \n  https://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html ([https](https://www.oracle.com/technetwork/java/javase/documentation/spec-136004.html) result 200).\n* [ ] http://www.oracle.com/technetwork/java/javase/tech/download-jsp-141676.html with 1 occurrences migrated to:  \n  https://www.oracle.com/technetwork/java/javase/tech/download-jsp-141676.html ([https](https://www.oracle.com/technetwork/java/javase/tech/download-jsp-141676.html) result 200).\n* [ ] http://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html with 1 occurrences migrated to:  \n  https://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html ([https](https://www.oracle.com/technetwork/java/javase/tech/javamanagement-140525.html) result 200).\n* [ ] http://www.ow2.org/ with 1 occurrences migrated to:  \n  https://www.ow2.org/ ([https](https://www.ow2.org/) result 200).\n* [ ] http://www.owasp.org/index.php/HTTPOnly with 4 occurrences migrated to:  \n  https://www.owasp.org/index.php/HTTPOnly ([https](https://www.owasp.org/index.php/HTTPOnly) result 200).\n* [ ] http://quartz-scheduler.org (301) with 3 occurrences migrated to:  \n  https://www.quartz-scheduler.org/ ([https](https://quartz-scheduler.org) result 200).\n* [ ] http://www.rabbitmq.com/stomp.html with 1 occurrences migrated to:  \n  https://www.rabbitmq.com/stomp.html ([https](https://www.rabbitmq.com/stomp.html) result 200).\n* [ ] http://www.reactive-streams.org with 1 occurrences migrated to:  \n  https://www.reactive-streams.org ([https](https://www.reactive-streams.org) result 200).\n* [ ] http://www.reactive-streams.org/ with 2 occurrences migrated to:  \n  https://www.reactive-streams.org/ ([https](https://www.reactive-streams.org/) result 200).\n* [ ] http://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Publisher.html with 1 occurrences migrated to:  \n  https://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Publisher.html ([https](https://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Publisher.html) result 200).\n* [ ] http://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Subscriber.html with 1 occurrences migrated to:  \n  https://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Subscriber.html ([https](https://www.reactive-streams.org/reactive-streams-1.0.1-javadoc/org/reactivestreams/Subscriber.html) result 200).\n* [ ] http://seleniumhq.org/projects/webdriver/ (301) with 1 occurrences migrated to:  \n  https://www.seleniumhq.org ([https](https://seleniumhq.org/projects/webdriver/) result 200).\n* [ ] http://www.springbyexample.org/examples/custom-thread-scope-module.html with 1 occurrences migrated to:  \n  https://www.springbyexample.org/examples/custom-thread-scope-module.html ([https](https://www.springbyexample.org/examples/custom-thread-scope-module.html) result 200).\n* [ ] http://www.springframework.org/dtd/spring-beans-2.0.dtd with 3 occurrences migrated to:  \n  https://www.springframework.org/dtd/spring-beans-2.0.dtd ([https](https://www.springframework.org/dtd/spring-beans-2.0.dtd) result 200).\n* [ ] http://www.springframework.org/schema/aop/spring-aop.xsd with 12 occurrences migrated to:  \n  https://www.springframework.org/schema/aop/spring-aop.xsd ([https](https://www.springframework.org/schema/aop/spring-aop.xsd) result 200).\n* [ ] http://www.springframework.org/schema/beans/spring-beans.xsd with 80 occurrences migrated to:  \n  https://www.springframework.org/schema/beans/spring-beans.xsd ([https](https://www.springframework.org/schema/beans/spring-beans.xsd) result 200).\n* [ ] http://www.springframework.org/schema/cache/spring-cache.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/cache/spring-cache.xsd ([https](https://www.springframework.org/schema/cache/spring-cache.xsd) result 200).\n* [ ] http://www.springframework.org/schema/context/spring-context.xsd with 13 occurrences migrated to:  \n  https://www.springframework.org/schema/context/spring-context.xsd ([https](https://www.springframework.org/schema/context/spring-context.xsd) result 200).\n* [ ] http://www.springframework.org/schema/jdbc/spring-jdbc.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/jdbc/spring-jdbc.xsd ([https](https://www.springframework.org/schema/jdbc/spring-jdbc.xsd) result 200).\n* [ ] http://www.springframework.org/schema/jee/spring-jee.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/jee/spring-jee.xsd ([https](https://www.springframework.org/schema/jee/spring-jee.xsd) result 200).\n* [ ] http://www.springframework.org/schema/jms/spring-jms.xsd with 2 occurrences migrated to:  \n  https://www.springframework.org/schema/jms/spring-jms.xsd ([https](https://www.springframework.org/schema/jms/spring-jms.xsd) result 200).\n* [ ] http://www.springframework.org/schema/lang/spring-lang.xsd with 4 occurrences migrated to:  \n  https://www.springframework.org/schema/lang/spring-lang.xsd ([https](https://www.springframework.org/schema/lang/spring-lang.xsd) result 200).\n* [ ] http://www.springframework.org/schema/mvc/spring-mvc.xsd with 3 occurrences migrated to:  \n  https://www.springframework.org/schema/mvc/spring-mvc.xsd ([https](https://www.springframework.org/schema/mvc/spring-mvc.xsd) result 200).\n* [ ] http://www.springframework.org/schema/oxm/spring-oxm.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/oxm/spring-oxm.xsd ([https](https://www.springframework.org/schema/oxm/spring-oxm.xsd) result 200).\n* [ ] http://www.springframework.org/schema/tool/spring-tool.xsd with 13 occurrences migrated to:  \n  https://www.springframework.org/schema/tool/spring-tool.xsd ([https](https://www.springframework.org/schema/tool/spring-tool.xsd) result 200).\n* [ ] http://www.springframework.org/schema/tx/spring-tx.xsd with 8 occurrences migrated to:  \n  https://www.springframework.org/schema/tx/spring-tx.xsd ([https](https://www.springframework.org/schema/tx/spring-tx.xsd) result 200).\n* [ ] http://www.springframework.org/schema/util/spring-util.xsd with 1 occurrences migrated to:  \n  https://www.springframework.org/schema/util/spring-util.xsd ([https](https://www.springframework.org/schema/util/spring-util.xsd) result 200).\n* [ ] http://www.springframework.org/schema/websocket/spring-websocket.xsd with 12 occurrences migrated to:  \n  https://www.springframework.org/schema/websocket/spring-websocket.xsd ([https](https://www.springframework.org/schema/websocket/spring-websocket.xsd) result 200).\n* [ ] http://www.stuartellis.eu/articles/erb/ (301) with 2 occurrences migrated to:  \n  https://www.stuartellis.name/articles/erb/ ([https](https://www.stuartellis.eu/articles/erb/) result 200).\n* [ ] http://www.thymeleaf.org/ with 2 occurrences migrated to:  \n  https://www.thymeleaf.org/ ([https](https://www.thymeleaf.org/) result 200).\n* [ ] http://www.thymeleaf.org/documentation.html with 2 occurrences migrated to:  \n  https://www.thymeleaf.org/documentation.html ([https](https://www.thymeleaf.org/documentation.html) result 200).\n* [ ] http://www.w3.org/2000/xmlns/ with 5 occurrences migrated to:  \n  https://www.w3.org/2000/xmlns/ ([https](https://www.w3.org/2000/xmlns/) result 200).\n* [ ] http://www.w3.org/2004/08/xop/include with 2 occurrences migrated to:  \n  https://www.w3.org/2004/08/xop/include ([https](https://www.w3.org/2004/08/xop/include) result 200).\n* [ ] http://www.w3.org/DesignIssues/MatrixURIs.html with 1 occurrences migrated to:  \n  https://www.w3.org/DesignIssues/MatrixURIs.html ([https](https://www.w3.org/DesignIssues/MatrixURIs.html) result 200).\n* [ ] http://www.w3.org/TR/2004/WD-soap12-mtom-20040608/ with 2 occurrences migrated to:  \n  https://www.w3.org/TR/2004/WD-soap12-mtom-20040608/ ([https](https://www.w3.org/TR/2004/WD-soap12-mtom-20040608/) result 200).\n* [ ] http://www.w3.org/TR/2005/REC-xop10-20050125/ with 6 occurrences migrated to:  \n  https://www.w3.org/TR/2005/REC-xop10-20050125/ ([https](https://www.w3.org/TR/2005/REC-xop10-20050125/) result 200).\n* [ ] http://www.w3.org/TR/cors/ with 19 occurrences migrated to:  \n  https://www.w3.org/TR/cors/ ([https](https://www.w3.org/TR/cors/) result 200).\n* [ ] http://www.w3.org/TR/eventsource/ with 2 occurrences migrated to:  \n  https://www.w3.org/TR/eventsource/ ([https](https://www.w3.org/TR/eventsource/) result 200).\n* [ ] http://www.w3.org/TR/xhtml1/ with 1 occurrences migrated to:  \n  https://www.w3.org/TR/xhtml1/ ([https](https://www.w3.org/TR/xhtml1/) result 200).\n* [ ] http://www.w3.org/TR/xhtml1/diffs.html with 1 occurrences migrated to:  \n  https://www.w3.org/TR/xhtml1/diffs.html ([https](https://www.w3.org/TR/xhtml1/diffs.html) result 200).\n* [ ] http://www.w3.org/TR/xhtml1/dtds.html with 1 occurrences migrated to:  \n  https://www.w3.org/TR/xhtml1/dtds.html ([https](https://www.w3.org/TR/xhtml1/dtds.html) result 200).\n* [ ] http://www.webjars.org with 4 occurrences migrated to:  \n  https://www.webjars.org ([https](https://www.webjars.org) result 200).\n* [ ] http://www.webjars.org/ with 2 occurrences migrated to:  \n  https://www.webjars.org/ ([https](https://www.webjars.org/) result 200).\n* [ ] http://www.webjars.org/documentation with 2 occurrences migrated to:  \n  https://www.webjars.org/documentation ([https](https://www.webjars.org/documentation) result 200).\n* [ ] http://x-stream.github.io/ with 2 occurrences migrated to:  \n  https://x-stream.github.io/ ([https](https://x-stream.github.io/) result 200).\n* [ ] http://youtrack.jetbrains.com/issue/IDEA-53476 with 1 occurrences migrated to:  \n  https://youtrack.jetbrains.com/issue/IDEA-53476 ([https](https://youtrack.jetbrains.com/issue/IDEA-53476) result 200).\n* [ ] http://youtrack.jetbrains.com/issue/IDEA-64446 with 1 occurrences migrated to:  \n  https://youtrack.jetbrains.com/issue/IDEA-64446 ([https](https://youtrack.jetbrains.com/issue/IDEA-64446) result 200).\n* [ ] http://bit.ly/TRlX2r with 1 occurrences migrated to:  \n  https://bit.ly/TRlX2r ([https](https://bit.ly/TRlX2r) result 301).\n* [ ] http://bit.ly/UzccDt with 1 occurrences migrated to:  \n  https://bit.ly/UzccDt ([https](https://bit.ly/UzccDt) result 301).\n* [ ] http://bit.ly/p9rIvx with 1 occurrences migrated to:  \n  https://bit.ly/p9rIvx ([https](https://bit.ly/p9rIvx) result 301).\n* [ ] http://bit.ly/qUwvwz with 1 occurrences migrated to:  \n  https://bit.ly/qUwvwz ([https](https://bit.ly/qUwvwz) result 301).\n* [ ] http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx with 1 occurrences migrated to:  \n  https://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx ([https](https://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx) result 301).\n* [ ] http://castor-data-binding.github.io/castor with 1 occurrences migrated to:  \n  https://castor-data-binding.github.io/castor ([https](https://castor-data-binding.github.io/castor) result 301).\n* [ ] http://code.google.com/p/beanshell2/ with 1 occurrences migrated to:  \n  https://code.google.com/p/beanshell2/ ([https](https://code.google.com/p/beanshell2/) result 301).\n* [ ] http://code.google.com/p/browsersec/wiki/Part2 with 1 occurrences migrated to:  \n  https://code.google.com/p/browsersec/wiki/Part2 ([https](https://code.google.com/p/browsersec/wiki/Part2) result 301).\n* [ ] http://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal with 1 occurrences migrated to:  \n  https://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal ([https](https://code.google.com/p/gears/wiki/ResumableHttpRequestsProposal) result 301).\n* [ ] http://code.google.com/p/xml-matchers/ with 3 occurrences migrated to:  \n  https://code.google.com/p/xml-matchers/ ([https](https://code.google.com/p/xml-matchers/) result 301).\n* [ ] http://commons.apache.org/proper/commons-dbcp with 2 occurrences migrated to:  \n  https://commons.apache.org/proper/commons-dbcp ([https](https://commons.apache.org/proper/commons-dbcp) result 301).\n* [ ] http://commons.apache.org/proper/commons-fileupload with 2 occurrences migrated to:  \n  https://commons.apache.org/proper/commons-fileupload ([https](https://commons.apache.org/proper/commons-fileupload) result 301).\n* [ ] http://confluence.jetbrains.net/display/IDEADEV/Gradle+integration with 1 occurrences migrated to:  \n  https://confluence.jetbrains.net/display/IDEADEV/Gradle+integration ([https](https://confluence.jetbrains.net/display/IDEADEV/Gradle+integration) result 301).\n* [ ] http://contributor-covenant.org with 1 occurrences migrated to:  \n  https://contributor-covenant.org ([https](https://contributor-covenant.org) result 301).\n* [ ] http://contributor-covenant.org/version/1/3/0/ with 1 occurrences migrated to:  \n  https://contributor-covenant.org/version/1/3/0/ ([https](https://contributor-covenant.org/version/1/3/0/) result 301).\n* [ ] http://db.apache.org/derby with 2 occurrences migrated to:  \n  https://db.apache.org/derby ([https](https://db.apache.org/derby) result 301).\n* [ ] http://dev.w3.org/html5/eventsource/ with 2 occurrences migrated to:  \n  https://dev.w3.org/html5/eventsource/ ([https](https://dev.w3.org/html5/eventsource/) result 301).\n* [ ] http://domain.com with 24 occurrences migrated to:  \n  https://domain.com ([https](https://domain.com) result 301).\n* [ ] http://domain.com/ with 1 occurrences migrated to:  \n  https://domain.com/ ([https](https://domain.com/) result 301).\n* [ ] http://en.wikipedia.org/wiki/Cache_ with 1 occurrences migrated to:  \n  https://en.wikipedia.org/wiki/Cache_ ([https](https://en.wikipedia.org/wiki/Cache_) result 301).\n* [ ] http://facebook.github.io/react/ with 2 occurrences migrated to:  \n  https://facebook.github.io/react/ ([https](https://facebook.github.io/react/) result 301).\n* [ ] http://forum.springframework.org/showthread.php?t=41350 with 1 occurrences migrated to:  \n  https://forum.springframework.org/showthread.php?t=41350 ([https](https://forum.springframework.org/showthread.php?t=41350) result 301).\n* [ ] http://github.com/SpringSource/spring-framework with 1 occurrences migrated to:  \n  https://github.com/SpringSource/spring-framework ([https](https://github.com/SpringSource/spring-framework) result 301).\n* [ ] http://hdiv.org/ with 1 occurrences migrated to:  \n  https://hdiv.org/ ([https](https://hdiv.org/) result 301).\n* [ ] http://jakarta.apache.org/commons/fileupload with 1 occurrences migrated to:  \n  https://jakarta.apache.org/commons/fileupload ([https](https://jakarta.apache.org/commons/fileupload) result 301).\n* [ ] http://jira.springframework.org/browse/SPR-5708 with 1 occurrences migrated to:  \n  https://jira.springframework.org/browse/SPR-5708 ([https](https://jira.springframework.org/browse/SPR-5708) result 301).\n* [ ] http://jira.springframework.org/browse/SPR-6124 with 1 occurrences migrated to:  \n  https://jira.springframework.org/browse/SPR-6124 ([https](https://jira.springframework.org/browse/SPR-6124) result 301).\n* [ ] http://jira.springframework.org/browse/SPR-6128 with 1 occurrences migrated to:  \n  https://jira.springframework.org/browse/SPR-6128 ([https](https://jira.springframework.org/browse/SPR-6128) result 301).\n* [ ] http://jira.springframework.org/browse/SPR-7064 with 1 occurrences migrated to:  \n  https://jira.springframework.org/browse/SPR-7064 ([https](https://jira.springframework.org/browse/SPR-7064) result 301).\n* [ ] http://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html with 1 occurrences migrated to:  \n  https://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html ([https](https://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html) result 301).\n* [ ] http://mockito.org/ (301) with 1 occurrences migrated to:  \n  https://mockito.github.io ([https](https://mockito.org/) result 301).\n* [ ] http://mydomain1.com with 37 occurrences migrated to:  \n  https://mydomain1.com ([https](https://mydomain1.com) result 301).\n* [ ] http://mydomain1.com/ with 2 occurrences migrated to:  \n  https://mydomain1.com/ ([https](https://mydomain1.com/) result 301).\n* [ ] http://mydomain1.com/path with 2 occurrences migrated to:  \n  https://mydomain1.com/path ([https](https://mydomain1.com/path) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-2660 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-2660 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-2660) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-2754 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-2754 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-2754) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-2789 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-2789 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-2789) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-3127 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-3127 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-3127) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-3775 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-3775 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-3775) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-3880 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-3880 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-3880) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-3896 with 7 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-3896 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-3896) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-3949 with 1 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-3949 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-3949) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-4008 with 2 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-4008 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-4008) result 301).\n* [ ] http://opensource.atlassian.com/projects/spring/browse/SPR-4040 with 2 occurrences migrated to:  \n  https://opensource.atlassian.com/projects/spring/browse/SPR-4040 ([https](https://opensource.atlassian.com/projects/spring/browse/SPR-4040) result 301).\n* [ ] http://publib.boulder.ibm.com/infocenter/wasinfo/v5r1//topic/com.ibm.websphere.base.doc/info/aes/ae/rdat_extiapi.html with 1 occurrences migrated to:  \n  https://publib.boulder.ibm.com/infocenter/wasinfo/v5r1//topic/com.ibm.websphere.base.doc/info/aes/ae/rdat_extiapi.html ([https](https://publib.boulder.ibm.com/infocenter/wasinfo/v5r1//topic/com.ibm.websphere.base.doc/info/aes/ae/rdat_extiapi.html) result 301).\n* [ ] http://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.javadoc.doc/public_html/api/com/ibm/websphere/rsadapter/JDBCConnectionSpec.html with 1 occurrences migrated to:  \n  https://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.javadoc.doc/public_html/api/com/ibm/websphere/rsadapter/JDBCConnectionSpec.html ([https](https://publib.boulder.ibm.com/infocenter/wasinfo/v6r0/topic/com.ibm.websphere.javadoc.doc/public_html/api/com/ibm/websphere/rsadapter/JDBCConnectionSpec.html) result 301).\n* [ ] http://site2.com with 3 occurrences migrated to:  \n  https://site2.com ([https](https://site2.com) result 301).\n* [ ] http://slack.kotlinlang.org/ with 2 occurrences migrated to:  \n  https://slack.kotlinlang.org/ ([https](https://slack.kotlinlang.org/) result 301).\n* [ ] http://sourceforge.net/projects/c3p0 with 2 occurrences migrated to:  \n  https://sourceforge.net/projects/c3p0 ([https](https://sourceforge.net/projects/c3p0) result 301).\n* [ ] http://sourceforge.net/projects/javadiff with 1 occurrences migrated to:  \n  https://sourceforge.net/projects/javadiff ([https](https://sourceforge.net/projects/javadiff) result 301).\n* [ ] http://springframework.org with 2 occurrences migrated to:  \n  https://springframework.org ([https](https://springframework.org) result 301).\n* [ ] http://www.atomenabled.org/developers/syndication/ with 1 occurrences migrated to:  \n  https://www.atomenabled.org/developers/syndication/ ([https](https://www.atomenabled.org/developers/syndication/) result 301).\n* [ ] http://www.google.com/ig/calculator?q=1USD=?EUR with 1 occurrences migrated to:  \n  https://www.google.com/ig/calculator?q=1USD=?EUR ([https](https://www.google.com/ig/calculator?q=1USD=?EUR) result 301).\n* [ ] http://www.javaworld.com/javaworld/jw-01-2009/jw-01-spring-transactions.html with 1 occurrences migrated to:  \n  https://www.javaworld.com/javaworld/jw-01-2009/jw-01-spring-transactions.html ([https](https://www.javaworld.com/javaworld/jw-01-2009/jw-01-spring-transactions.html) result 301).\n* [ ] http://www.junit.org/ with 1 occurrences migrated to:  \n  https://www.junit.org/ ([https](https://www.junit.org/) result 301).\n* [ ] http://www.mnot.net/cache_docs with 1 occurrences migrated to:  \n  https://www.mnot.net/cache_docs ([https](https://www.mnot.net/cache_docs) result 301).\n* [ ] http://www.sf.net/home.view?siteLanguage=nl with 1 occurrences migrated to:  \n  https://www.sf.net/home.view?siteLanguage=nl ([https](https://www.sf.net/home.view?siteLanguage=nl) result 301).\n* [ ] http://www.springframework.org with 7 occurrences migrated to:  \n  https://www.springframework.org ([https](https://www.springframework.org) result 301).\n* [ ] http://www.springframework.org/ with 3 occurrences migrated to:  \n  https://www.springframework.org/ ([https](https://www.springframework.org/) result 301).\n* [ ] http://xyz.com/path with 2 occurrences migrated to:  \n  https://xyz.com/path ([https](https://xyz.com/path) result 301).\n* [ ] http://commons.apache.org/codec/ with 1 occurrences migrated to:  \n  https://commons.apache.org/codec/ ([https](https://commons.apache.org/codec/) result 302).\n* [ ] http://commons.apache.org/logging with 2 occurrences migrated to:  \n  https://commons.apache.org/logging ([https](https://commons.apache.org/logging) result 302).\n* [ ] http://download.oracle.com/javaee/6/api/javax/inject/Scope.html with 1 occurrences migrated to:  \n  https://download.oracle.com/javaee/6/api/javax/inject/Scope.html ([https](https://download.oracle.com/javaee/6/api/javax/inject/Scope.html) result 302).\n* [ ] http://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html with 4 occurrences migrated to:  \n  https://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html ([https](https://download.oracle.com/javase/1.5.0/docs/api/java/lang/System.html) result 302).\n* [ ] http://download.oracle.com/javase/6/docs/technotes/guides/jar/jar.html with 1 occurrences migrated to:  \n  https://download.oracle.com/javase/6/docs/technotes/guides/jar/jar.html ([https](https://download.oracle.com/javase/6/docs/technotes/guides/jar/jar.html) result 302).\n* [ ] http://download.oracle.com/javase/8/docs/api/java/beans/ConstructorProperties.html with 1 occurrences migrated to:  \n  https://download.oracle.com/javase/8/docs/api/java/beans/ConstructorProperties.html ([https](https://download.oracle.com/javase/8/docs/api/java/beans/ConstructorProperties.html) result 302).\n* [ ] http://download.oracle.com/javase/jndi/tutorial/beyond/misc/policy.html with 1 occurrences migrated to:  \n  https://download.oracle.com/javase/jndi/tutorial/beyond/misc/policy.html ([https](https://download.oracle.com/javase/jndi/tutorial/beyond/misc/policy.html) result 302).\n* [ ] http://gafter.blogspot.nl/2006/12/super-type-tokens.html with 1 occurrences migrated to:  \n  https://gafter.blogspot.nl/2006/12/super-type-tokens.html ([https](https://gafter.blogspot.nl/2006/12/super-type-tokens.html) result 302).\n* [ ] http://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project with 1 occurrences migrated to:  \n  https://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project ([https](https://git-scm.com/book/en/Distributed-Git-Contributing-to-a-Project) result 302).\n* [ ] http://git-scm.com/book/en/Git-Tools-Rewriting-History with 1 occurrences migrated to:  \n  https://git-scm.com/book/en/Git-Tools-Rewriting-History ([https](https://git-scm.com/book/en/Git-Tools-Rewriting-History) result 302).\n* [ ] http://java.sun.com with 3 occurrences migrated to:  \n  https://java.sun.com ([https](https://java.sun.com) result 302).\n* [ ] http://java.sun.com/docs/books/jls/third_edition/html/conversions.html with 1 occurrences migrated to:  \n  https://java.sun.com/docs/books/jls/third_edition/html/conversions.html ([https](https://java.sun.com/docs/books/jls/third_edition/html/conversions.html) result 302).\n* [ ] http://java.sun.com/docs/books/jls/third_edition/html/expressions.html with 1 occurrences migrated to:  \n  https://java.sun.com/docs/books/jls/third_edition/html/expressions.html ([https](https://java.sun.com/docs/books/jls/third_edition/html/expressions.html) result 302).\n* [ ] http://java.sun.com/j2se/ with 2 occurrences migrated to:  \n  https://java.sun.com/j2se/ ([https](https://java.sun.com/j2se/) result 302).\n* [ ] http://java.sun.com/j2se/1.4.1/docs/tooldocs/solaris/javadoc.html with 1 occurrences migrated to:  \n  https://java.sun.com/j2se/1.4.1/docs/tooldocs/solaris/javadoc.html ([https](https://java.sun.com/j2se/1.4.1/docs/tooldocs/solaris/javadoc.html) result 302).\n* [ ] http://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html with 1 occurrences migrated to:  \n  https://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html ([https](https://java.sun.com/j2se/1.4.2/docs/api/java/text/SimpleDateFormat.html) result 302).\n* [ ] http://java.sun.com/j2se/javadoc with 1 occurrences migrated to:  \n  https://java.sun.com/j2se/javadoc ([https](https://java.sun.com/j2se/javadoc) result 302).\n* [ ] http://java.sun.com/j2se/javadoc/ with 1 occurrences migrated to:  \n  https://java.sun.com/j2se/javadoc/ ([https](https://java.sun.com/j2se/javadoc/) result 302).\n* [ ] http://java.sun.com/j2se/javadoc/faq.html with 1 occurrences migrated to:  \n  https://java.sun.com/j2se/javadoc/faq.html ([https](https://java.sun.com/j2se/javadoc/faq.html) result 302).\n* [ ] http://java.sun.com/webservices/jaxb/ with 1 occurrences migrated to:  \n  https://java.sun.com/webservices/jaxb/ ([https](https://java.sun.com/webservices/jaxb/) result 302).\n* [ ] http://java.sun.com/xml/ns/j2ee/connector_1_5.xsd with 1 occurrences migrated to:  \n  https://java.sun.com/xml/ns/j2ee/connector_1_5.xsd ([https](https://java.sun.com/xml/ns/j2ee/connector_1_5.xsd) result 302).\n* [ ] http://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd with 2 occurrences migrated to:  \n  https://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd ([https](https://java.sun.com/xml/ns/j2ee/web-jsptaglibrary_2_0.xsd) result 302).\n* [ ] http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd with 2 occurrences migrated to:  \n  https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd ([https](https://java.sun.com/xml/ns/javaee/web-app_3_0.xsd) result 302).\n* [ ] http://sourceforge.net/projects/cglib/files/cglib3/3.0/cglib-3.0.jar/download with 1 occurrences migrated to:  \n  https://sourceforge.net/projects/cglib/files/cglib3/3.0/cglib-3.0.jar/download ([https](https://sourceforge.net/projects/cglib/files/cglib3/3.0/cglib-3.0.jar/download) result 302).\n* [ ] http://other.info/foo/bar (301) with 1 occurrences migrated to:  \n  https://weibo.com/otherinfo/foo/bar ([https](https://other.info/foo/bar) result 302).\n* [ ] http://www.iana.org/assignments/http-status-codes with 1 occurrences migrated to:  \n  https://www.iana.org/assignments/http-status-codes ([https](https://www.iana.org/assignments/http-status-codes) result 302).\n* [ ] http://www.iana.org/assignments/media-types/ with 1 occurrences migrated to:  \n  https://www.iana.org/assignments/media-types/ ([https](https://www.iana.org/assignments/media-types/) result 302).\n* [ ] http://www.sys-con.com/java with 1 occurrences migrated to:  \n  https://www.sys-con.com/java ([https](https://www.sys-con.com/java) result 302).\n\n# Ignored\nThese URLs were intentionally ignored.\n\n* http://Additional-namespace-name-URI with 1 occurrences\n* http://Default-namespace-name-URI with 1 occurrences\n* http://HOST:8080/remoting/AccountService with 1 occurrences\n* http://Namespace-name-URI with 1 occurrences\n* http://Unbound-namespace-name-URI with 1 occurrences\n* http://anotherHost/mvc-showcase with 1 occurrences\n* http://apache.org/xml/features/disallow-doctype-decl with 14 occurrences\n* http://barfoo:8888 with 1 occurrences\n* http://example/ with 1 occurrences\n* http://fake-service with 7 occurrences\n* http://foo with 3 occurrences\n* http://foobar:8088 with 1 occurrences\n* http://host:port/myApp/myEndpoint/ with 1 occurrences\n* http://java.sun.com/jsp/jstl/core with 1 occurrences\n* http://java.sun.com/xml/jaxp/properties/schemaLanguage with 1 occurrences\n* http://java.sun.com/xml/ns/j2ee with 6 occurrences\n* http://java.sun.com/xml/ns/javaee with 4 occurrences\n* http://java.sun.com/xml/ns/persistence with 1 occurrences\n* http://java.sun.com/xml/stream/properties/report-cdata-event with 1 occurrences\n* http://jaxws.remoting.springframework.org/ with 4 occurrences\n* http://localhost with 86 occurrences\n* http://localhost/ with 16 occurrences\n* http://localhost/42 with 1 occurrences\n* http://localhost/?cookie=foo with 1 occurrences\n* http://localhost/FILE.TXT with 1 occurrences\n* http://localhost/abc with 1 occurrences\n* http://localhost/abc/def with 1 occurrences\n* http://localhost/app%20/path/ with 1 occurrences\n* http://localhost/app/path%20with%20spaces/ with 1 occurrences\n* http://localhost/bar with 2 occurrences\n* http://localhost/context/a with 3 occurrences\n* http://localhost/contextPath/main/path with 2 occurrences\n* http://localhost/file.foo with 1 occurrences\n* http://localhost/file.txt with 1 occurrences\n* http://localhost/foo with 2 occurrences\n* http://localhost/foo%20bar with 1 occurrences\n* http://localhost/foo/bar with 1 occurrences\n* http://localhost/foo/bar/baz with 1 occurrences\n* http://localhost/forward with 1 occurrences\n* http://localhost/hotels/42/bookings/21 with 4 occurrences\n* http://localhost/input with 1 occurrences\n* http://localhost/jquery-1.11.0.min.js with 5 occurrences\n* http://localhost/messages/form with 1 occurrences\n* http://localhost/mvc-showcase with 2 occurrences\n* http://localhost/mvc-showcase/app with 1 occurrences\n* http://localhost/mvc-showcase/data/foo%20bar with 1 occurrences\n* http://localhost/mvc-showcase/data/param with 1 occurrences\n* http://localhost/mvc-showcase/data/param?foo=123 with 2 occurrences\n* http://localhost/myapp/main with 1 occurrences\n* http://localhost/myapp/people/1/addresses/DE with 1 occurrences\n* http://localhost/path with 3 occurrences\n* http://localhost/path;a=b/with/semicolon with 1 occurrences\n* http://localhost/persons with 1 occurrences\n* http://localhost/prefix with 1 occurrences\n* http://localhost/prefix/app with 1 occurrences\n* http://localhost/prefix/bar with 1 occurrences\n* http://localhost/prefix/mvc-showcase with 3 occurrences\n* http://localhost/query= with 1 occurrences\n* http://localhost/query=foo@bar with 1 occurrences\n* http://localhost/resources/child/response.txt with 1 occurrences\n* http://localhost/resources/foo with 2 occurrences\n* http://localhost/resources/foo.txt with 1 occurrences\n* http://localhost/resources/response.txt with 2 occurrences\n* http://localhost/rest/books/6/pages/1.json with 1 occurrences\n* http://localhost/something/1/foo with 1 occurrences\n* http://localhost/something/optional-param with 1 occurrences\n* http://localhost/test with 4 occurrences\n* http://localhost/test.html with 1 occurrences\n* http://localhost/test/this with 2 occurrences\n* http://localhost:7070/example/adminhandle.vm with 1 occurrences\n* http://localhost:7070/example/bingo.html with 1 occurrences\n* http://localhost:80/jquery-1.11.0.min.js with 1 occurrences\n* http://localhost:8080 with 34 occurrences\n* http://localhost:8080/ with 4 occurrences\n* http://localhost:8080/OrderService with 3 occurrences\n* http://localhost:8080/aA/bB/cC with 1 occurrences\n* http://localhost:8080/context with 1 occurrences\n* http://localhost:8080/context/myapiresource with 1 occurrences\n* http://localhost:8080/gamecast/admin/index.html with 1 occurrences\n* http://localhost:8080/gamecast/display.html with 1 occurrences\n* http://localhost:8080/gamecast/displayShoppingCart.html with 1 occurrences\n* http://localhost:8080/jquery-1.11.0.min.js with 1 occurrences\n* http://localhost:8080/mvc-showcase with 1 occurrences\n* http://localhost:8080/myapiresource with 1 occurrences\n* http://localhost:8080/myapp/js/sockjs-client.js with 1 occurrences\n* http://localhost:8080/path with 2 occurrences\n* http://localhost:8080/people with 2 occurrences\n* http://localhost:8080/portfolio with 1 occurrences\n* http://localhost:8080/spring/ with 2 occurrences\n* http://localhost:8080/test/ with 2 occurrences\n* http://localhost:8080/test/print?value=%EA%B0%80+%EB%82%98 with 1 occurrences\n* http://localhost:8081 with 1 occurrences\n* http://localhost:8081/ with 1 occurrences\n* http://localhost:8181 with 1 occurrences\n* http://localhost:8888/AccountServiceEndpoint?WSDL with 1 occurrences\n* http://localhost:9000 with 7 occurrences\n* http://localhost:9090 with 18 occurrences\n* http://localhost:9090/jquery-1.11.0.min.js with 2 occurrences\n* http://localhost:9990/mail/messages/form with 1 occurrences\n* http://localhost:9999/ with 1 occurrences\n* http://localhost:9999/OrderService?wsdl with 4 occurrences\n* http://localhosta/testbean with 3 occurrences\n* http://myserver with 1 occurrences\n* http://myurl with 12 occurrences\n* http://remotehost:8080/remoting/AccountService with 2 occurrences\n* http://samples.springframework.org/flight with 39 occurrences\n* http://somethingDifferent with 1 occurrences\n* http://springframework.org/spring-ws with 17 occurrences\n* http://test.com with 1 occurrences\n* http://test.com/ with 1 occurrences\n* http://testng.org/ with 1 occurrences\n* http://tiles.apache.org/tags-tiles with 1 occurrences\n* http://www with 1 occurrences\n* http://www.foo.com/schema/component with 6 occurrences\n* http://www.mycompany.com/schema/myns with 4 occurrences\n* http://www.springframework.org/schema/aop with 30 occurrences\n* http://www.springframework.org/schema/beans with 169 occurrences\n* http://www.springframework.org/schema/beans/test with 2 occurrences\n* http://www.springframework.org/schema/c with 1 occurrences\n* http://www.springframework.org/schema/cache with 5 occurrences\n* http://www.springframework.org/schema/context with 28 occurrences\n* http://www.springframework.org/schema/jdbc with 8 occurrences\n* http://www.springframework.org/schema/jee with 9 occurrences\n* http://www.springframework.org/schema/jms with 5 occurrences\n* http://www.springframework.org/schema/lang with 10 occurrences\n* http://www.springframework.org/schema/mvc with 8 occurrences\n* http://www.springframework.org/schema/oxm with 4 occurrences\n* http://www.springframework.org/schema/p with 4 occurrences\n* http://www.springframework.org/schema/task with 2 occurrences\n* http://www.springframework.org/schema/tool with 27 occurrences\n* http://www.springframework.org/schema/tx with 18 occurrences\n* http://www.springframework.org/schema/util with 8 occurrences\n* http://www.springframework.org/schema/websocket with 26 occurrences\n* http://www.springframework.org/spring-ws with 1 occurrences\n* http://www.springframework.org/tags with 4 occurrences\n* http://www.springframework.org/tags/form with 2 occurrences\n* http://www.w3.org/1999/XSL/Transform with 8 occurrences\n* http://www.w3.org/2001/XMLSchema with 24 occurrences\n* http://www.w3.org/2001/XMLSchema-instance with 83 occurrences\n* http://www.w3.org/2005/Atom with 4 occurrences\n* http://www.w3.org/TR/html4/charset.html with 5 occurrences\n* http://www.w3.org/TR/html4/sgml/entities.html with 14 occurrences\n* http://www.w3.org/XML/1998/namespace with 5 occurrences\n* http://xml.org/sax/features/ with 4 occurrences\n* http://xml.org/sax/features/external-general-entities with 14 occurrences\n* http://xml.org/sax/features/is-standalone with 1 occurrences\n* http://xml.org/sax/features/namespace-prefixes with 13 occurrences\n* http://xml.org/sax/features/namespaces with 12 occurrences\n* http://xml.org/sax/features/namespaces-prefixes with 1 occurrences\n* http://xml.org/sax/properties/lexical-handler with 12 occurrences']",['closed'],[1],['Merged into `5.1.x` in commit 3db08c6b7af48ca213fca46ae2cb63cbb1137cc4.']
8417a73913a2352fc988a63d60872f0a98f51734,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java,Condition_Change,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-			if (name.length() > 1 && name.substring(1,2).equals(""_"")) {
+			if (name.length() > 1 && name.substring(1, 2).equals(""_"")) {",2,condition,Polishing,"Closes gh-1340
",,1340,1,['Polishing'],[''],['closed'],[0],[]
84963ba4d865e995fc17483a7cc857bdce595e2f,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,Condition_Change,"-									if (!(type.isMarkedNullable() && arg == null) && type.getClassifier() instanceof KClass<?> kClass
-											&& KotlinDetector.isInlineClass(JvmClassMappingKt.getJavaClass(kClass))) {
+									if (!(type.isMarkedNullable() && arg == null) &&
+											type.getClassifier() instanceof KClass<?> kClass &&
+											KotlinDetector.isInlineClass(JvmClassMappingKt.getJavaClass(kClass))) {",5,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
84cc7ffdf6330ed4e437bb67fa2708c9ffa3b340,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/ServletServerHttpRequest.java,Condition_Change,"-				if (true || !hasQuery) {
+				if (!hasQuery) {",2,condition,Fix test failure,,,,0,N/A,N/A,N/A,N/A,N/A
85cecb66e5526ad29fda44b1d63ab7f202aed0e3,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/handler/invocation/reactive/InvocableHandlerMethod.java,Condition_Change,"-	 * Configure a reactive registry. This is needed for cases where the response
-	 * is fully handled within the controller in combination with an async void
-	 * return value.
-	 * <p>By default this is an instance of {@link ReactiveAdapterRegistry} with
-	 * default settings.
-	 * @param registry the registry to use
+	 * Configure a reactive adapter registry. This is needed for async return values.
+	 * <p>By default this is a {@link ReactiveAdapterRegistry} with default settings.
-	 * @return a Mono with the result from the invocation.
+	 * @return a Mono with the result from the invocation
-
-			return isAsyncVoidReturnType(returnType, adapter) ?
-					Mono.from(adapter.toPublisher(value)) : Mono.justOrEmpty(value);
+			return (isAsyncVoidReturnType(returnType, adapter) ?
+					Mono.from(adapter.toPublisher(value)) : Mono.justOrEmpty(value));
+		MethodParameter[] parameters = getMethodParameters();
-		MethodParameter[] parameters = getMethodParameters();
+
-		if (!exMsg.contains(parameter.getExecutable().toGenericString())) {
+		if (exMsg != null && !exMsg.contains(parameter.getExecutable().toGenericString())) {",10,condition,Consistent parameter retrieval across InvocableHandlerMethod variants,"See gh-22900
",,22900,1,['Check if null before accessing exception message in webflux InvocableHandlerMethod#logArgumentErrorIfNecessary'],"['Add null check before call `message.contains`.\r\n\r\nException message should be null checked before accessing it in [InvocableHandlerMethod#logArgumentErrorIfNecessary](https://github.com/spring-projects/spring-framework/blob/e16a134/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java#L219).\r\n\r\nIf message is null, NPE will be thrown and webflux responds 500(INTERNAL SERVER ERROR).\r\n\r\nIn [corresponding function in webmvc](https://github.com/spring-projects/spring-framework/blob/e16a134/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java#L219), exception message is checked before accessing its method. I think webflux should do in the same manner.\r\n\r\nRefs.\r\n- https://github.com/spring-projects/spring-framework/blob/e16a134/spring-web/src/main/java/org/springframework/web/method/support/InvocableHandlerMethod.java#L172\r\n- https://github.com/spring-projects/spring-framework/blob/e16a134/spring-webflux/src/main/java/org/springframework/web/reactive/result/method/InvocableHandlerMethod.java#L219']",['closed'],[4],"['@sakuna63 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22900)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22900) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@sakuna63 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22900)!', ""Thanks for the PR.\r\n\r\n> I will create issue later.\r\n\r\nPlease don't. since the move to github for issues we don't need an issue and a PR as one supersedes the other.\r\n"", ""@snicoll OK. I've already created issue before reading your comment. I close https://github.com/spring-projects/spring-framework/issues/22901.""]"
8662b7773c01c710aa44b684b292335695199436,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Condition_Change,"-			for (String url : StringUtils.delimitedListToStringArray(
+			for (String path : StringUtils.delimitedListToStringArray(
-					if (url.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {
+					if (path.endsWith(ResourceUtils.JAR_FILE_EXTENSION)) {
+						File file = new File(path);
-								ResourceUtils.FILE_URL_PREFIX + url + ResourceUtils.JAR_URL_SEPARATOR);
+								ResourceUtils.FILE_URL_PREFIX + file.getAbsolutePath() +
+								ResourceUtils.JAR_URL_SEPARATOR);
-						logger.debug(""Cannot search for matching files underneath ["" + url +
+						logger.debug(""Cannot search for matching files underneath ["" + path +",10,"condition, iteration",PathMatchingResourcePatternResolver converts manifest entries to absolute paths,"Issue: SPR-14934
",,19501,1,['PathMatchingResourcePatternResolver provides duplicate resources with relative URL [SPR-14934]'],"[""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-14934](https://jira.spring.io/browse/SPR-14934?redirect=false)** and commented\n\nThis is a regression introduced by #18260\n\n`PathMatchingResourcePatternResolver#doFindAllClassPathResources` first gets the path returned by the `LaunchedUrlClassLoader` which will add the URLs of all nested jar  + the URL of `BOOT-INF-classes`, something like `URL [jar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/]`\n\nBecause we need to get all XML files from the root (path is the empty string) we also invoke `addAllClassLoaderJarRoots` which works recursively as follow:\n\n* does not add anything with `LaunchedUrlClassLoader`\n* with `classLoader.getSystemClassLoader()` adds `URL [jar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/]`\n* with its parent (`AppClassLoader`)  adds `URL [jar:file:SPR-13685-0.0.1-SNAPSHOT.jar!/]` via `addClassPathManifestEntries`. It also adds a bunch of entries from JDK jars\n* does not add anything with `ExtClassLoader`\n\nSo we have the following entries for the candidate location:\n\n```\njar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/\njar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/\njar:file:SPR-13685-0.0.1-SNAPSHOT.jar!/\n```\n\nSo, for the same `a.xml` at the root of the classpath in `src/main/resources` we end up with the following candidates:\n\n```\njar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes!/a.xml\njar:file:/Users/snicoll/workspace/pivotal/spring-framework-issues/SPR-13685/target/SPR-13685-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes/a.xml\njar:file:SPR-13685-0.0.1-SNAPSHOT.jar!/BOOT-INF/classes/a.xml\n```\n\nAt this point I can only guess that each entry match each candidate in the list above (in that order).  it isn't obvious how the second one lead to a lookup in `BOOT-INF/classes` though but given that a `!` is missing in the second case, it's an indication it may come from that faulty URL.\n\nA [repro project is available](https://github.com/spring-projects/spring-framework-issues/tree/ec15861593195a709e271aa80a974270e1e009bf/SPR-13685)\n\n---\n\n**Affects:** 4.3 GA\n\n**Issue Links:**\n- #18260 PathMatchingResourcePatternResolver does not consider manifest based classpaths\n- #19503 PathMatchingResourcePatternResolver finds duplicate resources for executable jars but not for executable wars\n\n""]",['closed'],[1],"[""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nWhile working on this issue, we've discovered a Spring Boot issue as well, check [#7449](https://github.com/spring-projects/spring-boot/issues/7449)\n""]"
86733a98da91c57d2ac28365a82da3e3fbd15fb1,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java,Condition_Change,"- * sub-classes to deviate from the default. Unwrap the content of a
+ * sub-classes to deviate from the default. Unwraps the content of a
-	 * {@link EventListener} annotation or any matching attribute on a meta-annotation.
+	 * {@link EventListener} annotation or any matching attribute on a composed
+	 * annotation.
+			// TODO annotationAttributes are null with proxy
-			else { // TODO annotationAttributes null with proxy
+			// TODO Remove once AnnotatedElementUtils supports annotations on proxies
+			else {
-				this.condition = (eventListener != null ? eventListener.condition() : null);
+				this.condition = (eventListener != null ? eventListener.condition() : """");",4,condition,Polish ApplicationListenerMethodAdapter,,,,0,N/A,N/A,N/A,N/A,N/A
8694a0aac06388332373765a3cf0a494b0243a90,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
-import java.util.Arrays;
+
-	 * {@link java.lang.annotation.Inherited inherited}. For greater clarity regarding inherited
-	 * annotations, consider using {@link #isAnnotationInherited(Class, Class)} instead.
+	 * {@linkplain java.lang.annotation.Inherited inherited}. For greater clarity
+	 * regarding inherited annotations, consider using
+	 * {@link #isAnnotationInherited(Class, Class)} instead.
-		for (Annotation annotation : Arrays.asList(clazz.getDeclaredAnnotations())) {
+		for (Annotation annotation : clazz.getDeclaredAnnotations()) {
-	 * on the supplied {@code clazz} and is {@link java.lang.annotation.Inherited inherited}
-	 * i.e., not declared locally for the class).
+	 * on the supplied {@code clazz} and is {@linkplain java.lang.annotation.Inherited inherited}
+	 * (i.e., not declared locally for the class).
-	 * will not be traversed. See the {@link java.lang.annotation.Inherited JavaDoc} for the
-	 * &#064;Inherited meta-annotation for further details regarding annotation inheritance.
+	 * will not be traversed. See the {@linkplain java.lang.annotation.Inherited Javadoc} for the
+	 * {@code @Inherited} meta-annotation for further details regarding annotation inheritance.
-	 * on the supplied {@code clazz} and is {@link java.lang.annotation.Inherited inherited}
+	 * on the supplied {@code clazz} and is <em>inherited</em>",4,iteration,Minor changes to AnnotationUtils,"- Polished Javadoc for isAnnotationDeclaredLocally() and
  isAnnotationInherited().
- Removed unnecessary call to Arrays.asList() in
  isAnnotationDeclaredLocally().
",,,0,N/A,N/A,N/A,N/A,N/A
871bb57e025d1daa42524040f038819a6c19ceef,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/TransactionAwareDataSourceProxy.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
+			else if (method.getName().equals(""getWarnings"") || method.getName().equals(""clearWarnings"")) {
+				// Avoid creation of target Connection on pre-close cleanup (e.g. in Hibernate Session)
+				return null;
+			}",3,condition,TransactionAwareDataSourceProxy locally handles get/clearWarnings call,"Closes gh-23346
",,23346,1,['Session.close() accidentally triggers creation of TransactionAwareDataSourceProxy Connection'],"[""**Affects:** 3.1.4.RELEASE\r\nUsing hibernate: 3.6.10.Final\r\n\r\n---\r\nI'm facing an issue caused by opening connections with database on session.close call.\r\nFor some reason, hibernate throws an exception when is opening a connection with database, then he starts to rollback the transaction.\r\nFrom now on, a proxy connection exists in session (`TransactionAwareInvocationHandler`), but real connection with database does not exists.\r\n\r\nAfter that, _spring-orm_ call `SessionFactoryUtils.closeSession`, and this goes to close connection, but real connection failed to be created\r\n\r\nHibernate `ConnectionManager`, before close the connection call `JDBCExceptionReporter.logAndClearWarnings( connection );` (connection parameter is proxy `TransactionAwareInvocationHandler` connection without real connection because creation failed)\r\n\r\nThen `TransactionAwareInvocationHandler` create a new connection with database because `getWarnings` and `clearWarnings` are not mapped methods in invoke\r\nThis connection is closed right after creation, but when I am inside a transaction, this connection resource is binded to thread and never unbinded. Because _spring-tx_ is alredy in a rollback block.\r\n\r\nI think a connection should not be opened when some of those two methods `getWarnings` and `clearWarnings` are called and real connection does not exists.\r\n\r\nhttps://github.com/zgsolucoes/spring-framework/commit/35c0b084906e6d122b13980df12383958a935213""]",['closed'],[1],"[""Good point! We're locally handling `getWarnings` and `clearWarnings` calls in `TransactionAwareDataSourceProxy` now. I'll also backport this to 5.0.15 and 4.3.25.""]"
871e378ed054d95f19bcb75fa0f01e202e83f367,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/aspectj/annotation/AbstractAspectJAdvisorFactory.java,Condition_Change,"-		if (aspectClass.getSuperclass().getAnnotation(Aspect.class) != null &&
-				!Modifier.isAbstract(aspectClass.getSuperclass().getModifiers())) {
+		Class<?> superclass = aspectClass.getSuperclass();
+		if (superclass.getAnnotation(Aspect.class) != null &&
+				!Modifier.isAbstract(superclass.getModifiers())) {
-					aspectClass.getSuperclass().getName() + ""]"");
+					superclass.getName() + ""]"");",7,condition,Polish AbstractAspectJAdvisorFactory,Closes gh-27340,,27340,1,['Polish AbstractAspectJAdvisorFactory'],['Left out invoke the native method.'],['closed'],[5],"['@Inmord Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27340)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27340) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@Inmord Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27340)!', 'This has been merged into `main`.\r\n\r\nThanks for submitting your first PR to the Spring Framework! 👍 ', '@Inmord, for future PRs, please make sure you create your PR against the `main` branch instead of the `5.2.x` branch.\r\n\r\nThanks', '> @Inmord，对于未来的 PR，请确保您针对`main`分支而不是分支创建 PR `5.2.x`。\r\n> \r\n> 谢谢\r\n\r\nOkay, thanks.\r\n']"
871f705bca8da88c95966b9ab37d9aefa0dd24ca,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,Condition_Change,"-		if (!componentScans.isEmpty() &&
-				!this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {
+		if (!componentScans.isEmpty()) {",3,condition,Remove ComponentScan duplicate condition,"Closes gh-27077
",,27077,1,['Conditions to determine if `@ComponentScan` should be applied can be chosen from the wrong class'],"['Here is an example that demonstrates [the problem](https://github.com/snicoll-scratches/demo-condition-parent/blob/3e586697d23af0fe530422aa82c8148146b0efc0/src/main/java/com/example/demo/BaseConfiguration.java#L13): https://github.com/snicoll-scratches/demo-condition-parent\r\n\r\n`ConfigurationClassParser` does the following when it determines if a `@ComponentScan` should be applied: https://github.com/spring-projects/spring-framework/blob/df588e030f069dd31997ff747839f1d8d5d8d7c7/spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java#L292\r\n\r\nIt is processed on the `sourceClass` rather than the configuration class being built. The former can be a parent in the hierarchy. In such a case, the conditions in the parent are going to be considered (and the conditions of the configuration class will be ignored).\r\n\r\nI am wondering how useful this condition is though. Considering that we should ignore the conditions on the parent, the conditions on the configuration class could have been evaluated prior to run `@ComponentScan`.\r\n\r\nAt some point in the history of the project 620c16f5c7bb543b18f71b2848f90461f8646237 was reverted to not process conditions on parent classes. ']",['closed'],[0],[]
87fa2c3b97c7ee4785c4109ebd14ff3310f9db11,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,Add_Condition,"+		if (lastCharIndex == inString.length()) {
+			return inString;
+		}",3,condition,Avoid unnecessary String instantiation in StringUtils.deleteAny(),"This commit avoids unnecessary String instantiation in
StringUtils.deleteAny() if nothing was deleted from the
input string.

Closes gh-24924",,24924,1,['Avoid unnecessary String instantiation in StringUtils.deleteAny()'],"[""When I was reading https://github.com/spring-projects/spring-framework/pull/24870, I noticed that `String` instantiation in `StringUtils.deleteAny()` isn't necessary when nothing is deleted. So this PR changes to avoid it.\r\n\r\nThis is a straightforward change, but I just ran [the same benchmark](https://github.com/izeye/samples-jmh-gradle/blob/d193de7d08ce7d8de71dc6ba724cb89018501d20/src/jmh/java/com/izeye/samples/jmh/SpringStringUtilsDeleteAnyBenchmark.java) used in https://github.com/spring-projects/spring-framework/pull/24870. The result is as follows:\r\n\r\n```\r\nBenchmark                                                                                                    Mode  Cnt     Score   Error   Units\r\nSpringStringUtilsDeleteAnyBenchmark.original                                                                 avgt         68.215           ns/op\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.alloc.rate                                                  avgt       1384.675          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.alloc.rate.norm                                             avgt        104.000            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.churn.PS_Eden_Space                                         avgt       1359.258          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.churn.PS_Eden_Space.norm                                    avgt        102.091            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.churn.PS_Survivor_Space                                     avgt          0.048          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.churn.PS_Survivor_Space.norm                                avgt          0.004            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.count                                                       avgt         21.000          counts\r\nSpringStringUtilsDeleteAnyBenchmark.original:·gc.time                                                        avgt         12.000              ms\r\nSpringStringUtilsDeleteAnyBenchmark.patched                                                                  avgt         20.938           ns/op\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.alloc.rate                                                   avgt       4510.715          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.alloc.rate.norm                                              avgt        104.000            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.churn.PS_Eden_Space                                          avgt       4477.181          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.churn.PS_Eden_Space.norm                                     avgt        103.227            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.churn.PS_Survivor_Space                                      avgt          0.074          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.churn.PS_Survivor_Space.norm                                 avgt          0.002            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.count                                                        avgt         69.000          counts\r\nSpringStringUtilsDeleteAnyBenchmark.patched:·gc.time                                                         avgt         38.000              ms\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted                                   avgt         13.284           ns/op\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.alloc.rate                    avgt       2734.452          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.alloc.rate.norm               avgt         40.000            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.churn.PS_Eden_Space           avgt       2788.360          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.churn.PS_Eden_Space.norm      avgt         40.789            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.churn.PS_Survivor_Space       avgt          0.036          MB/sec\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.churn.PS_Survivor_Space.norm  avgt          0.001            B/op\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.count                         avgt         43.000          counts\r\nSpringStringUtilsDeleteAnyBenchmark.patchedSkipNewStringWhenNothingDeleted:·gc.time                          avgt         22.000              ms\r\n```""]",['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks']
88049e9b5cf9bf77d2712bb090e12a2b96887aee,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/EventListenerMethodProcessor.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-		if (!this.nonAnnotatedClasses.contains(targetType) && !isSpringContainerClass(targetType)) {
+		if (!this.nonAnnotatedClasses.contains(targetType) &&
+				!targetType.getName().startsWith(""java"") &&
+				!isSpringContainerClass(targetType)) {
+
+",6,condition,EventListenerMethodProcessor skips annotation search on java classes,"Closes gh-22564
",,22564,1,['Skip more classes when processing beans in EventListenerMethodProcessor'],['The `EventListenerMethodProcessor` currently skips beans where`isSpringContainerClass` returns true. There are a few more types that we could also consider skipping:\r\n\r\n* Anything in `java.lang` classes\r\n* Any `java.util` classes\r\n* Any `javax.servlet` classes\r\n\r\nAll of these turn out to be pretty common beans in Spring Boot applications.'],['closed'],[2],"['This may have been superseded by e3a9826e56e8fcb9e57f31b255998a095d8f8155 which by default will skip `java*` types.', ""I'll consider this for a backport to 5.1.6, even if it is generally covered on master already.""]"
884c7696cebadc877d63d8212e311f9f3489b9fd,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/handler/AbstractHandlerMethodMapping.java,Add_Condition,"-			if (KotlinDetector.isKotlinType(method.getDeclaringClass()) && KotlinDelegate.isSuspend(method)) {
-				throw new IllegalStateException(""Unsupported suspending handler method detected: "" + method);
+			if (KotlinDetector.isKotlinType(method.getDeclaringClass())) {
+				Class<?>[] parameterTypes = method.getParameterTypes();
+				if ((parameterTypes.length > 0) && ""kotlin.coroutines.Continuation"".equals(parameterTypes[parameterTypes.length - 1].getName())) {
+					throw new IllegalStateException(""Unsupported suspending handler method detected: "" + method);
+				}",7,condition,Make it possible to run Spring MVC without kotlin-reflect,"Closes gh-24828
",,24828,1,['Make it possible to run Spring MVC without kotlin-reflect'],['Spring Framework Kotlin support has been designed to make it possible to run it without `kotlin-reflect` artifact (even if various features are disable in that case). The Coroutines check in `AbstractHandlerMethodMapping.MappingRegistry#register` should have a `kotlin-reflect` lenient check instead of throwing a `java.lang.NoClassDefFoundError: kotlin.reflect.jvm.ReflectJvmMapping` like currently in Spring Framework 5.2.5.'],['closed'],[0],[]
88cac6a4a3a84ff9891d226d7ad47d2707af6d96,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java,Condition_Change,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-		if (targetMethod.getDeclaringClass().isInterface()) {
+		if (targetMethod.getDeclaringClass().isInterface() && targetMethod.getDeclaringClass() != targetClass &&
+				obtainPointcutExpression().getPointcutExpression().contains(""."" + targetMethod.getName() + ""("")) {",3,condition,Reduce creation of composite interfaces to actual method references in current pointcut,"Closes gh-29519
",,29519,1,['`AspectJExpressionPointcut#getTargetShadowMatch` tentatively creates proxies for every bean'],"['So this is a continuation of\r\nhttps://github.com/spring-projects-experimental/spring-native/issues/956\r\nwhich is still an open issue with Boot 3 (RC2 + latest snapshot)\r\n\r\nWhile simple methods expressions like this just work fine\r\n""execution(public * org.goafabric.calleeservice.aspect.TestComponent.*(..))""\r\n\r\nMore complex expressions, that e.g. leverage an custom anntotation, don\'t.\r\nTo be more specific .. they work with console applications, but crash the moment wie have WEB on the classpath.\r\nWhich somehow explains the error.\r\nTried to set the jdk proxy interfaces that graalvm demands, but stopped after the 3rd roundtrip because this seems\r\nto be a neverending road ...\r\n\r\nI\'ve attached a simple example that works with non native, but crashes on bootstrap of the native image.\r\nWhat\'s also a little mind boggeling .. is that i have to register a simple hint for the Test Aspect.\r\nWhile the aot-smoke-tests don\'t ...\r\n\r\n[error.txt](https://github.com/spring-projects/spring-boot/files/10041368/error.txt)\r\n[example.zip](https://github.com/spring-projects/spring-boot/files/10041400/example.zip)\r\n']",['closed'],[11],"[""@goafabric thanks but that's not a Spring Boot concern. Moving to framework."", '- Potentially a duplicate of #28711', 'Thx for answering that fast .. insanely fast ...\r\n\r\nhttps://github.com/spring-projects/spring-framework/issues/28711 is a little different \r\n\r\nIt at least explains why i had to set\r\n`hints.reflection().registerType(TestAspect.class, MemberCategory.INVOKE_DECLARED_METHODS)`.\r\n\r\nBut with this the invocation works .. for all use cases as long as it is a simple console application.\r\n\r\nCombine it with web and it crashes. So I guess this is a little different.', 'That\'s an interesting one. We have:\r\n```java\r\n@Component\r\n@Aspect\r\npublic class TestAspect {\r\n\r\n    @Around(""@within(org.goafabric.calleeservice.aspect.TestAnnotation)"")\r\n    public Object around(ProceedingJoinPoint joinPoint) throws Throwable {\r\n        try {\r\n            return joinPoint.proceed();\r\n        } finally {\r\n            final Method method = ((MethodSignature) joinPoint.getSignature()).getMethod();\r\n            System.err.println(""aspects wrapped method : "" + toString(method));\r\n        }\r\n    }\r\n    // ...\r\n}\r\n```\r\n\r\nThe sample indeed fails with errors like:\r\n```\r\nCaused by: com.oracle.svm.core.jdk.UnsupportedFeatureError: Proxy class defined by interfaces [interface org.springframework.boot.web.embedded.tomcat.ConfigurableTomcatWebServerFactory, interface org.springframework.context.ResourceLoaderAware, interface org.springframework.boot.web.servlet.server.ConfigurableServletWebServerFactory, interface org.springframework.boot.web.server.ConfigurableWebServerFactory] not found. Generating proxy classes at runtime is not supported. Proxy classes need to be defined at image build time by specifying the list of interfaces that they implement. To define proxy classes use -H:DynamicProxyConfigurationFiles=<comma-separated-config-files> and -H:DynamicProxyConfigurationResources=<comma-separated-config-resources> options.\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89) ~[na:na]\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.reflect.proxy.DynamicProxySupport.getProxyClass(DynamicProxySupport.java:171) ~[na:na]\r\n        at java.base@17.0.5/java.lang.reflect.Proxy.getProxyConstructor(Proxy.java:47) ~[callee-service:na]\r\n        at java.base@17.0.5/java.lang.reflect.Proxy.getProxyClass(Proxy.java:398) ~[callee-service:na]\r\n        at org.springframework.util.ClassUtils.createCompositeInterface(ClassUtils.java:783) ~[na:na]\r\n        at org.springframework.aop.aspectj.AspectJExpressionPointcut.getTargetShadowMatch(AspectJExpressionPointcut.java:432) ~[na:na]\r\n        at org.springframework.aop.aspectj.AspectJExpressionPointcut.matches(AspectJExpressionPointcut.java:290) ~[na:na]\r\n        at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:251) ~[na:na]\r\n        at org.springframework.aop.support.AopUtils.canApply(AopUtils.java:288) ~[na:na]\r\n        at org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:320) ~[na:na]\r\n        at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:128) ~[callee-service:6.0.3]\r\n        at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:97) ~[callee-service:6.0.3]\r\n        at org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:78) ~[callee-service:6.0.3]\r\n        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:366) ~[callee-service:6.0.3]\r\n        at org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:318) ~[callee-service:6.0.3]\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:435) ~[callee-service:6.0.3]\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1754) ~[callee-service:6.0.3]\r\n        at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:599) ~[callee-service:6.0.3]\r\n        ... 16 common frames omitted\r\n```\r\n\r\nSo I began to add more proxy hints, but at some point I stopped because even with that hint configuration, that\'s not enough to make it work.\r\n```\r\n hints.proxies()\r\n                    .registerJdkProxy(OrderedFilter.class, Filter.class, BeanNameAware.class, EnvironmentAware.class,\r\n                            EnvironmentCapable.class, ServletContextAware.class, InitializingBean.class, DisposableBean.class)\r\n                    .registerJdkProxy(WebServerFactoryCustomizer.class, Ordered.class)\r\n                    .registerJdkProxy(ApplicationContextAware.class, EnvironmentCapable.class, EnvironmentAware.class,\r\n                            Servlet.class, ServletConfig.class, Serializable.class)\r\n                    .registerJdkProxy(DispatcherServletPath.class, ServletContextInitializer.class, Ordered.class)\r\n                    .registerJdkProxy(ErrorPageRegistrar.class, Ordered.class)\r\n                    .registerJdkProxy(ViewResolver.class, Ordered.class, ServletContextAware.class, ApplicationContextAware.class)\r\n                    .registerJdkProxy(ErrorViewResolver.class, Ordered.class)\r\n                    .registerJdkProxy(ErrorAttributes.class, Ordered.class)\r\n                    .registerJdkProxy(ErrorAttributes.class, HandlerExceptionResolver.class, Ordered.class)\r\n                    .registerJdkProxy(WebMvcConfigurer.class, ServletContextAware.class)\r\n                    .registerJdkProxy(ResourceLoaderAware.class, ApplicationContextAware.class, ServletContextAware.class)\r\n                    .registerJdkProxy(ConfigurableTomcatWebServerFactory.class, ResourceLoaderAware.class,\r\n                            ConfigurableServletWebServerFactory.class, ConfigurableWebServerFactory.class);\r\n```\r\n\r\n@jhoeller It looks like `AspectJExpressionPointcut#getTargetShadowMatch` tentatively create proxies for every bean [in this try catch block](https://github.com/spring-projects/spring-framework/blob/main/spring-aop/src/main/java/org/springframework/aop/aspectj/AspectJExpressionPointcut.java#L431-L439). I am wondering about the performance impact on the JVM, and on native that means we would need to create proxy hints for every bean, leading to massive compatibility headaches and increased footprint. Is this something we could refine from your point of view?', ""That composite interface creation is only really needed for default methods in interfaces and similar scenarios where interface-based method implementations are inherited rather than implemented locally. I've added a corresponding condition to reduce the creation of composite interfaces to actual method references in the current pointcut, that is, only when the pointcut actually refers to a non-overridden default method or the like. This should eliminate all of the common cases above."", 'I confirm the example is now working as expected with method hints (`hints.reflection().registerType(TestAspect.class, MemberCategory.INVOKE_DECLARED_METHODS);`) which will be inferred via #28711.', '@sdeleuze \r\nthank you for finally having this fixed\r\nis there any kind of way i can try it out myself already ?\r\n\r\nboot 3.0.2-snapshot still seems to rely on framework-core 6.0.3\r\nand including framework-core 6.0.4-SNAPSHOT did not solve the issue\r\n\r\nor do i just have to wait for a release ? :)\r\n\r\nthx', 'Thanks should go to @jhoeller for the fix ;-)\r\n\r\nYou can override the Framework version in Boot, otherwise just wait a bit, Spring Framework 6.0.4 has been released today and will be picked up by Boot shortly.', 'yes i saw it on twitter yesterday evening, thx 4 letting me know and of course also to @jhoeller ', '@sdeleuze \r\nI can happily report that everything is working now with boot 3.0.2-SNAPSHOT\r\nEven more complex applications finally including CircuitBreaker Annotation\r\nSo thx again to both of you.\r\n\r\nAs a sugar on top .. would it be possible to get rid of the ""hints.reflection().registerType"" ?\r\nBecause basically everything annotated with Aspect should qualify already qualify for reflection ?\r\n\r\nOr .. ""at least"" as a fallback, at least have a working variant of ""RegisterForReflectionBinding""\r\n\r\nThen it would also be nice to have spring cloud resilience4j working out of the box.\r\nI opened an issue a while ago, that was just closed\r\nhttps://github.com/spring-cloud/spring-cloud-circuitbreaker/issues/159\r\n\r\nAnd this basically needs \r\n"" hints.reflection().registerType(io.github.resilience4j.spring6.circuitbreaker.configure.CircuitBreakerAspect.class, builder -> builder.withMembers(MemberCategory.INVOKE_DECLARED_METHODS));""\r\n\r\n\r\n\r\n\r\n\r\n\r\n', 'Please create a related issue with me mentioned with a minimal reproducer and a detailed description of the type hint inference you would expect.']"
8921be18de88a0a1e63136c9d77d52eeea0acbe2,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/StandardTypeLocator.java,Add_Condition,"-		if (loadedType != null &&
-				!(this.classLoader instanceof SmartClassLoader scl && scl.isClassReloadable(loadedType))) {
-			this.typeCache.put(typeName, loadedType);
+		if (loadedType != null) {
+			if (!(this.classLoader instanceof SmartClassLoader scl && scl.isClassReloadable(loadedType))) {
+				this.typeCache.put(typeName, loadedType);
+			}",7,condition,Properly return loaded type even if identified as reloadable,"Closes gh-31668
",,31668,1,['SpEL expression on a reloadable type can no longer be resolved'],"['Starting with Boot 3.1.6/Framework 6.0.14, the following SpEL expression fails to resolve the referenced type, but _only_ when devtools is on the classpath: `T(com.example.MyEnum).VALUE`\r\nThe following exception is thrown:\r\n```\r\nException in thread ""restartedMain"" java.lang.reflect.InvocationTargetException\r\n        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:118)\r\n        at java.base/java.lang.reflect.Method.invoke(Method.java:580)\r\n        at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:50)\r\nCaused by: org.springframework.expression.spel.SpelEvaluationException: EL1005E: Type cannot be found \'com.example.demo.MyEnum\'\r\n        at org.springframework.expression.spel.support.StandardTypeLocator.findType(StandardTypeLocator.java:128)\r\n        at org.springframework.expression.spel.ExpressionState.findType(ExpressionState.java:180)\r\n        at org.springframework.expression.spel.ast.TypeReference.getValueInternal(TypeReference.java:70)\r\n        at org.springframework.expression.spel.ast.CompoundExpression.getValueRef(CompoundExpression.java:61)\r\n        at org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:97)\r\n        at org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:114)\r\n        at org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:142)\r\n        at com.example.demo.DemoApplication.main(DemoApplication.java:15)\r\n        at java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:103)\r\n        ... 2 more\r\n```\r\n\r\nDowngrading to Framework 6.0.13, _or_ removing devtools fixes it.\r\n\r\nReproducer: [demo.zip](https://github.com/spring-projects/spring-boot/files/13457797/demo.zip)\r\n\r\nMain:\r\n```java\r\n@SpringBootApplication\r\npublic class DemoApplication {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(DemoApplication.class, args);\r\n\r\n        System.out.println(new SpelExpressionParser()\r\n                .parseExpression(""T(com.example.demo.MyEnum).VALUE"")\r\n                .getValue());\r\n    }\r\n\r\n}\r\n```\r\nMyEnum.java:\r\n```java\r\npublic enum MyEnum {\r\n    VALUE\r\n}\r\n```\r\n\r\nExtract and run `./mvnw spring-boot:run`, the exception occurs.\r\nOpen the pom.xml and change the Spring Framework version to 6.0.13, run again and the code succeeds.\r\nAlternatively, leave the Spring Framework version as is and remove the devtools dependency instead, run again and the code succeeds as well.\r\n\r\nMaybe related: #31579 ']",['closed'],[1],"[""Ouch that's an oversight in the `StandardTypeLocator` cache handling where we mean to not cache if the class is reloadable, but the code path actually not just bypasses the cache, it also bypasses the return statement... Sorry for the glitch, we'll fix this ASAP.""]"
8934eb8464e9efdc560c0d8b1ffb34ddbd18bc0a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,Condition_Change,"+ * @author Sebastien Deleuze
+	/** Precomputed value for the combination of private, static and final modifiers. */
+	private static final int NON_OVERRIDABLE_MODIFIER = Modifier.PRIVATE | Modifier.STATIC | Modifier.FINAL;
+
+	/** Precomputed value for the combination of public and protected modifiers. */
+	private static final int OVERRIDABLE_MODIFIER = Modifier.PUBLIC | Modifier.PROTECTED;
+
-		if (Modifier.isPrivate(method.getModifiers())) {
+		if ((method.getModifiers() & NON_OVERRIDABLE_MODIFIER) != 0) {
-		if (Modifier.isPublic(method.getModifiers()) || Modifier.isProtected(method.getModifiers())) {
+		if ((method.getModifiers() & OVERRIDABLE_MODIFIER) != 0) {",8,condition,Optimize ClassUtils#getMostSpecificMethod,"This commit optimizes ClassUtils#getMostSpecificMethod which is
a method frequently invoked in typical Spring applications.

It refines ClassUtils#isOverridable by considering static and
final modifiers as non overridable and optimizes its implementation.

Closes gh-30272
",,30272,1,['Optimize `ClassUtils#getMostSpecificMethod`'],"['Hi,\r\n\r\nI\'ve been profiling some (test-)application context starts lately on Spring Framework 5.x and noticed that with one of our medium-larger applications - which I\'m unfortunately not able to share - that during startup almost 100K exceptions are being thrown (caused by some Aspects not in our control). The large majority of this is ending up in `ClassUtils.getMostSpecificMethod`.  The majority of cases seems to be caused by checking for the static factory methods on `Map.of`, `Map.ofEntries`etc. with the target class `Properties` where we already now that they won\'t exist. (`Properties` is checked because Spring Data repositories have an inner bean for the named queries, I believe)\r\n\r\n<img width=""1042"" alt=""image"" src=""https://user-images.githubusercontent.com/6304496/229538050-0538a954-e0ee-42cb-ac48-03a769b1e451.png"">\r\n\r\nI can\'t imagine this to be super fast or efficient. Could we do anything about that? I\'m wondering if it would make sense to exclude `static` methods here in the first place. Or have some sort of pre-defined list of methods or classes that we know won\'t find certain things. Or caching the lookups etc.\r\n\r\nWe haven\'t been able to upgrade these apps so far to 6.x because the Spring-Security changes are blocking us from a smoother upgrade, but a quick check also revealed that nothing really drastically changed in that regards in the codebase and the risk of checking for methods that are known to not exist still applies. Having that said, there might be a chance that this particular issue for us is reduced with https://github.com/spring-projects/spring-data-commons/commit/712477bf365def70bad92220304a08dd52393b2e but I haven\'t been able to confirm this just yet.\r\n\r\nAnyhow, I\'d appreciate if you could take a look if this can be somehow improved.\r\n\r\nCheers,\r\nChristoph']",['closed'],[2],"['@dreis2211 After discussing with @jhoeller, I implemented filtering out both `static` and `final` methods, and that indeed reduces the number of invocations of the rest of the logic. Since `ClassUtils#getMostSpecificMethod` and `ClassUtils#isOverridable` are frequently invoked, I optimised the implementation as well. If you can, please share the impact on your application.\r\n\r\nIf you want to do more test about further optimizations, https://github.com/spring-projects/spring-petclinic is using a lot those methods as well, so feel free to use it to share more specific feedback.\r\n\r\nThe fix will be available in Spring Framework 5.3, 6.0 and 6.1.', ""@sdeleuze Thanks. I won't be able to share anything in the foreseeable future, at least no in-depth analysis. But I'll see if it has any impact once it's live in one of our applications.""]"
89802cfc11bc7b94387bf75f376dc08218e3946c,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,Remove_Condition,"-		if (getAnnotations().length != other.getAnnotations().length) {
+		if (!Arrays.equals(getAnnotations(), other.getAnnotations())) {
-		for (Annotation ann : getAnnotations()) {
-			if (!ann.equals(other.getAnnotation(ann.annotationType()))) {
-				return false;
-			}
-		}",7,"condition, iteration",TypeDescriptor avoids merged annotations for equality comparisons,"Issue: SPR-14926
Issue: SPR-14929
",,"19496, 19493",2,"['ConversionService performance regression [SPR-14929]', 'Improve performance for conversions using a method parameter based type descriptor with annotations [SPR-14926]']","['**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-14929](https://jira.spring.io/browse/SPR-14929?redirect=false)** and commented\n\nConsider the following:\n\n```java\npublic class SpELTests {\n\n\t@Test\n\tpublic void test() {\n\t\tExpression exp = new SpelExpressionParser().parseExpression(\n\t\t\t\t""#target.filter(headers[\'dummyHeader\'] != null ""\n\t\t\t\t+ ""? headers[\'dummyHeader\'] ""\n\t\t\t\t+ "": T(org.springframework.util.Assert).isTrue(false, \'required header not available: dummyHeader\'))"");\n\t\tMessage<String> message = MessageBuilder.withPayload(""foo"").setHeader(""dummyHeader"", ""bar"").build();\n\t\tEvaluationContext context = new StandardEvaluationContext();\n\t\tcontext.setVariable(""target"", new DummyFilter());\n\t\tStopWatch watch = new StopWatch();\n\t\twatch.start();\n\t\tfor (int i = 0; i < 5000; i++) {\n\t\t\tObject value = exp.getValue(context, message);\n\t\t}\n\t\twatch.stop();\n\t\tSystem.out.println(""Elapsed: "" + watch.getTotalTimeSeconds());\n\t}\n\n\tpublic static class DummyFilter {\n\n\t\t@Filter\n\t\tpublic boolean filter(@Header(""dummyHeader"") String dummyValue) {\n\t\t\treturn true;\n\t\t}\n\n\t}\n\n}\n```\n\nWhen run with Spring Framework 4.3.3 it runs in < 0.5 seconds; with 4.3.4 it takes 40+ seconds.\n\nWith YourKit, I tracked the problem down to `DefaultConversionService.getConverter()` with source and target type descriptors:\n\n```\njava.lang.String\n@org.springframework.messaging.handler.annotation.Header java.lang.String\n```\n\nThe performance issue is because `this.converterCache.get(key);` seems to miss on every iteration (which in turn causes `AnnotationUtils.getDefaultValue()` which is where the cost is incurred). `getDefaultConverter()` correctly returns a NoOp converter which is inserted into the cache but, for some reason, that entry is not found in later iterations.\n\nAfter several iterations, `this.converterCache` contains\n\n```\n{ConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.messaging.handler.annotation.Header java.lang.String]=NO_OP, \nConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.messaging.handler.annotation.Header java.lang.String]=NO_OP, \nConverterCacheKey [sourceType = java.lang.String, targetType = java.lang.String]=NO_OP, \nConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.messaging.handler.annotation.Header java.lang.String]=NO_OP, \nConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.messaging.handler.annotation.Header java.lang.String]=NO_OP, \nConverterCacheKey [sourceType = java.lang.Boolean, targetType = java.lang.Boolean]=NO_OP}\n```\n\nWith 4.3.3, I `this.converterCache` contains:\n\n```\n{ConverterCacheKey [sourceType = java.lang.String, targetType = @org.springframework.messaging.handler.annotation.Header java.lang.String]=NO_OP, \nConverterCacheKey [sourceType = java.lang.String, targetType = java.lang.String]=NO_OP, \nConverterCacheKey [sourceType = java.lang.Boolean, targetType = java.lang.Boolean]=NO_OP}\n```\n\nSo the issue seems to be the cache entries are not found, perhaps some problem with the hash.\n\n---\n\n**Affects:** 4.3.4\n\n**Issue Links:**\n- [INT-4170](https://jira.spring.io/browse/INT-4170) The delivery of message with be much slower to downstream filter with Header parameter\n- #19410 AnnotationFormatterFactory should support `@AliasFor`\n- #18287 Differentiate between TypeDescriptors with same annotations but different attributes\n- #19388 GenericConversionService.addConverter should be able to determine generic types from target class behind proxy\n- #19493 Improve performance for conversions using a method parameter based type descriptor with annotations\n- #19626 Annotated method argument matching performance issue\n\n0 votes, 7 watchers\n', '**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-14926](https://jira.spring.io/browse/SPR-14926?redirect=false)** and commented\n\nWhen a conversion is invoked using a `TypeDescriptor` instance that was created for a `MethodParameter` containing annotations, the lookup of the `Converter` is significantly slowed down as the `TypeDescriptor` instances undergo an `….equals(…)` check that\'s quite expensive due to the synthesized annotations.\n\nI wonder whether `TypeDescriptor` really needs to compare the annotations if the method and the parameter index are well defined as they by definition uniquely identify the parameter.\n\nHere\'s a sample test case showing the issue:\n\n```java\npackage org.example.myapi;\n\nimport java.lang.reflect.Method;\nimport java.util.Date;\n\nimport org.junit.Test;\nimport org.springframework.core.MethodParameter;\nimport org.springframework.core.convert.ConversionService;\nimport org.springframework.core.convert.TypeDescriptor;\nimport org.springframework.format.annotation.DateTimeFormat;\nimport org.springframework.format.annotation.DateTimeFormat.ISO;\nimport org.springframework.format.support.DefaultFormattingConversionService;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.util.ReflectionUtils;\nimport org.springframework.web.bind.annotation.RequestParam;\n\n/**\n * @author Oliver Gierke\n */\npublic class FooTests {\n\n\tprivate static final int ITERATIONS = 1000000;\n\n\tprivate static final ConversionService CONVERSION_SERVICE = new DefaultFormattingConversionService();\n\tprivate static final TypeDescriptor STRING_TYPE = TypeDescriptor.valueOf(String.class);\n\n\t@Test\n\tpublic void methodParameterWithAnnotations() {\n\n\t\tDate date = new Date();\n\n\t\tMethod method = ReflectionUtils.findMethod(SomeController.class, ""someMethod"", Date.class);\n\t\tTypeDescriptor sourceDescriptor = TypeDescriptor.nested(new MethodParameter(method, 0), 0);\n\n\t\tlong startTime = System.currentTimeMillis();\n\n\t\tfor (int i = 0; i < ITERATIONS; i++) {\n\t\t\tCONVERSION_SERVICE.convert(date, sourceDescriptor, STRING_TYPE);\n\t\t}\n\n\t\tlong duration = (System.currentTimeMillis() - startTime);\n\n\t\tSystem.out.println(""With annotations "" + duration);\n\t}\n\n\t@Test\n\tpublic void methodParameterWithoutAnnotations() {\n\n\t\tMethod method = ReflectionUtils.findMethod(SomeController.class, ""someMethod"", String.class);\n\t\tTypeDescriptor sourceDescriptor = TypeDescriptor.nested(new MethodParameter(method, 0), 0);\n\n\t\tlong startTime = System.currentTimeMillis();\n\n\t\tfor (int i = 0; i < ITERATIONS; i++) {\n\t\t\tCONVERSION_SERVICE.convert(""Foo"", sourceDescriptor, STRING_TYPE);\n\t\t}\n\n\t\tlong duration = (System.currentTimeMillis() - startTime);\n\n\t\tSystem.out.println(""Without annotations "" + duration);\n\t}\n\n\tstatic class SomeController {\n\n\t\tResponseEntity<Object> someMethod(@RequestParam(""foo"") @DateTimeFormat(iso = ISO.DATE) Date date) {\n\t\t\treturn null;\n\t\t}\n\n\t\tResponseEntity<Object> someMethod(String value) {\n\t\t\treturn null;\n\t\t}\n\t}\n}\n```\n\n---\n\n**Affects:** 4.3.4\n\n**Reference URL:** https://github.com/spring-projects/spring-hateoas/issues/511\n\n**Attachments:**\n- [Bildschirmfoto 2016-11-21 um 11.20.48.PNG](https://jira.spring.io/secure/attachment/23623/Bildschirmfoto+2016-11-21+um+11.20.48.PNG) (_154.80 kB_)\n- [Bildschirmfoto 2016-11-26 um 13.16.01.PNG](https://jira.spring.io/secure/attachment/23633/Bildschirmfoto+2016-11-26+um+13.16.01.PNG) (_89.78 kB_)\n- [Bildschirmfoto 2016-11-26 um 13.56.30.PNG](https://jira.spring.io/secure/attachment/23634/Bildschirmfoto+2016-11-26+um+13.56.30.PNG) (_110.74 kB_)\n\n**Issue Links:**\n- #17519 Spring Performance Optimization, Comparing Classes\n- #19410 AnnotationFormatterFactory should support `@AliasFor`\n- #18287 Differentiate between TypeDescriptors with same annotations but different attributes\n- #19496 ConversionService performance regression\n- #19626 Annotated method argument matching performance issue\n- #19525 `@DateTimeFormat`(iso = ISO.DATE_TIME) should use optimized formatter for LocalDateTime\n\n']","['closed', 'closed']","[8, 7]","[""**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** commented\n\nI've attached a screenshot showing the culprit in a test case provided for the original ticket in Spring HATEOAS. Under `GenericConversionService.getConverter(…)` there's another 35% block for `ConcurrentReferenceHashMap.put(…)` boiling down to basically the same call path into the `equals(…)` implementation of `TypeDescriptor`.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis turns out as a different variant of #19496: It's not the annotation comparisons being so expensive per se, it's rather just the **merged** annotation comparisons that we unnecessarily triggered from `TypeDescriptor.equals` there as of 4.3.4 due to some unfortunate interaction.\n\nAs of 4.3.5, we're comparing the raw declared annotations which seems efficient enough. Being able to isolate the descriptor to type plus annotations seems beneficial still, since for conversion purposes, it doesn't matter which signature the type and the annotations actually came from.\n"", '**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** commented\n\nI didn\'t dive in deeper as I was sort of assuming the ""new way"" of looking up annotations would always include the synthesization of annotations. Anyway, thanks for the quick turnaround!\n', ""**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** commented\n\nI don't see any significant changes in the numbers after the recent fixes . However, it looks like the hotspot has changed to be `AnnotationConverterKey.equals(…)` again triggering `equals(…)` method on the proxy (see new screenshot). Looks like the shortcut in `TypeDescriptor` has caused the code to run into a different but as costly comparison later?\n\nAlso, the ticket was marked as fixed in 4.3.5 but I couldn't find a related commit in the 4.3.x branch.\n"", '**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** commented\n\nIt looks like that `AnnotationPrinterConverter.convert(Object, TypeDescriptor, TypeDescriptor)` looks up the annotation on the target type, which returns a merged annotation. That merged annotation is then used in `AnnotationConverterKey` and its `equals(…)` which in turn then basically causes the same problem as originally described.\n', '**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** commented\n\nI created a local ""fix"" using the annotation type and the target type descriptor in the cache key instead of the annotation instance (not sure that creates really valid equals comparisons, I just wanted to see where I get if that hotspot is removed. The next thing I run into is the actual conversion. That seems to work well for simple conversions. However, playing around with it, I discovered something quite obscure again:\n\n```java\nResponseEntity<Object> someMethod(@RequestParam(""foo"") @DateTimeFormat(iso = ISO.DATE) Date date) {…}\n```\n\nLetting the `ConversionService` convert `Date` instances into `Strings` is a lot slower than e.g. `Integers`. 1 million conversions of `Integer` instances take ~150ms. For `Date` formatting, those numbers raise to ~600ms, interestingly with the JodaTime converters involved, which was surprising. If I switch to `LocalDateTime` instances, those numbers boost up to ~4200ms (see new Screenshot), unfortunately with most of the time spent in the JDK, especially `StringBuilder.setLength()`. Is that somethign we should bring up with the JDK team?\n', ""**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** commented\n\nLooks like the usage of `DateTimeFormatter.ISO_DATE` (or the constants in general as it also appears with `ISO_DATE_TIME`, too) is significantly degrading performance. I've created [a benchmark](https://gist.github.com/olivergierke/487d58bd146a47574fb5a8316f950b04) to showcase this and pinged Stephen on Twitter to see where this goes.\n""]"
89b8449999769cbc412cd3301614630bbe98ae34,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/NamedParameterJdbcTemplate.java,Remove_Condition,"-			ParsedSql parsedSql = this.parsedSqlCache.get(sql);
-			if (parsedSql == null) {
-				parsedSql = NamedParameterUtils.parseSqlStatement(sql);
-				this.parsedSqlCache.put(sql, parsedSql);
-			}
-			return parsedSql;
+			return parsedSqlCache.computeIfAbsent(sql, NamedParameterUtils::parseSqlStatement);",7,condition,Simplify getParsedSql() method in NamedParameterJdbcTemplate,Closes gh-24358,,24358,1,['Simplify getParsedSql() method in NamedParameterJdbcTemplate'],['It can simplify this way. '],['closed'],[2],"['This has been merged into `master`.\r\n\r\nThanks', 'For future reference, please make sure to:\r\n\r\n- update the copyright date if appropriate: f527ca7515dce934594235861e6361405d551f96\r\n- adhere to coding guidelines: 734db23f4eb99e4489a9349dd77de78e53f7f33d\r\n\r\nThanks']"
89c7c6e9dd85d880aeea71ec0c3c944a7030d109,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java,Remove_Condition,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-import org.springframework.core.KotlinDetector;
-import org.springframework.core.KotlinReflectionParameterNameDiscoverer;
+ * @author Sebastien Deleuze
-	public LocalValidatorFactoryBean() {
-		if (KotlinDetector.isKotlinReflectPresent()) {
-			this.parameterNameDiscoverer = new KotlinReflectionParameterNameDiscoverer();
-		}
-	}
-
-
-	 * <p>Default is Hibernate Validator's own internal use of standard Java reflection,
-	 * with an additional {@link KotlinReflectionParameterNameDiscoverer} if Kotlin
-	 * is present. This may be overridden with a custom subclass or a Spring-controlled
+	 * <p>Default is Hibernate Validator's own internal use of standard Java reflection.
+	 * This may be overridden with a custom subclass or a Spring-controlled",9,condition,Fix bean validation on suspending function parameters,"This commit leverages Hibernate Validator's own internal use
of standard Java reflection to perform validation on suspending
function, which fixes the ArrayIndexOutOfBoundsException previously
observed.

Validation of suspending function return values remains unsupported
as Hibernate Validator is not Coroutines aware.

Closes gh-23499
",,23499,1,"[""Bean validation doesn't work on Kotlin coroutines controller parameters""]","['**Affects:**  5.2.0.RC1\r\n\r\nwhen using Kotlin suspend function and Validated annotation, like this.\r\n\r\n    package example\r\n    \r\n    import org.springframework.http.HttpStatus\r\n    import org.springframework.http.ResponseEntity\r\n    import org.springframework.validation.annotation.Validated\r\n    import org.springframework.web.bind.annotation.RequestMapping\r\n    import org.springframework.web.bind.annotation.RestController\r\n\r\n    @Validated\r\n    @RestController\r\n    class Foo {\r\n        @RequestMapping(""/foo"")\r\n        suspend fun foo() = ResponseEntity(""foo"", HttpStatus.OK)\r\n    }\r\n\r\noccured exception.\r\n\r\n    java.lang.ArrayIndexOutOfBoundsException: 0\r\n            at java.util.Arrays$ArrayList.get(Arrays.java:3841) ~[na:1.8.0_102]\r\n            Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException:\r\n    Error has been observed at the following site(s):\r\n            |_ checkpoint ⇢ Handler example.Foo#foo(Continuation) [DispatcherHandler]\r\n            |_ checkpoint ⇢ org.springframework.security.web.server.authorization.AuthorizationWebFilter [DefaultWebFilterChain]\r\n            |_ checkpoint ⇢ org.springframework.security.web.server.authorization.ExceptionTranslationWebFilter [DefaultWebFilterChain]\r\n            |_ checkpoint ⇢ org.springframework.security.web.server.authentication.logout.LogoutWebFilter [DefaultWebFilterChain]\r\n            |_ checkpoint ⇢ org.springframework.security.web.server.savedrequest.ServerRequestCacheWebFilter [DefaultWebFilterChain]\r\n            |_ checkpoint ⇢ org.springframework.security.web.server.context.SecurityContextServerWebExchangeWebFilter [DefaultWebFilterChain]\r\n            |_ checkpoint ⇢ org.springframework.security.web.server.context.ReactorContextWebFilter [DefaultWebFilterChain]\r\n            |_ checkpoint ⇢ org.springframework.security.web.server.header.HttpHeaderWriterWebFilter [DefaultWebFilterChain]\r\n            |_ checkpoint ⇢ org.springframework.security.config.web.server.ServerHttpSecurity$ServerWebExchangeReactorContextWebFilter [DefaultWebFilterChain]\r\n            |_ checkpoint ⇢ org.springframework.security.web.server.WebFilterChainProxy [DefaultWebFilterChain]\r\n            |_ checkpoint ⇢ org.springframework.cloud.sleuth.instrument.web.TraceWebFilter [DefaultWebFilterChain]\r\n            |_ checkpoint ⇢ org.springframework.boot.actuate.metrics.web.reactive.server.MetricsWebFilter [DefaultWebFilterChain]\r\n            |_ checkpoint ⇢ HTTP GET ""/foo"" [ExceptionHandlingWebHandler]\r\n    Stack trace:\r\n                    at java.util.Arrays$ArrayList.get(Arrays.java:3841) ~[na:1.8.0_102]\r\n                    at org.hibernate.validator.internal.metadata.aggregated.ParameterMetaData$Builder.build(ParameterMetaData.java:169) ~[hibernate-validator-6.0.17.Final.jar:6.0.17.Final]\r\n                    at org.hibern ate.validator.internal.metadata.aggregated.ExecutableMetaData$Builder.findParameterMetaData(ExecutableMetaData.java:435) ~[hibernate-validator-6.0.17.Final.jar:6.0.17.Final]\r\n                    at org.hibernate.validator.internal.metadata.aggregated.ExecutableMetaData$Builder.build(ExecutableMetaData.java:388) ~[hibernate-validator-6.0.17.Final.jar:6.0.17.Final]\r\n                    at org.hibernate.validator.internal.metadata.aggregated.BeanMetaDataImpl$BuilderDelegate.build(BeanMetaDataImpl.java:788) ~[hibernate-validator-6.0.17.Final.jar:6.0.17.Final]\r\n                    at org.hibernate.validator.internal.metadata.aggregated.BeanMetaDataImpl$BeanMetaDataBuilder.build(BeanMetaDataImpl.java:648) ~[hibernate-validator-6.0.17.Final.jar:6.0.17.Final]\r\n                    at org.hibernate.validator.internal.metadata.BeanMetaDataManager.createBeanMetaData(BeanMetaDataManager.java:204) ~[hibernate-validator-6.0.17.Final.jar:6.0.17.Final]\r\n                    at org.hibernate.validator.internal.metadata.BeanMetaDataManager.getBeanMetaData(BeanMetaDataManager.java:166) ~[hibernate-validator-6.0.17.Final.jar:6.0.17.Final]\r\n                    at org.hibernate.validator.internal.engine.ValidatorImpl.validateParameters(ValidatorImpl.java:265) ~[hibernate-validator-6.0.17.Final.jar:6.0.17.Final]\r\n                    at org.hibernate.validator.internal.engine.ValidatorImpl.validateParameters(ValidatorImpl.java:233) ~[hibernate-validator-6.0.17.Final.jar:6.0.17.Final]\r\n                    at org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:104) ~[spring-context-5.2.0.RC1.jar:5.2.0.RC1]\r\n                    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.2.0.RC1.jar:5.2.0.RC1]\r\n                    at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) ~[spring-aop-5.2.0.RC1.jar:5.2.0.RC1]\r\n    ...']",['closed'],[27],"['`@Validated` is indeed not yet Coroutines compliant, we need to fix that by using Coroutines aware methods to discover method parameters.', 'I am not entirely sure what we should do here. The issue comes from `MethodValidationInterceptor` which is obviously not Coroutines aware, but JSR-303 is designed to deal with Java reflection API not Kotlin one. We could maybe pass a fake parameter value for the `Continuation` one, but there are other issues like how to support annotation on return values, the fact that WebMvc is not supported yet, etc.\r\n\r\nGiven those uncertainties, it seems more reasonable to postpone this issue for 5.3.', ""Hello, @sdeleuze , any updates? Today, I think about another annotation something like KValidated as temporary solution, For example you can add new annotation KValidated which should be used only in kotlin. And after add KMethodValidationInterceptor with similary behaviour as MethodValidationInterceptor, what do you think about this? And can you describe the problem with solution please?. Why we can't just use CoroutinesUtils.invokeSuspendingFunction(method, getBean(), args); as it is used in InvocableHandlerMethod?"", '@kostya05983 Even after adding support for Coroutines via `CoroutinesUtils.invokeSuspendingFunction` there is an error at Hibernate Validator level, so I suggest you or somebody raises an issue on Hibernate Validator side for such support. See the related stack trace bellow:\r\n\r\n```\r\nat java.base/java.util.Arrays$ArrayList.get(Arrays.java:4351)\r\nat org.hibernate.validator.internal.properties.javabean.JavaBeanExecutable.getParameterName(JavaBeanExecutable.java:86)\r\nat org.hibernate.validator.internal.metadata.aggregated.ParameterMetaData$Builder.build(ParameterMetaData.java:165)\r\nat org.hibernate.validator.internal.metadata.aggregated.ExecutableMetaData$Builder.findParameterMetaData(ExecutableMetaData.java:436)\r\nat org.hibernate.validator.internal.metadata.aggregated.ExecutableMetaData$Builder.build(ExecutableMetaData.java:391)\r\nat org.hibernate.validator.internal.metadata.aggregated.BeanMetaDataBuilder$BuilderDelegate.build(BeanMetaDataBuilder.java:260)\r\nat org.hibernate.validator.internal.metadata.aggregated.BeanMetaDataBuilder.build(BeanMetaDataBuilder.java:133)\r\nat org.hibernate.validator.internal.metadata.BeanMetaDataManagerImpl.createBeanMetaData(BeanMetaDataManagerImpl.java:206)\r\nat org.hibernate.validator.internal.metadata.BeanMetaDataManagerImpl.getBeanMetaData(BeanMetaDataManagerImpl.java:165)\r\nat org.hibernate.validator.internal.engine.ValidatorImpl.validateParameters(ValidatorImpl.java:267)\r\nat org.hibernate.validator.internal.engine.ValidatorImpl.validateParameters(ValidatorImpl.java:235)\r\nat org.springframework.validation.beanvalidation.MethodValidationInterceptor.invoke(MethodValidationInterceptor.java:110)\r\nat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186)\r\nat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:749)\r\nat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:691)\r\nat com.example.FooCoroutinesController$$EnhancerBySpringCGLIB$$1b76b143.find(<generated>)\r\n```\r\n\r\n#22462 fix should be all what is needed on Spring side.', 'For reference, this is the hibernate issue: https://hibernate.atlassian.net/browse/HV-1638', ""I've build a workaround for this issue: https://gist.github.com/pschichtel/830b7943ea43b7cb58cadd984b54b903"", 'Hit by this while trying Spring GraphQL with validation in the classpath. This makes it impossible to call suspended `@QueryMapping` methods. \r\nHibernate Validator issue is prioritized as Minor and unlikely to be fixed soon. Can validation be disabled at HandlerMethod level OR concrete method level?', ""> I've build a workaround for this issue: https://gist.github.com/pschichtel/830b7943ea43b7cb58cadd984b54b903\r\n\r\nHope this long-awaited fix will be included in Spring although it was a problem from Hibernate Validator.\r\n\r\n"", 'I created a [sample project](https://github.com/hantsy/spring-puzzles/tree/master/validation-ktco) based on the solution provided by @pschichtel .', '> https://gist.github.com/pschichtel/830b7943ea43b7cb58cadd984b54b903\r\n\r\njust added your workaround to my project and got around the arrayindexoutofbounds with hibernate-validator enabled. The project was using openapi generator to create a reactive kotlin api based on webflux. with reactive=true and useBeanValidation=true every query failed with arrayindexoutofbounds', '@sdeleuze @sbrannen @bclozel my issure has discover a way to solve that problem [https://github.com/spring-projects/spring-framework/issues/29793](url)', 'Indeed #29566 that we made for unrelated reasons may allow us to solve this issue. i am not sure #29840 is the way I would implement it, but that provide a good basis for testing. I will have a deeper look and send my feedback.', '@sdeleuze thanks for your replay', 'Based on a quick test, it seems just removing the usage of `KotlinReflectionParameterNameDiscoverer` in `LocalValidatorFactoryBean` combined with the changes done in #29566 fix parameter validation with Coroutines.\r\n\r\nCould people interested in getting that fix test my changes on https://github.com/sdeleuze/spring-framework/commit/gh-23499 and provide a feedback here?', ""i don't think hibernate validation will compatible with the kotlin suspend function. \r\ni have read some replay from hibernate validation\r\n\r\nhttps://hibernate.atlassian.net/browse/HV-1638\r\nhttps://hibernate.atlassian.net/browse/HV-1796"", '@sdeleuze  ![image](https://user-images.githubusercontent.com/5616997/213130358-d9c925c1-bcba-4b79-8c1c-77e9982d6381.png)\r\nit may be solved by jetbrain remove that parameter', ""On Spring side, I have the feeling that `KotlinReflectionParameterNameDiscoverer` in `LocalValidatorFactoryBean` does more harm than good. Coroutines use case seems totally broken with it, works for typical use case (unless I get different feedback but that's what my quick test shown).\r\n\r\nSome Kotlin use cases may still be broken until Kotlin team move forward on https://youtrack.jetbrains.com/issue/KT-40857, but I could ask them to move forward on that issue.\r\n\r\nCould you please test my branch and let me know how it goes for typical use case?"", 'i will have a test', '@cjdxhjj Any chance you could test and provide a feedback?', ""@sdeleuze i'm sorry for the slow response, i'm on holidy, i would try it as soon as possible."", '@sdeleuze i have just do a simple test with \r\n![image](https://user-images.githubusercontent.com/5616997/214594802-bc234a99-4128-476d-869a-d017684c3767.png)\r\n![image](https://user-images.githubusercontent.com/5616997/214594893-cb835609-ba2c-406f-8924-c4fd20c3a4c2.png)\r\n![image](https://user-images.githubusercontent.com/5616997/214595114-c8e50cfc-a91b-4ec4-8e42-06393eb9829f.png)\r\nthat works.', ""Bean validation on suspending function parameters should be fixed as of Spring Framework 6.0.5, I don't think the fix is doable easily on 5.3.x so I won't backport it. Validation of suspending function return values remains unsupported as Hibernate Validator is not Coroutines aware, but I think parameter validation was the most critical need."", '@sdeleuze thanks a lot', 'Hello! I\'m not sure this is a related issue, though, let\'s see if we should open a new ticket.\r\n\r\nAfter upgrading from Spring Boot 3.0.2 to 3.0.4 validations on GraphQL controller parameters work as expected, but I\'m now having a problem with custom ConstraintValidators which are not triggered at all.\r\n\r\nPlease see a sample code:\r\n```kotlin\r\n@Controller\r\n@Validated\r\nclass CompanyController {\r\n\r\n    @PreAuthorize(""hasRole(\'ROLE_COMPANY_EDIT\')"")\r\n    @MutationMapping(""createCompany"")\r\n    suspend fun createCompany(\r\n        @Argument(""input"")\r\n        @Valid\r\n        companyInput: CompanyInput\r\n    ): CompanyResponse {\r\n        // TODO..\r\n    }\r\n}\r\n\r\n@CompanyNameUniquePerWhitelabelId\r\ndata class CompanyInput(\r\n    val companyType: CompanyType,\r\n    val name: String,\r\n    @IsIso2Country val registeredAddressCountryCode: Int\r\n)\r\n\r\n@MustBeDocumented\r\n@Constraint(validatedBy = [CompanyNameUniquePerWhitelabelIdValidator::class])\r\n@Target(AnnotationTarget.CLASS)\r\n@Retention(AnnotationRetention.RUNTIME)\r\nannotation class CompanyNameUniquePerWhitelabelId(\r\n    val message: String = ""This company name already exists for Provided whitelabel."",\r\n    val groups: Array<KClass<*>> = [],\r\n    val payload: Array<KClass<out Any>> = []\r\n)\r\n\r\nclass CompanyNameUniquePerWhitelabelIdValidator : ConstraintValidator<CompanyNameUniquePerWhitelabelId, CompanyInput> {\r\n\r\n    override fun isValid(companyInput: CompanyInput?, context: ConstraintValidatorContext?): Boolean {\r\n        // TODO\r\n    }\r\n}\r\n\r\n@MustBeDocumented\r\n@Constraint(validatedBy = [Iso2CountryValidator::class])\r\n@Target(AnnotationTarget.FIELD)\r\n@Retention(AnnotationRetention.RUNTIME)\r\nannotation class IsIso2Country(\r\n    val message: String = ""Wrong country code"",\r\n    val groups: Array<KClass<*>> = [],\r\n    val payload: Array<KClass<out Any>> = []\r\n)\r\n\r\nclass Iso2CountryValidator : ConstraintValidator<IsIso2Country, Int?> {\r\n    override fun isValid(value: Int?, context: ConstraintValidatorContext?): Boolean {\r\n        // TODO\r\n    }\r\n}\r\n```\r\n\r\nIn my case, none of `Iso2CountryValidator#isValid` and `CompanyNameUniquePerWhitelabelIdValidator#isValid` is triggered.\r\n\r\nAny thoughts?\r\n\r\nThanks!\r\nMichal', '@Michal-Kucera this might be related to this issue: https://github.com/spring-projects/spring-graphql/issues/624 which was fixed in this commit https://github.com/spring-projects/spring-graphql/commit/581b1108f21101a09e799489b54b5a2888c3e62c, and will be released with Spring GraphQL 1.1.3.', 'Thanks for your fast response @koenpunt! Next time I should perhaps first look into graphql issues :)', 'Nice issue request. Thanks, @Michal-Kucera ']"
8a29bfba3f85f0500c95c78f463ba3644133eaf2,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/function/DefaultEntityResponseBuilder.java,Condition_Change,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-				if (name!=null && !HttpHeaders.CONTENT_LENGTH.equals(name)) {
+				if (!HttpHeaders.CONTENT_LENGTH.equals(name)) {
-				if (name!= null && !HttpHeaders.CONTENT_LENGTH.equals(name)) {
+				if (!HttpHeaders.CONTENT_LENGTH.equals(name)) {",4,condition,Polishing external contribution,,,,0,N/A,N/A,N/A,N/A,N/A
8a7e839ad07211a2da51fa04fb33fe167ab79dc4,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/server/DefaultRenderingResponseBuilder.java,Condition_Change,"-			if (view instanceof RedirectView) {
-				HttpStatus httpStatus = HttpStatus.resolve(rawStatusCode());
-				if (httpStatus != null && httpStatus.is3xxRedirection()) {
-					RedirectView redirectView = (RedirectView) view;
-					redirectView.setStatusCode(httpStatus);
+			if (view instanceof RedirectView redirectView) {
+				HttpStatusCode statusCode = statusCode();
+				if (statusCode.is3xxRedirection()) {
+					redirectView.setStatusCode(statusCode);",9,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
8b023b17c948bb180794a23207903718404e2cca,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java,Condition_Change,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-	public Object postProcessBeforeInitialization(final Object bean, String beanName) throws BeansException {
-
+	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
-		if (System.getSecurityManager() != null ) {
+		if (System.getSecurityManager() != null) {
-	@Override
-	public Object postProcessAfterInitialization(Object bean, String beanName) {
-		return bean;
-	}
-",10,condition,Polish contribution,"See gh-23435
",,23435,1,['Avoid unnecessary processing in ApplicationContextAwareProcessor'],['It could return bean that do not meet the requirements immediately to avoid subsequent operations'],['closed'],[1],['This has been merged into `master` in 1dc2177a4af5c6ff8622017b9a79cecba1d8c635 and polished in 8b023b17c948bb180794a23207903718404e2cca.\r\n\r\nThanks']
8b3b8d070e3e177d580bd9da337ad73ebb707170,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/BeansDtdResolver.java,Condition_Change,"-			int dtdNameStart = systemId.indexOf(DTD_NAME);
-			if (dtdNameStart > lastPathSeparator) {
+			int dtdNameStart = systemId.indexOf(DTD_NAME, lastPathSeparator);
+			if (dtdNameStart != -1) {",4,condition,Consistently detect spring-beans.dtd reference in last path segment,"Issue: SPR-13549
",,18125,1,['Consistently detect spring-beans.dtd reference [SPR-13549]'],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-13549](https://jira.spring.io/browse/SPR-13549?redirect=false)** and commented\n\nAs per https://github.com/spring-projects/spring-framework/commit/8e4bfa9cc17d2192e33d20023ab3b4b732087f83#commitcomment-11747566, `BeansDtdResolver` uses a sub-optimal lookup for the DTD name, potentially not detecting it if the same name occurs in a previous path segment. Consistently checking the last path segment would be more reliable.\n\n---\n\n**Affects:** 4.1.6, 4.1.7\n\n**Issue Links:**\n- #17433 There is no spring-beans.dtd file inside of the spring-beans-4.1.5.RELEASE jar\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8b3b8d070e3e177d580bd9da337ad73ebb707170, https://github.com/spring-projects/spring-framework/commit/50c59425d98badb415f0f49cebc9cfc63a6a3f90\n\n**Backported to:** [4.1.8](https://github.com/spring-projects/spring-framework/milestone/132?closed=1)\n']",['closed'],[0],[]
8bd8c4f627216b054268f188130614e70a5f9dac,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java,Condition_Change,"+ * @author Sebastien Deleuze
-		else if (void.class == returnType) {
+		else if (void.class == returnType || ""kotlin.Unit"".equals(returnType.getName())) {",2,condition,Add support for `@Async` Kotlin function returning `Unit?`,"Closes gh-31881
",,31881,1,['`@Async` does not support `Unit?` return type'],"['**Affects:** 6.0.13\r\n\r\n---\r\nWhen using `@Async` with Kotlin functions, it is not possible to use `Unit?`-returning functions.\r\n`kotlin.Unit` corresponds to `void` in Java (https://kotlinlang.org/api/latest/jvm/stdlib/kotlin/-unit/), but the nullable version is not recognized when submitting the task: https://github.com/spring-projects/spring-framework/blob/main/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java#L295']",['closed'],[3],"['Could you please provide a reproducer as an attached archive or a link to a repository?', 'While creating a reproduction, I narrowed the issue down. It actually does only occur when returning `Unit?`, I updated the original issue accordingly.\r\n[minimal reproduction](https://github.com/spring-projects/spring-framework/files/13744553/async-issue.zip)\r\n', 'Interesting, thanks for sharing, I will have a deeper look.']"
8c605dd08251ca648c30aabed43d921229b7d3b1,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/BeanDefinitionParserDelegate.java,Condition_Change,"-			else if (namespaceUri.startsWith(""http://www.springframework.org/"")) {
+			else if (namespaceUri.startsWith(""http://www.springframework.org/schema/"")) {",2,condition,BeanDefinitionParserDelegate uses http://www.springframework.org/schema/,"See gh-22839
",,22839,1,['Add Nohttp Checks'],[''],['closed'],[22],"[""> Did you have a target branch in mind for this? Looks like 5.1.x would be a good candidate.\r\n\r\n@snicoll Thanks for the comments. I was not sure where the Framework team wanted this merged. It appears that @jhoeller is ok with the general changes going into 5.1.x except for the nohttp being added to the build. I'll let him verify what his thoughts are.\r\n\r\nAs per the discussion on Slack, I pushed changes to make it so that BeanDefinitionParserDelegate now uses http://www.springframework/schema/ so it is automatically ignored by nohttp. This means there is no need for suppressions.xml at all anymore."", 'Indeed, the documentation changes in particular could easily go into 5.1.x.\r\nThe license URL updates in the new source files are clearly master only, as are the tool-related changes.', '@snicoll @jhoeller Thanks for all the feedback. Is there anything else you need from me on this?', ""@rwinch a build based on that branch does not work for me. Is that to be expected?\r\n\r\n```\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':checkstyleNohttp'.\r\n> Checkstyle rule violations were found. See the report at: file:///Users/snicoll/workspace/pivotal/spring-framework/build/reports/checkstyle/nohttp.html\r\n  Checkstyle files with violations: 1024\r\n  Checkstyle violations by severity: [error:6153]\r\n```"", ""@rwinch As Stephane suggested, can we decompose this PR a bit? Separating the nohttp tool bit from the doc changes seems worthwhile indeed. Also, it's not entirely clear to me either which example URLs we should really be using now."", ""FWIW, I'll make the license headers in those two new test sources consistent with the rest in a separate revision. That's really a plain oversight even aside from the nohttp tool, in contrast to the headers in the gradlew scripts which are generated... So those remaining changes are really primarily motivated by the tool, and we need to take into account that those gradlew scripts get regenerated on a Gradle upgrade."", ""> @rwinch a build based on that branch does not work for me. Is that to be expected?\r\n> \r\n> ```\r\n> FAILURE: Build failed with an exception.\r\n> \r\n> * What went wrong:\r\n> Execution failed for task ':checkstyleNohttp'.\r\n> > Checkstyle rule violations were found. See the report at: file:///Users/snicoll/workspace/pivotal/spring-framework/build/reports/checkstyle/nohttp.html\r\n>   Checkstyle files with violations: 1024\r\n>   Checkstyle violations by severity: [error:6153]\r\n> ```\r\n\r\nIt does not fail for me. Can you post more details (i.e. files and the failures)? Perhaps you have stale files from the build or IDE still? Did you try a fresh clone or using `git clean -dfxn` (remove the n and run again if you are fine with the files being removed).\r\n\r\n> Thanks for the PR, I've added a few comments. I must share I am bit confused as when to add https and when http is ok in example URLs. I wonder how the tool is supposed to catch that.\r\n\r\nSee https://github.com/spring-io/nohttp/tree/master/nohttp#thought-process\r\n\r\n \r\n> Also, 18 commits sounds a bit invasive for such a change. I had started to polish it to 3: one to add the plugin to the build, one to change the header to https and one with all the rest (with the note that one commit should be a separate PR IMO).\r\n> \r\n> Would you mind rebase and squash the URLs changes in one commit?\r\n\r\nNo problem. Done."", 'It seems there might be [differing](https://github.com/spring-projects/spring-framework/pull/22839#pullrequestreview-234351701) [opinions](https://github.com/spring-projects/spring-framework/pull/22839#issuecomment-490017215) on how to split up the commits. I updated to switch to how @snicoll suggested the commits be split up (mostly because it was the first comment I saw). If you prefer, please feel free to split up the commits in another way.', ""I've rebased this work but I am not keen to merge at this point:\r\n\r\n* If your working copy is using IntelliJ IDEA, the IDE puts files in a separate location (`out` in each modules). If you happen to fix this outside the IDE it may not have catch up and will fail the build\r\n* Running `./gradlew nohttp` on the command line took almost 6 minutes, that's roughly, a third of our current build time. I got confused initially as there is a separate task for checkstyle that took 20s. \r\n* I had one build failure with an OOM\r\n\r\nRunning `./gradlew nohttp` with my rebase leads to\r\n\r\n```\r\n> Task :nohttp FAILED\r\n\r\nFAILURE: Build failed with an exception.\r\n\r\n* What went wrong:\r\nExecution failed for task ':nohttp'.\r\n> Process 'command '/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Home/bin/java'' finished with non-zero exit value 60\r\n\r\n* Try:\r\nRun with --stacktrace option to get the stack trace. Run with --info or --debug option to get more log output. Run with --scan to get full insights.\r\n\r\n* Get more help at https://help.gradle.org\r\n```\r\n\r\n@rwinch can you please have a look to it?"", ""@snicoll The `nohttp` task isn't really intended for anything other that fixing an existing codebase. At the moment, it [doesn't use settings](https://github.com/spring-io/nohttp/issues/16) from the nohttp extension. This means that everything is included by default. To use it, [follow the examples](https://github.com/spring-io/nohttp/tree/master/nohttp-gradle#nohttp-samples) in the documentation.\r\n\r\nPlease run `checkstyleNohttp` to verify the build. For me this runs in 3 seconds and passes. Note that the plugin adds `checkstyleNohttp` to a dependency to `check` task, so you running `check` executes `checkstyleNohttp`."", ""Yes, I've edited my comment in the meantime. It does not run in 3s for me though. What about the `out` directories? Excluding them would also allow duplicate checks."", ""> Yes, I've edited my comment in the meantime. \r\n\r\nHmm...not sure I understand this. I don't [see an edit](https://github.com/spring-projects/spring-framework/pull/22839#issuecomment-501611083) since I commented?\r\n\r\n![image](https://user-images.githubusercontent.com/362503/59438344-f676f200-8db8-11e9-8f79-ad10b1c40e13.png)\r\n\r\n> It does not run in 3s for me though.\r\n\r\nHow long does it take?\r\n\r\n> What about the out directories? Excluding them would also allow duplicate checks.\r\n\r\nYou could add an exclusion on them in nohttp configuration if you want to. I'm not sure how much this is going to gain since `*.class` files are already excluded."", 'In my edit 5h ago, I wrote the following\r\n\r\n>  I got confused initially as there is a separate task for checkstyle that took 20s.\r\n', ""Ok thanks that clarifies the edit and the amount of time it is taking. I'm still wondering:\r\n\r\n> You could add an exclusion on them in nohttp configuration if you want to. I'm not sure how much this is going to gain since *.class files are already excluded."", ""@rwinch yeah probably my use case was odd. I hadn't rebuild your PR in my IDE so it blew up but I guess once we're good it's not really necessary. The only use case I see is someone making a mistake in an xml file, fixing it, then the build would fail again until a build is done at the IDE level. I still think excluding those directories would be better (especially as it represents a duplication)"", 'I pushed an update to my branch that:\r\n* merges your changes for rebasing off master\r\n* excludes the out directory of each project', ""Running the build breaks for me as it's looking at `spring-framework/spring-websocket/bin/spring-websocket.log`. This may be an old artifact in my local repo but ignoring `.log` file looks sensible to me."", ""@rwinch did you test this branch against a fresh checkout or something (i.e. without building the framework first). I thought I had some outdated artifacts but it looks like the exclusions are not properly applied.\r\n\r\nHere is a gist that shows the error I currently have: https://gist.github.com/snicoll/ac6b5ba8c469bd79a22183704b5df852\r\n\r\nI am happy to revisit those and polish the PR but I'd like to first understand if I am missing something and if it's ok to exclude those resources."", 'The build works for me even though I have built other branches.\r\n\r\nIt seems like the failures you are getting are due to the build directory of modules that no longer exist in source control. For example, `spring-instrument-tomcat` and `spring-struts` do not exist in master. We should only exclude build directories of actual projects. You should make sure to clean that up before checking.', ""Sorry @rwinch I was focused on the `spring-websocket/bin` and I thought that one was legit. I should have reviewed the list more carefully.\r\n\r\nIt's now merged, I also upgraded to `0.0.3.RELEASE`. Thanks! \r\n\r\n"", 'The updates to `whitelist.lines` somehow got lost in the merge, but I added them in 5e9a22d118778487255a1e1d87c2368f69f2e329.\r\n\r\nSo hopefully that takes care of everything for this PR.', 'Ooops, for some reason I had a stale version of the PR. Thanks for noticing Sam!']"
8c9383da7c9ce02408c4e22eb8b6fdc07043582d,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
-import org.springframework.util.Assert;
-		while (!Object.class.equals(superclass)) {
+		while (superclass != null && !Object.class.equals(superclass)) {
-		Assert.isTrue(bridgeMethod != null);
-		Assert.isTrue(bridgedMethod != null);",5,iteration,BridgeMethodResolver properly handles bridge methods in interfaces,"Issue: SPR-9330
",,13968,1,['BridgeMethodResolver throws exception when trying to find bridged method if method is declired in interface or it is abstract [SPR-9330]'],"['**[Dmitry Kudinov](https://jira.spring.io/secure/ViewProfile.jspa?name=dkudinov)** opened **[SPR-9330](https://jira.spring.io/browse/SPR-9330?redirect=false)** and commented\n\nIn combination of Scala Collection and Spring Security with annotations enabled BridgeMethodResolver failed to find bridged method for Scala\'s method ""public abstract java.lang.Object scala.collection.TraversableLike.$plus$plus(scala.collection.TraversableOnce,scala.collection.generic.CanBuildFrom)""\n\nException thrown:\njava.lang.IllegalStateException: Failed to load ApplicationContext\nat org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:308)\nat org.springframework.test.context.support.DependencyInjectionTestExecutionListener.injectDependencies(DependencyInjectionTestExecutionListener.java:109)\nat org.springframework.test.context.support.DependencyInjectionTestExecutionListener.prepareTestInstance(DependencyInjectionTestExecutionListener.java:75)\nat org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:321)\nat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.createTest(SpringJUnit4ClassRunner.java:220)\nat org.springframework.test.context.junit4.SpringJUnit4ClassRunner$1.runReflectiveCall(SpringJUnit4ClassRunner.java:301)\nat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:15)\nat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.methodBlock(SpringJUnit4ClassRunner.java:303)\nat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:240)\nat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:49)\nat org.junit.runners.ParentRunner$3.run(ParentRunner.java:193)\nat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:52)\nat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:191)\nat org.junit.runners.ParentRunner.access$000(ParentRunner.java:42)\nat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:184)\nat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:61)\nat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:70)\nat org.junit.runners.ParentRunner.run(ParentRunner.java:236)\nat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:180)\nat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:50)\nat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:467)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:683)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:390)\nat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:197)\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'someItems\' defined in class path resource [test-spring-and-scala-collection-context.xml]: Initialization of bean failed; nested exception is java.lang.IllegalArgumentException: Class must not be null\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:527)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:456)\nat org.springframework.beans.factory.support.AbstractBeanFactory$1.getObject(AbstractBeanFactory.java:291)\nat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)\nat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:288)\nat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:190)\nat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:580)\nat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:895)\nat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:425)\nat org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:84)\nat org.springframework.test.context.support.AbstractGenericContextLoader.loadContext(AbstractGenericContextLoader.java:1)\nat org.springframework.test.context.TestContext.loadApplicationContext(TestContext.java:280)\nat org.springframework.test.context.TestContext.getApplicationContext(TestContext.java:304)\n... 24 more\nCaused by: java.lang.IllegalArgumentException: Class must not be null\nat org.springframework.util.Assert.notNull(Assert.java:112)\nat org.springframework.util.ReflectionUtils.findMethod(ReflectionUtils.java:145)\nat org.springframework.core.BridgeMethodResolver.searchForMatch(BridgeMethodResolver.java:210)\nat org.springframework.core.BridgeMethodResolver.findGenericDeclaration(BridgeMethodResolver.java:148)\nat org.springframework.core.BridgeMethodResolver.isBridgeMethodFor(BridgeMethodResolver.java:135)\nat org.springframework.core.BridgeMethodResolver.searchCandidates(BridgeMethodResolver.java:103)\nat org.springframework.core.BridgeMethodResolver.findBridgedMethod(BridgeMethodResolver.java:77)\nat org.springframework.core.annotation.AnnotationUtils.getAnnotation(AnnotationUtils.java:77)\nat org.springframework.core.annotation.AnnotationUtils.findAnnotation(AnnotationUtils.java:99)\nat org.springframework.security.access.annotation.SecuredAnnotationSecurityMetadataSource.findAttributes(SecuredAnnotationSecurityMetadataSource.java:42)\nat org.springframework.security.access.method.AbstractFallbackMethodSecurityMetadataSource.getAttributes(AbstractFallbackMethodSecurityMetadataSource.java:47)\nat org.springframework.security.access.method.DelegatingMethodSecurityMetadataSource.getAttributes(DelegatingMethodSecurityMetadataSource.java:53)\nat org.springframework.security.access.intercept.aopalliance.MethodSecurityMetadataSourceAdvisor$MethodSecurityMetadataSourcePointcut.matches(MethodSecurityMetadataSourceAdvisor.java:129)\nat org.springframework.aop.support.AopUtils.canApply(AopUtils.java:217)\nat org.springframework.aop.support.AopUtils.canApply(AopUtils.java:254)\nat org.springframework.aop.support.AopUtils.findAdvisorsThatCanApply(AopUtils.java:286)\nat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findAdvisorsThatCanApply(AbstractAdvisorAutoProxyCreator.java:117)\nat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.findEligibleAdvisors(AbstractAdvisorAutoProxyCreator.java:87)\nat org.springframework.aop.framework.autoproxy.AbstractAdvisorAutoProxyCreator.getAdvicesAndAdvisorsForBean(AbstractAdvisorAutoProxyCreator.java:68)\nat org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.wrapIfNecessary(AbstractAutoProxyCreator.java:359)\nat org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(AbstractAutoProxyCreator.java:322)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsAfterInitialization(AbstractAutowireCapableBeanFactory.java:407)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1426)\nat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:519)\n... 36 more\n\nIn attachment there is Maven-based project with single test and all required dependencies configured.\n\nIssue in BridgeMethodResolver#findGenericDeclaration(Method bridgeMethod) method:\n...\nClass superclass = bridgeMethod.getDeclaringClass().getSuperclass();\nwhile (!Object.class.equals(superclass)) {\n...\nfor method, defined in interface, call to ""getDeclaringClass().getSuperclass()"" returns null\n\nFix can be something like\nwhile (superclass != null && !Object.class.equals(superclass)) {\n\n\n\n---\n\n**Affects:** 3.0.7\n\n**Attachments:**\n- [spring-security-scala-collection.zip](https://jira.spring.io/secure/attachment/19593/spring-security-scala-collection.zip) (_2.99 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8c9383da7c9ce02408c4e22eb8b6fdc07043582d, https://github.com/spring-projects/spring-framework/commit/1e888706d39fdc2609f0a80ffb3a7bbf833af9a3\n\n**Backported to:** [3.1.4](https://github.com/spring-projects/spring-framework/milestone/83?closed=1)\n\n1 votes, 1 watchers\n']",['closed'],[2],"['**[Chris Beams](https://jira.spring.io/secure/ViewProfile.jspa?name=cbeams)** commented\n\nArjen, could you take a look at this?\n', ""**[Arjen Poutsma](https://jira.spring.io/secure/ViewProfile.jspa?name=arjen.poutsma)** commented\n\nNot anytime soon, I'm afraid.\n""]"
8cb24e0d93c9a073fc9a8b50692c90c2e19a5b43,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/concurrent/SettableListenableFuture.java,Add_Condition,"-			this.completingThread = null;  // only first check actually counts
+			if (check) {
+				this.completingThread = null;  // only first match actually counts
+			}",4,condition,SettableTask.checkCompletingThread() only resets marker after match,"Issue: SPR-15409
",,19972,1,['SettableListenableFuture setException is inconsistent with callbacks under race [SPR-15409]'],"['**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** opened **[SPR-15409](https://jira.spring.io/browse/SPR-15409?redirect=false)** and commented\n\nIn continuation of #19781 and #19766 I decided to test setException method of SettableListenableFuture and received another portion of strange results.\n\nWith methods set(value) and setException(new Exception()) executed under race following cases are possible:\n- Both methods return false but SuccessCallback is executed\n- Both methods return false but FailureCallback is executed\n\nI consider these cases as two flavors of the same problem - actually I expect that one of two methods will always return true.\n\nJcstress-based tests may be found here:\nhttps://github.com/isopov/isopov-jcstress/blob/master/src/main/java/com/sopovs/moradanen/jcstress/spring/SettableListenableFuture3Test.java\n\nAlso I tried to reproduce the problem without jcstress to better understand it and make sure that it lies not in my poor understanding of jcstress:\nhttps://github.com/isopov/isopov-jcstress/blob/master/src/main/java/com/sopovs/moradanen/jcstress/spring/SettableListenableFutureMain3Test.java\nThis test does not reproduce the problem as reliably as jcstress-based one, but sometimes it still reproduces both flavors of the problem in the single run.\n\n---\n\n**Affects:** 4.3.7\n\n**Issue Links:**\n- #19766 SettableListenableFuture may be both set and canceled successfully\n- #19781 SettableListenableFuture may be successfully set with failureCallback executed and success callback ignored\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8321f01bf808dab90186b5009caa9698565d015e, https://github.com/spring-projects/spring-framework/commit/8cb24e0d93c9a073fc9a8b50692c90c2e19a5b43\n']",['closed'],[2],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThere was indeed a bug in `SettableTask.checkCompletingThread`: We should only reset the marker after a **successful** check, otherwise a non-successful check may invalidate it and a subsequent potentially successful check can\'t find the corresponding marker anymore. I\'ve fixed that in master now and will backport it to 4.3.8.\n\nNote that your test has a race condition of its own: For a valid immediate comparison, each `success/successCallback` and `exception/failCallback` pair needs to be checked within a common monitor for the pair, otherwise they may be temporarily out of sync.\n\n```\nsynchronized (container.SUCCESS_MONITOR) {\n    if (container.result.successCallback && !container.result.success) {\n        System.out.println(""SuccessCallback without success!"");\n    }\n}\n```\n\n```\nsynchronized (container.SUCCESS_MONITOR) {\n    // success flag and success callback flag set within the same monitor\n    container.result.success = container.future.set(""foo"");\n}\n```\n\nand the same for the `setException` case, e.g. with a `container.FAIL_MONITOR`. Alternatively, I guess you could also batch the results and compare all of them at the very end.\n', '**[Ivan Sopov](https://jira.spring.io/secure/ViewProfile.jspa?name=isopov)** commented\n\nI\'ve build current master from sources and all my tests pass - thank you!\n\nThanks for this catch - indeed Main-based ""simple"" test reports failures even with the fix and has its own bug.\n']"
8cce40469631327e0afdd5d41393248313819270,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java,Add_Condition,"+		if (returnValue == null && Void.class.equals(returnValueClass)) {
+			return;
+		}
+",4,condition,Add check for ResponseEntity<void> with null return value,"Issue: SPR-12287
",,16892,1,"[""HttpEntity parameter 'null' in method (regression) [SPR-12287]""]","[""**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** opened **[SPR-12287](https://jira.spring.io/browse/SPR-12287?redirect=false)** and commented\n\nHi,\n\nLinux\nJava 1.8.0_20\n\nJust upgraded to Spring 4.1.1 (was using Spring 4.1.0 prior). I'm now receiving this error on a controller that is working for 4.1.0.\n\n```\njava.lang.IllegalArgumentException: HttpEntity parameter 'null' in method public java.lang.Object org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod$1.call() throws java.lang.Exception is not parameterized or has more than one parameter\n\tat org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.getHttpEntityType(HttpEntityMethodProcessor.java:110) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.getReturnValueType(HttpEntityMethodProcessor.java:150) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:119) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:138) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71) ~[spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:868) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:707) [servlet-api-3.1.jar:3.1.0]\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842) [spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:790) [servlet-api-3.1.jar:3.1.0]\n\tat org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:769) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1667) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:108) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160) [spring-security-web-4.0.0.M2.jar:na]\n\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter.doFilterInternal(OpenEntityManagerInViewFilter.java:177) [spring-orm-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.filter.DelegatingFilterProxy.invokeDelegate(DelegatingFilterProxy.java:344) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.filter.DelegatingFilterProxy.doFilter(DelegatingFilterProxy.java:261) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.servlets.CrossOriginFilter.handle(CrossOriginFilter.java:248) [jetty-servlets-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.servlets.CrossOriginFilter.doFilter(CrossOriginFilter.java:211) [jetty-servlets-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:101) [spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1650) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:583) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:143) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:577) [jetty-security-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:223) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1125) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:515) [jetty-servlet-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:185) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1059) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:141) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.handler.ContextHandlerCollection.handle(ContextHandlerCollection.java:189) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.handler.HandlerCollection.handle(HandlerCollection.java:110) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:97) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.Server.handleAsync(Server.java:553) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:318) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.server.HttpChannel.run(HttpChannel.java:262) [jetty-server-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:610) [jetty-util-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:539) [jetty-util-9.2.3.v20140905.jar:9.2.3.v20140905]\n\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_20]\n```\n\nI'm going to have to revert back to 4.1.0.\n\nThank you\n\n-=david=-\n\n---\n\n**Affects:** 4.1.1\n\n**Issue Links:**\n- #19365 IllegalArgumentException: HttpEntity parameter 'null'\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c5e360d886931f761c2be5ff4b31d5df2042d415, https://github.com/spring-projects/spring-framework/commit/8cce40469631327e0afdd5d41393248313819270, https://github.com/spring-projects/spring-framework/commit/956b66bbd466bb7a68e8499a483139a516572b24\n\n0 votes, 5 watchers\n""]",['closed'],[19],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis is likely a side effect of [commit a9b2a1](https://github.com/spring-projects/spring-framework/commit/a9b2a12491aa2259851b93824b7e560b3dbd1902). Is it a case of the controller returning an HttpEntity with a null body? Can you confirm the controller method signature?\n', ""**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** commented\n\nHi Rossen,\n\nThank you for your prompt reply. The controller method signature that is being invoked is this:\n\n```\npublic Callable<ResponseEntity<Void>> post(@PathVariable final Long mId,\n                                               @PathVariable final Long vId,\n                                               @RequestBody final MOR mor,\n                                               final HttpServletRequest httpServletRequest) {\n   return () -> {\n       ...\n       ...\n       return new ResponseEntity<>(HttpStatus.OK);\n   }\n \n}\n```\n\nUnfortunately, I have a `@ControllerAdvice` enabled, which is catching the exception and returning back a JSON response (to the client) informing the client of a system error - so I'm unable to say if the method returns a null body (you could say it's not, since the ControllerAdvice is calling a MappingJackson2JsonView that is returning JSON).\n\nIf I can be of any further assistance, please do let me know.\n\n-=david=-\n"", '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nOkay thanks, that should be enough to reproduce the issue.\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\n[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan) I tried using the above method signature but wasn't able to reproduce the issue.\n\nPlease take a look at the sample project https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-12287 I created.\n"", ""**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** commented\n\nHi Rossen,\n\nThank you for the update. I've reconfirmed on my side that this update to 4.1.1 breaks still. The POSTs still cause this exception - GETs seem to be okay. I will attempt to see if I can figure out on my side anything that may be of use. I had a look at your test app, but not had a chance to run it.\n\nFYI, this is the stack I've just seen:\n\n```\njava.lang.IllegalArgumentException: HttpEntity parameter 'null' in method public java.lang.Object org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod$1.call() throws java.lang.Exception is not parameterized or has more than one parameter\n\tat org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.getHttpEntityType(HttpEntityMethodProcessor.java:110) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.getReturnValueType(HttpEntityMethodProcessor.java:150) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:119) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:138) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71) ~[spring-web-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:122) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83) ~[spring-webmvc-4.1.1.RELEASE.jar:4.1.1.RELEASE]\n```\n\n"", '**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** commented\n\nHi Rossen,\n\nI\'ve done some more playing around.\n\nIf I change my type signature to simply return a String it works fine\n\n```\n@ResponseStatus(CREATED)\n@RequestMapping(value = ""/{mId}/v/{vId}/o"", method = POST, consumes = JSON, produces = JSON)\n@PreAuthorize(""@mas.isAllowed(#mId) and  @mas.hasCrudPermission(\'o\', \'create\')"")\npublic Callable<String> post(@PathVariable final Long mId,\n                                           @PathVariable final Long vId,\n                                           @RequestBody final MOR mor,\n                                           final HttpServletRequest httpServletRequest) {\n```\n\nYou know, you\'re probably going to shoot me! but it would have been very helpful to you if I included the annotations in my reply to your request for an example above. Perhapt it may help. One thing I\'m doing is that I have an advice being actioned:\n\n```\norg.springframework.web.servlet.mvc.method.annotation.JsonViewResponseBodyAdvice\n```\n\nSo, it appears that any composite object (i.e., Callable<ResponseEntity\\<Void>>) is always throwing an exception for me as above, whereas simple return types, such as Callable\\<Employee> works successfully.\n\nI hope that helps a bit more.\n\n-=david=-\n', '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nNever mind, I got it reproduced. Thanks.\n', ""**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** commented\n\nReally!\n\nThat's amazing. I've just cloned the #16892 repo, added in jackson and the JSON view resolver, and was trying to get it to fail like on my application - couldn't do it - I was about to break down in tears :-) :-)\n\nWhat's the issue? Totally curious! :-)\n\n-=david=-\n"", ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI pushed the changes I made. The key part is actually using 4.1.1 :)\n\nThe issue is related to the use of Callable<ResponseEntity<?>> where the ResponseEntity has no body. It has trouble extracting the parameterized type from the method signature in this specific scenario. Previously it worked because we didn't try to go any further if the body was null. #16766 in 4.1.1 changed that. Hence the issue.\n"", '**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** commented\n\nw00t!\n\nI look forward to Spring 4.1.2! :-)\n\n-=david=-\n', '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis should be fixed now with [commit 956b66](https://github.com/spring-projects/spring-framework/commit/956b66bbd466bb7a68e8499a483139a516572b24). If you can please give it a try with 4.1.2.BUILD-SNAPSHOT after this build is completed https://build.spring.io/browse/SPR-PUB-1781.\n', ""**[David Harrigan](https://jira.spring.io/secure/ViewProfile.jspa?name=dharrigan)** commented\n\nHi,\n\nTested with 4.1.2.BUILD-SNAPSHOT and I'm happy to report that the error, as reported, is not happening anymore :-)\n\nThanks Rossen!\n\n-=david=-\n"", '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nGreat, thanks for verifying!\n', ""**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** commented\n\nI'm seeing a similar issue in 4.1.1. I tested today with 4.1.2.BUILD-SNAPSHOT but still get the problem.\n\nThe case I have is I have a custom ResponseEntityExceptionHandler like:\n\n```\n@ControllerAdvice\npublic class CustomResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {\n\n    @ExceptionHandler(ResourceNotFoundException.class)\n    @ResponseBody\n    public ResponseEntity handleResourceNotFoundException(ResourceNotFoundException e) {\n        return ResponseEntity.notFound().build();\n    }\n}\n```\n\nI'm using Spring's Test MvcMock framework to test but in case I the ResourceNotFoundException is thrown from my controller I get the same exception:\n\n```\n2014-10-16 23:02:11.748 ERROR 11136 --- [           main] .m.m.a.ExceptionHandlerExceptionResolver : Failed to invoke @ExceptionHandler method: public org.springframework.http.ResponseEntity org.mycomp.web.exception.CustomResponseEntityExceptionHandler.handleResourceNotFoundException(org.mycomp.web.exception.ResourceNotFoundException)\n\njava.lang.IllegalArgumentException: HttpEntity parameter 'null' in method public org.springframework.http.ResponseEntity org.mycomp.web.exception.CustomResponseEntityExceptionHandler.handleResourceNotFoundException(org.mycomp.web.exception.ResourceNotFoundException) is not parameterized or has more than one parameter\n\tat org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.getHttpEntityType(HttpEntityMethodProcessor.java:110)\n\tat org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.getReturnValueType(HttpEntityMethodProcessor.java:150)\n\tat org.springframework.web.servlet.mvc.method.annotation.AbstractMessageConverterMethodProcessor.writeWithMessageConverters(AbstractMessageConverterMethodProcessor.java:119)\n\tat org.springframework.web.servlet.mvc.method.annotation.HttpEntityMethodProcessor.handleReturnValue(HttpEntityMethodProcessor.java:138)\n\tat org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite.handleReturnValue(HandlerMethodReturnValueHandlerComposite.java:71)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:128)\n\tat org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver.doResolveHandlerMethodException(ExceptionHandlerExceptionResolver.java:362)\n\tat org.springframework.web.servlet.handler.AbstractHandlerMethodExceptionResolver.doResolveException(AbstractHandlerMethodExceptionResolver.java:60)\n\tat org.springframework.web.servlet.handler.AbstractHandlerExceptionResolver.resolveException(AbstractHandlerExceptionResolver.java:138)\n\tat org.springframework.web.servlet.handler.HandlerExceptionResolverComposite.resolveException(HandlerExceptionResolverComposite.java:75)\n\tat org.springframework.web.servlet.DispatcherServlet.processHandlerException(DispatcherServlet.java:1167)\n\tat org.springframework.test.web.servlet.TestDispatcherServlet.processHandlerException(TestDispatcherServlet.java:109)\n\tat org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1004)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:955)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:620)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842)\n\tat org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:62)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:727)\n\tat org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:170)\n\tat org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:137)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:201)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)\n\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)\n\tat org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:137)\n\tat org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:145)\n\tat org.springframework.test.web.servlet.MockMvc$perform.call(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)\n\tat org.mycomp.web.controller.BookControllerTests.get_should_return_not_found_when_vat_rate_does_not_exists(BookControllerTests.groovy:149)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:72)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:81)\n\tat org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:216)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:82)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:60)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:67)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:162)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:483)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)\n\n2014-10-16 23:02:11.767  INFO 11136 --- [           main] o.s.t.c.transaction.TransactionContext   : Rolled back transaction for test context [DefaultTestContext@5fb7b227 testClass = BookControllerTests, testInstance = org.mycomp.web.controller.BookControllerTests@6eb58fdd, testMethod = get_should_return_not_found_when_vat_rate_does_not_exists@BookControllerTests, testException = org.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.mycomp.web.exception.ResourceNotFoundException, mergedContextConfiguration = [WebMergedContextConfiguration@12aa9370 testClass = BookControllerTests, locations = '{}', classes = '{class org.mycomp.Application}', contextInitializerClasses = '[]', activeProfiles = '{test}', propertySourceLocations = '{}', propertySourceProperties = '{}', resourceBasePath = 'src/main/webapp', contextLoader = 'org.springframework.boot.test.SpringApplicationContextLoader', parent = [null]]].\n\norg.springframework.web.util.NestedServletException: Request processing failed; nested exception is org.mycomp.web.exception.ResourceNotFoundException\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:978)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:857)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:620)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:842)\n\tat org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:62)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:727)\n\tat org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:170)\n\tat org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:137)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:330)\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.invoke(FilterSecurityInterceptor.java:118)\n\tat org.springframework.security.web.access.intercept.FilterSecurityInterceptor.doFilter(FilterSecurityInterceptor.java:84)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.access.ExceptionTranslationFilter.doFilter(ExceptionTranslationFilter.java:113)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.session.SessionManagementFilter.doFilter(SessionManagementFilter.java:103)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.authentication.AnonymousAuthenticationFilter.doFilter(AnonymousAuthenticationFilter.java:113)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestFilter.doFilter(SecurityContextHolderAwareRequestFilter.java:154)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.savedrequest.RequestCacheAwareFilter.doFilter(RequestCacheAwareFilter.java:45)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.authentication.www.BasicAuthenticationFilter.doFilter(BasicAuthenticationFilter.java:201)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.authentication.logout.LogoutFilter.doFilter(LogoutFilter.java:110)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.header.HeaderWriterFilter.doFilterInternal(HeaderWriterFilter.java:57)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.context.SecurityContextPersistenceFilter.doFilter(SecurityContextPersistenceFilter.java:87)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.context.request.async.WebAsyncManagerIntegrationFilter.doFilterInternal(WebAsyncManagerIntegrationFilter.java:50)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.springframework.security.web.FilterChainProxy$VirtualFilterChain.doFilter(FilterChainProxy.java:342)\n\tat org.springframework.security.web.FilterChainProxy.doFilterInternal(FilterChainProxy.java:192)\n\tat org.springframework.security.web.FilterChainProxy.doFilter(FilterChainProxy.java:160)\n\tat org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:137)\n\tat org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:145)\n\tat org.springframework.test.web.servlet.MockMvc$perform.call(Unknown Source)\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:45)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:108)\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:116)\n\tat org.mycomp.web.controller.BookControllerTests.get_should_return_not_found_when_vat_rate_does_not_exists(BookControllerTests.groovy:149)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestMethodCallbacks.evaluate(RunBeforeTestMethodCallbacks.java:72)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestMethodCallbacks.evaluate(RunAfterTestMethodCallbacks.java:81)\n\tat org.springframework.test.context.junit4.statements.SpringRepeat.evaluate(SpringRepeat.java:72)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:216)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.runChild(SpringJUnit4ClassRunner.java:82)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.springframework.test.context.junit4.statements.RunBeforeTestClassCallbacks.evaluate(RunBeforeTestClassCallbacks.java:60)\n\tat org.springframework.test.context.junit4.statements.RunAfterTestClassCallbacks.evaluate(RunAfterTestClassCallbacks.java:67)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.springframework.test.context.junit4.SpringJUnit4ClassRunner.run(SpringJUnit4ClassRunner.java:162)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)\nCaused by: org.mycomp.web.exception.ResourceNotFoundException\n\tat org.mycomp.web.controller.BookController.get(BookController.java:67)\n\tat org.mycomp.web.controller.BookController$$FastClassBySpringCGLIB$$726a7f3d.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:717)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor$1.proceedWithInvocation(TransactionInterceptor.java:98)\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:266)\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:95)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:653)\n\tat org.mycomp.web.controller.BookController$$EnhancerBySpringCGLIB$$585dbc5d.get(<generated>)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:215)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:132)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:110)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:943)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:877)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:966)\n\t... 75 more\n```\n\nShould I create a separate issue for this?\n"", ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nNo it's fine to keep it under this report. It looks like in this example the ResponseEntity is declared as a raw type without a generic parameter.\n"", '**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** commented\n\nYes that\'s indeed the case:\n\n```\n@RequestMapping(value = ""/{id}"", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)\n@Transactional(readOnly = true)\npublic ResponseEntity get(@PathVariable(""id"") Long id) {\n    // get resource\n    return ResponseEntity.ok().body(resource);\n}\n```\n\nNote that I do this on purpose to be able to return different objects based on what happens in the controller.\nI also want to avoid to use something like ResponseEntity\\<Object> to avoid bloating my code.\n\nI assume using a raw ResponseEntity type should be supported, right?\n', '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis should be fixed now with [commit c5e360](https://github.com/spring-projects/spring-framework/commit/c5e360d886931f761c2be5ff4b31d5df2042d415).\n', '**[Marcel Overdijk](https://jira.spring.io/secure/ViewProfile.jspa?name=marceloverdijk)** commented\n\nThx Rossen, I can confirm this is now fixed with 4.1.2.BUILD-20141017.172150-32\n', '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThanks for confirming!\n']"
8cced42fb2cdbe1d0864ca6c576d81d4cb8dcb49,spring-projects/spring-framework,spring-jcl/src/main/java/org/apache/commons/logging/LogAdapter.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-			this.logger = loggerContext.getLogger(name);
+			LoggerContext context = loggerContext;
+			if (context == null) {
+				// Circular call in early-init scenario -> static field not initialized yet
+				context = LogManager.getContext(Log4jLog.class.getClassLoader(), false);
+			}
+			this.logger = context.getLogger(name);",6,condition,Use local LoggerContext in Log4jLog when static field not initialized yet,"Closes gh-24440
",,24440,1,['Cycle in LogAdapter.Log4jLog initialization within log appender'],"['**Affects:**  5.2.x\r\n\r\nThe Spring implementation of commons-logging has the following logic within the `LogAdapter` for Log4j2...\r\n\r\n```\r\n\t\tprivate static final LoggerContext loggerContext =\r\n\t\t\t\tLogManager.getContext(Log4jLog.class.getClassLoader(), false);\r\n\r\n...\r\n\r\n\t\tpublic Log4jLog(String name) {\r\n\t\t\tthis.logger = loggerContext.getLogger(name);\r\n\t\t}\r\n```\r\n\r\nIf a custom appender depends on a class that has a static logger defined, we get an NPE on the `loggerContext` because the constructor is called before the static field is initialized.\r\n\r\nFor the full context of the issue, see https://github.com/spring-projects/spring-amqp-samples/issues/59 and https://github.com/spring-projects/spring-amqp/issues/1148. The work-around was to defer initialization of the classes with the static loggers until the log system is initialized.\r\n\r\nThis may be an unsolvable catch-22 but I thought I should at least raise the issue in case the Spring Team has ideas. This was not an issue with Boot 1.5/Spring 4.3.\r\n\r\nHere is a simple example that exhibits the behavior:\r\n\r\n```java\r\n@SpringBootApplication\r\npublic class Rgh1148Application {\r\n\r\n\tpublic static void main(String[] args) {\r\n\t\tSpringApplication.run(Rgh1148Application.class, args);\r\n\t}\r\n\r\n}\r\n\r\n@Plugin(name = ""Test"", category = ""Core"", elementType = ""appender"", printObject = true)\r\npublic class MyAppender extends AbstractAppender {\r\n\r\n\tprivate final SomeClass someClass = new SomeClass();\r\n\r\n\tpublic MyAppender(String name, Filter filter, Layout<? extends Serializable> layout, boolean ignoreExceptions,\r\n\t\t\tProperty[] properties) {\r\n\t\tsuper(name, filter, layout, ignoreExceptions, properties);\r\n\t}\r\n\r\n\t@PluginFactory\r\n\tpublic static MyAppender create(\r\n\t\t\t@PluginConfiguration final Configuration configuration,\r\n\t\t\t@PluginAttribute(""name"") String name,\r\n\t\t\t@PluginElement(""Layout"") Layout<? extends Serializable> layout,\r\n\t\t\t@PluginElement(""Filter"") Filter filter,\r\n\t\t\t@PluginAttribute(""ignoreExceptions"") boolean ignoreExceptions) {\r\n\t\treturn new MyAppender(name, filter, layout, ignoreExceptions, null);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic void append(LogEvent event) {\r\n\t\tthis.someClass.foo(event);\r\n\t}\r\n\r\n}\r\n\r\nclass SomeClass {\r\n\r\n\tprivate static final Log logger = LogFactory.getLog(SomeClass.class);\r\n\r\n\tpublic void foo(LogEvent event) {\r\n\t\tlogger.info(event);\r\n\t}\r\n\r\n}\r\n```\r\n\r\n```xml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<Configuration packages=""com.example.demo"">\r\n\t<Appenders>\r\n\t\t<Console name=""STDOUT"" target=""SYSTEM_OUT"">\r\n\t\t\t<PatternLayout pattern=""%m%n"" />\r\n\t\t</Console>\r\n\t\t<Test name=""myAppender"">\r\n\t\t</Test>\r\n\t</Appenders>\r\n\t<Loggers>\r\n\t\t<Root>\r\n\t\t\t<AppenderRef ref=""STDOUT, myAppender"" />\r\n\t\t</Root>\r\n\t</Loggers>\r\n</Configuration>\r\n```\r\n\r\n```xml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<project xmlns=""http://maven.apache.org/POM/4.0.0"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\r\n\txsi:schemaLocation=""http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"">\r\n\t<modelVersion>4.0.0</modelVersion>\r\n\t<parent>\r\n\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t<artifactId>spring-boot-starter-parent</artifactId>\r\n\t\t<version>2.2.4.RELEASE</version>\r\n\t\t<relativePath/> <!-- lookup parent from repository -->\r\n\t</parent>\r\n\t<groupId>com.example</groupId>\r\n\t<artifactId>rgh1148</artifactId>\r\n\t<version>0.0.1-SNAPSHOT</version>\r\n\t<name>rgh1148</name>\r\n\t<description>Demo project for Spring Boot</description>\r\n\r\n\t<properties>\r\n\t\t<java.version>1.8</java.version>\r\n\t</properties>\r\n\r\n\t<dependencies>\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter</artifactId>\r\n\t\t\t<exclusions>\r\n\t\t\t\t<exclusion>\r\n\t\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t\t<artifactId>spring-boot-starter-logging</artifactId>\r\n\t\t\t\t</exclusion>\r\n\t\t\t</exclusions>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-log4j2</artifactId>\r\n\t\t</dependency>\r\n\r\n\t\t<dependency>\r\n\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t<artifactId>spring-boot-starter-test</artifactId>\r\n\t\t\t<scope>test</scope>\r\n\t\t\t<exclusions>\r\n\t\t\t\t<exclusion>\r\n\t\t\t\t\t<groupId>org.junit.vintage</groupId>\r\n\t\t\t\t\t<artifactId>junit-vintage-engine</artifactId>\r\n\t\t\t\t</exclusion>\r\n\t\t\t</exclusions>\r\n\t\t</dependency>\r\n\t</dependencies>\r\n\r\n\t<build>\r\n\t\t<plugins>\r\n\t\t\t<plugin>\r\n\t\t\t\t<groupId>org.springframework.boot</groupId>\r\n\t\t\t\t<artifactId>spring-boot-maven-plugin</artifactId>\r\n\t\t\t</plugin>\r\n\t\t</plugins>\r\n\t</build>\r\n\r\n</project>\r\n```\r\n\r\n```\r\n2020-01-27 15:02:40,570 main ERROR Unable to invoke factory method in class com.example.demo.MyAppender for element Test: java.lang.ExceptionInInitializerError java.lang.reflect.InvocationTargetException\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.apache.logging.log4j.core.config.plugins.util.PluginBuilder.build(PluginBuilder.java:136)\r\n\tat org.apache.logging.log4j.core.config.AbstractConfiguration.createPluginObject(AbstractConfiguration.java:1002)\r\n\tat org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:942)\r\n\tat org.apache.logging.log4j.core.config.AbstractConfiguration.createConfiguration(AbstractConfiguration.java:934)\r\n\tat org.apache.logging.log4j.core.config.AbstractConfiguration.doConfigure(AbstractConfiguration.java:552)\r\n\tat org.apache.logging.log4j.core.config.AbstractConfiguration.initialize(AbstractConfiguration.java:241)\r\n\tat org.apache.logging.log4j.core.config.AbstractConfiguration.start(AbstractConfiguration.java:288)\r\n\tat org.apache.logging.log4j.core.LoggerContext.setConfiguration(LoggerContext.java:579)\r\n\tat org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:651)\r\n\tat org.apache.logging.log4j.core.LoggerContext.reconfigure(LoggerContext.java:668)\r\n\tat org.apache.logging.log4j.core.LoggerContext.start(LoggerContext.java:253)\r\n\tat org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:153)\r\n\tat org.apache.logging.log4j.core.impl.Log4jContextFactory.getContext(Log4jContextFactory.java:45)\r\n\tat org.apache.logging.log4j.LogManager.getContext(LogManager.java:194)\r\n\tat org.apache.commons.logging.LogAdapter$Log4jLog.<clinit>(LogAdapter.java:155) <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\r\n\tat org.apache.commons.logging.LogAdapter$Log4jAdapter.createLog(LogAdapter.java:122)\r\n\tat org.apache.commons.logging.LogAdapter.createLog(LogAdapter.java:89)\r\n\tat org.apache.commons.logging.LogFactory.getLog(LogFactory.java:67)\r\n\tat org.apache.commons.logging.LogFactory.getLog(LogFactory.java:59)\r\n\tat org.springframework.boot.SpringApplication.<clinit>(SpringApplication.java:196)\r\n\tat com.example.demo.Rgh1148Application.main(Rgh1148Application.java:10)\r\nCaused by: java.lang.ExceptionInInitializerError\r\n\tat com.example.demo.MyAppender.<init>(MyAppender.java:38)\r\n\tat com.example.demo.MyAppender.create(MyAppender.java:52)\r\n\t... 25 more\r\nCaused by: java.lang.NullPointerException\r\n\tat org.apache.commons.logging.LogAdapter$Log4jLog.<init>(LogAdapter.java:160) . <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<\r\n\tat org.apache.commons.logging.LogAdapter$Log4jAdapter.createLog(LogAdapter.java:122)\r\n\tat org.apache.commons.logging.LogAdapter.createLog(LogAdapter.java:89)\r\n\tat org.apache.commons.logging.LogFactory.getLog(LogFactory.java:67)\r\n\tat org.apache.commons.logging.LogFactory.getLog(LogFactory.java:59)\r\n\tat com.example.demo.SomeClass.<clinit>(MyAppender.java:64)\r\n\t... 27 more\r\n```']",['closed'],[2],"[""Since Log4J seems to be internally capable of retrieving the `LoggerContext` even in circular scenarios, we could simply move the `LogManager.getContext` to the constructor as well - so that it is being reliably called before our `LoggerContext.getLogger` invocation. In order to retain our current context caching, we could also have a mixed scenario where we're lazily initializing the context in a volatile field."", 'With even less impact, it seems we can keep initializing our static field and simply let the constructor perform a local `LogManager.getContext` call if the field happens to be not initialized yet.']"
8d17bcea5b06979cca48c9e3cd75420a75b7f267,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/sockjs/support/AbstractSockJsService.java,Add_Condition,"+				if (""websocket"".equalsIgnoreCase(request.getHeaders().getUpgrade())) {
+					response.setStatusCode(HttpStatus.BAD_REQUEST);
+					return;
+				}",4,condition,Validate top-level SockJS URL,"Closes gh-26933
",,26933,1,['Exception in Tomcat when SockJS top URL is a WebSocket upgrade'],"['# Creating simple websocke/sompt server  \r\nSpring fails to parse HTTP request header, although it sends 200 response to the client and close the connection immediately.\r\n\r\n# How to reproduce\r\n\r\nDownload sample code from official [guides](https://spring.io/guides/gs/messaging-stomp-websocket/), then set log level to debug `logging.level.root=debug` on **application.properties**.\r\nRun the server, and try connecting with simple JS client code.\r\n\r\n**JS client**\r\n```const WebSocket = require(\'ws\');\r\n\r\n\r\nconst ws = new WebSocket(\'ws://dev.contabo:8080/gs-guide-websocket\')\r\nws.on(\'open\', () => {\r\n  console.log(""connection opened"");\r\n})\r\n\r\nws.on(\'message\', () => {\r\n  console.log(\'message recieved\');\r\n})\r\n\r\nws.on(\'close\', () => {\r\n  console.log(\'connection closed\');\r\n})\r\n\r\nws.on(\'error\', (item) => {\r\n  console.log(item)\r\n})\r\n```\r\n\r\nIt gives the following error on the log:\r\n\r\n```\r\n2021-05-11 16:07:12.682 DEBUG 12588 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : GET ""/chatspace"", parameters={}\r\n2021-05-11 16:07:12.687 DEBUG 12588 --- [nio-8080-exec-1] o.s.w.s.s.s.WebSocketHandlerMapping      : Mapped to org.springframework.web.socket.sockjs.support.SockJsHttpRequestHandler@4a68cc76\r\n2021-05-11 16:07:12.693 DEBUG 12588 --- [nio-8080-exec-1] o.s.w.s.s.t.h.DefaultSockJsService       : Processing transport request: GET http://localhost:8080/chatspace\r\n2021-05-11 16:07:12.696 DEBUG 12588 --- [nio-8080-exec-1] o.s.web.servlet.DispatcherServlet        : Completed 200 OK\r\n2021-05-11 16:07:12.701 DEBUG 12588 --- [nio-8080-exec-1] o.a.coyote.http11.Http11InputBuffer      : Before fill(): parsingHeader: [true], parsingRequestLine: [true], parsingRequestLinePhase: [0], parsingRequestLineStart: [0], byteBuffer.position(): [0], byteBuffer.limit(): [0], end: [232]\r\n2021-05-11 16:07:12.701 DEBUG 12588 --- [nio-8080-exec-1] o.a.tomcat.util.net.SocketWrapperBase    : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@56fe2702:org.apache.tomcat.util.net.NioChannel@54ea376e:java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:50988]], Read from buffer: [0]\r\n2021-05-11 16:07:12.701 DEBUG 12588 --- [nio-8080-exec-1] org.apache.tomcat.util.net.NioEndpoint   : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@56fe2702:org.apache.tomcat.util.net.NioChannel@54ea376e:java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:50988]], Read direct from socket: [0]\r\n2021-05-11 16:07:12.701 DEBUG 12588 --- [nio-8080-exec-1] o.a.coyote.http11.Http11InputBuffer      : Received []\r\n2021-05-11 16:07:12.702 DEBUG 12588 --- [nio-8080-exec-1] o.apache.coyote.http11.Http11Processor   : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@56fe2702:org.apache.tomcat.util.net.NioChannel@54ea376e:java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:50988]], Status in: [OPEN_READ], State out: [OPEN]\r\n2021-05-11 16:07:12.702 DEBUG 12588 --- [nio-8080-exec-1] org.apache.tomcat.util.net.NioEndpoint   : Registered read interest for [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@56fe2702:org.apache.tomcat.util.net.NioChannel@54ea376e:java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:50988]]\r\n2021-05-11 16:07:12.707 DEBUG 12588 --- [nio-8080-exec-2] o.a.coyote.http11.Http11InputBuffer      : Before fill(): parsingHeader: [true], parsingRequestLine: [true], parsingRequestLinePhase: [0], parsingRequestLineStart: [0], byteBuffer.position(): [0], byteBuffer.limit(): [0], end: [232]\r\n2021-05-11 16:07:12.707 DEBUG 12588 --- [nio-8080-exec-2] o.a.tomcat.util.net.SocketWrapperBase    : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@56fe2702:org.apache.tomcat.util.net.NioChannel@54ea376e:java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:50988]], Read from buffer: [0]\r\n2021-05-11 16:07:12.707 DEBUG 12588 --- [nio-8080-exec-2] o.apache.coyote.http11.Http11Processor   : Error parsing HTTP request header\r\n\r\njava.io.EOFException: null\r\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.fillReadBuffer(NioEndpoint.java:1345) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.read(NioEndpoint.java:1255) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.coyote.http11.Http11InputBuffer.fill(Http11InputBuffer.java:794) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:359) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:261) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) ~[na:na]\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630) ~[na:na]\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat java.base/java.lang.Thread.run(Thread.java:832) ~[na:na]\r\n\r\n2021-05-11 16:07:12.708 DEBUG 12588 --- [nio-8080-exec-2] o.apache.coyote.http11.Http11Processor   : Error state [CLOSE_CONNECTION_NOW] reported while processing request\r\n\r\njava.io.EOFException: null\r\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.fillReadBuffer(NioEndpoint.java:1345) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper.read(NioEndpoint.java:1255) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.coyote.http11.Http11InputBuffer.fill(Http11InputBuffer.java:794) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.coyote.http11.Http11InputBuffer.parseRequestLine(Http11InputBuffer.java:359) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:261) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:65) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:893) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1707) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1130) ~[na:na]\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:630) ~[na:na]\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.45.jar:9.0.45]\r\n\tat java.base/java.lang.Thread.run(Thread.java:832) ~[na:na]\r\n\r\n2021-05-11 16:07:12.708 DEBUG 12588 --- [nio-8080-exec-2] o.apache.coyote.http11.Http11Processor   : Socket: [org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@56fe2702:org.apache.tomcat.util.net.NioChannel@54ea376e:java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:50988]], Status in: [OPEN_READ], State out: [CLOSED]\r\n2021-05-11 16:07:12.709 DEBUG 12588 --- [nio-8080-exec-2] o.apache.tomcat.util.threads.LimitLatch  : Counting down[http-nio-8080-exec-2] latch=1\r\n2021-05-11 16:07:12.709 DEBUG 12588 --- [nio-8080-exec-2] org.apache.tomcat.util.net.NioEndpoint   : Calling [org.apache.tomcat.util.net.NioEndpoint@2a267286].closeSocket([org.apache.tomcat.util.net.NioEndpoint$NioSocketWrapper@56fe2702:org.apache.tomcat.util.net.NioChannel@54ea376e:java.nio.channels.SocketChannel[connected local=/127.0.0.1:8080 remote=/127.0.0.1:50988]])\r\n2021-05-11 16:07:24.104 DEBUG 12588 --- [)-192.168.1.109] sun.rmi.transport.tcp                    : RMI TCP Connection(8)-192.168.1.109: (port 42343) connection closed\r\n\r\n```']",['closed'],[1],"['At the top URL, we respond with a 200 ""Welcome to SocketJS"" as required by the SockJS protocol. However, given the request is a WebSocket upgrade (rather than a regular HTTP GET), Tomcat seems to run into an exception. This is outside our control and we do not request for a WebSocket upgrade to be started, and in any case the upgrade doesn\'t succeed with a 200 response.\r\n\r\nThat said, given the possibility for confusion when experimenting and pointing to the top URL, we can set the response to 400 in this scenario which also seems to cause Tomcat to not run into the same exception.\r\n']"
8eb618b480896092cae04d1c5e412f7a5dba0c9c,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,Add_Condition,"- * Copyright 2002-2021 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
+import kotlin.reflect.jvm.KCallablesJvm;
+		if (method.isAccessible() && !KCallablesJvm.isAccessible(function)) {
+			KCallablesJvm.setAccessible(function, true);
+		}",4,condition,Make Kotlin functions accessible in CoroutinesUtils,"In order to allow using private classes like in Java
for example.

Closes gh-23840
",,23840,1,['Make Kotlin functions accessible in CoroutinesUtils'],"[""After updating to spring-webflux 5.2 i noticed that `@ExceptionHandler`'s in private Kotlin-Classes stopped working. \r\nAfter debbuging I found that this regression was introduced with kotlin-coroutines support for reactive Webflux and reactive Messaging handlers. \r\n\r\nThe Problem is that when converting Java methods to Kotlin functions the information if a method is accessible or not will not be copied and the Kotlin function has to be made accessible again via its `isAccessible` setter.\r\n\r\nFor this I introduced a new very simple `KotlinReflectionUtils` class which both `InvocableHandlerMethod's` use when Kotlin is available. I'm not 100% sure if this is the best solution and if its worth to introduce a new utils class for this. \r\n""]",['closed'],[5],"[""I'm wondering if these classes need to remain private, i.e. is this something we want to work?"", ""> I'm wondering if these classes need to remain private, i.e. is this something we want to work?\r\n\r\n@rstoyanchev If you mean classe like `CoroutinesController` in the PR and if that works on Java, I would say yes.\r\n\r\nThat said, we can't modify `org.springframework.core.CoroutinesUtils#invokeSuspendingFunction` signature to use `KFunction` instead of `Method`, and `CoroutinesUtils` is now a Java class. So I think I would suggest to modify:\r\n\r\n```\r\npublic static Publisher<?> invokeSuspendingFunction(Method method, Object target, Object... args) {\r\n\tKFunction<?> function = Objects.requireNonNull(ReflectJvmMapping.getKotlinFunction(method));\r\n\t// ...\r\n}\r\n```\r\nTo\r\n```\r\npublic static Publisher<?> invokeSuspendingFunction(Method method, Object target, Object... args) {\r\n\tKFunction<?> function = Objects.requireNonNull(ReflectJvmMapping.getKotlinFunction(method));\r\n\tif (method.isAccessible() && !kotlin.reflect.jvm.KCallablesJvm.isAccessible(function)) {\r\n\t\tkotlin.reflect.jvm.KCallablesJvm.setAccessible(function, true);\r\n\t}\r\n\t// ...\r\n}\r\n```\r\nThis will impact other `invokeSuspendingFunction` invocations as well (not just those from `InvocableHandlerMethod`), but implemented like that I tend to think that's ok.\r\n\r\n@rstoyanchev Do you agree? Is it ok to target 5.3.x for that fix?"", 'We probably need to do the same thing on [`BeanUtils#instantiateClass`](https://github.com/spring-projects/spring-framework/blob/ec9ce5b4b0f948e510e5d958b5bcb60dc84476b3/spring-beans/src/main/java/org/springframework/beans/BeanUtils.java#L195) and try to detect similar other patterns by a search on `ReflectionUtils#makeAccessible` usage where `kotlin-reflect` is involved.', '@sdeleuze I agree, as far as the changes to `CoroutinesUtils#invokeSuspendingFunction`.', 'I applied the discussed changes via 8eb618b480896092cae04d1c5e412f7a5dba0c9c on `5.3.x` and merged them to `main`.']"
8f0f5faf4d541df10db9b38e670bed83a1990b98,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/config/MessageBrokerBeanDefinitionParser.java,Remove_Condition,"-		name = SCHEDULER_BEAN_NAME;
-		if (context.getRegistry().containsBeanDefinition(name)) {
-			beanDef.getPropertyValues().add(""sockJsTaskScheduler"", context.getRegistry().getBeanDefinition(name));
-		}
+		Object scheduler = WebSocketNamespaceUtils.registerScheduler(SCHEDULER_BEAN_NAME, context, source);
+		beanDef.getPropertyValues().add(""sockJsTaskScheduler"", scheduler);
+",7,condition,XML config properly initialize WS message broker stats,"Issue: SPR-14190
",,18763,1,['WebSocketMessageBrokerStats does not work unless SockJS is enabled with WebSocket XML namespace [SPR-14190]'],"[""**[Joe Sweden](https://jira.spring.io/secure/ViewProfile.jspa?name=mandudeboy)** opened **[SPR-14190](https://jira.spring.io/browse/SPR-14190?redirect=false)** and commented\n\nIn the Spring reference documentation for Websockets it states:\n\nWhen using `@EnableWebSocketMessageBroker` or <websocket:message-broker> key infrastructure components automatically gather stats and counters that provide important insight into the internal state of the application. The configuration also declares a bean of type WebSocketMessageBrokerStats that gathers all available information in one place and **by default logs it at INFO level once every 30 minutes.**\n\nwe are using a <websocket:message-broker> but the INFO log is never performed. This was unexpected after reading the above documentation, but was fixed by adding sockJS. It probably should be clarified that this logging is actually ONLY performed if you have configured sockJS. The SockJS Task Scheduler is used to to the logging, and if the <websocket:sockjs/> tag is not in the websocket context file, this Scheduler is null. I don't know if this is unintended in the code or not, but at least the documentation should be clearer on this point.\n\n\n---\n\n**Affects:** 4.2.5, 4.3 RC1\n\n**Reference URL:** http://docs.spring.io/spring/docs/current/spring-framework-reference/html/websocket.html#websocket-stomp-stats\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9fa061431c0b16f933071997f0b57705966fbc25, https://github.com/spring-projects/spring-framework/commit/8f0f5faf4d541df10db9b38e670bed83a1990b98\n""]",['closed'],[1],"[""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI'm changing this to a bug. It just happens that SockJS registers the TaskScheduler that the WebSocketMessageBrokerStats needs. However this should work regardless of whether SockJS is enabled or not. That's the way it works in the WebSocket Java config.\n""]"
90268de9c0548a14893aa1c386f4de6e957e0948,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/BeanDefinitionReaderUtils.java,Remove_Condition,"-		String id = generatedBeanName;
-			id = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition);
+			return generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition);
-		else {
-			// Top-level bean: use plain class name with unique suffix if necessary.
-			return uniqueBeanName(generatedBeanName, registry);
-		}
-		return id;
+
+		// Top-level bean: use plain class name with unique suffix if necessary.
+		return uniqueBeanName(generatedBeanName, registry);",9,condition,Polish implementation of BeanDefinitionReaderUtils.generateBeanName(),"Closes gh-24739
",,24739,1,['Polish implementation of BeanDefinitionReaderUtils.generateBeanName()'],"[""This is an invalid 'if'\r\n\r\n`BeanDefinitionReaderUtils.generateBeanName`\r\n\r\n```java\r\n\t\tString id = generatedBeanName;\r\n\t\tif (isInnerBean) {\r\n\t\t\t// Inner bean: generate identity hashcode suffix.\r\n\t\t\tid = generatedBeanName + GENERATED_BEAN_NAME_SEPARATOR + ObjectUtils.getIdentityHexString(definition);\r\n\t\t}\r\n\t\telse {\r\n\t\t\t// Top-level bean: use plain class name with unique suffix if necessary.\r\n\t\t\treturn uniqueBeanName(generatedBeanName, registry);\r\n\t\t}\r\n\t\treturn id;\r\n```\r\n\r\n""]",['closed'],[1],"[""Although the code in question is implemented slightly unusually, there is nothing invalid about the if-block technically speaking. \r\n\r\nHaving said that, I'll take this opportunity to improve the readability of that code.\r\n\r\nSo thanks for bringing this to our attention.""]"
90388e4701add18ec060e6b2fb219f54c9474429,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/support/CollectionToObjectConverter.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-		if (sourceCollection.size() == 0) {
+		if (sourceCollection.isEmpty()) {",2,condition,Replace size() check with isEmpty(),"Closes gh-1333
",,1333,1,['CollectionToObjectConverter - Refactor with Collection#isEmpty()'],['Replace `sourceCollection.size() == 0` by `sourceCollection.isEmpty()` in class `CollectionToObjectConverter`.'],['closed'],[1],"['Merged, thanks.']"
90477b40a4b92c357184cc182f546ce742b1ffa1,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java,Add_Condition,"-	private final List<Charset> availableCharsets;
+	private volatile List<Charset> availableCharsets;
-		this.availableCharsets = new ArrayList<>(Charset.availableCharsets().values());
+		if (this.availableCharsets == null) {
+			this.availableCharsets = new ArrayList<>(
+					Charset.availableCharsets().values());
+		}",7,condition,Defer Charset.availableCharsets() call,"Change the `StringHttpMessageConverter` to defer calling
Charset.availableCharsets() until absolutely necessary to help improve
startup times.

Issue: SPR-15502
",,20061,1,['Defer StringHttpMessageConverter Charset.availableCharsets() call [SPR-15502]'],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-15502](https://jira.spring.io/browse/SPR-15502?redirect=false)** and commented\n\nThe `StringHttpMessageConverter` calls `Charset.availableCharsets()` which can be quite an expensive thing to do on startup. Switching it to obtain it on the first call may help improve startup times a little.\n\n\n---\n\n**Affects:** 4.3.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90477b40a4b92c357184cc182f546ce742b1ffa1, https://github.com/spring-projects/spring-framework/commit/ee40310c926f3ce1a51f28b20ede096995a667f2\n']",['closed'],[1],['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nSomething like this: https://github.com/philwebb/spring-framework/commit/29594a7d2cf6ff7bc59f9886b5a59188ede0fb3c\n']
9064d38e4c77addbb5682e28e8c04df9fc8cd652,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,Add_Condition,"-			// Let the bean definition get re-merged now that we're actually creating
-			// the bean... just in case some of its metadata changed in the meantime.
-			clearMergedBeanDefinition(beanName);
-			this.alreadyCreated.add(beanName);
+			synchronized (this.mergedBeanDefinitions) {
+				if (this.alreadyCreated.add(beanName)) {
+					// Let the bean definition get re-merged now that we're actually creating
+					// the bean... just in case some of its metadata changed in the meantime.
+					clearMergedBeanDefinition(beanName);
+				}
+			}",7,condition,AbstractBeanFactory.markBeanAsCreated() reliably clears merged bean definition only once,"Issue: SPR-14269
",,18841,1,['markBeanAsCreated does not clear merged bean definition in a thread-safe fashion [SPR-14269]'],"['**[Marcin Piela](https://jira.spring.io/secure/ViewProfile.jspa?name=mpiela)** opened **[SPR-14269](https://jira.spring.io/browse/SPR-14269?redirect=false)** and commented\n\nWhen creating a context and then calling `getBean` on it from multiple threads we sometimes get a `BeanInitializationException` from `RequiredAnnotationBeanPostProcessor.postProcessPropertyValues`.\nAttached is a simple maven project to reproduce. In a loop it:\n1. creates a fresh spring context\n2. attempts to fetch some beans from it in parallel.\n   The number of threads and max number of loop iterations can be passed as the first and second argument to the Main class.\n   Usage:\n   `mvn clean package && java -jar target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar`\n   We never get any errors when the getBean method is called from a single thread, so:\n   `java -jar target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar 1`\n   always works.\n   We don\'t get any errors for spring version 4.1.9, but as long as we switch to 4.2.0 or later the errors start occuring.\n   Example exception:\n\n```\nException in thread ""main"" org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'service-2\' defined in class path resource [example-context.xml]: Cannot resolve reference to bean \'bean_0_1\' while setting bean property \'bean_0_1\'; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'bean_0_1\' defined in URL [jar:file:/home/mpiela/devel/repo/spring-bug/target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar!/test/Bean_0_1.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanInitializationException: Properties \'bean_1_0\' and \'bean_1_1\' are required for bean \'bean_0_1\'\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:359)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveValueIfNecessary(BeanDefinitionValueResolver.java:108)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1481)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1226)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)\n\tat org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1054)\n\tat test.Main.lambda$tryToGetBean$0(Main.java:75)\n\tat java.util.concurrent.FutureTask.run(FutureTask.java:266)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'bean_0_1\' defined in URL [jar:file:/home/mpiela/devel/repo/spring-bug/target/spring-bug-1.0-SNAPSHOT-jar-with-dependencies.jar!/test/Bean_0_1.class]: Initialization of bean failed; nested exception is org.springframework.beans.factory.BeanInitializationException: Properties \'bean_1_0\' and \'bean_1_1\' are required for bean \'bean_0_1\'\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:553)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:482)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:325)\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:197)\n\tat org.springframework.beans.factory.support.BeanDefinitionValueResolver.resolveReference(BeanDefinitionValueResolver.java:351)\n\t... 13 more\nCaused by: org.springframework.beans.factory.BeanInitializationException: Properties \'bean_1_0\' and \'bean_1_1\' are required for bean \'bean_0_1\'\n\tat org.springframework.beans.factory.annotation.RequiredAnnotationBeanPostProcessor.postProcessPropertyValues(RequiredAnnotationBeanPostProcessor.java:156)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1214)\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:543)\n\t... 17 more\n```\n\n---\n\n**Affects:** 4.2.6\n\n**Attachments:**\n- [spring-bug.tar.gz](https://jira.spring.io/secure/attachment/23392/spring-bug.tar.gz) (_2.25 kB_)\n\n**Issue Links:**\n- #16851 Reduce BeanDefinition cloning in AbstractBeanFactory.getMergedBeanDefinition\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9064d38e4c77addbb5682e28e8c04df9fc8cd652, https://github.com/spring-projects/spring-framework/commit/71463fb3991a2b7e8e79cafa91a824c51f4fc73a, https://github.com/spring-projects/spring-framework/commit/933bbf2de90c720e6ada08089c3401317230d3b0, https://github.com/spring-projects/spring-framework/commit/6efa0589170fbcdd7fc0fe850d5b55b75918fdb2\n\n**Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)\n']",['closed'],[18],"['**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nthe method **markBeanAsCreated(String beanName)**  in AbstractBeanFactory is not thread safe.\nthread A and thread B try to call this method, A check **!this.alreadyCreated.contains(beanName)** return true, then call **this.alreadyCreated.add(beanName);** at this time B check **!this.alreadyCreated.contains(beanName)** return false, then B out of this method, but now A does not finish **clearMergedBeanDefinition(beanName);** then B call **getMergedLocalBeanDefinition(String beanName)** may return old BeanDefinition\n', '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nI have a pull request, https://github.com/spring-projects/spring-framework/pull/1059, please help to review.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nMoving the `this.alreadyCreated.add(beanName)` call right after `clearMergedBeanDefinition(beanName)` seems to be the most efficient way out here: In case of a race condition, we'll clear the merged bean definition too often but that's acceptable; we'll at least guarantee that subsequent steps will always see an up-to-date bean definition then.\n"", '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\n`@Juergen` Hoeller I have tried not adding synchronized (this.alreadyCreated), when running the test still throw the same exception with more attempts(one test happened after 239 attempts of 4 threads). You can have a try. I still do not know why it is happen, but it is actually happened.\n', '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nthe error just occurs just because the too ofter clear the merged bean definition in multi threads for method **protected RootBeanDefinition getMergedBeanDefinition(String beanName, BeanDefinition bd, BeanDefinition containingBd) throws BeanDefinitionStoreException** If thread A first clear merged bean then call **getMergedBeanDefinition** and create a new **RootBeanDefinition**, but thread B first clear the merged bean definition then call **getMergedBeanDefinition** and create another new **RootBeanDefinition**, there will be two different BeanDefinitions.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nSince `getMergedBeanDefinition` operates within a full lock, there should never be two different bean definitions stored there. Temporary use of two different (but equivalent) merged bean definitions is not an issue; we do that in other scenarios as well.\n\nHave you tried to reproduce this against the latest `4.3.0.BUILD-SNAPSHOT`? It would help a lot to isolate failures against that re-ordered but non-synchronized scenario since there might be some related bug lurking in our merged bean definition handling.\n', '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nI have download latest code and running ./gradlew install then using 4.3.0.BUILD-SNAPSHOT, the issues can be reproduced.\n', '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nif there are two different merged bean definitions for same beanName, the method **InjectionMetadata.checkPropertySkipping(PropertyValues pvs)** will not work correctly because same InjectionMetadata cached from **CommonAnnotationBeanPostProcessor.findResourceMetadata** for same beanName but different PropertyValues.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch! Thanks for the insight, I'll have another pass today.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've addressed this through synchronizing on `this.mergedBeanDefinitions` now, checking for `this.alreadyCreated.add(beanName)` within and clearing the merged bean definition if the `add` call returned `true`. We still do an non-synchronized `!this.alreadyCreated.contains(beanName)` first, so overall this should not cause any inefficiency in a fully initialized system.\n\nThe use of the `this.mergedBeanDefinitions` lock is in sync with `getMergedBeanDefinition`, in order to prevent interleaving with ongoing merge attempts as well (where an old version might get cached in certain race condition cases otherwise, e.g. with concurrent type matching attempts touching the same bean and the bean definition having been modified inbetween).\n"", '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\n`@Juergen` Do you test your code? I have test it and still can reproduce the issue. I have test my pull request via 8 thread and 40000 attempts without reproduce the issue.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIt'd be great if you could run your tests against the latest `4.3.0.BUILD-SNAPSHOT` again... Please make sure that it's actually the latest, not a locally cached old snapshot.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nOuch, there might indeed be a remaining issue since the `add` exposes itself for early `contains` checks again... I was just checking the re-merge behavior but not potential access to an old bean definition. Alright, one more pass coming here, moving the `add` to the end of the `synchronized` block.\n', '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nnot the issue of add method, the issue in your commit is same with no synchronized because the method getMergedLocalBeanDefinition(String beanName) are not synchronized in line 1176.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAs far as I can see, with the `add` moved, the code is analogous to your pull request now, just using a different lock to synchronize on.\n\n`getMergedLocalBeanDefinition` does not have to be synchronized from my perspective. As long as the `clearMergedBeanDefinition` call happens before we expose a bean as already created, any actual creation attempts will see the fresh bean definition. And for concurrent type matching purposes, an old bean definition is good enough.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nBTW, I'm currently working on a whole range of 4.2.x backports, so this fix will appear in the upcoming `4.2.7.BUILD-SNAPSHOT` as well (actually, there first).\n"", '**[andyjojo](https://jira.spring.io/secure/ViewProfile.jspa?name=andyjojo)** commented\n\nI do not mean getMergedLocalBeanDefinition need synchronized, I mean non-syncrhonzied getMergedLocalBeanDefinition case your commit not work.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThat's true but it isn't meant to cover that case: The common lock is just intended to cover `mergedBeanDefinitions` add/remove attempts, where a remove does not happen while another thread is currently doing a merge (e.g. from a type match attempt) based on potentially outdated metadata... so it rather happens right afterwards then.\n\nIn any case, I can't reproduce the reported issue anymore with the `add` moved to the end of the `synchronized (mergedBeanDefinitions)` block, not even with 8 threads and 40.000 attempts. So I guess we can consider your case covered now? The current `4.2.7.BUILD-SNAPSHOT` and the upcoming `4.3.0.BUILD-SNAPSHOT` contain that candidate state.\n""]"
90c9d96a4d432a31c6cfbb0c2e8f2ab83daeffef,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AutoProxyUtils.java,Condition_Change,"-	 * Expose the given target class for the specified bean.
+	 * Expose the given target class for the specified bean, if possible.
-		if (beanFactory.containsBeanDefinition(beanName)) {
+		if (beanName != null && beanFactory.containsBeanDefinition(beanName)) {",2,condition,Avoid exposeTargetClass attempt if bean name is null,"Issue: SPR-13650
",,18226,1,['@EventListener does not work if put it at method in class that implements interface [SPR-13650]'],"['**[Nazar Vishka](https://jira.spring.io/secure/ViewProfile.jspa?name=nazar%20vishka)** opened **[SPR-13650](https://jira.spring.io/browse/SPR-13650?redirect=false)** and commented\n\nSimple example:\n\n```\npublic interface Service{\n      @org.springframework.context.event.EventListener\n      void processEventA(EventA event);\n      \n      void processEventB(EventB event);\n}\n\n@Service\npublic class ServiceImpl implements Service{\n     @Override\n     public void void processEventA(EventA event){ \n          //do something \n     }\n\n     @Override\n     @org.springframework.context.event.EventListener\n     public void void processEventB(EventB event){ \n          //do something \n     }\n\n     @org.springframework.context.event.EventListener\n     public void void processEventC(EventC event){ \n          //do something \n     }\n}\n\n@Service\npublic class EventPublisher{\n       @Autowired\n       ApplicationEventPublisher eventPublisher;\n\n       public void publishEvents(){\n             eventPublisher.publishEvent(new EventA());\n             eventPublisher.publishEvent(new EventB());\n             eventPublisher.publishEvent(new EventC());\n       }\n}\n```\n\nWhen I call EventPublisher.publishEvents() only one method in ServiceImpl is triggered: processEventA(EventA event). But I expected that all three methods will be triggered.\n\n---\n\n**Affects:** 4.2.2\n\n**Issue Links:**\n- #18114 Spring incorrectly interprets a bean to be a spring eventlistener\n- #18153 Incorrect `@JmsListener` parameter matching when the listener is a JDK proxy\n- #18488 Scheduled method is not invoked via proxy\n- #18230 Consistent method selection for listeners and endpoint mappings\n- #18231 AbstractAutoProxyCreator.getCacheKey generate lots of String garbage\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/90c9d96a4d432a31c6cfbb0c2e8f2ab83daeffef, https://github.com/spring-projects/spring-framework/commit/d5efe4f9837134f7a6303515e79fd394082e3cfc\n']",['closed'],[3],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe're currently only looking at the proxy for `@EventListener` detection. There is a related issue with `@JmsListener` (#18153); I'll try to address both ASAP.\n\nJuergen\n"", '**[Nazar Vishka](https://jira.spring.io/secure/ViewProfile.jspa?name=nazar%20vishka)** commented\n\nThank you Juergen for such quick reaction. Looking forward for improvement.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis was not as straightforward as with `@JmsListener` and co, since `EventListenerMethodProcessor` introspects top-level beans by type and carefully avoids early initialization of those beans on startup, therefore not being able to take the actual AOP proxy (and its target class) into account. Instead, we're checking a new bean definition attribute now which stores the original target class for auto-proxied beans. This new attribute is being exposed by `AbstractAutoProxyCreator` and `AbstractBeanFactoryAwareAdvisingPostProcessor` through the common `AutoProxyUtils` delegate, like we do fo the preserve-target-class hint already. That hint is also take into account by `AbstractBeanFactoryAwareAdvisingPostProcessor` (previously just by `AbstractAutoProxyCreator`), which means that `AsyncAnnotationBeanPostProcessor` and co also participate in an enforced target-class proxy scenario for specific beans now.\n\nJuergen\n""]"
913cc079af07fbb58ea09e73d3fb538714b6a1dc,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/TagWriter.java,Add_Condition,"+	}
+	
+	/**
+	 * Write an empty HTML attribute with the specified name.
+	 * <p>Be sure to write all attributes <strong>before</strong> writing
+	 * any inner text or nested tags.
+	 * @throws IllegalStateException if the opening tag is closed
+	 */
+	public void writeAttribute(String attributeName) throws JspException {
+		if (currentState().isBlockTag()) {
+			throw new IllegalStateException(""Cannot write attributes after opening tag is closed."");
+		}
+		this.writer.append("" "").append(attributeName);",8,condition,TagWriter can write empty attribute,"See gh-910
",,910,1,['Support empty attributes in TagWriter'],"['Support for empty HTML attributes (like ""required"", ""ng-disabled""...)\nIf you want to use this tool for a custom tag in a project that is mainly Angular-oriented, you may want to write attributes without values.\nAnd since members are private, you cannot extend TagWriter (another proposal could be ""protecting"" fields).\n']",['closed'],[2],"['@djechelon Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=910)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=910) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@djechelon Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=910)!']"
92a48b72d77e4a377cfe31316fcbd5249ee4b34d,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/support/GenericMessage.java,Condition_Change,"-		if (byte[].class.equals(this.payload.getClass())) {
+		if (this.payload instanceof byte[]) {",2,condition,Polish (minor),,,,0,N/A,N/A,N/A,N/A,N/A
92c9b0dc9746ceac9ed0d60c64687247e5092ece,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java,Condition_Change,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-					// Skip unsent CONNECT messages (likely auth issues)
-					if (!isConnect || sent) {
-						logger.error(""Failed to send message to MessageChannel in session "" + session.getId() +
-								"":"" + ex.getMessage());
+					// Skip for unsent CONNECT or SUBSCRIBE (likely authentication/authorization issues)
+					if (sent || !(isConnect || StompCommand.SUBSCRIBE.equals(command))) {
+						logger.error(""Failed to send message to MessageChannel in session "" +
+								session.getId() + "":"" + ex.getMessage());",6,condition,Reduce logging for unsent SUBSCRIBE messages,"Closes gh-28252
",,28252,1,['Exclude authorization messages from ERROR logging in StompSubProtocolHandler'],"['**Affects:** 5.3.17\r\n\r\n---\r\n\r\nAs part of #26026 the logging in StompSubProtocolHandler was improved to prevent the logging of exceptions pertaining to failed authentication. More specifically, this suppression applies to STOMP CONNECT messages as per (https://github.com/spring-projects/spring-framework/commit/bcd2b9a8a7d4e0b8b6615787122d5f2a2d3eb70c#diff-624b9c9ccd9db4e56263e34b3e865fdce34e9b1dd00a00f956f919ede789265fR337). \r\n\r\nGiven that Spring Security allows for access decisions to be made at the topic level when users Subscribe (using `MessageSecurityMetaDataSourceRegistry.simpSubscribeDestMatchers(String... patterns)`) should the logging suppression be enhanced to apply to both CONNECT and SUBSCRIBE messages? This will therefore suppress the error level logging when a user fails authorization when subscribing to a topic.']",['closed'],[6],"['For #26026 the concern was that a user that is not even authenticated could filling up the logs with stacktraces, while for a subscription to be sent, the user must have been authenticated already. Did you run into this from a specific use case or concern, and if so could you please elaborate? ', '> This will therefore suppress the error level logging when a user fails authentication when subscribing to a topic.\r\n\r\nJust noticed this. Subscribing should trigger authorization, not authentication.', ""Thanks for your response. Apologies - you are correct. I've updated the original post to refer to authorization rather than authentication.\r\n\r\nIn the use case I am referring to, access decisions are made on a per topic basis so it's likely there could be authenticated users who are not authorized to access a range of topics. Ultimately, the concern here was similar #26026 in that authenticated users who are not authorized for a given topic could cause unnecessary errors to be logged. Is the expectation within Spring Messaging/Spring Security that an error be explicitly logged when a user is denied access? I believe in other areas (REST), this is typically logged at DEBUG level."", ""Thanks for clarifying. \r\n\r\nWe typically do log unhandled errors, which is how this looks from the perspective of `StompSubProtocolHandler`, and if I'm not mistaken after that an `ERROR` frame is sent and the connection is closed. If we did not log this, I'm pretty sure it would cause the opposite issue of not seeing anything to explain the error.\r\n\r\nNote that the interceptor can return true or false to skip the processing of the message but it chooses to reject it in a way that does not allow the user to use the connection further. I think that's justified since it's not clear why the user is trying to access subscriptions they're not allowed to access, and the logging of that exception at ERROR is in line with that.\r\n\r\nJust to be clear you are not suggesting that authenticated users in your use case could be intentionally doing this. In other words, it's more about noise in the logs rather than intentionally filling them up?\r\n"", ""Yes, you are correct this is more about noise rather than the logs being intentionally filled up.\r\n\r\nI understand your point where an explanation is required for what has caused the error. Perhaps the auth issues here are different to other types of exception as it's arguable if an error has actually occurred, rather the system is functioning as expected and denying unauthorized requests. \r\n\r\nWould the `ERROR` frame back to the client/caller not provide sufficient details that an auth error has occurred? If more details were required on the server side, would it not be expected that DEBUG level logging be enabled to see why requests are being denied?\r\n\r\nPerhaps I am mistaken, but I believe this is the pattern used in Spring Web (Security). If a REST endpoint is hit and a user is unauthorized an HTTP 403 would be returned but to see the details on the server side you'd need to enable DEBUG logging on `org.springframework.security`."", 'The difference with a REST endpoint is that 403 communicates clearly the result. That said, I see that we do include the error in the ""message"" header, so I think we can refine the logic to exclude both authentication and authorization exception from ERROR level logging (in production).']"
93c8b7ab04af281a26d05c968fdb0ed03cf0b1c4,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Add_Condition,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
+import org.springframework.util.ClassUtils;
-		if (!isConfigurationFrozen()  || type == null || !allowEagerInit) {
+		if (!isConfigurationFrozen() || type == null || !allowEagerInit) {
-		cache.put(type, resolvedBeanNames);
+		if (ClassUtils.isCacheSafe(type, getBeanClassLoader())) {
+			cache.put(type, resolvedBeanNames);
+		}",7,condition,DefaultListableBeanFactory only puts 'cache-safe' Class keys into its by-type cache,"Issue: SPR-11520
",,16145,1,['Memory leak when using annotation based auto-wiring in child context [SPR-11520]'],"['**[Robert Cohen](https://jira.spring.io/secure/ViewProfile.jspa?name=rcon16)** opened **[SPR-11520](https://jira.spring.io/browse/SPR-11520?redirect=false)** and commented\n\nI have a Spring Context hierarchy that is two levels where each node has it\'s own classloader. I load the child context using an XML bean definition and as an option, there may be a <context:component-scan> defined within the child context\'s XML to enable annotation style auto-wiring. When we have this component-scan, the child classloader is not garbage collected if the child context is closed. If we use XML for all of our bean definitions, then the classloader is collected properly.\n\nThe attached test project reproduces the leak consistently after creating/closing a child context about 318 times.\n\nUsing a profiler, I can see that the child classloader is being held due to child context Classes being left in the Parent\'s DefaultListableBeanFactory ""allBeanNamesByType"" variable:\n\n```\n/** Map of singleton and non-singleton bean names keyed by dependency type */\nprivate final Map<Class<?>, String[]> allBeanNamesByType = new ConcurrentHashMap<Class<?>, String[]>(64);\n```\n\nThey are added to the Parent DefaultListableBeanFactory allBeanNamesByType map by method DefaultListableBeanFactory. getBeanNamesForType(), however they are not removed when I close the context.\n\nAs the server is used an child contexts get redeployed, we eventually encounter OOM errors.\n\n---\n\n**Affects:** 3.2.8\n\n**Attachments:**\n- [parent child leak.zip](https://jira.spring.io/secure/attachment/21801/parent+child+leak.zip) (_2.23 MB_)\n\n**Issue Links:**\n- #16229 AbstractApplicationEventMulticaster can leak classes\n- #16494 Performance regression for custom autowireBean calls with many properties\n- #21255 Revise cache safety check to avoid performance regression in EAR packaged applications on WildFly\n\n**Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)\n\n0 votes, 6 watchers\n']",['closed'],[10],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWhat kind of Class references can you see in that parent's allBeanNamesByType Map? Why are they different between the component-scan vs XML case?\n\nJuergen\n"", ""**[Robert Cohen](https://jira.spring.io/secure/ViewProfile.jspa?name=rcon16)** commented\n\nThe Class references in the parent's allBeanNamesByType Map are any child classes (annotated with `@Component`) that have been auto-wired. In the example code the Child context contains `@Component`'s Crib, Child and Toy. Toy gets wired to Child and Child gets wired to Crib. In the parent's allBeanNamesByType map, i see references to Child.class and Toy.class, but not Crib.class.\n\nThe following stack trace shows when one of the child classes gets added to the parent's allBeanNamesByType map:\n\n```\nThread [main] (Suspended (breakpoint at line 335 in DefaultListableBeanFactory))\t\n\towns: ConcurrentHashMap<K,V>  (id=25)\t\n\towns: Object  (id=26)\t\n\tDefaultListableBeanFactory.getBeanNamesForType(Class<?>, boolean, boolean) line: 335\t\n\tBeanFactoryUtils.beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class<?>, boolean, boolean) line: 187\t\n\tBeanFactoryUtils.beanNamesForTypeIncludingAncestors(ListableBeanFactory, Class<?>, boolean, boolean) line: 191\t\n\tDefaultListableBeanFactory.findAutowireCandidates(String, Class<?>, DependencyDescriptor) line: 897\t\n\tDefaultListableBeanFactory.doResolveDependency(DependencyDescriptor, Class<?>, String, Set<String>, TypeConverter) line: 855\t\n\tDefaultListableBeanFactory.resolveDependency(DependencyDescriptor, String, Set<String>, TypeConverter) line: 770\t\n\tAutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(Object, String, PropertyValues) line: 489\t\n\tInjectionMetadata.inject(Object, String, PropertyValues) line: 87\t\n\tAutowiredAnnotationBeanPostProcessor.postProcessPropertyValues(PropertyValues, PropertyDescriptor[], Object, String) line: 286\t\n\tDefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).populateBean(String, RootBeanDefinition, BeanWrapper) line: 1146\t\n\tDefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).doCreateBean(String, RootBeanDefinition, Object[]) line: 519\t\n\tDefaultListableBeanFactory(AbstractAutowireCapableBeanFactory).createBean(String, RootBeanDefinition, Object[]) line: 458\t\n\tAbstractBeanFactory$1.getObject() line: 296\t\n\tDefaultListableBeanFactory(DefaultSingletonBeanRegistry).getSingleton(String, ObjectFactory<?>) line: 223\t\n\tDefaultListableBeanFactory(AbstractBeanFactory).doGetBean(String, Class<T>, Object[], boolean) line: 293\t\n\tDefaultListableBeanFactory(AbstractBeanFactory).getBean(String) line: 194\t\n\tDefaultListableBeanFactory.preInstantiateSingletons() line: 628\t\n\tGenericApplicationContext(AbstractApplicationContext).finishBeanFactoryInitialization(ConfigurableListableBeanFactory) line: 932\t\n\tGenericApplicationContext(AbstractApplicationContext).refresh() line: 479\t\n\tMain.main(String[]) line: 39\t\n```\n\nSpecifically, here in DefaultListableBeanFactory:\n\n```\npublic String[] getBeanNamesForType(Class<?> type, boolean includeNonSingletons, boolean allowEagerInit) {\n     if (!isConfigurationFrozen()  || type == null || !allowEagerInit) {\n          return doGetBeanNamesForType(type, includeNonSingletons, allowEagerInit);\n     }\n     Map<Class<?>, String[]> cache =\n               (includeNonSingletons ? this.allBeanNamesByType : this.singletonBeanNamesByType);\n     String[] resolvedBeanNames = cache.get(type);\n     if (resolvedBeanNames != null) {\n          return resolvedBeanNames;\n     }\n     resolvedBeanNames = doGetBeanNamesForType(type, includeNonSingletons, allowEagerInit);\n     cache.put(type, resolvedBeanNames);\n     return resolvedBeanNames;\n}\n```\n\nIt's interesting because first this method is called on the child context and the bean names being looked up are found and cached in the child. But then this logic is also called on the parent context which creates the issue.\n\nIf i remove the component scan and define the beans in XML, then BeanFactoryUtils.beanNamesForTypeIncludingAncestors() does not get called and the child class references are never added to the parent allBeanNamesByType map.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThanks for sharing those details...\n\nSo it looks like the actual cause is the use of autowiring (`@Autowired` and co), not the use of component scanning. You\'d probably see the same effect if you took your annotated components as-is but defined them in \\<bean class=""...""/> one-liners instead of using <context:component-scan>.\n\nWe\'re indeed caching lookup results at all factory levels, independent from where those classes originate. I suppose we need to either use weak references there or clear the parent\'s cache if a child factory is being closed... covering scenarios like yours where child factories are being closed and reopened while the parent stays alive all the time.\n\nJuergen\n', '**[Robert Cohen](https://jira.spring.io/secure/ViewProfile.jspa?name=rcon16)** commented\n\nI tried removing the component scan and adding the bean one liners and confirmed that I still see the leak. So I have changed the title of the issue to reflect this is and issue with annotation based auto-wiring.\n', ""**[Robert Cohen](https://jira.spring.io/secure/ViewProfile.jspa?name=rcon16)** commented\n\nAdditionally, I can confirm that using a soft reference map for allBeanNamesByType does fix the leak. However, I'm am not the best to determine the consequences of this change.\n\n```\nprivate final Map<Class<?>, String[]> allBeanNamesByType = new ConcurrentReferenceHashMap<Class<?>, String[]>(64, ConcurrentReferenceHashMap.ReferenceType.SOFT);\n```\n\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI eventually opted for a different approach:\n\nDefaultListableBeanFactory only puts 'cache-safe' Class keys into its by-type cache now, as determined by our ClassUtils.isCacheSafe method which is also being used by our JavaBeans CachedIntrospectionResults.\n\nEffectively, DefaultListableBeanFactory will now only cache retrieval results for classes loaded by that factory's bean ClassLoader or a parent thereof, ignoring classes from child ClassLoaders completely.\n\nIn a regular scenario, this won't make a difference since the entire application typically lives within the same ClassLoader anyway. However, in a scenario like yours, it will prevent memory leaks through (always empty but nevertheless cached) retrieval results in a parent factory.\n\nJuergen\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis is available in the latest 4.0.3 snapshot already, and will be available in the immediately upcoming 3.2.9 snapshot as well (see http://projects.spring.io/spring-framework/ for Maven coordinates). Please give it a try and let us know whether it works for you...\n\nJuergen\n', '**[Robert Cohen](https://jira.spring.io/secure/ViewProfile.jspa?name=rcon16)** commented\n\nMy project uses 3.2.6 so I patched that version with your fix and tested it. It works perfectly to solve the problem. Thanks a ton for the quick turnaround!\n-Rob\n', '**[Matthias Müller](https://jira.spring.io/secure/ViewProfile.jspa?name=matthias.mueller)** commented\n\nWow, this was a hard nut to crack, I had the exact problem in my application.\nI was looking for a selfmade memory leak in the first place before I found this ticket.\nI had a DefaultListableBeanFactory consuming ~700MB of Memory....but now everthing works fine!\nTnx for finding and fixing this!\n', 'After browsing through the issues related to the bean name caching I though this one here might be a good one to leave a comment.\r\n\r\nAs far as we understood the isCacheSafe method of the ClassUtils was modified because of this issue to check whether a particular class can be loaded through its beanclassloader (or one of its parents) or not. If the class can be loaded through the classloader it is going to be cached and in case it cannot be loaded there is no caching.\r\n\r\nRelated to this we’ve noticed some performance problems linked to request scoped beans. Because the information that the bean type cannot be resolved by one of the parents it is not cached, spring is doing the lookup for each request again which slows down the performance measurably. To solve the issue we’re currently caching an empty string array if the parent classloader is not able to load a particular type of class.\r\n\r\nPlease let us know what you think regarding this.\r\n']"
93de5f407e394b70b9a3fa89e35340008d340cbc,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-			if (RequestBodyAdvice.class.isAssignableFrom(beanType)) {
-				requestResponseBodyAdviceBeans.add(adviceBean);
-			}
-			if (ResponseBodyAdvice.class.isAssignableFrom(beanType)) {
+			if (RequestBodyAdvice.class.isAssignableFrom(beanType) || ResponseBodyAdvice.class.isAssignableFrom(beanType)) {",5,condition,Avoid duplicate registration of [RequestBody|ResponseBody]Advice @ControllerAdvice,"Prior to this commit, if a @ControllerAdvice implemented both
RequestBodyAdvice and ResponseBodyAdvice, it was registered twice in
RequestMappingHandlerAdapter.

This commit ensures that such instances are only registered once.

Closes gh-22638
",,22638,1,['Avoid duplicate registration of @ControllerAdvice implementing both RequestBodyAdvice and ResponseBodyAdvice'],['fixbug: duplicate add on ControllerAdvice both RequestBodyAdvice and ResponseBodyAdvice'],['closed'],[5],"['@liquanchen9 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22638)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22638) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@liquanchen9 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22638)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22638) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', ""Good catch. I'm not sure how often people implement `RequestBodyAdvice` and `ResponseBodyAdvice` in the same class, but it's certainly possible.\r\n\r\nIf you could sign the CLA and submit a test that was failing before the change that would be greatly appreciated."", 'Since this is a trivial change, @liquanchen9, we have decided to forgo the requirement to sign the CLA.\r\n\r\nThanks for your contribution!', '@liquanchen9 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=22638)!']"
946082f8062cf859a30c461ace18ccc6e5dd2872,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,Condition_Change,"-		else if (KTypes.isSubtypeOf(returnType, monoType)) {
-			return mono.flatMap(o -> ((Mono<?>)o));
-		}
-		else if (KTypes.isSubtypeOf(returnType, publisherType)) {
+		if (KTypes.isSubtypeOf(returnType, publisherType)) {
+			if (KTypes.isSubtypeOf(returnType, monoType)) {
+				return mono.flatMap(o -> ((Mono<?>)o));
+			}",8,condition,Refine publisher type check in CoroutinesUtils,"See gh-32390
",,32390,1,['Optimize Coroutine invocations'],"['`KClass` instantiation in `CoroutinesUtils` is suboptimal, and should be replaced by `KTypes#isSubtypeOf` checks using pre-instantiated types for `Flow`, `Mono` and `Publisher`.']",['closed'],[6],"['This commit impact on performances is significant since **a throughput increase between 2x and 3x** has been measured on basic endpoints.', '@koo-taejin @efemoney Please test the latest `6.1.5-SNAPSHOT` builds and report if you see some unexpected side effects.', 'Tested from my side & passes all my tests 👍🏾 just like the previous snapshot', 'I am going to test it. 👍 thanks :)  ', ""Unfortunately, I don't think the situation has changed much. \r\nIt would be accurate to put it into production and test it, but I apologize for not being able to do this. \r\n\r\nMethod of `getClassifier() `has been replaced by method of `getJvmErasure()`.\r\nI had checked that `getClassifier()` is called from `getJvmErasure()`. \r\n(in `org.springframework.core.CoroutinesUtils.lambda$invokeSuspendingFunction$2(Object[], KFunction, Object, CoroutineScope, Continuation)`)\r\n- spring-boot 3.2.0\r\n![image](https://github.com/spring-projects/spring-framework/assets/10057874/6218e28e-2eb2-4a61-b6f1-ae90959ff079)\r\n\r\n- spring-boot 3.2.1 with `6.1.5-SNAPSHOT-p1`\r\n![image](https://github.com/spring-projects/spring-framework/assets/10057874/c2846de2-e196-47ce-9f13-db63a0d13f24)\r\n\r\n- spring-boot 3.2.1 with `6.1.5-SNAPSHOT-p2`\r\n![image](https://github.com/spring-projects/spring-framework/assets/10057874/ae384d8d-b58b-45f3-9bd5-14e2ad754e18)\r\n\r\nAlso, in the latest version, the isSubTypeOf() method uses resources. \r\n(in `org.springframework.core.CoroutinesUtils#invokeSuspendingFunction(kotlin.coroutines.CoroutineContext, java.lang.reflect.Method, java.lang.Object, java.lang.Object...)`)\r\n- spring-boot 3.2.1 with `6.1.5-SNAPSHOT-p1`\r\n![image](https://github.com/spring-projects/spring-framework/assets/10057874/30e834ed-f511-4c38-80f0-1d93352f5a44)\r\n\r\n- spring-boot 3.2.1 with `6.1.5-SNAPSHOT-p2`\r\n![image](https://github.com/spring-projects/spring-framework/assets/10057874/45fd9daf-c889-4fcf-bec7-053f1ba3fe56)\r\n\r\nThis is called for every `suspend` function, so more use Coroutines, the bigger the impact seems to be.\r\n\r\nIf there is anything I can do to help, please let me know.\r\n\r\nThank you so much. 🙇 "", 'See [this related comment](https://github.com/spring-projects/spring-framework/issues/32334#issuecomment-1988554701).']"
947255e3774fe6248c59d2cdd6a1b06b9f6b5d9b,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,Condition_Change,"+import org.springframework.core.KotlinDetector;
-				if (ReflectionUtils.declaresException(getMethod(), ex.getClass())) {
+				if (ReflectionUtils.declaresException(getMethod(), ex.getClass()) ||
+						KotlinDetector.isKotlinType(getMethod().getDeclaringClass())) {
+					// Propagate original exception if declared on the target method
+					// (with callers expecting it). Always propagate it for Kotlin code
+					// since checked exceptions do not have to be explicitly declared there.
+					// Checked exception thrown in the interceptor but not declared on the
+					// target method signature -> apply an UndeclaredThrowableException,
+					// aligned with standard JDK dynamic proxy behavior.",4,condition,Always propagate checked exceptions from Kotlin code behind CGLIB proxies,"Closes gh-23844
",,23844,1,['Spring AOP should not apply UndeclaredThrowableException to checked exceptions from Kotlin methods'],"['Currently, when using Spring AOP with Kotlin, `UndeclaredThrowableException` is thrown when a method with advice throws a checked exception. There is a **_workaround_** in Kotlin in that you can add `@Throws` annotations to methods, but this is not really feasible as it would require annotating every method of every project, and methods in other libraries might not be under your control.\r\n\r\nWhat would solve this problem would be to have an option in Spring to disable the throwing of `UndeclaredThrowableException` and simply throw the original exception.']",['closed'],[12],"['Looks like the relevant code is here:\r\nhttps://github.com/spring-projects/spring-framework/blob/9bd3a535cd524cf771423e67feeea523ac985f87/spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java#L752-L759\r\n', 'This issue is also impacting me when using resilience4j circuit breaker. The AOP is encapsulating the real exception so the circuit breaker is never switched to OPEN.', ""The reason for that custom `UndeclaredThrowableException` throwing logic in `CglibAopProxy` is that interface-based proxies unavoidably get such a `UndeclaredThrowableException` out of the JDK implementation, so for consistency with `JdkDynamicAopProxy`, we manually enforce it in the CGLIB variant.\r\n\r\nSo whatever we do about it, we can only do it for CGLIB proxies. @sdeleuze what's your take on this? Is CGLIB+Kotlin a common enough case to be handled specifically - or on the inverse, are JDK proxies with Kotlin uncommon enough? Are checked exceptions without explicit declaration common enough in Kotlin?\r\n\r\nGenerally speaking for the scenarios above, why the need for checked exceptions coming out of an interceptor to begin with? From my perspective, this is bad practice with Java-based AOP, even more so with Kotlin-based AOP, and it's also a general Java interoperability issue when used in Kotlin-based arrangements."", '@jhoeller \r\n\r\n> why the need for checked exceptions coming out of an interceptor to begin with?\r\n\r\nIn our case, we wanted to add logging around `@Service` methods with AOP. And in this scenario, the logging code should not change the behavior of the methods being logged.\r\n\r\nAdditionally, this method of logging would allow us to:\r\n\r\n- Avoid manual modification of dozens of methods with identical boilerplate code to add logging\r\n- Avoid modification of each of these again later if we want to change how the logging works\r\n- Have cleaner code by not mixing the logging aspect with the business logic', '@jhoeller \r\n> Are checked exceptions without explicit declaration common enough in Kotlin?\r\n\r\nThis is what happens the majority of the time as Kotlin does not require declaration of checked exceptions.', ""I've just realized that - within Spring AOP - we'd even turn a checked exception thrown from a Kotlin *target method* into an `UndeclaredThrowableException`, not just a checked exception thrown from an *interceptor* (which is the primary purpose of that check). While this works fine with Java code that explicitly declares those exceptions on the target method (so undeclared exceptions can only really come out of the interceptor), it's really not appropriate for Kotlin code since it enforces a non-idiomatic `@Throws` declaration there. Thanks for raising this, and I'm sorry that we missed it the first time around.\r\n\r\nFor 5.3.3, I'll add a bypass that we'll always propagate the original exception for methods declared on Kotlin types."", 'This is committed now, as default behavior for Kotlin code behind CGLIB proxies.\r\n\r\nPlease give the upcoming 5.3.3 snapshot a try and let me know whether it works for your scenario:\r\nhttps://repo.spring.io/snapshot/org/springframework/spring-framework-bom/5.3.3-SNAPSHOT/', 'Thanks @jhoeller for those changes.', '@jhoeller Thanks for the change!', '@jhoeller Would it be possible to also get this fix in 5.2.15?', ""It's proven itself in 5.3.x for several months already, without any backlash, so let's schedule a backport for 5.2.15 indeed."", ""Great. Thanks!\n\n> On 21 Apr 2021, at 11:13, Juergen Hoeller ***@***.***> wrote:\n> \n> \n> It's proven itself in 5.3.x for several months already, without any backlash, so let's schedule a backport for 5.2.15 indeed.\n> \n> —\n> You are receiving this because you commented.\n> Reply to this email directly, view it on GitHub <https://github.com/spring-projects/spring-framework/issues/23844#issuecomment-823910448>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/AAQ4FIDM465VIRUXSFGLAWLTJ2JNNANCNFSM4JDJFPUQ>.\n> \n\n""]"
949c3d450c35b676b82a4a56ada997cf9a552f1d,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java,Condition_Change,"-					!readMethodNames.contains((method.getName())) && isPlainAccessor(method)) {
+					!readMethodNames.contains(method.getName()) && isPlainAccessor(method)) {
-		if (method.getParameterCount() > 0 || method.getReturnType() == void.class ||
-				method.getDeclaringClass() == Object.class || Modifier.isStatic(method.getModifiers())) {
+		if (Modifier.isStatic(method.getModifiers()) ||
+				method.getDeclaringClass() == Object.class || method.getDeclaringClass() == Class.class ||
+				method.getParameterCount() > 0 || method.getReturnType() == void.class ||
+				ClassLoader.class.isAssignableFrom(method.getReturnType()) ||
+				ProtectionDomain.class.isAssignableFrom(method.getReturnType())) {",9,condition,Align plain accessor check,,,,0,N/A,N/A,N/A,N/A,N/A
9528c3532d4bb7eb62514418e32c0c5687722564,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java,Condition_Change,"-		for (MediaType mediaType : compatibleMediaTypes) {
+		for (MediaType mediaType : result) {",2,iteration,Fix typo,,,,0,N/A,N/A,N/A,N/A,N/A
963cc09c2e742321413b29d94f390ce3f60a4799,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AutowireUtils.java,Remove_Condition,"-		boolean p1 = Modifier.isPublic(e1.getModifiers());
-		boolean p2 = Modifier.isPublic(e2.getModifiers());
-		if (p1 != p2) {
-			return (p1 ? -1 : 1);
-		}
-		int c1pl = e1.getParameterCount();
-		int c2pl = e2.getParameterCount();
-		return Integer.compare(c2pl, c1pl);
+		int result = Boolean.compare(Modifier.isPublic(e2.getModifiers()), Modifier.isPublic(e1.getModifiers()));
+		return result != 0 ? result : Integer.compare(e2.getParameterCount(), e1.getParameterCount());",10,condition,Polish AutowireUtils.EXECUTABLE_COMPARATOR,"Closes gh-22283
",,22283,1,['Polish AutowireUtils.EXECUTABLE_COMPARATOR'],['This PR polishes `AutowireUtils.EXECUTABLE_COMPARATOR` a bit.'],['closed'],[1],"['Nice one, thanks again @izeye ']"
964467d2691180a7f01de441a190fb998801df91,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/DatabaseStartupValidator.java,Condition_Change,"-		DataSource dataSource = this.dataSource;
-		if (dataSource == null) {
+		if (this.dataSource == null) {
-					con = dataSource.getConnection();
+					con = this.dataSource.getConnection();
-								""DataSource returned null from getConnection(): "" + dataSource);
+								""DataSource returned null from getConnection(): "" + this.dataSource);
-					Thread.sleep(TimeUnit.SECONDS.toMillis(this.interval));
+					TimeUnit.SECONDS.sleep(this.interval);",9,condition,Polish DatabaseStartupValidator.afterPropertiesSet(),,,,0,N/A,N/A,N/A,N/A,N/A
967a2ef2d20b7bc6f6bf79463ee15d7c3e2ec607,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,Condition_Change,"-			if (method.getReturnType() == Class.class) {
+			Class<?> returnType = method.getReturnType();
+			if (returnType == Class.class || returnType == Class[].class) {",3,condition,Validate Class attributes as well as Class array attributes,"Issue: SPR-16564
",,21106,1,['Reading annotations in ConfigurationClassParser does not fall back to ASM on Google App Engine [SPR-16564]'],"[""**[Madhura Bhave](https://jira.spring.io/secure/ViewProfile.jspa?name=mbhave)** opened **[SPR-16564](https://jira.spring.io/browse/SPR-16564?redirect=false)** and commented\n\n`ConfigurationClassParser` has a sanity test to ensure that annotations can be read and in case of an Exception, it falls back to ASM. On Google App Engine `classType.getAnnotations()` does not throw an Exception if a class is not found and instead the annotation value looks something like this `value=sun.reflect.annotation.TypeNotPresentExceptionProxy`.\n\nThis causes unexpected behavior in Spring Boot's `OnClassCondition` as the metadata is not an `AnnotationMetadataReadingVisitor`.\n\n---\n\n**Affects:** 4.3.14, 5.0.4\n\n**Issue Links:**\n- #15712 `@PropertySources` fails on JDK 7 due to `@Repeatable`\n- #15274 Support `@Configuration` class parsing fallback to ASM\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/7cafa6764ce12191bd824da06b88729dffc20e69, https://github.com/spring-projects/spring-framework/commit/967a2ef2d20b7bc6f6bf79463ee15d7c3e2ec607, https://github.com/spring-projects/spring-framework/commit/50e980c02f0dba610303e064289be0420d1f6ce1\n\n**Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)\n""]",['closed'],[9],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nSo `classType.getAnnotations()` would return concrete `Annotation` instances here (of the declared annotation type), but some of the `Class` attributes of those annotations would not contains an actual `Class` value but rather a `TypeNotPresentExceptionProxy` stub?\n', '**[Madhura Bhave](https://jira.spring.io/secure/ViewProfile.jspa?name=mbhave)** commented\n\nYes exactly. For example, for a nested class that looks like this (where `FooClass` is not present):\n\n```java\n@Configuration\n@ConditionalOnClass(FooClass.class)\nprotected static class Test {\n}\n```\n\nthis is the log for `classType.getAnnotations()`:\n\n```java\n@org.springframework.context.annotation.Configuration(value=)\n@org.springframework.boot.autoconfigure.condition.ConditionalOnClass(name=[], value=sun.reflect.annotation.TypeNotPresentExceptionProxy)\n```\n\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nHmm that's rather awkward to find out though: We'd have to iterate over all attributes of all declared annotations and see whether any of them is a `TypeNotPresentExceptionProxy`... which isn't even a proper API type. And we'd have to do that for every such declared annotation on a configuration class.\n\nIn what way does this break Boot's `OnClassCondition`? Which specific assumptions about `AnnotationMetadataReadingVisitor` do you have there? Could we adapt those to find about the `TypeNotPresentExceptionProxy` within `OnClassCondition` specifically, rather than making it a part of core configuration class processing?\n"", '**[Madhura Bhave](https://jira.spring.io/secure/ViewProfile.jspa?name=mbhave)** commented\n\nWhen `OnClassCondition` checks for the presence of `@ConditionalOnClass`, it calls `metadata.getAllAnnotationAttributes` which, for `StandardAnnotationMetadata` returns `null` due to:\n\n```java\nFailed to introspect annotations on [class Foo]: java.lang.IllegalStateException: Could not obtain annotation attribute value for public abstract java.lang.Class[] org.springframework.boot.autoconfigure.condition.ConditionalOnClass.value()\n```\n\nBoot then assumes that this class is not a candidate for `@ConditionalOnClass` (since the attributes are null). This is the original issue https://github.com/spring-projects/spring-boot/issues/10553\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've introduced an `AnnotationUtils.validateAnnotation(Annotation)` method which we're applying in `ConfigurationClassParser.asSourceClass` to all declared annotations now before making a decision on reflection versus ASM. We check every declared `Class` attribute there, trying to read its value... which should fail on Google App Engine at that very point, otherwise indicating that `getAnnotationAttributes` calls will work fine later on.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n[Madhura Bhave](https://jira.spring.io/secure/ViewProfile.jspa?name=mbhave), this is included in the upcoming 5.0.5 snapshot now. Please give it a try and let me know whether it actually helps on GAE... If it doesn't, it'd be great to debug `AnnotationUtils.validateAnnotation` in terms of why it doesn't fail when invoking the affected attribute. In any case, this should be solvable at that level.\n"", ""**[Madhura Bhave](https://jira.spring.io/secure/ViewProfile.jspa?name=mbhave)** commented\n\nThanks, Juergen. I tested it on GAE. Looks like it didn't work because `AnnotationUtils.validateAnnotation` checks for `method.getReturnType() == Class.class` and `@ConditionalOnClass` has a `Class<?>[] value`.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nOops, indeed. I've extended that check to include Class arrays as well... Give it one more try with the upcoming snapshot please, hopefully it works for your purposes now!\n"", '**[Madhura Bhave](https://jira.spring.io/secure/ViewProfile.jspa?name=mbhave)** commented\n\nIt works as expected now. thank you!\n']"
96bfc14dba7691f0f8cd893ac90b39e09ac8ae1a,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java,Condition_Change,"-			if (logger.isWarnEnabled()) {
+			// Any other than the original exception is unintended here,
+			// probably an accident (e.g. failed assertion or the like).
+			if (invocationEx != exception && logger.isWarnEnabled()) {
+			// Continue with default processing of the original exception...",2,condition,No warn logging for propagated original exception,"Issue: SPR-14907
",,19473,1,['ExceptionHandlerExceptionResolver should not log propagated exceptions at warn level [SPR-14907]'],"[""**[Eric Deandrea](https://jira.spring.io/secure/ViewProfile.jspa?name=edeandrea)** opened **[SPR-14907](https://jira.spring.io/browse/SPR-14907?redirect=false)** and commented\n\nIn spring-webmvc - org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver line 386 was changed from a logger.debug in version 4.3.3 (line 384 in version 4.3.3) to logger.warn in version 4.3.4. This might not seem like a big deal but is causing lots of non-necessary stack traces in our applications.\n\nWe have a FaultBarrier implemented as a SpringMVC `@ExceptionHandler` method, implemented as below. Basically its a generic handler that catches all exceptions. If the exception itself is annotated with `@ResponseStatus`, we simply re-throw it & let SpringMVC handle it. Now as of version 4.3.4 this is logging warning exception stack traces to our logs which is triggering out paging system to page people (our system pages out if any stack traces appear as WARN or ERROR levels), even though most of the exception codes in the `@ResponseStatus` are 400 series exceptions and are not error conditions at all. Our only fix so far is to downgrade back to 4.3.3.\n\n```java\n@ExceptionHandler(Exception.class)\npublic ResponseEntity<Object> defaultErrorHandler(Exception ex) throws Exception {\n\tResponseStatus responseStatusAnnotation = AnnotationUtils.findAnnotation(ex.getClass(), ResponseStatus.class);\n\n\tif (responseStatusAnnotation != null) {\n\t\t// If the exception is annotated with @ResponseStatus, rethrow it and let the framework handle it\n\t\tthrow ex;\n\t}\n\telse {\n\t\t// Do some other stuff here which isn't important to this issue\n\t}\n}\n```\n\nHere's the stack trace it generates:\n\n```\n[11/14/2016 16:54:24.101 | WARN](http-nio-8080-exec-1 | org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver:386): Failed to invoke @ExceptionHandler method: public org.springframework.http.ResponseEntity<java.lang.Object> my.app.common.api.FaultBarrier.defaultErrorHandler(java.lang.Exception) throws java.lang.Exception\nmy.app.model.NotFoundException: Policy 1000 was not found\n\tat my.app.api.PoliciesApi.convert(PoliciesApi.java:126)\n\tat my.app.api.PoliciesApi.getPolicy(PoliciesApi.java:100)\n\tat my.app.api.PoliciesApi$$FastClassBySpringCGLIB$$b9887c8b.invoke(<generated>)\n\tat org.springframework.cglib.proxy.MethodProxy.invoke(MethodProxy.java:204)\n\tat org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.invokeJoinpoint(CglibAopProxy.java:720)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:157)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.doProceed(DelegatingIntroductionInterceptor.java:133)\n\tat org.springframework.aop.support.DelegatingIntroductionInterceptor.invoke(DelegatingIntroductionInterceptor.java:121)\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179)\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:655)\n\tat my.app.api.PoliciesApi$$EnhancerBySpringCGLIB$$2c76a269.getPolicy(<generated>)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:220)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:134)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:116)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:827)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:738)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:85)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:963)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:897)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:970)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:861)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:687)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:846)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:790)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:230)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.springframework.boot.web.filter.ApplicationContextHeaderFilter.doFilterInternal(ApplicationContextHeaderFilter.java:55)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:105)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.springframework.web.filter.HttpPutFormContentFilter.doFilterInternal(HttpPutFormContentFilter.java:89)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:77)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:197)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.springframework.boot.actuate.autoconfigure.MetricsFilter.doFilterInternal(MetricsFilter.java:107)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:192)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:165)\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:198)\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:108)\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:472)\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:140)\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:79)\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:87)\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:349)\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:784)\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:66)\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:802)\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1410)\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61)\n\tat java.lang.Thread.run(Thread.java:745)\nCaused by: my.app.model.PolicyNotFoundException: Policy 1000 was not found\n```\n\n---\n\n**Affects:** 4.3.4\n\n**Issue Links:**\n- #19427 Log exception from `@ExceptionHandler` at higher level than debug\n- #19461 Allow HTTP status exceptions to be easily thrown from Controllers\n- #21916 ExceptionHandlerExceptionResolver started to log on WARN level\n- #18504 Exclude an exception from `@ExceptionHandler`\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/96bfc14dba7691f0f8cd893ac90b39e09ac8ae1a, https://github.com/spring-projects/spring-framework/commit/f22a4a4e807aaa673e7290835766052974c5eb47\n""]",['closed'],[7],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point, rethrowing the original exception is indeed a valid use case. Note, however, that we're not going to process the actual rethrown exception; we just take it as an indication that default processing needs to be applied to the original exception. So if any other than the original exception comes out of such a handler method, we're going to log a warning still... but not for the original exception itself anymore.\n"", '**[Eric Deandrea](https://jira.spring.io/secure/ViewProfile.jspa?name=edeandrea)** commented\n\nThat sounds ok as long as at the end of the day if my application throws some RuntimeException that is annotated with `@ResponseStatus` that there is no warning nor stack trace logged then that satisfies this requirement.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThat is certainly the case now. We only really intended to log a warning for accidental exceptions coming out of a handler method, e.g. assertion failures within the exception handler method itself. Rethrowing the original exception (no matter whether with or without `@ResponseStatus`) is the only valid case here, triggering the rest of the exception resolver chain, so we're explicitly letting it through without any logging now.\n"", '**[Eric Deandrea](https://jira.spring.io/secure/ViewProfile.jspa?name=edeandrea)** commented\n\nThanks a bunch!\n', ""**[dfreudenberger](https://jira.spring.io/secure/ViewProfile.jspa?name=dfreudenberger)** commented\n\nIt seems like we have the same issue again since spring-webmvc-5.0.9.RELEASE. The regression was introduced with this commit https://github.com/spring-projects/spring-framework/commit/04141dee65ff5e078e2a9137ff7052351f6ab66c#diff-4386c732a724a039db2007b1bac7d3d5R141. Happy to be wrong but as of right now I don't see how I can get rid of the warning without raising the logging threshold for the package / class to error.\n"", '**[pebo](https://jira.spring.io/secure/ViewProfile.jspa?name=pebo)** commented\n\nI face the same issue in spring boot 2.0.6 (5.0.10.RELEASE of web mvc)\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n[pebo](https://jira.spring.io/secure/ViewProfile.jspa?name=pebo), this is an unfortunate regression that we're tracking in #21916. Should be fixed in the latest `5.0.11.BUILD-SNAPSHOT` already.\n""]"
9728b8cefd1adb2ad92772a3015150eac19a5d7f,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ReflectionUtils.java,Condition_Change,"-				if (!Modifier.isAbstract(ifcMethod.getModifiers())) {
+				if (ifcMethod.isDefault()) {",2,condition,Use Method#isDefault to find default methods in interfaces,"Closes gh-31197
",,31197,1,['Use `Method#isDefault` to find default methods in interfaces'],['Use `Method#isDefault` to replace the logic in `ReflectionUtils#findConcreteMethodsOnInterfaces`.\r\n\r\n- see #31198 '],['closed'],[1],['This has been merged into `main`.\r\n\r\nThanks']
976d32fc5943a11668b12e83621feaa197677ec4,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/SimpleApplicationEventMulticaster.java,Condition_Change,"-				if (msg != null && msg.startsWith(event.getClass().getName())) {
+				if (msg == null || msg.startsWith(event.getClass().getName())) {",2,condition,SimpleApplicationEventMulticaster defensively swallows ClassCastException without message,"Issue: SPR-15145
",,19711,1,['SimpleApplicationEventMulticaster should not rely on ClassCastException having a message [SPR-15145]'],"['**[Mariusz Luciow](https://jira.spring.io/secure/ViewProfile.jspa?name=mariusz.luciow)** opened **[SPR-15145](https://jira.spring.io/browse/SPR-15145?redirect=false)** and commented\n\nSimpleApplicationEventMulticaster in [this commit](https://github.com/spring-projects/spring-framework/commit/13001b9affad668479ebdb924f2bd491745232a8#diff-2434dcbaad29ced6a104bb6523c4f67e) driven by #19412 changed the **ClassCastException** catch logic to:\n\n```java\ncatch (ClassCastException ex) {\n  if (ex.getMessage().startsWith(event.getClass().getName())) {\n    // Possibly a lambda-defined listener which we could not resolve the generic event type for\n    LogFactory.getLog(getClass()).debug(""Non-matching event type for listener: "" + listener, ex);\n  } else {\n    throw ex;\n  }\n}\n```\n\nNote that if **ex.getMessage()** returns NULL whole method will throw NPE.\n\nTo speed up execution of methods that frequently throw exceptions, the C2 compiler generates code that uses a pre-built exception (pre-built at compile time). The pre-built exception does not contain neither a stack trace nor a message detailing the exception.\n\nThis means that after some time the compiler can replace normal ClassCastException with empty one, without message nor stack trace.\n\nMore detailed explanation of this behaviour can be found here:\n* [openjdk jira](https://bugs.openjdk.java.net/browse/JDK-8169685?focusedCommentId=14024750&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-14024750)\n* [oracle release notes](http://www.oracle.com/technetwork/java/javase/relnotes-139183.html)\n\nThere should be a check in place to ensure that message is not null.\n\n---\n\n**Affects:** 4.3.5\n\n**Reference URL:** https://github.com/spring-projects/spring-framework/commit/13001b9affad668479ebdb924f2bd491745232a8#diff-2434dcbaad29ced6a104bb6523c4f67e\n\n**Issue Links:**\n- #19412 SimpleApplicationEventMulticaster should not generally suppress ClassCastException\n- #20393 SimpleApplicationEventMulticaster does not deal with lambda-defined listeners when ErrorHandler is set\n- #20981 Lambda error detection might not work on JDK 9\n- #21630 Classification of ClassCastExceptions doesn\'t work in JDK 11 (OpenJDK)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/976d32fc5943a11668b12e83621feaa197677ec4, https://github.com/spring-projects/spring-framework/commit/153fd82946c350a0c42be2dbd13774d5ee9ffc0c, https://github.com/spring-projects/spring-framework/commit/64d4afad9f3cd06d5b911aab9d0656974310a79c, https://github.com/spring-projects/spring-framework/commit/0655d73f8e249b5f053cc10fe36f2d258acad104\n']",['closed'],[3],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch! Fixed in master and to be backported to 4.3.6.\n', '**[Mariusz Luciow](https://jira.spring.io/secure/ViewProfile.jspa?name=mariusz.luciow)** commented\n\nHi Juergen,\n\nI\'m not convinced if the check you\'ve made is a good idea:\n\n```java\ncatch (ClassCastException ex) {\n  String msg = ex.getMessage();\n  if (msg != null && msg.startsWith(event.getClass().getName())) {\n    // Possibly a lambda-defined listener which we could not resolve the generic event type for\n    Log logger = LogFactory.getLog(getClass());\n    if (logger.isDebugEnabled()) {\n      logger.debug(""Non-matching event type for listener: "" + listener, ex);\n    }\n  } else {\n    throw ex;\n  }\n}\n```\n\nCurrent behaviour will work only until compiler decides to start throwing pre-build exception. After that the catch logic will completely change, throwing exception instead of swallowing it, which may be even harder to debug.\nHonestly I\'m not sure if this issue can be solved here. Maybe Spring should prohibit registration of **ApplicationListener<?>** and throw exceptions during startup instead? For example, the correct way to register listener could look like this, if possible:\n\n```java\n@Bean\n@EventListener(ContextRefreshedEvent.class)\nApplicationListener<ContextRefreshedEvent> contextRefreshedEventApplicationListener() {\n    return System.err::print;\n}\n```\n\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point. It's actually closer to our intentions if we turn that check into `(msg == null || msg.startsWith(event.getClass().getName()))`, rather over-swallowing than under-swallowing, closer to how we had it originally. If there is some unrelated `ClassCastException` involved, developers are going to notice it on first appearance anyway. I'll do that right away.\n\nAs for other ways of identifying lambda-defined listeners, we got a few related JIRA tickets already. For the time being, we cannot change the rules there since we're in the middle of the 4.3.x line. I'm afraid we can only fine-tune the current approach.\n""]"
977550f9560f6ce7670aae883261f412fbba02f4,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,Condition_Change,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-				Lifecycle bean = getBeanFactory().getBean(beanNameToCheck, Lifecycle.class);
-				if (bean != this) {
-					beans.put(beanNameToRegister, bean);
+				Object bean = getBeanFactory().getBean(beanNameToCheck);
+				if (bean != this && bean instanceof Lifecycle) {
+					beans.put(beanNameToRegister, (Lifecycle) bean);",6,condition,Properly handle null bean instance in getLifecycleBeans,"Issue: SPR-16343
",,20890,1,['DefaultLifecycleProcessor throws BeanNotOfRequiredType for null beans (cause of NullBean instance cannot be converted) [SPR-16343]'],"['**[Stefan Mueller](https://jira.spring.io/secure/ViewProfile.jspa?name=stefan.mueller@zkb.ch)** opened **[SPR-16343](https://jira.spring.io/browse/SPR-16343?redirect=false)** and commented\n\nWhen initializing applications with null-beans of type `Lifecycle`, `DefaultLifecycleProcessor.getLifecycleBeans` throws a `BeanNotOfRequiredType` exception rather then ignoring null-beans like in previous spring versions.\n\n`DefaultLifecycleProcessor` should be fixed to not call the `ctx.getBean(name, type)` method but rather getBean(name) and check for type explicitely.\n\nReason/Background: In earlier versions of Spring the `ctx.getBean(name, type)` method returned null for null-beans. Since Spring 5, Spring returns the `NullBean` instance but that cannot be converted to required type.\n\nSee as well #20582, #20711 and #20889.\n\n---\n\n**Affects:** 5.0.2\n\n**Issue Links:**\n- #20889 BeanNotOfRequiredTypeException (NullBean instead of null) when calling ApplicationContext.getBean(name, type)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/977550f9560f6ce7670aae883261f412fbba02f4\n']",['closed'],[1],['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe can indeed do a manual `instanceof Lifecycle` check there in the subsequent `if` condition. Fixed for 5.0.3 now.\n']
980f971236eb496008a6f8f9c657180c0974d47b,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java,Condition_Change,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-		if (boundValue.getClass().isEnum()) {
+		if (boundValue != null && boundValue.getClass().isEnum()) {",2,condition,SelectedValueComparator defensively handles null values in exhaustiveCompare,"Issue: SPR-12001
",,16617,1,['NPE in SelectedValueComparator with null bound value [SPR-12001]'],"['**[Sebastian Anzani](https://jira.spring.io/secure/ViewProfile.jspa?name=sebastiananzani)** opened **[SPR-12001](https://jira.spring.io/browse/SPR-12001?redirect=false)** and commented\n\nIn case the collection, used to preselect checkboxes values, contains some null values  the following exception is thrown:\n\n```\njava.lang.NullPointerException\n\torg.springframework.web.servlet.tags.form.SelectedValueComparator.exhaustiveCompare(SelectedValueComparator.java:151)\n\torg.springframework.web.servlet.tags.form.SelectedValueComparator.exhaustiveCollectionCompare(SelectedValueComparator.java:140)\n\torg.springframework.web.servlet.tags.form.SelectedValueComparator.collectionCompare(SelectedValueComparator.java:112)\n\torg.springframework.web.servlet.tags.form.SelectedValueComparator.isSelected(SelectedValueComparator.java:89)\n\torg.springframework.web.servlet.tags.form.AbstractCheckedElementTag.isOptionSelected(AbstractCheckedElementTag.java:61)\n\torg.springframework.web.servlet.tags.form.AbstractCheckedElementTag.renderFromValue(AbstractCheckedElementTag.java:51)\n\torg.springframework.web.servlet.tags.form.AbstractCheckedElementTag.renderFromValue(AbstractCheckedElementTag.java:40)\n\torg.springframework.web.servlet.tags.form.CheckboxTag.writeTagDetails(CheckboxTag.java:90)\n\torg.springframework.web.servlet.tags.form.AbstractSingleCheckedElementTag.writeTagContent(AbstractSingleCheckedElementTag.java:87)\n\torg.springframework.web.servlet.tags.form.CheckboxTag.writeTagContent(CheckboxTag.java:53)\n\torg.springframework.web.servlet.tags.form.AbstractFormTag.doStartTagInternal(AbstractFormTag.java:84)\n\torg.springframework.web.servlet.tags.RequestContextAwareTag.doStartTag(RequestContextAwareTag.java:80)\n\torg.apache.jsp.page1_jsp._jspx_meth_form_005fcheckbox_005f0(page1_jsp.java:1505)\n```\n\n\n\n---\n\n**Affects:** 3.2.10, 4.0.5, 4.0.6\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3ebf135798bc9c27c3fb757d962666db4618862, https://github.com/spring-projects/spring-framework/commit/5f77dce1eeb28e9e1965c0d07046f0c4038617da, https://github.com/spring-projects/spring-framework/commit/980f971236eb496008a6f8f9c657180c0974d47b\n\n**Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)\n']",['closed'],[1],['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nSelectedValueComparator defensively handles null values in exhaustiveCompare now. This will be in the upcoming 4.1 RC1; to be backported to 4.0.7 and 3.2.11 as well.\n\nJuergen\n']
9820e3341d8691eddcadc0adc33e2a90bde1b37e,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/aot/InstanceSupplierCodeGenerator.java,Condition_Change,"-		if (accessVisibility == Visibility.PUBLIC
-				|| accessVisibility == Visibility.PACKAGE_PRIVATE) {
+		if (accessVisibility != Visibility.PRIVATE) {
-		if (accessVisibility == Visibility.PUBLIC
-				|| accessVisibility == Visibility.PACKAGE_PRIVATE) {
+		if (accessVisibility != Visibility.PRIVATE) {",6,condition,Fix handling of protected visibility,"Previously, InstanceSupplierCodeGenerator used reflection if the target
visibility is either protected or private, and use direct access if the
target visibility is public or package private.

The previous arrangement already assumed that the code is generateed in
the same package as the target type. This means that protected can be
used as well so this commit only use reflection if the target visibility
is private.

Closes gh-29253
",,29253,1,['Code generator should not use reflection for protected artifacts'],"[""Right now we assume that the generated code is in the same package of the target object. If the visibility is public or package private, then we generate code that uses the members directly. If they are protected or private, we use reflection.\r\n\r\nWe don't need to use reflection for protected cases as those members can be access within the same package.""]",['closed'],[0],[]
9877a9e6b7d299dc32a447340bbbd0ee6a1076b5,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java,Add_Condition,"-			allInterceptors.addAll(Arrays.asList(specificInterceptors));
+			if (specificInterceptors.length > 0) {
+				// specificInterceptors may equals PROXY_WITHOUT_ADDITIONAL_INTERCEPTORS
+				allInterceptors.addAll(Arrays.asList(specificInterceptors));
+			}",4,condition,Reduce memory consumption,,,,0,N/A,N/A,N/A,N/A,N/A
988aae4f2e41ee4d23e827c09095cde1fc07d201,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-				Method key = method;
-				if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(key)) {
+				if (isStatic && isFrozen && this.fixedInterceptorMap.containsKey(method)) {
-					int index = this.fixedInterceptorMap.get(key);
+					int index = this.fixedInterceptorMap.get(method);",5,condition,Remove unnecessary variable declaration in ProxyCallbackFilter,Closes gh-24675,,24675,1,['Remove unnecessary variable declaration in ProxyCallbackFilter'],['The var `key` declaration seems unnecessary. Suggest remove it. '],['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks']
990a9c74b93b3124dae554e6246b9b75504a5d23,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/util/UrlPathHelper.java,Condition_Change,"-			int slashIndex = requestUri.indexOf('/', semicolonIndex);
-			if (slashIndex >= 0) {
-				sb.delete(semicolonIndex, slashIndex);
+			int slashIndex = requestUri.indexOf('/', semicolonIndex + 1);
+			if (slashIndex == -1) {
+				slashIndex = sb.length();
+			sb.delete(semicolonIndex, slashIndex);",7,condition,Restore removal of trailing semicolon content,"See gh-26012
",,26012,1,['Improve URI/query strings sanitization'],"['Use `StringBuilder.deleteCharAt(int)` and `StringBuilder.delete(int, int)` to handle sanitization more effectively']",['closed'],[1],"['@rstoyanchev done.\r\n\r\nI\'ve also measured performance impact with simple benchmark\r\n```java\r\n@BenchmarkMode(Mode.AverageTime)\r\n@OutputTimeUnit(TimeUnit.NANOSECONDS)\r\n@Fork(jvmArgsAppend = {""-Xms2g"", ""-Xmx2g""})\r\npublic class DropDoubleSlashBenchmark {\r\n\r\n  @Benchmark\r\n  public String ineffective(Data data) {\r\n    String path = data.path;\r\n    while (true) {\r\n      int index = path.indexOf(""//"");\r\n      if (index == -1) {\r\n        break;\r\n      }\r\n      path = path.substring(0, index) + path.substring(index + 1);\r\n    }\r\n    return path;\r\n  }\r\n\r\n  @Benchmark\r\n  public String effective(Data data) {\r\n    StringBuilder path = new StringBuilder(data.path);\r\n    while (true) {\r\n      int index = path.indexOf(""//"");\r\n      if (index == -1) {\r\n        break;\r\n      }\r\n      path.deleteCharAt(index);\r\n    }\r\n    return path.toString();\r\n  }\r\n\r\n  @State(Scope.Thread)\r\n  public static class Data {\r\n    private final String path = ""/home/"" + ""/path"";\r\n  }\r\n}\r\n```\r\nand got the following results on my machine\r\n```\r\nJDK 8\r\n\r\neffective                          avgt    47.882 ±   1.801   ns/op\r\nineffective                        avgt    51.620 ±   0.907   ns/op\r\neffective:·gc.alloc.rate.norm      avgt   136.000 ±   0.001    B/op\r\nineffective:·gc.alloc.rate.norm    avgt   224.000 ±   0.001    B/op\r\n\r\nJDK 11\r\n\r\neffective                          avgt    33.949 ±   0.188   ns/op\r\nineffective                        avgt    47.735 ±   0.519   ns/op\r\neffective:·gc.alloc.rate.norm      avgt   104.000 ±   0.001    B/op\r\nineffective:·gc.alloc.rate.norm    avgt   152.000 ±   0.001    B/op\r\n```\r\nOn longer strings I think we\'ll have even better improvement.']"
99399084a6b1960d152ee46aa59da5304a019439,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/concurrent/ExecutorConfigurationSupport.java,Condition_Change,"+import java.util.concurrent.Future;
- * Base class for classes that are setting up a
- * {@code java.util.concurrent.ExecutorService}
- * (typically a {@link java.util.concurrent.ThreadPoolExecutor}).
+ * Base class for setting up a {@link java.util.concurrent.ExecutorService}
+ * (typically a {@link java.util.concurrent.ThreadPoolExecutor} or
+ * {@link java.util.concurrent.ScheduledThreadPoolExecutor}).
+ * @see java.util.concurrent.ScheduledThreadPoolExecutor
-	 * @param task the task to cancel (potentially a {@link RunnableFuture})
+	 * @param task the task to cancel (typically a {@link RunnableFuture})
-		if (task instanceof RunnableFuture) {
-			((RunnableFuture<?>) task).cancel(true);
+		if (task instanceof Future) {
+			((Future<?>) task).cancel(true);",5,condition,Consistent Future check (even if typically encountering RunnableFuture),"Issue: SPR-16607
",,21148,1,['ThreadPoolTaskExecutor should cancel all remaining Future handles on shutdown [SPR-16607]'],"['**[Nicolas Labrot](https://jira.spring.io/secure/ViewProfile.jspa?name=nithril)** opened **[SPR-16607](https://jira.spring.io/browse/SPR-16607?redirect=false)** and commented\n\n`ThreadPoolTaskExecutor#submitListenable` returns a future that will not be canceled when the executor is `shutdown`. By consequence `Future#get` will block indefinitely.\n\nI would like to propose that the list of `Runnable` returned by `this.executor.shutdownNow();` is used to cancel the `ListenableFuture`.\n\n---\n\n**Affects:** 5.0.4\n\n**Issue Links:**\n- #21079 DefaultMessageListenerContainer should interrupt worker threads when not returning on shutdown\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/3c1adf7f6af0dff9bda74f40dabe8cf428a62003, https://github.com/spring-projects/spring-framework/commit/99399084a6b1960d152ee46aa59da5304a019439\n']",['closed'],[5],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis seems to apply not only to `submitListenable` but also to regular `submit` calls: All such tasks remain uncancelled if not executed yet and therefore returned from `shutdownNow`. It looks like we should generally cancel all such remaining `Future` tasks at that point.\n', '**[Nicolas Labrot](https://jira.spring.io/secure/ViewProfile.jspa?name=nithril)** commented\n\n+1.\n\nYou may have note that the `TaskDecorator` may break the logic. A `FutureTaskAwareTaskDecorator` helper that decorate and still returns a `FutureTask` may be interesting.\n\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIndeed, we need to track decorated tasks in order to cancel the user-level `Future` handles if necessary. We're using a weak `ConcurrentReferenceHashMap` to track those while active: but only if actually necessary, i.e. if a `TaskDecorator` is configured and returns a different `Runnable` for a given task, avoiding any unnecessary storage of such task handles.\n\nA similar problem arises in `ThreadPoolTaskScheduler` where user-level `ListenableFuture` handles are covered by a `ScheduledFutureTask` at runtime. We're tracking the user-level handles in the same way there, delivering consistent behavior for `submitListenable` next to plain `submit` calls (both of which are unusual on a `ThreadPoolTaskScheduler` in any case).\n"", '**[Nicolas Labrot](https://jira.spring.io/secure/ViewProfile.jspa?name=nithril)** commented\n\nThank you. I will be able to reuse it for a project using Spring 4.3.\n\nIn `ExecutorConfigurationSupport#cancelRemainingTask` is it normal to instanceof on `RunnableFuture` but in `ThreadPoolTaskExecutor#cancelRemainingTask` instanceof on `Future` ?\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point, even if `ExecutorConfigurationSupport` is always going to see a `RunnableFuture` with the current `java.util.concurrent` implementation (since the incoming parameter is a raw `Runnable` returned from `shutdownNow`), I've relaxed that check to just `Future` so that it looks consistent with the subclass.\n""]"
99d9dacc4f6a95220ebe90455dac6410f2ffa649,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java,Add_Condition,"+				else if (logger.isWarnEnabled()) {
+					logger.debug(""Terminating '"" + session + ""': "" + ex.getMessage());
+				}",3,condition,Log sendBufferSizeLimit exceeded at warn,"Closes gh-23534
",,23534,1,['sendBufferSizeLimit exceeded should be logged at warn level'],"['SubProtocolWebSocketHandler catches SessionLimitExceededException exceptions, logs them at debug level and closes the session. The client sees a randomly closed socket and there is nothing in the server logs. These exceptions should be logged as a warning as they indicate a serious issue with the application that needs to be addressed.\r\n\r\n    catch (SessionLimitExceededException ex) {\r\n        try {\r\n            if (logger.isDebugEnabled()) {\r\n                logger.debug(""Terminating \'"" + session + ""\'"", ex);\r\n\t    }\r\n            this.stats.incrementLimitExceededCount();\r\n            clearSession(session, ex.getStatus()); // clear first, session may be unresponsive\r\n            session.close(ex.getStatus());\r\n\r\n[SubProtocolWebSocketHandler.java](https://github.com/spring-projects/spring-framework/blob/14558844bc4dba5586f6f9e27731bf52e802dcc5/spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java#L368-L379)']",['closed'],[2],"[""> the client sees a randomly closed socket\r\n\r\nThe session should be getting closed with an [error status](https://github.com/spring-projects/spring-framework/blob/bba3553dfb2561b9e779a6ca13b080c12b5940b1/spring-websocket/src/main/java/org/springframework/web/socket/CloseStatus.java#L136-L143). Is that not the case? \r\n\r\nWhen this error occurs, the idea is that the server is far behind in writing and the client may have become even unreachable. That said it's true on the server side we can at least log a one line message at warn level."", 'Yes the client does get an error status but its not easy to figure out why from that alone. I had to grep the Spring source code for the error number. Would have been much easier if there had been a warning in the server logs. Tx.']"
99dc96b1a47394740b0db4bf15e67d9abd27a25a,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/ResourceHttpMessageConverter.java,Condition_Change,"- * Implementation of {@link HttpMessageConverter} that can read and write {@link Resource Resources}
+ * Implementation of {@link HttpMessageConverter} that can read/write {@link Resource Resources}
- *
+
-	 * Create a new instance of the {@code ResourceHttpMessageConverter}
+	 * Create a new instance of the {@code ResourceHttpMessageConverter}.
-	 * read streaming, i.e. convert to {@code InputStreamResource}.
+	 * read streaming, i.e. convert to {@code InputStreamResource}
-		if (supportsReadStreaming && InputStreamResource.class == clazz) {
+		if (this.supportsReadStreaming && InputStreamResource.class == clazz) {",3,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
9a513cfdea9020c6ed2cf3f37711ed4e31d7c310,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionAspectSupport.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-		else {
+		else if (void.class == returnType) {
+		else {
+			throw new IllegalArgumentException(
+					""Invalid return type for async method (only Future and void supported): "" + returnType);
+		}",6,condition,Enforce Future/void return declaration for async methods,"Closes gh-27734
",,27734,1,['Enforce Future or void return declaration for each asynchronously executed method (e.g. with class-level @Async)'],"['https://github.com/spring-projects/spring-framework/blob/79d3f5c64c94a356831916ec78be4296fba92b18/spring-aop/src/main/java/org/springframework/aop/interceptor/AsyncExecutionInterceptor.java#L113-L127\r\n\r\nI have found an odd behaviour working with `@Async`-annotated classes in Spring. Please note that **there is** a fundamental error in my code. Unfortunately, this post has to be long and detailed.\r\n\r\nLet\'s say I have already made a synchronous REST API generated by Swagger generator. Following code omits all documentation-level annotations\r\n\r\n```java\r\n\r\npublic interface TaxonomiesApi {\r\n   \r\n    ResponseEntity<GenericTaxonomyItem> disableItem(Integer idTaxonomyType, String idTaxonomy, String appSource);\r\n\r\n}\r\n```\r\n\r\nThis API is easily implemented via `RestTemplate`, but I won\'t discuss the inner details.\r\n\r\nNow, suppose I want to provide an async version to developers consuming the API. What I have done is to create another interface with some search&replace-fu 🥋🥋\r\n\r\n```java\r\n@Async\r\npublic interface TaxonomiesApiAsync extends TaxonomyApi {\r\n   \r\n    default CompletableFuture<ResponseEntity<GenericTaxonomyItem>> disableItemAsync(Integer idTaxonomyType, String idTaxonomy, String appSource) {\r\n        try {\r\n            return completedFuture(this.disableItem(idTaxonomyType, idTaxonomy, appSource));\r\n        } catch (Exception ex) {\r\n            return failedFuture(ex);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nWith the search&replace, I basically created an async-ish version of every method that should be backed by Spring\'s `@Async` annotation. My original idea was that synchronous methods can be invoked as they are, but if you instantiate `TaxonomiesApiAsync` you also have access to the async version.\r\n\r\nI have discovered I made **a fundamental mistake** by applying the `@Async` annotation at interface level when the class contains both sync and async methods. I found that synchronous `disableItem` was performed in the same `@Async` context. Accoding to design (correctly), Spring found the `@Async` annotation at interface level so **every method**, including inherited ones, was invoked asynchronously.\r\n\r\nBut the method always returned null. By debugging and looking at the code, I found that Spring tries to resolve the return value of the invoked method **only** if it\'s a `Future`. What if the returned value is a _Present_ object?\r\n\r\nThat means that if the returned value is not a `Future<ResponseEntity<GenericTaxonomyItem>>` but rather just a `ResponseEntity<GenericTaxonomyItem>` Spring neither throws an exception nor returns that value directly.\r\n\r\nExample of working calling code (invoking a different method)\r\n\r\n```java\r\n    protected CompletableFuture<Set<TaxonomyLegalEntityDTO>> importTaxonomyLegalEntities(int userId) {\r\n        TaxonomySearchParameters searchParameters = new TaxonomySearchParameters();\r\n        searchParameters.setIdTaxonomyType(amlcProperties.getTaxonomies().getTaxonomyLegalEntitiesId());\r\n        searchParameters.setLogicalState(1);\r\n        return taxonomiesApiAsync.getAllTaxonomyItemsAsync(searchParameters)\r\n                .thenApply(ResponseEntity::getBody)\r\n                .thenApply(taxonomyLegalEntityMasterDbMapping::toLegalEntity) // Costruisco i DTO che voglio utilizzare\r\n                .whenComplete(traceLoggerConsumer(""Legal entity""))\r\n                .thenApply(dtos -> taxonomyLegalEntityManager.mergeFromMasterDb(dtos, userId))\r\n                .whenComplete((ignored, ex) -> {\r\n                    if (ex != null)\r\n                        log.error(""Error importing legal entities: "" + ex.getMessage(), ex);\r\n                })\r\n                .thenApply(TaxonomyMasterDbMergeDTO::getSnapshot);\r\n    }\r\n```\r\n\r\nExample of non-working code; the result of the CompletableFuture is always null.\r\nIn this code, I decided not to use the executor _embedded_ in the API service, but rather the executor injected in the consuming service. So I ran a sync method in an executor, expecting the same result.\r\n\r\n```java\r\n    protected CompletableFuture<Set<TaxonomyLegalEntityDTO>> importTaxonomyLegalEntities(int userId) {\r\n        TaxonomySearchParameters searchParameters = new TaxonomySearchParameters();\r\n        searchParameters.setIdTaxonomyType(amlcProperties.getTaxonomies().getTaxonomyLegalEntitiesId());\r\n        searchParameters.setLogicalState(1);\r\n        return CompletableFuture.supplyAsync(() -> taxonomiesApi.getAllTaxonomyItems(searchParameters), taxonomyBatchImportServiceExecutor)\r\n                .thenApply(ResponseEntity::getBody)\r\n                .thenApply(taxonomyLegalEntityMasterDbMapping::toLegalEntity)\r\n                .whenComplete(traceLoggerConsumer(""Legal entity""))\r\n                .thenApplyAsync(dtos -> taxonomyLegalEntityManager.mergeFromMasterDb(dtos, userId))\r\n                .whenComplete((ignored, ex) -> {\r\n                    if (ex != null)\r\n                        log.error(""Error importing legal entities: "" + ex.getMessage(), ex);\r\n                })\r\n                .thenApply(TaxonomyMasterDbMergeDTO::getSnapshot);\r\n    }\r\n```\r\n\r\n\r\nSince I spent one hour debugging that problem, I decided to spend more of my after-work time to document the issue here.\r\n\r\n**Proposed fix**\r\n\r\nIn the code I linked, if the `instanceof` check fails the returned value is simply null. I don\'t yet understand the implications, but what about not unwrapping the value from Future if that\'s not a future? I mean `return result`']",['closed'],[5],"[""> In terms of target method signatures, any parameter types are supported. However, the return type is constrained to either `void` or `Future`. In the latter case, you may declare the more specific `ListenableFuture` or `CompletableFuture` types which allow for richer interaction with the asynchronous task and for immediate composition with further processing steps.\r\n\r\nThe documentation states the limitations in the return types only `void` or `Future`. It doesn't really make sense to allow for a return of a specific type as that would make the method call synchronous again as one would need to do a `Future.get` which is blocking and thus renders the `@Async` useless. \r\n\r\nSo I the return type isn't a `Future` it can return `null` because the other allowed return value is `void`. \r\n\r\nAs a solution an exception would be better imho with a clear message stating that only `void` or `Future` is supported as a return type. "", ""As the documentation states and as @mdeinum pointed out, the return type must `Future` or `void`, or otherwise the calling code has to block anyway, making it pointless to involve an Executor thread, and making asynchronous methods that are meant to be synchronous.\r\n\r\nI think this can be closed, unless @jhoeller you see some opportunity to bypass methods that don't return void or Future.\r\n"", ""I'm inclined to explicitly throw an exception for non-Future/void return type declarations whenever we attempt to execute a method asynchronously. While this may not be much of an issue with an explicit annotated method, a class-level `@Async` declaration is certainly harder to track when some specific method mismatches then."", ""Noob question @jhoeller since I assume you systematically do an instanceof/reflection check, and that *could* incur a slowdown, wouldn't it be better to have this check only enabled on dev/debug mode et disabled on release mode? "", ""@LifeIsStrange as you can see in the code, what is done is a `==` check on the `returnType`, which is already available (already reflected). So, it's not going to add any overhead.\r\n\r\nAs for your question about the `instanceof` performance, I found an [interesting reading](https://stackoverflow.com/questions/103564/the-performance-impact-of-using-instanceof-in-java) and the **tl;dr** says\r\n\r\n> In Java 1.8 instanceof is the fastest approach, although getClass() is very close.\r\n\r\nNevertheless, it doesn't apply to this fix.""]"
9a618dc7a1527ac02fff9fd1385a277ebd3736ed,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java,Condition_Change,"-		if (!isAsyncDispatch(request) && !(response instanceof ContentCachingResponseWrapper)) {
+		if (!isAsyncDispatch(request) && !(response instanceof ConditionalContentCachingResponseWrapper)) {
-
-		ContentCachingResponseWrapper wrapper =
-				WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);
-
+		ConditionalContentCachingResponseWrapper wrapper =
+				WebUtils.getNativeResponse(response, ConditionalContentCachingResponseWrapper.class);
-",9,condition,Enforce ConditionalContentCachingResponseWrapper in ShallowEtagHeaderFilter,"Closes gh-24976
",,24976,1,"[""Don't get ContentCachingResponseWrapper in ShallowEtagHeaderFilter so that users can extend this wrapper""]","['Issue Description:\r\nCode in `ShallowEtagHeaderFilter`:\r\n[`WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);`](https://github.com/spring-projects/spring-framework/blob/c237338d8f4b0100c8432c48acc2cabc8305a651/spring-web/src/main/java/org/springframework/web/filter/ShallowEtagHeaderFilter.java#L116)\r\nshould be replaced into \r\n`WebUtils.getNativeResponse(response, ConditionalContentCachingResponseWrapper.class);` so that users can implement their own business logic based on `ContentCachingResponseWrapper`.\r\n\r\nChange `ContentCachingResponseWrapper` to `ConditionalContentCachingResponseWrapper` so that it gets the right one.\r\n```\r\nprivate void updateResponse(HttpServletRequest request, HttpServletResponse response) throws IOException {\r\n\r\n\tContentCachingResponseWrapper wrapper = \r\n// WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);\r\n   WebUtils.getNativeResponse(response, ConditionalContentCachingResponseWrapper.class);\r\n\r\n\t\tAssert.notNull(wrapper, ""ContentCachingResponseWrapper not found"");\r\n\t\tHttpServletResponse rawResponse = (HttpServletResponse) wrapper.getResponse();\r\n\r\n\t\tif (isEligibleForEtag(request, wrapper, wrapper.getStatus(), wrapper.getContentInputStream())) {\r\n\t\t\tString eTag = wrapper.getHeader(HttpHeaders.ETAG);\r\n\t\t\tif (!StringUtils.hasText(eTag)) {\r\n\t\t\t\teTag = generateETagHeaderValue(wrapper.getContentInputStream(), this.writeWeakETag);\r\n\t\t\t\trawResponse.setHeader(HttpHeaders.ETAG, eTag);\r\n\t\t\t}\r\n\t\t\tif (new ServletWebRequest(request, rawResponse).checkNotModified(eTag)) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\twrapper.copyBodyToResponse();\r\n\t}\r\n```\r\n\r\nI have implemented my own Filter, and in my own Filter, i have implemented my own ResponseWrapper which extends `ContentCachingResponseWrapper`, everything works fine if `ShallowEtagHeaderFilter` is not loaded, but when it works with `ShallowEtagHeaderFilter`, when `ShallowEtagHeaderFilter.updateResponse` is invoked, the real HttpServletResponse get through `WebUtils.getNativeResponse(response, ContentCachingResponseWrapper.class);` become my own ResponseWrapper, so my own logic will be invoked inside `ShallowEtagHeaderFilter`, which is a mistake. \r\nBy changing the code to `WebUtils.getNativeResponse(response, ConditionalContentCachingResponseWrapper.class);`, everything will be fine.\r\n\r\n\r\n**Affects:** \\<5.2.5.RELEASE and others>\r\n\r\n\r\n']",['closed'],[0],[]
9a722b4558ca7985fb54a06ff76e3934abe898cb,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,Condition_Change,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-		if (sqlType == SqlTypeValue.TYPE_UNKNOWN || sqlType == Types.OTHER) {
+		if (sqlType == SqlTypeValue.TYPE_UNKNOWN || (sqlType == Types.OTHER && typeName == null)) {",2,condition,Pass type name into PreparedStatement.setNull in case of Types.OTHER,"Issue: SPR-16669
",,21210,1,['Unable to bind a null value for UUID column with PostgreSQL [SPR-16669]'],"['**[Rémi Aubel](https://jira.spring.io/secure/ViewProfile.jspa?name=r%C3%A9mi)** opened **[SPR-16669](https://jira.spring.io/browse/SPR-16669?redirect=false)** and commented\n\nPostgreSQL database defines the type UUID (this type does not exist in `java.sql.Types`).\n\nI want to use this kind of PreparedStatement:\n\n```\nSELECT ... WHERE :VAL IS NOT NULL AND :VAL = <my_uuid_column>\n```\n\nAnd I want to bind a null value for `VAL`.\nIn this specific case, PostgreSQL JDBC driver requires the data type to be specified. And since the UUID data type does not exist in `java.sql.Types`, we must specify the type name as well, by calling `PreparedStatement.setNull(\\_, java.sql.Types.OTHER, ""uuid"")`.\nWith plain old java (`Connection` and `PreparedStatement`), this works fine.\n\nUsing `NamedParameterJdbcTemplate` (and providing the ""data type"" and ""data type name"" in a `MapSqlParameterSource`), I\'m not able to make it work.\nUnder the hood, `StatementCreatorUtils.setNull(\\_, \\_, type, typeName)` delegates to `PreparedStatement.setNull(\\_, type)` (with no type name) when type is `Types.OTHER`.\n\nShouldn\'t it call `PreparedStatement.setNull(_, type, typeName)` when `typeName` is provided (non null) instead?\n\n---\n\n**Affects:** 4.3.14, 5.0.4\n\n**Issue Links:**\n- #13215 Can\'t insert into nvarchar2 using SimpleJdbcInsert whereas it works with SimpleJdbcTemplate\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9a722b4558ca7985fb54a06ff76e3934abe898cb, https://github.com/spring-projects/spring-framework/commit/5629fa2c9f94ed43aedfd87181164fcbc154fffc\n\n**Backported to:** [4.3.15](https://github.com/spring-projects/spring-framework/milestone/164?closed=1)\n']",['closed'],[3],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis seems to be a regression introduced in Spring Framework 4.1 (#13215). I'll revise this for the upcoming 5.0.5 and 4.3.14 releases.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've resolved this through not entering our fallback block in case of `Types.OTHER` with a non-null `typeName`, going to the usual `PreparedStatement.setNull` variant with a type name again.\n"", '**[Rémi Aubel](https://jira.spring.io/secure/ViewProfile.jspa?name=r%C3%A9mi)** commented\n\nThank you very much!\n']"
9b3131ffbaa7a4bb312dfad66d685a348ee7e61f,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/AbstractHttpMessageConverter.java,Condition_Change,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-		Assert.notEmpty(supportedMediaTypes, ""'supportedMediaTypes' must not be empty"");
+		Assert.notEmpty(supportedMediaTypes, ""MediaType List must not be empty"");
-	 * <p>This implementation delegates to {@link #getDefaultContentType(Object)} if a content
-	 * type was not provided, set if necessary the default character set, calls
+	 * <p>This implementation delegates to {@link #getDefaultContentType(Object)} if a
+	 * content type was not provided, set if necessary the default character set, calls
-		if (headers.getContentLength() < 0) {
+		if (headers.getContentLength() < 0 && !headers.containsKey(HttpHeaders.TRANSFER_ENCODING)) {",4,condition,Skip default Content-Length if Transfer-Encoding header has been set,"Issue: SPR-15212
",,19776,1,['HTTP Response should not contain both Transfer-Encoding and Content-Length headers [SPR-15212]'],"['**[Stefanie Loiseleur](https://jira.spring.io/secure/ViewProfile.jspa?name=sloiseleur)** opened **[SPR-15212](https://jira.spring.io/browse/SPR-15212?redirect=false)** and commented\n\nDear Spring Framework Team,\n\nI\'m currently building an MvcEndpoint in a SpringBoot Application to return the result of an Http GET call to another service. This service returns a JSON content, which has the header _Transfer-Encoding_ valued to ""chunked"".\n\nMy endpoint is then consumed by a Node.js server. This Node.js server returns a parse error with code _HPE_UNEXPECTED_CONTENT_LENGTH_ when consuming the endpoint, because the response headers contains both _Transfer-encoding:chunked_ and _Content-Length_ values.\n\nThis is considered has an error as specified in RFC 7230 section 3.3.3.3 :\n\n??If a message is received with both a Transfer-Encoding and a Content-Length header field, the Transfer-Encoding overrides the Content-Length.  Such a message might indicate an attempt to perform request smuggling (Section 9.5) or response splitting (Section 9.4) and ought to be handled as an error.  A sender MUST remove the received Content-Length field prior to forwarding such a message downstream.??\n\nhttps://tools.ietf.org/html/rfc7230#section-3.3.3\n\nThis header is added in org.springframework.http.converter.AbstractHttpMessageConverter.addDefaultHeaders at line 259 for the 4.3.3.RELEASE I\'m using.\n\nI think the Content-Length header should be added only if the Transfer-Encoding header is not already set.\n\nDo you think AbstractHttpMessageConverter should be updated ?\n\nThank you all.\n\n---\n\n**Affects:** 4.3.3, 4.3.6\n\n**Issue Links:**\n- #17408 Make `@ResponseBody` method return type available to message converters\n- #18147 resttemplate multipart post with InputStreamResource not working\n- #21523 Spring adding \'chunked\' transfer encoding even if this header already exists\n- #19826 HEAD response has ""Content-Length: 0"" for `@RestController` `@GetMapping` methods\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b3131ffbaa7a4bb312dfad66d685a348ee7e61f, https://github.com/spring-projects/spring-framework/commit/d5daa8e3a70ebbe2f8fb429460c818a9e3958184\n']",['closed'],[1],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point. I've revised `AbstractHttpMessageConverter.addDefaultHeaders` to only set the `Content-Length` header if no `Transfer-Encoding` header was set before.\n""]"
9b615ed8c669c272530733b17d11b852fed8e3b9,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/ReactorServerHttpRequest.java,Add_Condition,"+import io.netty.channel.Channel;
-		SslHandler sslHandler = ((Connection) this.request).channel().pipeline().get(SslHandler.class);
+		Channel channel = ((Connection) this.request).channel();
+		SslHandler sslHandler = channel.pipeline().get(SslHandler.class);
+		if (sslHandler == null && channel.parent() != null) { // HTTP/2
+			sslHandler = channel.parent().pipeline().get(SslHandler.class);
+		}",7,condition,Fix missing sslInfo with Reactor Netty and http/2,"Prior to this commit, the `SslInfo` would be missing for WebFlux apps
when deployed on Reactor Netty with http/2.

This commit ensures that the request adapter checks the current channel
and the parent channel for the presence of the `SslHander`.
In the case of http/2, the `SslHander` is tied to the parent channel.

Fixes gh-25278
",,25278,1,['ServerHttpRequest.getSslInfo() always returns null for reactor-netty HTTP/2 requests'],"['**Affects:** 5.2.7.RELEASE\r\n\r\n---\r\nReactorServerHttpRequest.initSslInfo() works only for HTTP1.1 requests\r\nbecause the code looks for SslHandler in the channel().pipeline().\r\n\r\nFor HTTP/2 request SslHandler is locate in the channel().parent().pipeline()\r\nExample how to access: Http2StreamBridgeHandler.channelRead() (reactor-netty)\r\n\r\nOr, maybe, you have some other elegant solution?']",['closed'],[0],[]
9b662e8244905da618b96c9b73fa11f59d1ab343,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/client/JdkClientHttpRequest.java,Condition_Change,"-	private final Duration timeOut;
+	private final Duration timeout;
-		this.timeOut = readTimeout;
+		this.timeout = readTimeout;
-		if (this.timeOut != null) {
-			builder.timeout(this.timeOut);
+		if (this.timeout != null) {
+			builder.timeout(this.timeout);",8,condition,Typo,,,,0,N/A,N/A,N/A,N/A,N/A
9b7a492bc95c8c1f3e3abfe055defa3722a0aa45,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java,Condition_Change,"-		if (ClassUtils.isPresent(""rx.Observable"", classLoader)) {
+		if (ClassUtils.isPresent(""rx.Observable"", classLoader) &&
+				ClassUtils.isPresent(""rx.RxReactiveStreams"", classLoader)) {",3,condition,Test RxReactiveStreams presence in ReactiveAdapterRegistry,"Issue: SPR-17000
",,21538,1,['Perform explicit class checks in ReactiveAdapterRegistry [SPR-17000]'],"['**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** opened **[SPR-17000](https://jira.spring.io/browse/SPR-17000?redirect=false)** and commented\n\nIn order to allow Spring Framework applications running as GraalVM native images, we should perform explicit class checks instead of catching `Throwable` in order to avoid `UnsupportedFeatureError: Unresolved element found`\xa0errors.\n\n---\n\n**Issue Links:**\n- #21529 Initial GraalVM native images (Substrate VM) support (_**""is depended on by""**_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/9b7a492bc95c8c1f3e3abfe055defa3722a0aa45, https://github.com/spring-projects/spring-framework/commit/dcbaecea2a73c10580e184b927c3747a6c6fd900\n']",['closed'],[0],[]
9b85a246d83dd9386889c0edc47dfeffbbc8b6f8,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/concurrent/SimpleAsyncTaskScheduler.java,Condition_Change,"-		if (this.scheduledExecutor.isTerminated()) {
+		if (this.scheduledExecutor.isShutdown()) {",2,condition,SimpleAsyncTaskScheduler stops accepting new tasks when isShutdown,"This changes the criteria for simplified task rejection logging from
to be that the executor is in the shutdown phase, not fully terminated.

See gh-33334
Closes gh-33336
",,"33336, 33334",2,"['SimpleAsyncTaskScheduler stops accepting new tasks when isShutdown', 'SimpleAsyncTaskScheduler should ignore scheduled exceptions after shutdown (not termination)']","[""Fixes #33334\r\n\r\nI didn't find specific tests for this call and I believe the proper ones would be too cumbersome to write. Hope you don't mind, @simonbasle "", ""Basically my issue is described in #32381. The implemented solution works in almost all cases, but I still experience `TaskRejectedException` logged as errors in the following case:\r\n* application context is stopping;\r\n* `ContextClosedEvent` is already published;\r\n* `SimpleAsyncTaskScheduler#scheduledExecutor` is shut down, but didn't yet terminated;\r\nI couldn't create a minimal reproducible example, but I'd like to show an excerpt from logs.\r\n```\r\n2024-08-07T09:59:05.977+02:00 DEBUG 65937 --- [cheduling-19424] c.c.MyTaskBean          : Task working\r\n2024-08-07T09:59:05.977+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.b.a.ApplicationAvailabilityBean      : Application availability state ReadinessState changed from ACCEPTING_TRAFFIC to REFUSING_TRAFFIC\r\n2024-08-07T09:59:05.977+02:00 DEBUG 65937 --- [ionShutdownHook] ConfigServletWebServerApplicationContext : Closing org.springframework.boot.web.servlet.context.AnnotationConfigServletWebServerApplicationContext@28a2a3e7, started on Wed Aug 07 09:59:00 CEST 2024\r\n2024-08-07T09:59:05.977+02:00 DEBUG 65937 --- [cheduling-19425] c.c.MyTaskBean          : Task working\r\n2024-08-07T09:59:05.977+02:00 DEBUG 65937 --- [cheduling-19426] c.c.MyTaskBean          : Task working\r\n2024-08-07T09:59:05.977+02:00 DEBUG 65937 --- [cheduling-19427] c.c.MyTaskBean          : Task working\r\n2024-08-07T09:59:05.977+02:00 DEBUG 65937 --- [cheduling-19428] c.c.MyTaskBean          : Task working\r\n2024-08-07T09:59:05.977+02:00 ERROR 65937 --- [cheduling-19428] o.s.s.s.TaskUtils$LoggingErrorHandler    : Unexpected error occurred in scheduled task\r\n\r\norg.springframework.core.task.TaskRejectedException: ExecutorService in shutdown state did not accept task: com.company.MyTaskBean$$Lambda/0x000003ff01a10ed0@3c00151f\r\n\tat org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler.schedule(SimpleAsyncTaskScheduler.java:234)\r\n\tat com.company.MyTaskBean.task(MyTaskBean.kt:87)\r\n\tat com.company.MyTaskBean.task$lambda$1(MyTaskBean.kt:87)\r\n\tat org.springframework.scheduling.support.DelegatingErrorHandlingRunnable.run(DelegatingErrorHandlingRunnable.java:54)\r\n\tat java.base/java.lang.VirtualThread.run(VirtualThread.java:329)\r\nCaused by: java.util.concurrent.RejectedExecutionException: Task java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask@93d3468[Not completed, task = java.util.concurrent.Executors$RunnableAdapter@74f27d38[Wrapped task = org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler$$Lambda/0x000003ff019a8f70@53630565]] rejected from org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler$1@1d884a19[Shutting down, pool size = 1, active threads = 0, queued tasks = 2, completed tasks = 19427]\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2081)\r\n\tat java.base/java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:841)\r\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor.delayedExecute(ScheduledThreadPoolExecutor.java:340)\r\n\tat java.base/java.util.concurrent.ScheduledThreadPoolExecutor.schedule(ScheduledThreadPoolExecutor.java:562)\r\n\tat org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler.schedule(SimpleAsyncTaskScheduler.java:231)\r\n\t... 4 common frames omitted\r\n\r\n2024-08-07T09:59:05.978+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 2147483647\r\n2024-08-07T09:59:05.978+02:00 TRACE 65937 --- [ionShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Asking bean 'taskScheduler' of type [org.springframework.scheduling.concurrent.SimpleAsyncTaskScheduler] to stop\r\n2024-08-07T09:59:05.978+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Bean 'taskScheduler' completed its stop procedure\r\n2024-08-07T09:59:05.978+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 2147482623\r\n2024-08-07T09:59:05.978+02:00 TRACE 65937 --- [ionShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Asking bean 'webServerGracefulShutdown' of type [org.springframework.boot.web.context.WebServerGracefulShutdownLifecycle] to stop\r\n2024-08-07T09:59:05.979+02:00  INFO 65937 --- [ionShutdownHook] o.s.b.w.e.tomcat.GracefulShutdown        : Commencing graceful shutdown. Waiting for active requests to complete\r\n2024-08-07T09:59:05.980+02:00  INFO 65937 --- [tomcat-shutdown] o.s.b.w.e.tomcat.GracefulShutdown        : Graceful shutdown complete\r\n2024-08-07T09:59:05.980+02:00 DEBUG 65937 --- [tomcat-shutdown] o.s.c.support.DefaultLifecycleProcessor  : Bean 'webServerGracefulShutdown' completed its stop procedure\r\n2024-08-07T09:59:05.981+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase 2147481599\r\n2024-08-07T09:59:05.981+02:00 TRACE 65937 --- [ionShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Asking bean 'webServerStartStop' of type [org.springframework.boot.web.servlet.context.WebServerStartStopLifecycle] to stop\r\n2024-08-07T09:59:05.981+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Bean 'webServerStartStop' completed its stop procedure\r\n2024-08-07T09:59:05.981+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Stopping beans in phase -2147483647\r\n2024-08-07T09:59:05.981+02:00 TRACE 65937 --- [ionShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Asking bean 'springBootLoggingLifecycle' of type [org.springframework.boot.context.logging.LoggingApplicationListener$Lifecycle] to stop\r\n2024-08-07T09:59:05.981+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.c.support.DefaultLifecycleProcessor  : Bean 'springBootLoggingLifecycle' completed its stop procedure\r\n2024-08-07T09:59:05.982+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.s.c.ThreadPoolTaskScheduler          : Shutting down ExecutorService\r\n2024-08-07T09:59:05.985+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown\r\n2024-08-07T09:59:05.985+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans\r\n2024-08-07T09:59:05.986+02:00  INFO 65937 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : read-only - Shutdown initiated...\r\n2024-08-07T09:59:05.988+02:00  INFO 65937 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : read-only - Shutdown completed.\r\n2024-08-07T09:59:05.988+02:00  INFO 65937 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : read-write - Shutdown initiated...\r\n2024-08-07T09:59:05.989+02:00  INFO 65937 --- [ionShutdownHook] com.zaxxer.hikari.HikariDataSource       : read-write - Shutdown completed.\r\n2024-08-07T09:59:05.989+02:00 DEBUG 65937 --- [ionShutdownHook] o.s.b.f.support.DisposableBeanAdapter    : Custom destroy method 'close' on bean with name 'simpleclientPrometheusMeterRegistry' completed\r\n```\r\n\r\nI suppose, the reason can be explained as follows.\r\n* `SimpleAsyncTaskScheduler#onApplicationEvent` calls `ExecutorService#shutdown` thus switching its running state to `SHUTDOWN`.\r\n* `SimpleAsyncTaskScheduler#shutdownAwareErrorHandler` checks for `ExecutorService#isTerminated` which only returns `true` if an executor is in `TERMINATED` running state.\r\n\r\nThe proposed solution: use `ExecutorService#isShutdown` instead.\r\n\r\nI hesitated to create a PR as I also found a call to `isTerminated` to `ExecutorLifecycleDelegate` and not sure if it should be changed too.\r\n""]","['closed', 'closed']","[2, 5]","['Thanks for the detailed analysis @genuss. I think what you propose for `SimpleAsyncTaskScheduler#shutdownAwareErrorHandler` makes sense. The `ExecutorLifecycleDelegate` should be reviewed separately though.', 'Should I create a PR for the change?', '@genuss if you have something ready, please go ahead :) ', 'Sounds sensible to use `isShutdown()` there, suppressing the log entry even before full termination there.\r\n\r\nAs for `ExecutorLifecycleDelegate`, the use of `isTerminated()` seems correct there since `isRunning()` is expected to return `true` up until actual termination.', 'Superseded by PR #33336.']"
9cbac985fbe20df1b0cce399dd238183de9befbc,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/AntPathMatcher.java,Condition_Change,"-			if (cachePatterns == null && this.stringMatcherCache.size() == CACHE_TURNOFF_THRESHOLD) {
+			if (cachePatterns == null && this.stringMatcherCache.size() >= CACHE_TURNOFF_THRESHOLD) {",2,condition,Refined check for cache turnoff threshold,"Issue: SPR-10803
",,15429,1,['MemoryLeak in AntPathMatcher during caching AntPathStringMatcher instances [SPR-10803]'],"['**[Pawel Bobruk](https://jira.spring.io/secure/ViewProfile.jspa?name=pboburk)** opened **[SPR-10803](https://jira.spring.io/browse/SPR-10803?redirect=false)** and commented\n\nImplementation matchStrings:\n\n```\nprivate boolean matchStrings(String pattern, String str, Map<String, String> uriTemplateVariables) {\n     AntPathStringMatcher matcher = this.stringMatcherCache.get(pattern);\n     if (matcher == null) {\n          matcher = new AntPathStringMatcher(pattern);\n          this.stringMatcherCache.put(pattern, matcher);\n     }\n     return matcher.matchStrings(str, uriTemplateVariables);\n}\n```\n\nis adding unlimited number of AntPathStringMatcher to ""cache"".\n\nIn applications with SEO friendly addresses with lots of combinations of parameters causes a problem with the heap memory, every url pattern are stored in cache.\n\n---\n\n**Issue Links:**\n- #14383 Avoid per-request Pattern.compile() calls.\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/326154270fa6338010a1c047044fc4a9f21e910b, https://github.com/spring-projects/spring-framework/commit/d4f4225e53c3af7208b7928bd3ba799249b6875d, https://github.com/spring-projects/spring-framework/commit/9cbac985fbe20df1b0cce399dd238183de9befbc, https://github.com/spring-projects/spring-framework/commit/7a5a6893e3024c9f06a5473788fe731eb6efc380, https://github.com/spring-projects/spring-framework/commit/a7af9505dee01340ac225814f9f90252bb7d725e, https://github.com/spring-projects/spring-framework/commit/4bcfbc3ba3eced91bd833eb2b4d4620c94c611ba\n\n0 votes, 8 watchers\n']",['closed'],[7],"['**[Maciej Zasada](https://jira.spring.io/secure/ViewProfile.jspa?name=mzasada)** commented\n\nTo be precise - in our scenario, we have specific SEO requirements for our search page - all of the attributes must be included in as a part of the URL, not as a parameter, e.g.\n\n```\nexample.com/man/brand+nike,adidas\n```\n\nWe have one annotated catch-all-requests controller. We also have a mvc interceptor, which does URL parsing and transforms path tokens into set of parameters, e.g.\n\n```\nexample.com/man/brand+nike,adidas => [category: [man], brand: [nike,adidas]]\n```\n\nDoing that, we have dynamic URLs based on product attributes and we can handle all of the defined attributes in one fashion. The downside is heavy memory use of AntPathMatcher cache, because we can produce as many unique URLs as cartesian product of all attributes. In our production env, this Map grown into >50% of the total heap size.\n\nWhat would be nice to have is a plugable definition of cache strategy (e.g. fixed-sized LRU) for org.springframework.util.AntPathMatcher\n', '**[Pawel Bobruk](https://jira.spring.io/secure/ViewProfile.jspa?name=pboburk)** commented\n\nCreated [pull#343](https://github.com/SpringSource/spring-framework/pull/343).\n', '**[Andrzej Wisłowski](https://jira.spring.io/secure/ViewProfile.jspa?name=awislowski)** commented\n\nAs a temporary workaround we just added one fixed java class to our application in the /WEB-INF/classes of our web application. Due to tomcat class loading priority our application loads fixed AntPathMatcher java class before class from jar in the /WEB-INF/lib directory\n\nTomcat class-loader documentation : http://tomcat.apache.org/tomcat-7.0-doc/class-loader-howto.html\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI\'ve addressed this with a general overhaul of AntPathMatcher\'s caching. In particular, I\'ve introduced:\n* a ""setCachePatterns(boolean)"" method for explicit configuration (turning on an unlimited cache or turning it off completely)\n* a default turnoff threshold at 65536 entries (at which point we\'re deciding that caching isn\'t worthwhile because patterns are unlikely to be reoccurring often enough, so we\'re clearing the cache and deactivating it)\n* and an ""AntPathStringMatcher getStringMatcher(String pattern)"" template method which can be overridden in subclasses for a custom caching strategy.\n\nThat said, I am wondering where all those pattern entries come from in your scenario. After all, in a regular dispatcher arrangement, there is a finite number of mapped handler methods with an equally finite number of path patterns that they are mapped to. It\'s just the incoming requests that may have all sorts of path permutations. However, what we\'re caching is the mapped patterns, not the incoming paths...\n\nI would argue that AntPathMatcher\'s caching is only worthwhile with a limited number of path patterns. Once you go beyond a certain limit (and the default 65536 is rather generous there anyway), it\'s not worth synchronizing access to the entire cache just in order to be able to drop the oldest entries from a LinkedHashMap. Instead, it\'s appropriate to turn off the cache completely.\n\nJuergen\n', '**[Andrzej Wisłowski](https://jira.spring.io/secure/ViewProfile.jspa?name=awislowski)** commented\n\nIn the class RequestMappingInfoHandlerMapping in the method handleMatch if no matching handler method for the current request was found then lookupPath is used as a pattern.\n\nhttps://github.com/spring-projects/spring-framework/blob/master/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/RequestMappingInfoHandlerMapping.java#L101\n\nWe just stressed application with url (/unmapped_path/{i}) incrementing {i} to generate OutOfMemeryException.\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThe lookupPath is used as a pattern if the matched request mapping does not have any patterns, i.e. an `@RequestMapping` with no patterns but possibly other mapping attributes (params, headers, etc).\n\nI'm fixing this regardless but just confirming my understanding that it seems to be a very specific case that triggers this.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGiven that we fixed the hotspot that previously filled AntPathMatcher's cache beyond any limits, I'm inclined to only backport that fix to 3.2.5 and leave the general AntPathMatcher overhaul to the 4.0 line. After all, any such overhaul may also introduce subtle side effects; so if there's no strong need, I'd rather not backport it.\n\nJuergen\n""]"
9ccbeec94748e825b438dce2acad7da44ed82b3d,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/reactive/TransactionalOperatorImpl.java,Add_Condition,"-		if (ex instanceof RuntimeException &&
-				ex.getCause() != null &&
-				ex.getMessage().startsWith(""Async resource cleanup failed"")) {
-			return ex.getCause();
+		if (ex instanceof RuntimeException && ex.getCause() != null) {
+			String msg = ex.getMessage();
+			if (msg != null && msg.startsWith(""Async resource cleanup failed"")) {
+				return ex.getCause();
+			}",9,condition,Ignore null message when introspecting resource cleanup failure,"This commit fixes a regression introduced in conjunction with gh-27572.

See gh-30597
Closes gh-30729
",,"30597, 30729, 27572",3,"['NPE in `ReactiveTransactionSupport.unwrapIfResourceCleanupFailure`', '`NullPointerException` in reactive `TransactionalOperatorImpl`', 'Avoid rollback after a commit failure in `TransactionalOperator`']","['**Affects:** spring boot 3.0.7\r\n\r\n---\r\nin method unwrapIfResourceCleanupFailure of org.springframework.transaction.interceptor.TransactionAspectSupport.ReactiveTransactionSupport class\r\nif ex.getMessage() returns null then we get NullPointerException:\r\n\r\n```java\r\n\t\t\tif (ex instanceof RuntimeException &&\r\n\t\t\t\t\tex.getCause() != null &&\r\n\t\t\t\t\tex.getMessage().startsWith(""Async resource cleanup failed"")) {\r\n\t\t\t\treturn ex.getCause();\r\n\t\t\t}\r\n```\r\nhttps://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L1088', 'I have used spring-tx for a while. I just upgraded the version into 6.0.9. But some of my tests, which were passed before, about transaction are failed.\r\nSo, I tried to find the reason.\r\n\r\nIn the below code, the test failed, but the exception type are not ""NoSuchElementException"". It is ""NullPointerException"".\r\n\r\nThis code is not what my real test, but it is just a sample code.\r\n\r\n```kt\r\n@DataR2dbcTest\r\nclass TestTransaction {\r\n    @Autowired\r\n    private lateinit var txManager: ReactiveTransactionManager\r\n\r\n    @OptIn(ExperimentalCoroutinesApi::class)\r\n    @Test\r\n    fun test1() = runTest {\r\n        TransactionalOperator.create(txManager).executeAndAwait {\r\n            Mono.error<NoSuchElementException>(NoSuchElementException())\r\n                .awaitSingle()\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n```\r\nCannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.Throwable.getMessage()"" is null\r\njava.lang.NullPointerException: Cannot invoke ""String.startsWith(String)"" because the return value of ""java.lang.Throwable.getMessage()"" is null\r\n\tat org.springframework.transaction.reactive.TransactionalOperatorImpl.unwrapIfResourceCleanupFailure(TransactionalOperatorImpl.java:117)\r\n\tat reactor.core.publisher.Flux.lambda$onErrorMap$27(Flux.java:7099)\r\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onError(FluxOnErrorResume.java:94)\r\n\tat reactor.core.publisher.FluxUsingWhen$UsingWhenSubscriber.deferredError(FluxUsingWhen.java:398)\r\n\tat reactor.core.publisher.FluxUsingWhen$RollbackInner.onComplete(FluxUsingWhen.java:475)\r\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)\r\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:209)\r\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:209)\r\n\tat reactor.core.publisher.FluxOnErrorReturn$ReturnSubscriber.onComplete(FluxOnErrorReturn.java:169)\r\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)\r\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.secondComplete(MonoFlatMap.java:250)\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapInner.onComplete(MonoFlatMap.java:324)\r\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260)\r\n\tat reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onComplete(Operators.java:2205)\r\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:209)\r\n\tat reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.onComplete(MonoIgnoreThen.java:209)\r\n\tat reactor.pool.SimpleDequePool.maybeRecycleAndDrain(SimpleDequePool.java:531)\r\n```\r\n\r\nI found code was changed 2 months ago. And the below is what was added or modified.\r\n\r\n```kt\r\n//In ""TransactionalOperatorImpl""\r\n        @Override\r\n\tpublic <T> Flux<T> execute(TransactionCallback<T> action) throws TransactionException {\r\n\t\treturn TransactionContextManager.currentContext().flatMapMany(context ->\r\n\t\t\tFlux.usingWhen(\r\n\t\t\t\tthis.transactionManager.getReactiveTransaction(this.transactionDefinition),\r\n\t\t\t\taction::doInTransaction,\r\n\t\t\t\tthis.transactionManager::commit,\r\n\t\t\t\tthis::rollbackOnException,\r\n\t\t\t\tthis.transactionManager::rollback)\r\n\t\t\t.onErrorMap(this::unwrapIfResourceCleanupFailure))\r\n\t\t.contextWrite(TransactionContextManager.getOrCreateContext())\r\n\t\t.contextWrite(TransactionContextManager.getOrCreateContextHolder());\r\n\t}\r\n\r\n\tprivate Throwable unwrapIfResourceCleanupFailure(Throwable ex) {\r\n\t\tif (ex instanceof RuntimeException &&\r\n\t\t\t\tex.getCause() != null &&\r\n\t\t\t\tex.getMessage().startsWith(""Async resource cleanup failed"")) {\r\n\t\t\treturn ex.getCause();\r\n\t\t}\r\n\t\treturn ex;\r\n\t}\r\n```\r\n\r\nBut if I do not use `awaitSingle` like the below code, the test works what I have expected.\r\n\r\n```kt\r\n@DataR2dbcTest\r\nclass TestTransaction {\r\n    @Autowired\r\n    private lateinit var txManager: ReactiveTransactionManager\r\n\r\n    @OptIn(ExperimentalCoroutinesApi::class)\r\n    @Test\r\n    fun test1() = runTest {\r\n        TransactionalOperator.create(txManager).executeAndAwait {\r\n            f1()\r\n        }\r\n    }\r\n\r\n    suspend fun f1(){\r\n        throw NoSuchElementException()\r\n    }\r\n}\r\n```\r\n\r\nShould I not use `Mono.awaitSingle` in ReactiveTransactionManager?', 'A failure to commit a reactive transaction will complete the transaction and clean up resources. Executing a rollback at that point is invalid, which causes an `IllegalTransactionStateException` that masks the cause of the commit failure.\r\n\r\nThis change restructures `TransactionalOperatorImpl` and `ReactiveTransactionSupport` to avoid executing a rollback after a failed commit. While there, the `Mono` transaction handling in `TransactionalOperator` is simplified by moving it to a default method on the interface.\r\n\r\nSee gh-27523']","['closed', 'closed', 'closed']","[1, 3, 4]","['@mp911de Could you please review the latest version of this PR and confirm (or not) you are ok for merging it (I will also have a deeper look after your confirmation)?', '@EnricSala I have rebased the branch on top of `main` in https://github.com/sdeleuze/spring-framework/tree/gh-27523, but I see an error in `CoroutinesTransactionInterceptorTests`, could you please have a look and maybe rebased this PR on top of `main` potentially using my branch as a basis?', '@sdeleuze I have rebased this PR on top of `main` and added a commit to fix `CoroutinesTransactionInterceptorTests`. Please check if this small fix makes sense :)', 'Merged via edf0ae77e502dd0e5b85a4fa8fc08d3e516d990a after @simonbasle and @mp911de green light. Thanks for contributing this and for your patience @EnricSala. Please test snapshots to check everything looks fine for your use cases.']"
9dfa46f6902b7b134847ae20bc88b4a3968a99bb,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Remove_Condition,"-			// If the URI is for a ""resource"" in the GraalVM native image file system, we have to
-			// ensure that the root directory does not end in a slash while simultaneously ensuring
-			// that the root directory is not an empty string (since Path#resolve throws an
-			// ArrayIndexOutOfBoundsException in a native image if the initial Path is created
-			// from an empty string).
-			String scheme = rootDirUri.getScheme();
-			String path = rootDirUri.getPath();
-			if (""resource"".equals(scheme) && (path.length() > 1) && path.endsWith(""/"")) {
-				path = path.substring(0, path.length() - 1);
-				// Retain the fragment as well, since root folders in the native image
-				// file system are indexed via the fragment (e.g., resource:/#1).
-				rootDirUri = new URI(scheme, path, rootDirUri.getFragment());
-			}",6,condition,Remove GraalVM workaround in PathMatchingResourcePatternResolver,"Tested successfully using the following locally built GraalVM dev build.

OpenJDK Runtime Environment GraalVM 22.3.0-dev (build 17.0.5+5-jvmci-22.3-b07)

Closes gh-29214
",,29214,1,['Remove GraalVM workaround in PathMatchingResourcePatternResolver'],"['This is a follow up to #29163.\r\n\r\nOnce https://github.com/oracle/graal/issues/5080 and https://github.com/oracle/graal/issues/5081 have been resolved (tentatively in GraalVM 22.3), we should be able to remove the following workaround in `PathMatchingResourcePatternResolver`.\r\n\r\nhttps://github.com/spring-projects/spring-framework/blob/6cb131ac7629cfda489d4d2367a36d44ee7b5ed2/spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java#L744-L750']",['closed'],[0],[]
9f2970bc5c06b443c12b7825a3180ef2fa292474,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/vendor/HibernateJpaVendorAdapter.java,Condition_Change,"+import org.hibernate.dialect.MySQLDialect;
-		else {  // Hibernate 6.2 aligned
+		else {  // Hibernate 6.2+ aligned
-				case MYSQL -> MySQL57Dialect.class;
+				case MYSQL -> MySQLDialect.class;",5,condition,Use non deprecated MySQL dialect for Hibernate 6+,"This commit fixes the Hibernate dialect lookup for MySQL as it was
previously using a deprecated dialect that has been removed in the most
recent Hibernate version.

Closes gh-31889
",,31889,1,['ClassNotFoundException: org.hibernate.dialect.MySQL57Dialect with Hibernate 6.4'],"[""After updating my project from Spring Boot Version 3.2.0 to 3.2.1, I am no longer able to start my application.\r\nMy application uses Spring JPA (via `spring-boot-starter-data-jpa`) and a MySQL 8.2 database.\r\n\r\nDuring start-up, I receive the following error message:\r\n```\r\n[ERROR] 2023-12-22 10:44:44 SpringApplication - Application run failed\r\njava.lang.ClassNotFoundException: org.hibernate.dialect.MySQL57Dialect\r\n        at java.base/java.net.URLClassLoader.findClass(Unknown Source) ~[na:na]\r\n        at java.base/java.lang.ClassLoader.loadClass(Unknown Source) ~[na:na]\r\n        at org.springframework.boot.loader.net.protocol.jar.JarUrlClassLoader.loadClass(JarUrlClassLoader.java:104) ~[XXX]\r\n        at org.springframework.boot.loader.launch.LaunchedClassLoader.loadClass(LaunchedClassLoader.java:91) ~[XXX]\r\n        at java.base/java.lang.ClassLoader.loadClass(Unknown Source) ~[na:na]\r\n        ... 28 common frames omitted\r\nWrapped by: java.lang.NoClassDefFoundError: org/hibernate/dialect/MySQL57Dialect\r\n        at org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter.determineDatabaseDialectClass(HibernateJpaVendorAdapter.java:203) ~[spring-orm-6.1.2.jar!/:6.1.2]\r\n        at org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter.buildJpaPropertyMap(HibernateJpaVendorAdapter.java:148) ~[spring-orm-6.1.2.jar!/:6.1.2]\r\n        at org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter.getJpaPropertyMap(HibernateJpaVendorAdapter.java:132) ~[spring-orm-6.1.2.jar!/:6.1.2]\r\n        at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:365) ~[spring-orm-6.1.2.jar!/:6.1.2]\r\n        at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:352) ~[spring-orm-6.1.2.jar!/:6.1.2]\r\n        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.1.jar!/:3.2.1] [11 skipped]\r\n        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762) ~[spring-boot-3.2.1.jar!/:3.2.1]\r\n        ... 21 common frames omitted\r\nWrapped by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name 'entityManagerFactory' defined in class path resource [XXX/MySqlConfig.class]: org/hibernate/dialect/MySQL57Dialect\r\n        at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:146) ~[spring-boot-3.2.1.jar!/:3.2.1] [10 skipped]\r\n        at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762) ~[spring-boot-3.2.1.jar!/:3.2.1]\r\n        at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464) ~[spring-boot-3.2.1.jar!/:3.2.1]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[spring-boot-3.2.1.jar!/:3.2.1]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1358) ~[spring-boot-3.2.1.jar!/:3.2.1]\r\n        at org.springframework.boot.SpringApplication.run(SpringApplication.java:1347) ~[spring-boot-3.2.1.jar!/:3.2.1]\r\n        at XXX.Main.main(Main.java:53) ~[!/:na]\r\n        at org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:91) ~[XXX] [2 skipped]\r\n        at org.springframework.boot.loader.launch.Launcher.launch(Launcher.java:53) ~[XXX]\r\n        at org.springframework.boot.loader.launch.JarLauncher.main(JarLauncher.java:58) ~[XXX]\r\n```\r\n\r\nI looks like Hibernate 6.4 removed the `MySQL57Dialect` class (or at least moved it to the `hibernate-community-dialects` artifact). When I set the property `<hibernate.version>6.3.2.Final</hibernate.version>` in my pom.xml file, my application starts without errors.\r\n\r\nI created a repository with a test case to reproduce this issue: https://github.com/HennyWilly/springboot321-hibernate64-bug\r\n\r\nPS: This is my first issue, so I am not sure if this is the right repository or if I should have opened this issue inside the spring-framework repository.""]",['closed'],[5],"[""Running your sample with Hibernate 6.3.2 shows the following:\r\n\r\n```\r\n[main] WARN org.hibernate.orm.deprecation -- HHH90000025: MySQL57Dialect does not need to be specified explicitly using 'hibernate.dialect' (remove the property setting and it will be selected by default)\r\n[main] WARN org.hibernate.orm.deprecation -- HHH90000026: MySQL57Dialect has been deprecated; use org.hibernate.dialect.MySQLDialect instead\r\n```\r\n\r\nIt seems Spring Framework is still referring to this class in `HibernateJpaVendorAdapter` and does not handle Hibernate 6.4  compatibility on dialects. I'll transfer the issue to the Framework project for consideration.\r\n\r\n"", 'Thanks for the report.\r\n\r\nIn the `MainTests` you are creating the EMF manually, which disables some of Spring Boot\'s auto-configuration. For quite some time now, Spring Boot configures the JPA infrastructure so that the provider is responsible for looking up the proper dialect. By forcing the database platform to be `MYSQL` you\'re opting out of that.\r\n\r\nThere are two ways to fix this. You can either remove the explicit platform in `jpaVendorAdapter`, or you can fix the wrong dialect lookup by adding the following to the `jpaVendorAdaptor` method:\r\n\r\n```java\r\nhibernateJpaVendorAdapter.setDatabasePlatform(""org.hibernate.dialect.MySQLDialect"");\r\n```\r\n\r\nArguably, the former is preferred as it is more in line with what the application does (let the JPA provider detect the infrastructure). We\'ll fix the MySQL dialect in the next maintenance release.', '> Thanks for the report.\r\n> \r\n> In the `MainTests` you are creating the EMF manually, which disables some of Spring Boot\'s auto-configuration. For quite some time now, Spring Boot configures the JPA infrastructure so that the provider is responsible for looking up the proper dialect. By forcing the database platform to be `MYSQL` you\'re opting out of that.\r\n> \r\n> There are two ways to fix this. You can either remove the explicit platform in `jpaVendorAdapter`, or you can fix the wrong dialect lookup by adding the following to the `jpaVendorAdaptor` method:\r\n> \r\n> ```java\r\n> hibernateJpaVendorAdapter.setDatabasePlatform(""org.hibernate.dialect.MySQLDialect"");\r\n> ```\r\n> \r\n> Arguably, the former is preferred as it is more in line with what the application does (let the JPA provider detect the infrastructure). We\'ll fix the MySQL dialect in the next maintenance release.\r\n\r\nThis didn\'t resolve the problem for the Oracle12cDialect for me.\r\n\r\n\r\nI have specified:\r\n`  datasource:\r\n      type: com.zaxxer.hikari.HikariDataSource\r\n      driver-class-name: oracle.jdbc.OracleDriver`\r\n\r\nand\r\n`spring: \r\n    jpa:\r\n      properties:\r\n        hibernate:\r\n          dialect: org.hibernate.dialect.OracleDialect`\r\n\r\n\r\nI\'m not creating any custom HibernateJpaVendorAdapter and I also don\'t see the warning [bclozel](https://github.com/bclozel) posted. \r\n\r\nI\'ve also tried running without those properties, to no avail.', '@barbetb the arrangement that you\'ve quoted is quite specific so commenting with a different arrangement and stating ""didn\'t resolve the problem"" is not very helpful. The warning that Brian referenced is about MySQL for a start, and for an older Hibernate version. \r\n\r\nAll in all, this is confusing and you probably want to ask for support on StackOverflow first. If you believe you\'ve found a different bug, then a separate issue is needed with a small sample that demonstrates the problem you\'re experiencing.', ""@snicoll my apologies. I got a bit confused with all the tickets opened for this issue. \r\n\r\nI had the same issue as https://github.com/spring-projects/spring-framework/issues/31892 and that issue refered to this one. I now see you made fix for the oracle one here https://github.com/spring-projects/spring-framework/commit/03907095776eadf67a04dbaf62ffb3fe32125232  , but it hasn't been released yet.\r\n""]"
9fec516560741a01c9049b5526113f2a94c72387,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,Condition_Change,"+import org.springframework.core.NativeDetector;
-		if (ClassUtils.isPresent(""org.crac.Core"", getClass().getClassLoader())) {
+		if (!NativeDetector.inNativeImage() && ClassUtils.isPresent(""org.crac.Core"", getClass().getClassLoader())) {",3,condition,Skip CRaC support with native images,"Skip CRaC support with native images to avoid compiling related
infrastructure to the native image and to fix tests via
gh-30422.

See gh-30242
",,"30422, 30242",2,"['Update `RuntimeHintsAgentPlugin` to use the native image code path', 'CRaC Resource adapter for bean lifecycle in application context']","['`RuntimeHintsAgentPlugin` purpose is to verify that reflective invocations expected match the ones performed.\r\n\r\ngh-30242 introduces a code path where the reflective invocation is skipped when running on native.\r\n\r\nThis issue set the system property `org.graalvm.nativeimage.imagecode` to `runtime` when running runtime tests with the agent in order to make sure the code path tested for those tests is the native one.', ""In addition to our CRaC-oriented revisiting of the existing contracts for the bean lifecycle in an application context (#29921), we consider providing an `org.crac.Resource` adapter for Spring's `DefaultLifecycleProcessor` out of the box - e.g. as an implicit optional part of the `DefaultLifecycleProcessor` implementation or as a dedicated subclass of it. This allows for stopping/restarting of beans in an application context on a fine-grained basis, with some tightening of the `Lifecycle` contract and possibly even some dedicated extensions in `SmartLifecycle` that participating component implementations may rely on.""]","['closed', 'closed']","[0, 0]",[]
a02fd7c9953b8e7f629f4d3a66a450a13341576b,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,Add_Condition,"-		ModelAndView mav = null;
+		ModelAndView mav;
+			else {
+				// No HttpSession available -> no mutex necessary
+				mav = invokeHandlerMethod(request, response, handlerMethod);
+			}
+			// No synchronization on session demanded at all...",5,condition,RequestMappingHandlerAdapter properly invokes handler method in case of no session as well,"Issue: SPR-13999
",,18572,1,['Regression: RequestMappingHandlerAdapter with synchronizeOnSession=true calls invokeHandlerMethod twice [SPR-13999]'],"['**[Isto Nikula](https://jira.spring.io/secure/ViewProfile.jspa?name=iston)** opened **[SPR-13999](https://jira.spring.io/browse/SPR-13999?redirect=false)** and commented\n\nFirst call on line 726, second 731.\n\nhttps://github.com/spring-projects/spring-framework/blob/4.2.x/spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java#L723;L731\n\n---\n\n**Affects:** 4.2.5\n\n**Issue Links:**\n- #18555 Regression: `@ResponseBody` with Map result returns JSON array twice in case of synchronizeOnSession=true (_**""is duplicated by""**_)\n- #18708 Handler method is called twice when synchronizeOnSession is true in RequestMappingHandlerAdaptor (_**""is duplicated by""**_)\n- #18440 ResponseEntity CacheControl ignored / extended by RequestMappingHandlerAdapter\n\n']",['closed'],[1],['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis turns out to be a regression caused by the revised HTTP header handling introduced in 4.2.5 (#18440). Fixed for 4.2.6 now.\n\nJuergen\n']
a1529d498e004b3e3b1aa123b57a07435e6d644d,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java,Condition_Change,"-	@SuppressWarnings(""unchecked"")
+			boolean alreadyReceivedReply = this.hasReceived;
-			else if (this.hasReceived) {
+			else if (alreadyReceivedReply) {",4,condition,Fix possible GenericMsgTemplate race condition,"Fix a potential race condition with GenericMessagingTemplate's inner
TemporaryReplyChannel class.

Prior to this commit the `hasReceived` member variable was read after
calling `replyLatch.countDown()`.

Issue: SPR-11206
",,15831,1,['Potential race conditional with GenericMessagingTemplate [SPR-11206]'],['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-11206](https://jira.spring.io/browse/SPR-11206?redirect=false)** and commented\n\nA potential concurrency issue has been fixed in SI and should be ported:\n\nhttps://github.com/spring-projects/spring-integration/pull/991/files?w=1\n\n\n---\n\n**Affects:** 4.0 RC2\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a1529d498e004b3e3b1aa123b57a07435e6d644d\n'],['closed'],[0],[]
a2af5a90dc14217b02246b2d733f9c4d25b17600,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/UrlFilenameViewController.java,Remove_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-		String viewName = this.viewNameCache.get(uri);
-		if (viewName == null) {
-			viewName = extractViewNameFromUrlPath(uri);
-			viewName = postProcessViewName(viewName);
-			this.viewNameCache.put(uri, viewName);
-		}
-		return viewName;
+		return this.viewNameCache.computeIfAbsent(uri, u -> postProcessViewName(extractViewNameFromUrlPath(u)));",8,condition,Simplify UrlFileNameViewController#getViewNameForUrlPath(),Closes gh-24419,,24419,1,['Simplify UrlFileNameViewController#getViewNameForUrlPath()'],['It can be simplify'],['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks']
a2f5e1254e3ccf190ec559492a33ca87c47e54d3,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"+					int prefixIndex = filePath.indexOf(':');
+					if (prefixIndex == 1) {
+						// Possibly ""c:"" drive prefix on Windows, to be upper-cased for proper duplicate detection
+						filePath = filePath.substring(0, 1).toUpperCase() + filePath.substring(1);
+					}",4,condition,Drive letter case alignment in addClassPathManifestEntries,"Issue: SPR-16117
",,20665,1,['`PathMatchingResourcePatternResolver` returns duplicate resources when using `classpath*:` prefix [SPR-16117]'],"['**[Udayakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=udaikumar26)** opened **[SPR-16117](https://jira.spring.io/browse/SPR-16117?redirect=false)** and commented\n\nI am working on a drools project. The goal is to search all the rules(*.rdrl) files in the classpath and write it into the KieFileSystem. The rules file(.rdrl) will be present under multiple jar files. These jar files were added as a dependency in the drools project.\nBelow is the code that is used to find all the .rdrl files.\n\nClassLoader classloader = this.getClass().getClassLoader();\nResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver(classloader);\n\nfor (Resource file : resourcePatternResolver.getResources(""classpath*:/**/*.rdrl"")) {\nSystem.out.println(""name: "" + file.getURL());\nkieFileSystem.write(ResourceFactory.newUrlResource(file.getURL()));\n}\n\nBelow is the sample output printed by the above code\n\nname: jar:file:/C:/mvn_repo/com/myteam/OOP_Modular/1.0.0/OOP_Modular-1.0.0.jar!/com/myteam/oop_modular/OOP_MOD_Network_In_Network.rdrl\n\nname: jar:file:/C:/mvn_repo/com/myteam/OOP_Modular/1.0.0/OOP_Modular-1.0.0.jar!/com/myteam/oop_modular/OOP_MOD_Individual1.rdrl\n\nname: jar:file:c:\\mvn_repo\\com\\myteam\\OOP_Modular\\1.0.0\\OOP_Modular-1.0.0.jar!/com/myteam/oop_modular/OOP_MOD_Network_In_Network.rdrl\n\nname: jar:file:c:\\mvn_repo\\com\\myteam\\OOP_Modular\\1.0.0\\OOP_Modular-1.0.0.jar!/com/myteam/oop_modular/OOP_MOD_Individual1.rdrl\n\nAs seen from the above output there are two entries for the same files OOP_MOD_Network_In_Network.rdrl and OOP_MOD_Individual1.rdrl. When you look at the output, the path is exactly same except that one starts with /C: and other with c:\n\nBecause of this issue, since i am trying to write each rule twice into kiefilesystem, it throws an exception saying ""Duplicate rule name"".\n\nNote: When using pattern such as (""classpath*:com/**/*.rdrl""), the resources are returned only once but we are not sure if the rules file will be present only under \'com\', it can also be under \'org\' or anything else.\n\nSystem: Windows 7, JDK 1.8\n\n---\n\n**Affects:** 4.3.12, 5.0.1\n\n**Issue Links:**\n- #20539 PathMatchingResourcePatternResolver provides duplicate resources when using classpath* prefix combined with ant-style\n- #18260 PathMatchingResourcePatternResolver does not consider manifest based classpaths\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8904de2149ef315e39d2464fa4283322d6137130, https://github.com/spring-projects/spring-framework/commit/a2f5e1254e3ccf190ec559492a33ca87c47e54d3\n\n**Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)\n']",['closed'],[11],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nLooks like it\'s not the difference in slashes but the lower-case ""c:"" versus upper-case ""C:"" that\'s causing `UrlResource.equals` to not match here... Let\'s see what we can do about it.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe're upper-casing drive letter prefixes in `addClassPathManifestEntries` for proper duplicate detection now. Please give the upcoming `5.0.2.BUILD-SNAPSHOT` a try; I'll backport it to 4.3.13 if it works for you.\n"", '**[Udayakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=udaikumar26)** commented\n\nHello,\nThanks for the prompt fix. i am stuck with downloading the artifactory. I tried by defining spring repo into the settings.xml however i got the following error,\n\nNon-resolvable import POM: Could not transfer artifact org.springframework:spring-framework-bom:pom:5.0.2.BUILD-SNAPSHOT from/to repository.spring.snapshot (http://repo.spring.io/snapshot): connect timed out\n\nCan you help.\n', '**[Udayakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=udaikumar26)** commented\n\nFound a strange thing. This issue do not exist in 4.2.5.RELEASE\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThe above looks like a temporary problem with the snapshot repository. Trying at a later point might work...\n\nAs for this not occurring with 4.2.5, this is expect since Spring\'s evaluation of the ""java.class.path"" manifest entry only came in 4.3: #18260\n', '**[Udayakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=udaikumar26)** commented\n\nI was able to download the artifact and install into local maven repo. I am finding it hard to test because we are using spring boot and versions are getting messed up. I am not able to use the downloaded artifact standalone.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll), overriding the Spring Framework version underneath Boot to a snapshot should work under normal circumstances? Any advice?\n', '**[Udayakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=udaikumar26)** commented\n\nspring-framework-bom-5.0.2.BUILD-SNAPSHOT is missing\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've noticed that the last build hasn't properly completed, so would have received an outdated snapshot in any case. Maybe that's also the reason why the last published snapshot appears inconsistent. In any case, I've triggered a new build which should be ready and published in about half an hour.\n"", '**[Udayakumar](https://jira.spring.io/secure/ViewProfile.jspa?name=udaikumar26)** commented\n\nHi Hoeller,\nThanks for the support. Finally i was able to test with the snapshot. It seem to be working. Hope it works for all scenarios.\nKindly let me know if it will be available in 4.3.12.RELEASE version. Please make it available as part of spring boot versions as well.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood to hear, thanks for the feedback!\n\nI'll backport this to 4.3.13 tomorrow, along with a few other refinements. Both 5.0.2 and 4.3.13 are scheduled for release on November 15th, with corresponding Boot 2.0 RC1 and Boot 1.5.9 releases following soon thereafter.\n""]"
a434903a2a5483b4d0f7976cb37957e4771b1e88,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/handler/LoggingWebSocketHandlerDecorator.java,Remove_Condition,"-		if (logger.isDebugEnabled()) {
-			logger.debug(""Transport error for "" + session + "": "" + exception);
-		}
-		else if (logger.isTraceEnabled()) {
-			logger.debug(""Transport error for "" + session, exception);
+		if (logger.isErrorEnabled()) {
+			logger.error(""Transport error for "" + session, exception);",7,condition,Adjust log level in LoggingWebSocketHandlerDecorator,,,,0,N/A,N/A,N/A,N/A,N/A
a4968b9015217ee8116bef7f77f5da4d776047fd,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Add_Condition,"+		BeanDefinition oldBeanDefinition;
+
-			BeanDefinition oldBeanDefinition = this.beanDefinitionMap.get(beanName);
+			oldBeanDefinition = this.beanDefinitionMap.get(beanName);
-		resetBeanDefinition(beanName);
+		if (oldBeanDefinition != null || containsSingleton(beanName)) {
+			resetBeanDefinition(beanName);
+		}
-		// Remove any assumptions about by-type mappings.
-		clearByTypeCache();
-",10,condition,DefaultListableBeanFactory's registerBeanDefinition only calls resetBeanDefinition in case of pre-existing bean definition or pre-existing singleton instance,"Issue: SPR-8318
",,12966,1,['XmlBeanDefinitionReader runs 10x slower due to resetBeanDefinition check [SPR-8318]'],"[""**[Matt McQuarrie](https://jira.spring.io/secure/ViewProfile.jspa?name=mattmcq)** opened **[SPR-8318](https://jira.spring.io/browse/SPR-8318?redirect=false)** and commented\n\nWhen trying to load 700+ beans using:\norg.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions\n\nit takes over 5 min using the 2.5.3 (or 3.0.5) library, but only 24 sec using the 2.0.4 library. This seems to only occur on the AIX JVM.\n\nPlease see the attached zip with example scripts loadbeans256.sh and loadbeans204.sh\n\nWe have also tested with spring 3.0.5 and the results are similar to 2.5.6.\n\nThanks for your help with this. This is the first time I've filed a defect so please let me know if I'm missing anything.\n\n- Matt\n\n\n\n---\n\n**Affects:** 2.5.6, 3.0.5\n\n**Attachments:**\n- [DefaultListableBeanFactory.java.diff](https://jira.spring.io/secure/attachment/18236/DefaultListableBeanFactory.java.diff) (_2.78 kB_)\n- [LoadBeansExample.zip](https://jira.spring.io/secure/attachment/18134/LoadBeansExample.zip) (_8.46 MB_)\n- [LoadBeansExamplePatched.zip](https://jira.spring.io/secure/attachment/22110/LoadBeansExamplePatched.zip) (_9.91 MB_)\n- [Spring XML Parsing.png](https://jira.spring.io/secure/attachment/18235/Spring+XML+Parsing.png) (_55.75 kB_)\n\n**Backported to:** [3.2.11](https://github.com/spring-projects/spring-framework/milestone/99?closed=1)\n\n1 votes, 6 watchers\n""]",['closed'],[7],"[""**[Matt McQuarrie](https://jira.spring.io/secure/ViewProfile.jspa?name=mattmcq)** commented\n\nAfter further testing this issue seems to occur on all JVMs. HotSpot, JRockit, and IBM's JVM seem to have this issue with varying severities. For example, HotSpot takes 10x longer to load the example project's beans while IBM's JVM takes 20x longer.\n"", '**[Jonathan Keller](https://jira.spring.io/secure/ViewProfile.jspa?name=kellerj)** commented\n\nAdding some more information on this one:\n\nI also just did a little research into the startup time problem of KFS and the difference between Spring 2.0.4 and 2.5.6.  The problem comes partially in that we have almost 100,000 beans defined between all our XML files, not counting those which are in the Rice jars.  But more than that is some code that Spring added by 2.5.6 which is intended to improve the handling of parent beans.  (They seemed to be working before, so I don\'t know what changed that made this necessary.)\n\nThe problem is a new line at the end of the registerBeanDefinition() method:\n\nresetBeanDefinition(beanName);\n\nThis method is designed to find any beans for which the current bean is a parent and ""reset"" the definition in order to ensure that the proper values are being inherited.  This unfortunately requires iterating over **all** beans previously defined.  In the selection of the parsing I traced below, which processed about 6,000 bean definitions, there were almost 17,000,000 retrievals of beans simply to check if the current bean was its parent.  This method is recursive, so if there is a parent, then it does the iteration all over again.\n\nSo, it seems that the more beans which use the inheritance which makes Spring so useful, the more we impact performance.  It seems to be that a fix for this would be for Spring to index the beans by their parents (another HashMap?) so such extensive iteration would not be necessary.  It seems it would be fairly easy to update this method (and a couple others) to maintain/check this new cache to greatly reduce the application startup time.\n', ""**[Jonathan Keller](https://jira.spring.io/secure/ViewProfile.jspa?name=kellerj)** commented\n\nI'm attaching a diff file containing the changes I made locally to the DefaultListableBeanFactory class to implement a possible solution.  This did immediately decrease the time needed to process all our beans.\n\nIt seems to work for the use case which we have for Spring.  I don't know if there are other edge cases that may exist for which it could break, but it may be a start.\n\nThanks.\n\ndiff DefaultListableBeanFactory-original-spring-2.5.6.txt DefaultListableBeanFactory.java -b -u\n"", '**[John Walker](https://jira.spring.io/secure/ViewProfile.jspa?name=john.a.walker@colostate.edu)** commented\n\nVM Ware has requested to become a Commercial Affliate for Kuali Open Source. It would be helpful to the Kuali Community if someone at VMWare/Spring could address the slowness problem experienced/witnessed between versions 2.0.4 and 2.5.6. Thanks.\n', '**[Kristina Taylor](https://jira.spring.io/secure/ViewProfile.jspa?name=kbit)** commented\n\nKuali Rice has recently done a Spring 4.0.5 upgrade but is still experiencing this problem.  We verified that the patch submitted by Jonathan Keller, when merged with the Spring 4.0.5 version, brings our times back to normal from the 10x slowdown we were experiencing.  Please reconsider applying this patch as it is a pretty major issue with performance.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nSorry that this issue remained unnoticed for so long... We'll pick it up again now for the 4.1 RC phase, with backports possibly following.\n\nJuergen\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've optimized registerBeanDefinition to only call resetBeanDefinition in case of a pre-existing bean definition or a pre-existing singleton instance. This means that resetBeanDefinition won't be called at all for regular early bean definition registration phases (such as with XML file parsing).\n\nIntroducing a parent-children association cache would be an option as well but requires clean management of both ends of that association, i.e. if a parent gets removed or one of the children gets removed... That didn't seem to be worth it, if the 90% case can be addressed as above.\n\nJuergen\n""]"
a4c157fc09d3169f44901ee8969f3dacc73aaccb,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/NettyWebSocketSessionSupport.java,Add_Condition,"+		if (message.getNativeMessage() != null) {
+			return message.getNativeMessage();
+		}",3,condition,Check for native WebSocket message,"In addition to the changes in
313a7836b091d20dbb9763b3677d559fea32d13d to support passing on a
the underlying WebSocket message, this commits checks for its
availability.

Closes gh-25099
",,25099,1,"[""WebSocketMessage's methods `fromMessage` and `toFrames` ignore  Netty WebSocketFrame metadata ""]","['**Affects:** LATEST (since ReactorNettyWebSocketSession introduced)\r\n\r\n## Expected Behavior\r\nAdd metadata property to the WebSocketMessage POJO. And by-pass Netty WebSocketFrame metadata in ReactorNettyWebSocketSession implementation.\r\n\r\n## Motivation\r\nTo allow proxy compressed WebSocket frames through Spring Cloud Gateway metadata of the [WebSocketFrame](https://github.com/netty/netty/blob/f66412c84c57f77915accb003dec8dc9b3896afe/codec-http/src/main/java/io/netty/handler/codec/http/websocketx/WebSocketFrame.java#L31-L36)  (`rsv` and  `finalFragment`) should be processed. This will open the possibility to proxy frames ""as is"" and avoid unwanted decompress\\compress cycles inside the proxy service.\r\n\r\nThis will be also useful for the Undertow implementation soon since the migration to Netty was announced(http://undertow.io/blog/2019/04/15/Undertow-3.html)\r\nMetadata can be useful for other implementation in the future.\r\n \r\n## Possible Solution\r\nSince internal Spring WebSocketMessage is the generic POJO for the multiple servers I\'d propose adding some metadata to the WebSocketMessage which and use it for any metadata needs to be passed through the `toMessage` and `toFrame` methods. \r\n\r\nFor the specific ReactorNettyWebSocketSession implementation it may looks like:\r\n```java\r\n//avoided constants similar extractions\r\n    protected WebSocketMessage toMessage(WebSocketFrame frame) {\r\n        DataBuffer payload = bufferFactory().wrap(frame.content());\r\n\r\n        return new WebSocketMessage(messageTypes.get(frame.getClass()), payload,extractFrameMetadata(frame));\r\n    }\r\n\r\n    private void extractFrameMetadata(WebSocketFrame frame) {\r\n        Map<String,Object> frameMetadata = new HashMap<>();\r\n        frameMetadata.put(""rsv"",frame.rsv());\r\n        frameMetadata.put(""finalFragment"", frame.isFinalFragment());\r\n    }\r\n\r\n    protected WebSocketFrame toFrame(WebSocketMessage message) {\r\n        ByteBuf byteBuf = NettyDataBufferFactory.toByteBuf(message.getPayload());\r\n        if (WebSocketMessage.Type.TEXT.equals(message.getType())) {\r\n            return new TextWebSocketFrame(byteBuf,message.getMetadataEntry(""rsv""), message.getMetadataEntry(""finalFragment""));\r\n        }\r\n        else if (WebSocketMessage.Type.BINARY.equals(message.getType())) {\r\n            return new BinaryWebSocketFrame(byteBuf,message.getMetadataEntry(""rsv""), message.getMetadataEntry(""finalFragment""));\r\n        }\r\n        else if (WebSocketMessage.Type.PING.equals(message.getType())) {\r\n            return new PingWebSocketFrame(byteBuf,message.getMetadataEntry(""rsv""), message.getMetadataEntry(""finalFragment""));\r\n        }\r\n        else if (WebSocketMessage.Type.PONG.equals(message.getType())) {\r\n            return new PongWebSocketFrame(byteBuf,message.getMetadataEntry(""rsv""), message.getMetadataEntry(""finalFragment""));\r\n        }\r\n        else {\r\n            throw new IllegalArgumentException(""Unexpected message type: "" + message.getType());\r\n        }\r\n    }\r\n```\r\n']",['closed'],[5],"['We could pass the entire frame into `WebSocketMessage` and expose it like so:\r\n```java\r\npublic Object getNativeMessage() { ... }\r\n```\r\n', 'Hi @rstoyanchev , First of all thanks for your response.\r\nIt may be good in some cases to pass entire frame but from other perspective it can be, for example, a room to unefficient body consumption, or some other unefficient operations with frame data. Usually I prefer a wat which is used in netty/reactor netty projects, which allow to perform potentially unefficient operations only through their helper methods, and that\'s why i proposed to bypass relevant metadata only here.\r\nIn this case in seems that frame do have only body and ""metadata"", (rsv and finalFragment properties)\r\nWDYT?\r\nIn any case passing complete frame will solve my case completelly as well.\r\n  ', ""Spring's `WebSocketMessage` already exposes the `ByteBuf` content of the Netty `WebSocketFrame`.  So in regards to body consumption, I don't see anything that changes. It's more about providing access to the rest of what's in the `WebSocketFrame` in a way that is simple (without any indirection) and is also future proof in case new fields are exposed."", ""Hi @rstoyanchev  \r\nUnfortunately, you've fixed only half of the original issue.\r\nsince the method -  `toFrame` does not get the data from the original message and `rsv` and `isFinalFragment` fragment is still missing when user uses `toFrame` method through  WebSocketClient.\r\nand also in Spring Cloud Gateway  (where I originally discovered this issue), the original problem will be still actual."", 'So it should be something like this then?\r\n```java\r\nprotected WebSocketFrame toFrame(WebSocketMessage message) {\r\n\tif (message.getNativeMessage() != null) {\r\n\t\treturn message.getNativeMessage();\r\n\t}\r\n\t// the rest of toFrame...\r\n}\r\n```\r\nAs for Spring Cloud Gateway I think that would have to be changed there in a similar way I think.']"
a537eb3a6a763eb1812afaa1ccfc56a3dadd6cb0,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,Condition_Change,"-		for (Annotation ann : this.getAnnotations()) {
+		for (Annotation ann : getAnnotations()) {
-			return ObjectUtils.nullSafeEquals(this.getElementTypeDescriptor(), other.getElementTypeDescriptor());
+			return ObjectUtils.nullSafeEquals(getElementTypeDescriptor(), other.getElementTypeDescriptor());
-			return ObjectUtils.nullSafeEquals(this.getMapKeyTypeDescriptor(), other.getMapKeyTypeDescriptor()) &&
-					ObjectUtils.nullSafeEquals(this.getMapValueTypeDescriptor(), other.getMapValueTypeDescriptor());
+			return ObjectUtils.nullSafeEquals(getMapKeyTypeDescriptor(), other.getMapKeyTypeDescriptor()) &&
+					ObjectUtils.nullSafeEquals(getMapValueTypeDescriptor(), other.getMapValueTypeDescriptor());",8,iteration,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
a57d6ba5f3cf8afd6f333435d47035d5fe61fcf3,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,Add_Condition,"+		// Shortcut if there is no work to do
+		if (pathToUse.indexOf('.') == -1) {
+			return pathToUse;
+		}
+",4,condition,Optimize StringUtils.cleanPath,"Add an early exit to `StringUtils.cleanPath` to save array creating and
string concatenation. With a typical Spring application, the `cleanPath`
method can be called over 600 times, often with a path constructed by
a `ClassPathResource` that is likely to already be clean.

Closes gh-22568
",,22568,1,['Optimize StringUtils.cleanPath'],['The `StringUtils.cleanPath` method is called ~600 times with a typical Spring Boot application and mostly with paths that are already correct. I think we can safely bypass String splitting and re-concatenation if the path does not contain `.`.'],['closed'],[0],[]
a603779f33d47cd9ac87919ccc26f8c2d279fa40,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/UndertowHeadersAdapter.java,Add_Condition,"+import java.util.ArrayList;
+ * @author Sam Brannen
-			this.headers.remove((String) key);
+			Collection<String> removed = this.headers.remove((String) key);
+			if (removed != null) {
+				return new ArrayList<>(removed);
+			}",6,condition,Return previous value in UndertowHeadersAdapter's remove() method,"Prior to this commit, UndertowHeadersAdapter's remove() method violated
the java.util.Map contract by always returning null.

This commit fixes this by returning the previous list stored under the
specified key, and otherwise returning null if no previous value was
present.

Closes gh-27592
",,27592,1,"[""UndertowHeadersAdapter's remove() method violates Map contract""]","['The `remove(Object key)` method in `UndertowHeadersAdapter` should return any previous value stored under the key; however, the current implementation always returns `null`.\r\n\r\nThis has already been fixed in `main` as part of commit https://github.com/spring-projects/spring-framework/commit/785212d67655119a71d3ad700e90c6e09e7c6361#diff-8be9fc708f521a68eb27761d98ddd6ebc62ec5431095673c7273647a538fae6bR132-R136.']",['closed'],[0],[]
a6b0b6e27945dcf3c84f2c8ae49969470a1c8c76,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompHeaderAccessor.java,Remove_Condition,"+import org.springframework.util.CollectionUtils;
- * A {@code MessageHeaderAccessor} to use when creating a {@code Message} from a
- * decoded STOMP frame, or when encoding a {@code Message} to a STOMP frame.
+ * A {@code MessageHeaderAccessor} to use when creating a {@code Message} from
+ * a decoded STOMP frame, or when encoding a {@code Message} to a STOMP frame.
- * <p>When created from STOMP frame content, the actual STOMP headers are stored
- * in the native header sub-map managed by the parent class
+ * <p>When created from STOMP frame content, the actual STOMP headers are
+ * stored in the native header sub-map managed by the parent class
- * while the parent class
- * {@link org.springframework.messaging.simp.SimpMessageHeaderAccessor} manages
- * common processing headers some of which are based on STOMP headers (e.g.
- * destination, content-type, etc).
+ * while the parent class {@link SimpMessageHeaderAccessor} manages common
+ * processing headers some of which are based on STOMP headers
+ * (e.g. destination, content-type, etc).
-		if (nativeHeaders.containsKey(STOMP_CONTENT_LENGTH_HEADER)) {
-			List<String> values = nativeHeaders.get(STOMP_CONTENT_LENGTH_HEADER);
-			String value = (values != null ? values.get(0) : null);
-			return Integer.valueOf(value);
-		}
-		return null;
+		List<String> values = nativeHeaders.get(STOMP_CONTENT_LENGTH_HEADER);
+		return (!CollectionUtils.isEmpty(values) ? Integer.valueOf(values.get(0)) : null);",9,condition,Efficient STOMP content-length header check,"Issue: SPR-14747
",,19313,1,['Improve performance of StompEncoder.encode() [SPR-14747]'],"[""**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-14747](https://jira.spring.io/browse/SPR-14747?redirect=false)** and commented\n\nHey,\n\nI just noticed a rather costly assertion in the websocket layer - more explicitly in StompEncoder.encode(). Sorry I didn't notice this earlier in order to bring this to 4.3.3.\n\nIt is very similar to #19191, but has a much bigger impact on websocket applications as its executed on basically every message apart from heartbeats. Apart from the JMH benchmarks below, which show a factor of ~1200, the Assert statement in question produced more than 60GB of heap pressure in just 20 seconds. Mostly coming from the string concatenation of course.\n\n!stomp-encoder.jpg|thumbnail!\n\n|Benchmark|Mode|Cnt|Score|Error|Units|\n|:---|:---|:---|:---|:---|:---|\n|MyBenchmark.testNormal|thrpt|100|1639083,456|± 68418,140|ops/s|\n|MyBenchmark.testEnhanced|thrpt|100|2087033509,372|± 21891731,313|ops/s|\n\nMuch like the fix for #19191 I switched from Assert.notNull to a simple null check with an IllegalStateException.\n\nWhile looking into StompEncoder I also moved one variable declaration a bit down, which was not needed in every-case. I hope you don't mind.\n\nBest,\nChristoph\n\n---\n\n**Affects:** 4.2.8, 4.3.3\n\n**Reference URL:** https://github.com/spring-projects/spring-framework/pull/1185\n\n**Attachments:**\n- [stomp-encoder.jpg](https://jira.spring.io/secure/attachment/23574/stomp-encoder.jpg) (_50.38 kB_)\n\n**Issue Links:**\n- #19191 Improve performance of assertion in StompSubProtocolHandler\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f2e1e1b890a94d1eae4a3a9eae6095b3d49ca411, https://github.com/spring-projects/spring-framework/commit/6c764f6b8a3305ed38d77fa8b1fe920562307815, https://github.com/spring-projects/spring-framework/commit/02d83cedeacd1ea92feb0dab4525874a4734231c, https://github.com/spring-projects/spring-framework/commit/94753b5e87a622751493071ec1957bfdfded199e, https://github.com/spring-projects/spring-framework/commit/a6b0b6e27945dcf3c84f2c8ae49969470a1c8c76, https://github.com/spring-projects/spring-framework/commit/774e4c3dc10035448d12e5f883823c260569f891, https://github.com/spring-projects/spring-framework/commit/6577faa2da8b94997eb3de53d4bc575388b25e00\n\n**Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)\n""]",['closed'],[2],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nOnce again, a good catch! Merged now, to be backported to 4.3.4 and 4.2.9 tomorrow.\n', '**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** commented\n\nThank you!\n']"
a6ff95a69c765b029ce0dca960345cc4360f5a58,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/FactoryBeanRegistrySupport.java,Add_Condition,"+		if (attribute == null) {
+			return ResolvableType.NONE;
+		}
-		return ResolvableType.NONE;
+		throw new IllegalArgumentException(""Invalid value type for attribute '"" +
+				FactoryBean.OBJECT_TYPE_ATTRIBUTE + ""': "" + attribute.getClass().getName());",6,condition,Restore restrictive getTypeForFactoryBeanFromAttributes check,"See gh-29799
See gh-30987
",,"29799, 30987",2,"['Clarify `FactoryBean.OBJECT_TYPE_ATTRIBUTE` supported types', '`DefaultListableBeanFactory#getBeanNamesForType` does not take target type into account for `FactoryBean` resolution']","[""The `FactoryBean.OBJECT_TYPE_ATTRIBUTE` can be used to give type information to a `FactoryBean`. The documentation isn't clear about what types can be used.\r\n\r\nBoth [Spring Boot](https://github.com/spring-projects/spring-boot/issues/33746) and [Feign](https://github.com/spring-cloud/spring-cloud-openfeign/issues/337) have used `String` values. It appears that in reality only `Class` and `ResolvableType` are [supported](https://github.com/spring-projects/spring-framework/blob/8dbdfb0449f5223e102c090591d38ed956722147/spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java#L1699).\r\n\r\nShould `AbstractBeanFactory` also accept `String` values containing class names? Or should the types supported be documented in `FactoryBean.OBJECT_TYPE_ATTRIBUTE`? If String types are not supported, the openfeign code should probably change.\r\n\r\n\r\n\r\n"", ""Given a `RootBeanDefinition` for a `FactoryBean` that exposes a generic for the bean that it produces (typically Spring Data repositories infrastructure):\r\n\r\n```java\r\nRootBeanDefinition beanDefinition = new RootBeanDefinition(JpaRepositoryFactoryBean.class);\r\nbeanDefinition.setTargetType(ResolvableType.forClassWithGenerics(JpaRepositoryFactoryBean.class,\r\n\t\tCityRepository.class, Object.class, Object.class));\r\n```\r\n\r\nA call to `getBeanNamesForType` with `CityRepository.class` does not return the bean definition. It looks like the target type is not taken into account to resolve the `FactoryBean`'s generic type, if available.\r\n\r\nFailing test case at: https://github.com/snicoll/spring-framework/commit/edb8a052c3be257f9fb5813aae9b7defbb9d5a35""]","['closed', 'closed']","[5, 0]",[]
a711ed59f614e27471bab1e8b518fe165dbf5a4e,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/vendor/SpringHibernateJpaPersistenceProvider.java,Add_Condition,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
+import org.hibernate.cfg.Environment;
+import org.springframework.core.NativeDetector;
+ * @author Sebastien Deleuze
+	static {
+		if (NativeDetector.inNativeImage()) {
+			System.setProperty(Environment.BYTECODE_PROVIDER, Environment.BYTECODE_PROVIDER_NAME_NONE);
+		}
+	}
+",8,condition,Set hibernate.bytecode.provider to none on native image,"Closes gh-29140
",,29140,1,['Set `hibernate.bytecode.provider` to `none` on native image'],"['In order to avoid using a GraalVM substitution, and given the fact that on native image it is not possible to generate bytecode at runtime, `hibernate.bytecode.provider` should be set to `none` when running as native image.']",['closed'],[0],[]
a7789db0673f6997233a6af361b23d14bf54eea0,spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/xstream/XStreamMarshaller.java,Condition_Change,"-			if (this.streamDriver instanceof StaxDriver) {
-				writer = ((StaxDriver) this.streamDriver).createStaxWriter(streamWriter);
+			if (this.streamDriver instanceof StaxDriver staxDriver) {
+				writer = staxDriver.createStaxWriter(streamWriter);",4,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
a7fe6b8f5c74dd6ea0e531b3ba1e90a455ee15dd,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/ResponseCookie.java,Condition_Change,"-				if (lenient) {
+				if (lenient && !StringUtils.isEmpty(domain)) {",2,condition,Avoid NPE in ResponseCookie on null domain,"See gh-24663
",,24663,1,['Ignore empty domain string in ResponseCookie'],"['Affects `v5.2.4.RELEASE`, though I think response cookie validation was added in `v5.2.x`.\r\n\r\nWe\'re calling a 3rd party service that returns a `Set-Cookie` header with a `domain=""""` value. This is non-compliant with [rfc6265](https://tools.ietf.org/html/rfc6265) so _is_ technically wrong.\r\n\r\nHowever, Spring\'s now throwing an exception when encountering this header, so the entire request fails and the application is unable to consume the response.\r\n\r\nIs this intended behaviour? I think in this case Spring should [""be conservative in what it does, be liberal in what it accepts from others""](https://en.wikipedia.org/wiki/Robustness_principle).']",['closed'],[7],"['What exactly is it returning? validateDomain starts with this which should ignore `""""`:\r\n```java\r\nif (!StringUtils.hasLength(domain)) {\r\n\treturn;\r\n}\r\n```\r\n\r\n> However, Spring\'s now throwing an exception when encountering this header, so the entire request fails and the application is unable to consume the response.\r\n\r\nTo my knowledge we are not automatically parsing the cookies. It has to be a call from the application to access the cookies, so whether to parse the cookies and how to treat errors should be in the application\'s control. \r\n', '`Set-Cookie: xxx=xxx; Domain=""""; Expires=Wed, 10-Mar-2021 16:08:18 GMT; Path=/`\r\nSo it\'s parsing `""\\""\\""""` I think.', ""I'll get the full stacktrace but as far as I know we're not explicitly accessing the cookies."", '> So it\'s parsing `""\\""\\""""` I think\r\n\r\nThis doesn\'t look right. What client library is this with Reactor Netty or Jetty?\r\n\r\n> as far as I know we\'re not explicitly accessing the cookies\r\n\r\nYes please if you could find where it\'s failing. There might some response copying somewhere (e.g. through a filter) but by default the cookies are only parsed via `ClientResponse#cookies`.\r\n\r\nUltimately if a server is sending invalid cookies, I don\'t think we can ignore that either. However the `""""` looks more like a parsing issue to me. It should result in an empty string probably. \r\n', 'Could be opentracing reading the cookies:\r\n\r\n```\r\nERROR 2020-03-10 17:00:24,628 [] [reactor-http-nio-2] r.c.p.Operators: Operator called default onErrorDropped\r\njava.lang.IllegalArgumentException: """": invalid cookie domain char \'34\'\r\n\tat org.springframework.http.ResponseCookie$Rfc6265Utils.validateDomain(ResponseCookie.java:384)\r\n\tat org.springframework.http.ResponseCookie.<init>(ResponseCookie.java:72)\r\n\tat org.springframework.http.ResponseCookie.<init>(ResponseCookie.java:36)\r\n\tat org.springframework.http.ResponseCookie$1.build(ResponseCookie.java:253)\r\n\tat org.springframework.http.client.reactive.ReactorClientHttpResponse.lambda$getCookies$4(ReactorClientHttpResponse.java:110)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:183)\r\n\tat java.base/java.util.HashMap$KeySpliterator.forEachRemaining(HashMap.java:1600)\r\n\tat java.base/java.util.stream.ReferencePipeline$Head.forEach(ReferencePipeline.java:658)\r\n\tat java.base/java.util.stream.ReferencePipeline$7$1.accept(ReferencePipeline.java:274)\r\n\tat java.base/java.util.HashMap$ValueSpliterator.forEachRemaining(HashMap.java:1672)\r\n\tat java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)\r\n\tat java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:150)\r\n\tat java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:173)\r\n\tat java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)\r\n\tat java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:497)\r\n\tat org.springframework.http.client.reactive.ReactorClientHttpResponse.getCookies(ReactorClientHttpResponse.java:103)\r\n\tat org.springframework.web.reactive.function.client.DefaultClientResponse.cookies(DefaultClientResponse.java:104)\r\n\tat org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.lambda$new$1(DefaultClientResponseBuilder.java:92)\r\n\tat org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.cookies(DefaultClientResponseBuilder.java:138)\r\n\tat org.springframework.web.reactive.function.client.DefaultClientResponseBuilder.<init>(DefaultClientResponseBuilder.java:92)\r\n\tat org.springframework.web.reactive.function.client.ClientResponse.from(ClientResponse.java:227)\r\n\tat io.opentracing.contrib.spring.web.client.TracingClientResponseSubscriber.onNext(TracingClientResponseSubscriber.java:81)\r\n\tat io.opentracing.contrib.spring.web.client.TracingClientResponseSubscriber.onNext(TracingClientResponseSubscriber.java:35)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.lambda$onNext$2(TracedSubscriber.java:69)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.withActiveSpan(TracedSubscriber.java:95)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.onNext(TracedSubscriber.java:69)\r\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:114)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.lambda$onNext$2(TracedSubscriber.java:69)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.withActiveSpan(TracedSubscriber.java:95)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.onNext(TracedSubscriber.java:69)\r\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.lambda$onNext$2(TracedSubscriber.java:69)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.withActiveSpan(TracedSubscriber.java:95)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.onNext(TracedSubscriber.java:69)\r\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onNext(FluxPeek.java:192)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.lambda$onNext$2(TracedSubscriber.java:69)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.withActiveSpan(TracedSubscriber.java:95)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.onNext(TracedSubscriber.java:69)\r\n\tat reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.lambda$onNext$2(TracedSubscriber.java:69)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.withActiveSpan(TracedSubscriber.java:95)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.onNext(TracedSubscriber.java:69)\r\n\tat reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onNext(MonoFlatMapMany.java:242)\r\n\tat reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2267)\r\n\tat reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onSubscribeInner(MonoFlatMapMany.java:143)\r\n\tat reactor.core.publisher.MonoFlatMapMany$FlatMapManyInner.onSubscribe(MonoFlatMapMany.java:237)\r\n\tat reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54)\r\n\tat reactor.core.publisher.Flux.subscribe(Flux.java:8186)\r\n\tat reactor.core.publisher.MonoFlatMapMany$FlatMapManyMain.onNext(MonoFlatMapMany.java:188)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.lambda$onNext$2(TracedSubscriber.java:69)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.withActiveSpan(TracedSubscriber.java:95)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.onNext(TracedSubscriber.java:69)\r\n\tat reactor.core.publisher.FluxRetryPredicate$RetryPredicateSubscriber.onNext(FluxRetryPredicate.java:82)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.lambda$onNext$2(TracedSubscriber.java:69)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.withActiveSpan(TracedSubscriber.java:95)\r\n\tat io.opentracing.contrib.reactor.TracedSubscriber.onNext(TracedSubscriber.java:69)\r\n\tat reactor.core.publisher.MonoCreate$DefaultMonoSink.success(MonoCreate.java:156)\r\n\tat reactor.netty.http.client.HttpClientConnect$HttpObserver.onStateChange(HttpClientConnect.java:398)\r\n\tat reactor.netty.ReactorNetty$CompositeConnectionObserver.onStateChange(ReactorNetty.java:514)\r\n\tat reactor.netty.resources.PooledConnectionProvider$DisposableAcquire.onStateChange(PooledConnectionProvider.java:501)\r\n\tat reactor.netty.resources.PooledConnectionProvider$PooledConnection.onStateChange(PooledConnectionProvider.java:413)\r\n\tat reactor.netty.http.client.HttpClientOperations.onInboundNext(HttpClientOperations.java:550)\r\n\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:90)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\r\n\tat io.netty.handler.codec.MessageToMessageDecoder.channelRead(MessageToMessageDecoder.java:102)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\r\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:321)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:308)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.callDecode(ByteToMessageDecoder.java:422)\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:276)\r\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:355)\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:377)\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:363)\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919)\r\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:163)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:714)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:650)\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:576)\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:493)\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:989)\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74)\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30)\r\n\tat java.base/java.lang.Thread.run(Thread.java:835)\r\n```', 'Yes, OpenTracing is causing cookies to be parsed early. The OpenTracing implementation, which came from Sleuth I think, has room for improvement. I will create tickets for that and link here.\r\n\r\nWe can also improve how ClientResponse mutation works. I have created #24680 but because it is a more significant change it\'s set for 5.3.\r\n\r\nIn the mean time here I think we can check for and ignore `""""` to avoid this issue.', 'Great, thanks for the quick responses.']"
a832c98cedc56690ad606b53f497814370792d12,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/context/request/ServletWebRequest.java,Add_Condition,"+		if (SAFE_METHODS.contains(getRequest().getMethod())) {
+			return false;
+		}
-		if (SAFE_METHODS.contains(getRequest().getMethod()) || !ifMatchHeaders.hasMoreElements()) {
+		if (!ifMatchHeaders.hasMoreElements()) {",5,condition,Polish contribution,"See gh-29460
",,29460,1,['Polish ServletWebRequest and DefaultServerWebExchange'],['1.  Remove unused return value\r\n2. Add Nullable annotaions\r\n3. Simplify if statement '],['closed'],[2],"['@sbrannen \r\nThank you for your review.\r\nI reflected your review.\r\n', 'This has been merged into `main` in c12d93c5d1696fc030b7b2fc0fb999b99795c59c and revised in a832c98cedc56690ad606b53f497814370792d12.\r\n\r\nThanks']"
a8b7a5e037e6d2452a81b3050923096e2be51f75,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/function/client/DefaultWebClient.java,Add_Condition,"-			ClientRequest.Builder requestBuilder = this.inserter != null ?
-					initRequestBuilder().body(this.inserter) :
-					initRequestBuilder();
+			ClientRequest.Builder requestBuilder = initRequestBuilder();
+			if (this.inserter != null) {
+				builder.body(this.inserter);
+			}",7,condition,Refine initRequestBuilder in DefaultWebClient,"Closes gh-30254
",,30254,1,['Refine `initRequestBuilder` in `DefaultWebClient`'],['Move `inserter` into `DefaultRequestBodyUriSpec.initRequestBuilder()`'],['closed'],[3],"[""Not sure that's an optimization, but looks a bit cleaner and more consistent."", 'Merged, thanks for your contribution.', 'My English is not good enough to describe accurately. Thanks for your reply !']"
aa49949d7ad09944db4284b957d754e8189ecc74,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassEnhancer.java,Condition_Change,"+import org.springframework.util.ClassUtils;
-					if (beanInstance != null && !beanMethod.getReturnType().isInstance(beanInstance)) {
+					if (beanInstance != null && !ClassUtils.isAssignableValue(beanMethod.getReturnType(), beanInstance)) {",3,condition,Bean type mismatch check accepts assignable values according to ClassUtils,"Issue: SPR-12905
",,17504,1,['@Configuration enhancer does not throw proper exception in case of mismatched @Bean method [SPR-12905]'],"[""**[Christopher Smith](https://jira.spring.io/secure/ViewProfile.jspa?name=w_c_smith)** opened **[SPR-12905](https://jira.spring.io/browse/SPR-12905?redirect=false)** and commented\n\nGiven two unrelated `@Configuration` classes, one of which (`FooConfiguration`) provides `@Bean Foo fooBean()` and the other which (`BarConfiguration`) provides `@Bean Bar fooBean()` and has another bean method that calls `fooBean()`, the CGLib enhancer will fill in the `Foo fooBean` from the first configuration, causing a `ClassCastException` trying to cast `Foo` to `Bar`. This is something of a bug on the user's side for having a name collision, but if the container can't handle duplicate names, it needs to report that error explicitly.\n\n\n---\n\n**Affects:** 4.1.6\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e403aefe860d12f7427655f4fd2a59966a5d6442, https://github.com/spring-projects/spring-framework/commit/aa49949d7ad09944db4284b957d754e8189ecc74\n""]",['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis happens due to the container's override behavior: In such a scenario, `@Bean Bar forBean()` overrides `@Bean Foo fooBean`, with the `Bar` variant being the one registered with the container eventually. However, since you have another method programmatically calling the `Foo` variant on the first configuration class, the enhancer tries to redirect back to the container (as it should for any such `@Bean` method call) where it ends up delegating to the `Bar` variant registered there...\n\nEffectively, such overriding is supported even in such a scenario, but only if the overriding bean is assignable to the original `@Bean` return type. So what we're arguably doing wrong here is that we're not throwing a proper exception; I'll try to address that.\n\nJuergen\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI'll turn this into a 4.2-only feature since we've already had a minor regression - easy enough to fix, but any such assertion has a potential of breaking somebody's scenario. Arguably not worth the risk for 4.1.7.\n\nJuergen\n""]"
aa4e56b251521610999d72fb8c962575bb8bc27a,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,Condition_Change,"+	private final SourceClass objectSourceClass = new SourceClass(Object.class);
+
-		if (classType == null) {
-			return new SourceClass(Object.class);
+		if (classType == null || classType.getName().startsWith(""java.lang.annotation"")) {
+			return this.objectSourceClass;
-		if (className == null) {
-			return new SourceClass(Object.class);
+		if (className == null || className.startsWith(""java.lang.annotation"")) {
+			return this.objectSourceClass;",10,condition,Optimize @Configuration class parsing a little,"Update `ConfigurationClassParser` to skip `java.lang.annotation` types
which were often processed but would never provide useful results. Also
use a single shared immutable `SourceClass` instance to represent
`Object.class`.

Closes gh-22563
",,22563,1,['Use less memory and try to skip more classes when processing @Configuration classes'],['The `ConfigurationClassParser` often ends up creating a new `SourceClass` instance for `Object.class`. We could use a static to represent this and save ourselves a few object allocations.\r\n\r\nThe `asSourceClass` method is also often called with `java.lang.annotation` instances which can always be skipped.'],['closed'],[0],[]
aa4f09d080049d808abffff007457d83a9a61987,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/DataBinder.java,Condition_Change,"+import java.util.Collection;
-				if (value == null && !BeanUtils.isSimpleValueType(param.nestedIfOptional().getNestedParameterType())) {
+				if (value == null && shouldCreateObject(param)) {
+	private static boolean shouldCreateObject(MethodParameter param) {
+		Class<?> type = param.nestedIfOptional().getNestedParameterType();
+		return !(BeanUtils.isSimpleValueType(type) ||
+				Collection.class.isAssignableFrom(type) || Map.class.isAssignableFrom(type) || type.isArray());
+	}
+",9,condition,Refine decision to create object for constructor injection,"Closes gh-31488
",,31488,1,['3.2.0-RC1: No primary or single unique constructor found for interface java.util.Set'],"['After upgrading to **Spring Boot 3.2.0-RC1** from **3.1.5** request params binding is not working.\r\n\r\n```java\r\n@RestController\r\n@RequestMapping\r\nstatic class HelloController {\r\n    enum Tag {RED, GREEN}\r\n\r\n    record HelloArgs(String name, Set<Tag> tags) {\r\n        HelloArgs(@RequestParam String name, @RequestParam Set<Tag> tags) {\r\n            this.name = name;\r\n            this.tags = tags == null ? Set.of() : tags;\r\n        }\r\n    }\r\n\r\n    @GetMapping\r\n    String hello(HelloArgs args) {\r\n        return ""Hello %s %s"".formatted(args.name(), args.tags.stream().map(Tag::name).collect(Collectors.joining()));\r\n    }\r\n}\r\n```\r\nWith request:\r\n`http GET http://localhost:8080\\?name\\=Hulk`\r\n```\r\nERROR 54976 --- [nio-8080-exec-1] o.a.c.c.C.[.[.[/].[dispatcherServlet]    : Servlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Request processing failed: java.lang.IllegalStateException: No primary or single unique constructor found for interface java.util.Set] with root cause\r\n\r\njava.lang.IllegalStateException: No primary or single unique constructor found for interface java.util.Set\r\n\tat org.springframework.beans.BeanUtils.getResolvableConstructor(BeanUtils.java:266) ~[spring-beans-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.validation.DataBinder.createObject(DataBinder.java:923) ~[spring-context-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.validation.DataBinder.createObject(DataBinder.java:952) ~[spring-context-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.validation.DataBinder.construct(DataBinder.java:902) ~[spring-context-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.bind.ServletRequestDataBinder.construct(ServletRequestDataBinder.java:112) ~[spring-web-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletModelAttributeMethodProcessor.constructAttribute(ServletModelAttributeMethodProcessor.java:156) ~[spring-webmvc-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.method.annotation.ModelAttributeMethodProcessor.resolveArgument(ModelAttributeMethodProcessor.java:148) ~[spring-web-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:122) ~[spring-web-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:217) ~[spring-web-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:170) ~[spring-web-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[spring-webmvc-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:918) ~[spring-webmvc-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:830) ~[spring-webmvc-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[spring-webmvc-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[spring-webmvc-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1011) ~[spring-webmvc-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[spring-webmvc-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:564) ~[tomcat-embed-core-10.1.15.jar:6.0]\r\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:885) ~[spring-webmvc-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat jakarta.servlet.http.HttpServlet.service(HttpServlet.java:658) ~[tomcat-embed-core-10.1.15.jar:6.0]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:205) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:51) ~[tomcat-embed-websocket-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:100) ~[spring-web-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:93) ~[spring-web-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:201) ~[spring-web-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:116) ~[spring-web-6.1.0-RC1.jar:6.1.0-RC1]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:174) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:149) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.core.StandardWrapperValve.invoke(StandardWrapperValve.java:167) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.core.StandardContextValve.invoke(StandardContextValve.java:90) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.authenticator.AuthenticatorBase.invoke(AuthenticatorBase.java:482) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.core.StandardHostValve.invoke(StandardHostValve.java:115) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.valves.ErrorReportValve.invoke(ErrorReportValve.java:93) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.core.StandardEngineValve.invoke(StandardEngineValve.java:74) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.catalina.connector.CoyoteAdapter.service(CoyoteAdapter.java:340) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.coyote.http11.Http11Processor.service(Http11Processor.java:391) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:63) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:896) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1744) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:52) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-10.1.15.jar:10.1.15]\r\n\tat java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]\r\n```\r\n\r\n\r\nWhile with: `http GET http://localhost:8080\\?name\\=Hulk\\&tags\\=RED,GREEN` everything is okay.\r\n\r\n']",['closed'],[3],"[""Thanks for giving the RC2 a try. \r\n\r\nBoth Spring Framework 6.0.x (Boot 3.1.x) and 6.1 (Boot 3.2) do not support constructor binding to a `Collection`. In the above example, 6.0.x passes `null` for the second parameter. 6.1 supports nested data constructors, and fails because it's trying to do more. We can make 6.1 ignore collection parameters, and pass `null` too, but I just confirm what your expectations are. Even in 6.0.x the `tags` parameter is not supported, it just happens to be more lenient by passing `null`.\r\n\r\nAs an aside, the `@RequestParam` annotations don't play any role at that level, unless you have some custom support for them. They're only checked when declared on controller method parameters."", 'Thanks for the tip `@RequestParam`.\nIf 6.1 is more strict, how should tags be declared?', ""It's not more strict intentionally. We can adjust the behavior to be equally lenient and pass `null`. I just wasn't sure what role `tags` plays in the first place, it's not very useful if it's always `null`.""]"
ab48b88f919f2c9f8ab4880be5d82b0d55052779,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/beanvalidation/BeanValidationBeanRegistrationAotProcessor.java,Add_Condition,"+				else if (ex instanceof TypeNotPresentException) {
+					logger.debug(""Skipping validation constraint hint inference for bean "" +
+							registeredBean.getBeanName() + "" due to a TypeNotPresentException at validator level: "" + ex.getMessage());
+				}
-					logger.error(""Skipping validation constraint hint inference for bean "" +
+					logger.warn(""Skipping validation constraint hint inference for bean "" +",6,condition,Refine BeanValidationBeanRegistrationAotProcessor logging,"This commit prints a log message at debug level without
a stacktrace for TypeNotPresentException and uses
warn level instead of error level for other exceptions
since the processing of such bean will just be skipped.

Closes gh-31147
",,31147,1,['Update logging level in BeanValidationBeanRegistrationAotProcessor for validation exceptions'],"[""spring boot 3.1.3\r\ngradle native plugin 0.9.25\r\n\r\nprocessAot gradle task\r\n\r\n```\r\n...anValidationBeanRegistrationAotProcessor : Skipping validation constraint hint inference for bean queryDslQuerydslPredicateOperationCustomizer\r\njava.lang.TypeNotPresentException: Type com.querydsl.core.types.Path not present\r\n\tat java.base/sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:117) ~[na:na]\r\n\tat java.base/sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:125) ~[na:na]\r\n\tat java.base/sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49) ~[na:na]\r\n\tat java.base/sun.reflect.generics.visitor.Reifier.reifyTypeArguments(Reifier.java:68) ~[na:na]\r\n\tat java.base/sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:138) ~[na:na]\r\n\tat java.base/sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49) ~[na:na]\r\n\tat java.base/sun.reflect.generics.repository.MethodRepository.computeReturnType(MethodRepository.java:75) ~[na:na]\r\n\tat java.base/sun.reflect.generics.repository.MethodRepository.getReturnType(MethodRepository.java:66) ~[na:na]\r\n\tat java.base/java.lang.reflect.Method.getGenericReturnType(Method.java:297) ~[na:na]\r\n\tat org.hibernate.validator.internal.properties.javabean.JavaBeanMethod.<init>(JavaBeanMethod.java:20) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.properties.javabean.JavaBeanHelper.executable(JavaBeanHelper.java:133) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.properties.javabean.JavaBeanHelper.executable(JavaBeanHelper.java:121) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.properties.javabean.JavaBeanHelper.executable(JavaBeanHelper.java:113) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.findExecutableMetaData(AnnotationMetaDataProvider.java:307) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.getMetaData(AnnotationMetaDataProvider.java:292) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.getMethodMetaData(AnnotationMetaDataProvider.java:279) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.retrieveBeanConfiguration(AnnotationMetaDataProvider.java:131) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.metadata.provider.AnnotationMetaDataProvider.getBeanConfiguration(AnnotationMetaDataProvider.java:121) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.metadata.BeanMetaDataManagerImpl.getBeanConfigurationForHierarchy(BeanMetaDataManagerImpl.java:234) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.metadata.BeanMetaDataManagerImpl.createBeanMetaData(BeanMetaDataManagerImpl.java:201) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.metadata.BeanMetaDataManagerImpl.getBeanMetaData(BeanMetaDataManagerImpl.java:165) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.hibernate.validator.internal.engine.ValidatorImpl.getConstraintsForClass(ValidatorImpl.java:316) ~[hibernate-validator-8.0.1.Final.jar:8.0.1.Final]\r\n\tat org.springframework.validation.beanvalidation.BeanValidationBeanRegistrationAotProcessor$BeanValidationDelegate.processAheadOfTime(BeanValidationBeanRegistrationAotProcessor.java:100) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.validation.beanvalidation.BeanValidationBeanRegistrationAotProcessor.processAheadOfTime(BeanValidationBeanRegistrationAotProcessor.java:67) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.beans.factory.aot.BeanDefinitionMethodGeneratorFactory.getAotContributions(BeanDefinitionMethodGeneratorFactory.java:151) ~[spring-beans-6.0.11.jar:6.0.11]\r\n\tat org.springframework.beans.factory.aot.BeanDefinitionMethodGeneratorFactory.getBeanDefinitionMethodGenerator(BeanDefinitionMethodGeneratorFactory.java:99) ~[spring-beans-6.0.11.jar:6.0.11]\r\n\tat org.springframework.beans.factory.aot.BeanDefinitionMethodGeneratorFactory.getBeanDefinitionMethodGenerator(BeanDefinitionMethodGeneratorFactory.java:115) ~[spring-beans-6.0.11.jar:6.0.11]\r\n\tat org.springframework.beans.factory.aot.BeanRegistrationsAotProcessor.processAheadOfTime(BeanRegistrationsAotProcessor.java:49) ~[spring-beans-6.0.11.jar:6.0.11]\r\n\tat org.springframework.beans.factory.aot.BeanRegistrationsAotProcessor.processAheadOfTime(BeanRegistrationsAotProcessor.java:37) ~[spring-beans-6.0.11.jar:6.0.11]\r\n\tat org.springframework.context.aot.BeanFactoryInitializationAotContributions.getContributions(BeanFactoryInitializationAotContributions.java:67) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.context.aot.BeanFactoryInitializationAotContributions.<init>(BeanFactoryInitializationAotContributions.java:49) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.context.aot.BeanFactoryInitializationAotContributions.<init>(BeanFactoryInitializationAotContributions.java:44) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.context.aot.ApplicationContextAotGenerator.lambda$processAheadOfTime$0(ApplicationContextAotGenerator.java:58) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.context.aot.ApplicationContextAotGenerator.withCglibClassHandler(ApplicationContextAotGenerator.java:67) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.context.aot.ApplicationContextAotGenerator.processAheadOfTime(ApplicationContextAotGenerator.java:53) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.context.aot.ContextAotProcessor.performAotProcessing(ContextAotProcessor.java:106) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.context.aot.ContextAotProcessor.doProcess(ContextAotProcessor.java:84) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.context.aot.ContextAotProcessor.doProcess(ContextAotProcessor.java:49) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.context.aot.AbstractAotProcessor.process(AbstractAotProcessor.java:82) ~[spring-context-6.0.11.jar:6.0.11]\r\n\tat org.springframework.boot.SpringApplicationAotProcessor.main(SpringApplicationAotProcessor.java:80) ~[spring-boot-3.1.2.jar:3.1.2]\r\nCaused by: java.lang.ClassNotFoundException: com.querydsl.core.types.Path\r\n\tat java.base/jdk.internal.loader.BuiltinClassLoader.loadClass(BuiltinClassLoader.java:641) ~[na:na]\r\nCaused by: java.lang.ClassNotFoundException: com.querydsl.core.types.Path\r\n\r\n\tat java.base/jdk.internal.loader.ClassLoaders$AppClassLoader.loadClass(ClassLoaders.java:188) ~[na:na]\r\n\tat java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:521) ~[na:na]\r\n\tat java.base/java.lang.Class.forName0(Native Method) ~[na:na]\r\n\tat java.base/java.lang.Class.forName(Class.java:496) ~[na:na]\r\n\tat java.base/java.lang.Class.forName(Class.java:475) ~[na:na]\r\n\tat java.base/sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:114) ~[na:na]\r\n\t... 39 common frames omitted\r\n```\r\n**i don't use query dsl in project,** when gradle native plugin is disabled there is no exception and project runs fine\r\n\r\nwhen i add api 'com.querydsl:querydsl-jpa:5.0.0' as dependency exception is also gone""]",['closed'],[9],"['Does the exception cause AOT processing to fail or is it just distracting and rather noisy? Looking at the message, I suspect it\'s the latter as it\'s reporting the reason for ""skipping validation constraint hint inference"".', 'it is just distracting, but it was not present in earlier versions', ""Thanks for the clarification.\r\n\r\nI think this could be improved in Spring Framework as most runtime exceptions thrown from `getConstraintsForClass` will result in an error being logged. In this case, debug logging would be more appropriate as the failure is benign. We'll transfer the issue to the Framework team so that they can consider making such a change."", '@adsafawqew Can you please provide a reproducer? I would like to be able to verify the behavior of the different log levels during AOT processing to refine the logging accordingly.', 'If you would like us to look at this issue, please provide the requested information. If the information is not provided within the next 7 days this issue will be closed.\n', 'can confirm that this has been fixed with spring boot version 3.1.4', ""having similar issue with spring-boot v `3.1.8` and grralvm gradle plugin v `0.9.28`\r\n```\r\n[2/7] Performing analysis...  [*]                                                                        (8.7s @ 1.27GB)\r\n   7,970 (85.10%) of  9,365 classes reachable\r\n   9,846 (63.42%) of 15,524 fields reachable\r\n  26,676 (73.17%) of 36,459 methods reachable\r\n   1,337 classes, 1,524 fields, and 2,538 methods registered for reflection\r\n       1 native library: -framework CoreServices\r\n\r\nFatal error: java.lang.TypeNotPresentException: Type com.querydsl.core.types.Path not present\r\n        at java.base/sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:117)\r\n        at java.base/sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:125)\r\n        at java.base/sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49)\r\n        at java.base/sun.reflect.generics.visitor.Reifier.reifyTypeArguments(Reifier.java:68)\r\n        at java.base/sun.reflect.generics.visitor.Reifier.visitClassTypeSignature(Reifier.java:138)\r\n        at java.base/sun.reflect.generics.tree.ClassTypeSignature.accept(ClassTypeSignature.java:49)\r\n        at java.base/sun.reflect.generics.repository.MethodRepository.computeReturnType(MethodRepository.java:75)\r\n        at java.base/sun.reflect.generics.repository.MethodRepository.getReturnType(MethodRepository.java:66)\r\n        at java.base/java.lang.reflect.Method.getGenericReturnType(Method.java:295)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.reflect.ReflectionDataBuilder.registerTypesForMethod(ReflectionDataBuilder.java:505)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.reflect.ReflectionDataBuilder.processMethodMetadata(ReflectionDataBuilder.java:264)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.reflect.ReflectionDataBuilder.duringAnalysis(ReflectionDataBuilder.java:199)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.reflect.ReflectionFeature.duringAnalysis(ReflectionFeature.java:254)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.lambda$runPointsToAnalysis$10(NativeImageGenerator.java:748)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.FeatureHandler.forEachFeature(FeatureHandler.java:85)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.lambda$runPointsToAnalysis$11(NativeImageGenerator.java:748)\r\n        at org.graalvm.nativeimage.pointsto/com.oracle.graal.pointsto.AbstractAnalysisEngine.runAnalysis(AbstractAnalysisEngine.java:162)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.runPointsToAnalysis(NativeImageGenerator.java:745)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.doRun(NativeImageGenerator.java:578)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGenerator.run(NativeImageGenerator.java:535)\r\n------------------------------------------------------------------------------------------------------------------------\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.buildImage(NativeImageGeneratorRunner.java:403)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.build(NativeImageGeneratorRunner.java:580)\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.hosted.NativeImageGeneratorRunner.main(NativeImageGeneratorRunner.java:128)\r\nCaused by: java.lang.ClassNotFoundException: com.querydsl.core.types.Path\r\n        at java.base/java.net.URLClassLoader.findClass(URLClassLoader.java:445)\r\n        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:587)\r\n        at java.base/java.lang.ClassLoader.loadClass(ClassLoader.java:520)\r\n        at java.base/java.lang.Class.forName0(Native Method)\r\n        at java.base/java.lang.Class.forName(Class.java:467)\r\n        at java.base/sun.reflect.generics.factory.CoreReflectionFactory.makeNamedType(CoreReflectionFactory.java:114)\r\n        ... 22 more\r\n                        3.6s (7.5% of total time) in 27 GCs | Peak RSS: 4.60GB | CPU load: 2.69\r\n```\r\nalso have no `querydsl` usage in my project so wonder if this is something given by Spring's transitive dependencies and/or an issue in gradle plugin itself."", '@ashirmanov Please create a new issue with a reproducer as an attached archive or a link to a repository if you want us to have a look.', ""Had the same issue building native image with graalVM @ashirmanov , resolved by adding: `implementation 'com.querydsl:querydsl-core:5.1.0'` to my build.gradle. I honestly don't know what is using it under the hood, but the latest dependency I added was `org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0`.""]"
ab5aea5a1346cf489e8c727c3d4ee563352b3787,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/support/GenericConversionService.java,Condition_Change,"-	/** Java 8's java.util.Optional.empty() */
-	private static Object javaUtilOptionalEmpty = null;
-
+
+	/** Java 8's java.util.Optional.empty() */
+	private static Object javaUtilOptionalEmpty = null;
+
-		} catch (Exception ex) {
+		}
+		catch (Exception ex) {
-		if (targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {
+		if (javaUtilOptionalEmpty != null && targetType.getObjectType().equals(javaUtilOptionalEmpty.getClass())) {",10,condition,Defensively check javaUtilOptionalEmpty,"Issue: SPR-11888
",,16507,1,['WebMVC throws nullpointerexception on java 6 in TypeConverterDelegate [SPR-11888]'],"['**[Boris Bera](https://jira.spring.io/secure/ViewProfile.jspa?name=boris-b)** opened **[SPR-11888](https://jira.spring.io/browse/SPR-11888?redirect=false)** and commented\n\nWhen running the latest snapshot (4.1.0.BUILD-20140619.135109-207) of spring-webmvc on java 1.6, requests done with a MockMvc will throw a nullpointerexception in the TypeConverterDelegate class.\n\nStacktrace:\n\n```\norg.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:973)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:668)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)\n\tat org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:62)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:770)\n\tat org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:170)\n\tat org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:137)\n\tat org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:141)\n\tat com.vantrix.mp.mpcms.impl.rest.MPRESTServiceImplUT.thatFindConvertsParameters(MPRESTServiceImplUT.java:222)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.run(JUnit45AndHigherRunnerImpl.java:37)\n\tat org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:62)\n\tat org.junit.runners.Suite.runChild(Suite.java:127)\n\tat org.junit.runners.Suite.runChild(Suite.java:26)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)\nCaused by: java.lang.NullPointerException\n\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:260)\n\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:106)\n\tat org.springframework.beans.TypeConverterSupport.doConvert(TypeConverterSupport.java:64)\n\tat org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:47)\n\tat org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:582)\n\tat org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:105)\n\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:79)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:157)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:124)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:938)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)\n\t... 46 more\n```\n\nI did some digging and I think the problem comes from this commit: https://github.com/spring-projects/spring-framework/commit/0dc6082b01606c3c996b728541467ba5104b747f\n\nThe problem is on line 260 in spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n\nIn java 1.6, javaUtilOptionalEmpty is null and calling .getClass() on it throws the exception.\n\n\n---\n\n**Affects:** 4.1 RC1\n']",['closed'],[1],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nIndeed, the same applies to a similar check in GenericConversionService.\n']"
abb8a93e2fa3e91286d72518dbb5f88c219834ef,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/user/DefaultUserDestinationResolver.java,Condition_Change,"-	private String subscriptionDestinationPrefix = ""/user/queue/"";
-
-		this.subscriptionDestinationPrefix = this.destinationPrefix + ""queue/"";
-	/**
-	 * Return the prefix used to identify user destinations for (un)subscribe messages.
-	 * <p>By default ""/user/queue/"".
-	 */
-	public String getSubscriptionDestinationPrefix() {
-		return this.subscriptionDestinationPrefix;
-	}
-			if (!checkDestination(destination, this.subscriptionDestinationPrefix)) {
+			if (!checkDestination(destination, this.destinationPrefix)) {",9,condition,Drop separate user dest property for subscriptions,"Before this change DefaultUserDestinationResolver provided a separate
destination prefix property for identifying ""user"" destinations in
subscription requests as opposed to in sent messages. Such a separate
property should not be needed.

Issue: SPR-11263
",,15888,1,"['hardcoded "".../queue/...""-part in DefaultUserDestinationResolver conflicts with rabbitmq exchange naming [SPR-11263]']","['**[zyro](https://jira.spring.io/secure/ViewProfile.jspa?name=zyro)** opened **[SPR-11263](https://jira.spring.io/browse/SPR-11263?redirect=false)** and commented\n\nthe hardcoded ""queue"" suffix for the subscription prefix makes it impossible to use a pattern like ""/user/exchange/amq.direct/..."" instead of ""/user/queue/..."".\ne.g. with rabbitmq this means to be restricted to durable, no-auto-delete queues atm?\n\n\n---\n\n**Affects:** 4.0 GA\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abb8a93e2fa3e91286d72518dbb5f88c219834ef\n']",['closed'],[1],['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nSee commit [abb8a9](https://github.com/spring-projects/spring-framework/commit/abb8a93e2fa3e91286d72518dbb5f88c219834ef)\n']
abcfffdde9aa833c1ce493525e9d2b9e4f15c46c,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-		if (jaxb2Present && !jackson2Present) {
+		if (jaxb2Present && !jackson2XmlPresent) {",2,condition,Allow JAXB to be registered next to plain Jackson,"Issue: SPR-14336
",,18908,1,['AllEncompassingFormHttpMessageConverter ignores JAXB XML when Jackson used for JSON [SPR-14336]'],"['**[Jan Zahornadsky](https://jira.spring.io/secure/ViewProfile.jspa?name=yankyo)** opened **[SPR-14336](https://jira.spring.io/browse/SPR-14336?redirect=false)** and commented\n\nAfter changes introduced in #17894, the new conditions are causing that in a project that uses both XML (via JAXB) and JSON (via Jackson) AllEncompassingFormHttpMessageConverter no longer works correctly with XML.\n\nReferring to the code in https://github.com/spring-projects/spring-framework/blob/master/spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java, the condition for including Jaxb part converter should read\n\n```java\n// instead of && !jackson2Present\nif (jaxb2Present && !jackson2XmlPresent) {\n\taddPartConverter(new Jaxb2RootElementHttpMessageConverter());\n}\n```\n\n---\n\n**Affects:** 4.2.6\n\n**Issue Links:**\n- #17894 AllEncompassingFormHttpMessageConverter prioritizes Jackson 2 XML over JSON\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/abcfffdde9aa833c1ce493525e9d2b9e4f15c46c, https://github.com/spring-projects/spring-framework/commit/d0b2fe5e8c8e8d1a51f57f15ffbcbb8c2180b835\n\n**Backported to:** [4.2.7](https://github.com/spring-projects/spring-framework/milestone/144?closed=1)\n']",['closed'],[0],[]
ac11acb532803ad557c2739549b9ac5e00695f12,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java,Add_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+ * @author Sam Brannen
+		// Nothing to sort?
+		if (postProcessors.size() <= 1) {
+			return;
+		}",3,condition,Optimize sorting in PostProcessorRegistrationDelegate,"Closes gh-24776
",,24776,1,['Optimize sortPostProcessors() in PostProcessorRegistrationDelegate'],"['Size equal to 0 or 1 can return directly\r\n\r\n```java\r\nprivate static void sortPostProcessors(List<?> postProcessors, ConfigurableListableBeanFactory beanFactory) {\r\n\t\tComparator<Object> comparatorToUse = null;\r\n\t\tif (beanFactory instanceof DefaultListableBeanFactory) {\r\n\t\t\tcomparatorToUse = ((DefaultListableBeanFactory) beanFactory).getDependencyComparator();\r\n\t\t}\r\n\t\tif (comparatorToUse == null) {\r\n\t\t\tcomparatorToUse = OrderComparator.INSTANCE;\r\n\t\t}\r\n\t\tpostProcessors.sort(comparatorToUse);\r\n\t}\r\n```']",['closed'],[3],"[""Good catch. We'll optimize this in `5.2.6`."", 'It make code ugly, is it worthy?', '@quaff, We have implemented similar optimizations recently. See #24617 for details.']"
ac4525ddf8b280759c0d3ba63d3569dda64a2e3a,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
+		else if (""MariaDB"".equals(source)) {
+			name = ""MySQL"";
+		}",3,condition,Detect MariaDB as MySQL (for mariadb-java-client 2.4+ compatibility),"Closes gh-22344
",,22344,1,['mariadb-java-client 2.4.0 productName changed: breaks Spring Batch'],"['**Affects:** Spring Framework 5.1.4-RELEASE (Spring Batch 4.1.1.RELEASE)\r\n\r\n---\r\n\r\nUp to `mariadb-java-client` 2.3.0, driver product name was ""MySQL"". With version 2.4.0, it\'s now ""MariaDB"" (due to [this change](https://github.com/MariaDB/mariadb-connector-j/commit/5ec5099441a49c677785848132a6099b2beaee99#diff-a6869b202907d71c3d5aecefe6de0ce1R1133)), so `org/springframework/batch/support/DatabaseType.java:fromMetaData()` cannot recognize it.  \r\n-> Could you detect MariaDB as MySQL database? Thx!  \r\n\r\nSpring Batch loads `JobRepositoryFactoryBean` that calls `DatabaseType.java:fromMetaData()` and throws the following error:\r\n\r\n```\r\n23:08:09 ERROR o.s.boot.SpringApplication:858 [] Application run failed\r\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name \'application\': Invocation of init method failed; nested exception is org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'batchConfigurer\': Invocation of init method failed; nested exception is java.lang.IllegalStateException: Unable to initialize Spring Batch\r\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:139) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:419) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1737) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:846) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:863) ~[spring-context-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:546) ~[spring-context-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:142) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:775) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:316) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1260) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1248) ~[spring-boot-2.1.2.RELEASE.jar:2.1.2.RELEASE]\r\n\tat manon.Application.main(Application.java:36) ~[classes/:na]\r\nCaused by: org.springframework.beans.factory.BeanCreationException: Error creating bean with name \'batchConfigurer\': Invocation of init method failed; nested exception is java.lang.IllegalStateException: Unable to initialize Spring Batch\r\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:139) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyBeanPostProcessorsBeforeInitialization(AbstractAutowireCapableBeanFactory.java:419) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1737) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:576) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:498) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:602) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeansOfType(DefaultListableBeanFactory.java:590) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.context.support.AbstractApplicationContext.getBeansOfType(AbstractApplicationContext.java:1204) ~[spring-context-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration.initialize(SimpleBatchConfiguration.java:114) ~[spring-batch-core-4.1.1.RELEASE.jar:4.1.1.RELEASE]\r\n\tat org.springframework.batch.core.configuration.annotation.SimpleBatchConfiguration$ReferenceTargetSource.createObject(SimpleBatchConfiguration.java:142) ~[spring-batch-core-4.1.1.RELEASE.jar:4.1.1.RELEASE]\r\n\tat org.springframework.aop.target.AbstractLazyCreationTargetSource.getTarget(AbstractLazyCreationTargetSource.java:88) ~[spring-aop-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:193) ~[spring-aop-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat com.sun.proxy.$Proxy137.getTransaction(Unknown Source) ~[na:na]\r\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:474) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:289) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:98) ~[spring-tx-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) ~[spring-aop-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:688) ~[spring-aop-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat manon.user.service.RegistrationServiceImpl$$EnhancerBySpringCGLIB$$f2c072d8.ensureAdmin(<generated>) ~[classes/:na]\r\n\tat manon.Application.initApp(Application.java:53) ~[classes/:na]\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\r\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:363) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:307) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:136) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\t... 18 common frames omitted\r\nCaused by: java.lang.IllegalStateException: Unable to initialize Spring Batch\r\n\tat org.springframework.boot.autoconfigure.batch.BasicBatchConfigurer.initialize(BasicBatchConfigurer.java:101) ~[spring-boot-autoconfigure-2.1.2.RELEASE.jar:2.1.2.RELEASE]\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:na]\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:566) ~[na:na]\r\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement.invoke(InitDestroyAnnotationBeanPostProcessor.java:363) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleMetadata.invokeInitMethods(InitDestroyAnnotationBeanPostProcessor.java:307) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\tat org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor.postProcessBeforeInitialization(InitDestroyAnnotationBeanPostProcessor.java:136) ~[spring-beans-5.1.4.RELEASE.jar:5.1.4.RELEASE]\r\n\t... 48 common frames omitted\r\nCaused by: java.lang.IllegalArgumentException: DatabaseType not found for product name: [MariaDB]\r\n\tat org.springframework.batch.support.DatabaseType.fromProductName(DatabaseType.java:82) ~[spring-batch-infrastructure-4.1.1.RELEASE.jar:4.1.1.RELEASE]\r\n\tat org.springframework.batch.support.DatabaseType.fromMetaData(DatabaseType.java:121) ~[spring-batch-infrastructure-4.1.1.RELEASE.jar:4.1.1.RELEASE]\r\n\tat org.springframework.batch.core.repository.support.JobRepositoryFactoryBean.afterPropertiesSet(JobRepositoryFactoryBean.java:183) ~[spring-batch-core-4.1.1.RELEASE.jar:4.1.1.RELEASE]\r\n\tat org.springframework.boot.autoconfigure.batch.BasicBatchConfigurer.createJobRepository(BasicBatchConfigurer.java:131) ~[spring-boot-autoconfigure-2.1.2.RELEASE.jar:2.1.2.RELEASE]\r\n\tat org.springframework.boot.autoconfigure.batch.BasicBatchConfigurer.initialize(BasicBatchConfigurer.java:96) ~[spring-boot-autoconfigure-2.1.2.RELEASE.jar:2.1.2.RELEASE]\r\n\t... 55 common frames omitted\r\n```']",['closed'],[3],"['It looks like we can sufficiently address this for Spring Batch\'s purposes at the core framework level through detecting ""MariaDB"" as ""MySQL"" in `JdbcUtils.commonDatabaseName` (which Spring Batch\'s `DatabaseType` class is using). Beyond that, we should also detect it as MySQL in our `sql-error-codes` file.', ""@jonathanlermitage any opportunity to give this an early try against `5.1.5.BUILD-SNAPSHOT` from https://repo.spring.io/snapshot, ideally before the official 5.1.5 release on Wednesday? It'd be great to know whether this actually works for Spring Batch now..."", '@jhoeller I tried on a personal [project](https://github.com/jonathanlermitage/manon/commit/5a40fd335ef24c3396171a0b07215821c3a45b11) and it works fine.  \r\nThx!']"
ac9ca412c8ea974a83015cc4dff19fe43fa51c58,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/UrlResource.java,Add_Condition,"+import org.springframework.util.Base64Utils;
+ * @author Denis Kostin
+
+		if (this.url.getUserInfo() != null) {
+			String basicAuth = ""Basic "" + Base64Utils.encodeToString(url.getUserInfo().getBytes());
+			con.setRequestProperty(""Authorization"", basicAuth);
+		}",6,condition,Add Basic Authorization for UrlResource,"See gh-1822
",,1822,1,['Added Basic Authorization for UrlResource'],['This pull request adds Basic Authorization for UrlResource.\r\nThis is fix for https://github.com/spring-projects/spring-boot/issues/6138'],['closed'],[5],"['@x-x-z Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1822)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1822) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@x-x-z Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=1822)!', '👍 \r\nIt would be nice if this change has been merged.', ""@x-x-z can you share how this is a fix for the issue you've linked?"", 'Sorry for the delay @x-x-z and thanks very much for making your first contribution to Spring Framework.']"
ad6d183a0614adaa0bb1493a9500a4a9b412c1e2,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/support/ConversionUtils.java,Remove_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-		else if (sourceElementType.getType().isAssignableFrom(targetElementType.getType())) {
+		if (sourceElementType.getType().isAssignableFrom(targetElementType.getType())) {
-		else {
-			// no
-			return false;
-		}
+		// no
+		return false;",6,condition,Remove unneeded conditional logic,"Update `ConversionUtils` to remove conditional logic that isn't
necessary.

Issue: SPR-16968
",,21506,1,['Add checkstyle [SPR-16968]'],['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16968](https://jira.spring.io/browse/SPR-16968?redirect=false)** and commented\n\nAdding checkstyle to the Spring Framework build would help catch common coding issues and aid contributors.\n\n\n---\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1865\n'],['closed'],[10],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nI have a PR in progress\n', ""**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nhttps://github.com/spring-projects/spring-framework/pull/1865\n\nFirst off, a massive apology for the size of the PR. It turned out to be a lot more involved that I first thought. Other than the number of files touched, I don't think there's too many controversial parts to the PR. Perhaps the one that might cause the the biggest concern is the change in imports. I've added rules to enforce the import order based on [the rules in the WIKI](https://github.com/spring-projects/spring-framework/wiki/Code-Style#import-statements) but I've also enforced that `star` static imports shouldn't be allowed. This was mainly so I could use IDE tooling, but I also think it makes sense as it's very easy to mess up if the same method name is declared in more than one `star` import. I've had this happen quite often with Mockito and Hamcrest. I also think it's easier to read the source offline when when exact import statements are declared.\n\nThe other one that might be a bit controversial is single argument lambdas. In Spring Boot we opted to always use the parentheses around the argument so that single argument and multi-argument lambdas look the same.\n\nLet me know if you want me to refine any of the rules or rework the commits in any way.\n\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nPhil, there is plenty of good polish in that PR but it also adapts a few widespread things that we intentionally did differently: e.g. no copyright headers on package-info, no ""this."" prefix on logger access, no type+""this."" prefix in inner classes for access to outer state... and allowing star imports in test classes.\n\nGenerally speaking, I\'m not sure whether enforcing production checkstyle guidelines on test sources is necessary or even desirable. At the very least, we could have more relaxed guidelines for test sources. For a start, enumerating the assertion method imports for every single test class feels odd to me... but I\'m also generally much more relaxed about the code style used for test methods or inner classes used by them, with many production rules not needing to apply there.\n\nAs for single-argument lambdas, I visually object to the enforced parentheses there. Frankly, I\'d rather wrap the expression itself in additional parentheses than such a plain parameter name part. We knew you chose differently in Boot but I\'m afraid I\'m not up for changing our style here in this respect.\n\nThe equals/hashCode stuff is unfortunately a common false signal by style-checking tools. All of those classes were valid since the superclass `hashCode()` implementation has a base hash that the subclasses choose to keep in that coarse-grained fashion. Enforcing `hashCode()` in those subclasses seems rather pointless, in particular when the overridden methods literally just call super and are effectively just there to keep checkstyle happy.\n\nWith respect to consistent code blocks and consistent ternary expression style, there were a few glitches... but also a few cases where we intentionally used one-line if variants, e.g. in `AbstractBeanDefinition` for better readability of that long if cascade. I\'m also not opposed to shortened blocks in test classes, and I don\'t see all those inverted ternary expressions as really worthwhile... when local readability doesn\'t really improve through that measure.\n\nAll in all, from where I stand at the moment, the PR itself is way too much to merge. Let me rather go through the commits individually and hand-pick key changes while ignoring a whole range of others... and see where we end up with. In particular, I\'m going to focus on production source fine-tuning, not touching test sources unless there is something totally bogus there. Once I\'ve done an initial pass through this, let\'s see which checkstyle rules we\'ll eventually set up.\n\nLast but not least, thanks for your efforts there! This is pointing out a lot of stuff worth reviewing, even in areas where we might not enforce hard rules eventually.\n', '**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nThanks for the fast review, I know there\'s a way too much in one PR so I was expecting to need a few rounds. I might be able to do something with the commits I have locally which are a lot more fine grained.\n\n> Phil, there is plenty of good polish in that PR but it also adapts a few widespread things that we intentionally did differently: e.g. no copyright headers on package-info, no ""this."" prefix on logger access, no type+""this."" prefix in inner classes for access to outer state... and allowing star imports in test classes.\n\nI figured some of those were intentional, but I wasn\'t 100% sure. For Spring Boot I have a lot of IDE templates and auto-cleanup enabled so I\'ve tended to take a blanket rule over exceptions. For example, if I create a new class file I get the copyright header, but Eclipse doesn\'t give me a way to skip it only for `package-info.java` files. Likewise, if I save a file in Spring Boot the IDE automatically adds `this.`, but it doesn\'t offer a way to skip it for `this.logger`. Same with star imports, I either get all or none, so I opted for none.\n\nI intentionally started this PR with the same approach to see what you thought about it. I think with checkstyle we can refine the rules to enforce what we want. I\'ll have a look to see if we can refine some of those checks to also enforce the exceptions. For me, one of the biggest benefits to checkstyle is helping to know what the rules are. I had no idea that `this.logger` shouldn\'t be used, so I think it would be really beneficial to enforce that one.\n\n> Generally speaking, I\'m not sure whether enforcing production checkstyle guidelines on test sources is necessary or even desirable. At the very least, we could have more relaxed guidelines for test sources. For a start, enumerating the assertion method imports for every single test class feels odd to me... but I\'m also generally much more relaxed about the code style used for test methods or inner classes used by them, with many production rules not needing to apply there.\n\nIt\'s easy to add a blanket exclude for `src/test/*` if that\'s a better option. I didn\'t do that for pretty much the same reason as above. Eclipse doesn\'t offer an easy opt-out of formatting and cleanup for `src/test` so I just treated them in exactly the same way.\n\n> As for single-argument lambdas, I visually object to the enforced parentheses there. Frankly, I\'d rather wrap the expression itself in additional parentheses than such a plain parameter name part. We knew you chose differently in Boot but I\'m afraid I\'m not up for changing our style here in this respect.\n\nNo problem, I wasn\'t 100% sold on it myself at first in Boot (but I do really like the consistency now). I can refine the checkstyle rule in the other direction and enforce that all single parameter lambdas must _not_ have parentheses.\n\n> The equals/hashCode stuff is unfortunately a common false signal by style-checking tools. All of those classes were valid since the superclass hashCode() implementation has a base hash that the subclasses choose to keep in that coarse-grained fashion. Enforcing hashCode() in those subclasses seems rather pointless, in particular when the overridden methods literally just call super and are effectively just there to keep checkstyle happy.\n\nI agree, It\'s a little pointless. On the other hand, it found at least one that was genuine I think. Do you think the empty `hashCode` is worth it for those few false-positive cases, since it helps when new code is developed? Or would you rather drop that rule entirely?\n\n> With respect to consistent code blocks and consistent ternary expression style, there were a few glitches... but also a few cases where we intentionally used one-line if variants, e.g. in AbstractBeanDefinition for better readability of that long if cascade.\n\nI could either drop the rule, or add an exception for the few cases where it looks better shortened. I\'m personally in favor of hard rules here, just so nothing is open to interpretation. I think I use more brain cycles working out why a bit of code is formatted differently than just dealing with more whitespace.\n\n> I\'m also not opposed to shortened blocks in test classes, and I don\'t see all those inverted ternary expressions as really worthwhile... when local readability doesn\'t really improve through that measure.\n\nIf we drop test checks then those blocks won\'t be enforced. On the other hand, if it\'s test code perhaps if doesn\'t really matter if they take up a bit more space? The ternary things is a bit strict as well. Stephane pointed out that you polish a lot of them to use `!=` and he finds that it helps when scanning code because his eyes just go `(the test ? the not equals case ? the equals case)`. Individually they don\'t add much, but collectively they might help. It will be easy to make that an option if you prefer?\n\n> All in all, from where I stand at the moment, the PR itself is way too much to merge. Let me rather go through the commits individually and hand-pick key changes while ignoring a whole range of others... and see where we end up with. In particular, I\'m going to focus on production source fine-tuning, not touching test sources unless there is something totally bogus there. Once I\'ve done an initial pass through this, let\'s see which checkstyle rules we\'ll eventually set up.\n\nI\'m happy to have another pass here as well if it helps. Splitting out the PR into test, production and unwinding a few of the rules discussed above shouldn\'t take me too long. Probably the most labor intensive part was the javadoc changes so I\'d be super happy if those could go in?\n\n> Last but not least, thanks for your efforts there! This is pointing out a lot of stuff worth reviewing, even in areas where we might not enforce hard rules eventually.\n\nSorry it ballooned into such a monster. It really ended up being quite extreme all things considered!\n', '**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\n3 things...\n1. Thanks for taking the initiative here.\n2. Yes, that is indeed quite a doozie of a PR. ;)\n3. Regarding the Eclipse formatter settings, I took a look, but TBH it\'s impossible to make heads or tails of that diff. Would you mind sorting the current settings on `master` alpha-numerically (and pushing to `master`) and then sort your updated settings the same way so that the diff becomes suitable for human consumption? That would make it much easier for me to make sense of the changes. Also, please change ""5.0"" to ""5.1"" for `@since` tags for new types.\n\nCheers!\n', ""**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nI'm doing another round on this one, I'll take the eclipse settings as different commit.\n"", '**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\n[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen) The eclipse update is pushed\n', '**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\n[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) I\'ve forced pushed a second round so the PR should be a bit easier to digest now. I know you wanted the javadoc one as a different PR but I\'ve left it in this one for now (otherwise I can\'t get checkstyle to pass).\n\nHere are the updates:\n\n- Tests are no longer verified and I\'ve removed the test source from each commit. I\'ve added a couple of commits for test polishing that I still think is worthwhile.\n- The javadoc commits has been squashed into a single commit. The `@param` rule on classes has been changed to match the existing style.\n- The copyright header is no longer applied to `package-info.java` and I\'ve added a rule to enforce that nobody adds one by mistake.\n- I\'ve kept the block style rule but changed {[AbstractBeanDefinition.equals}} in a polish commit to make it more palatable.\n- The `this.` rule is now enforced for most items but relaxed for inner classes. I\'ve added a rule to make sure `this.logger` is never used.\n- I\'ve kept the rule of equals must have hashcode but added exceptions for the override cases. There are still a few legitimate ones I think.\n- The lambda rules are now enforced in the other direction (all single arg lambdas must not use parenthesis)\n- Star imports have still been expanded in the src/main but we can do another round on this if you let me know the exceptions.\n- I\'ve completely dropped the ternary checks for now. I\'m not sure what the rules should be regarding parenthesis. I\'ve see `a & b ? ""foo"" : ""bar""`, `(a & b) ? ""foo"" : ""bar""` and `(a & b ? ""foo"" : ""bar"")`. If there\'s a rule that can be applied I can refine the checkstyle code.\n\n', '**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\n[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)\n\n> The eclipse update is pushed\n\nWhere? To a different branch?\n', '**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\nAhhh... you pushed to `master`. Found the commit.\n']"
ae43b17fa0f7c6303a53a97803a8a64ce3d42b01,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/JsonViewResponseBodyAdvice.java,Add_Condition,"+
-import org.springframework.util.Assert;
- * {@code @RequestMapping} or {@code @ExceptionHandler} method. The serialization
- * view specified in the annotation will be passed in to the
- * {@code MappingJackson2HttpMessageConverter} which will then use it to
+ * {@code @RequestMapping} or {@code @ExceptionHandler} method.
+ *
+ * <p>The serialization view specified in the annotation will be passed in to
+ * the {@code MappingJackson2HttpMessageConverter} which will then use it to
+ * <p>Note that despite {@code @JsonView} allowing for more than one class to
+ * be specified, the use for a response body advice is only supported with
+ * exactly one class argument. Consider the use of a composite interface.
+ *
-		Assert.isTrue(annotation.value().length != 0, ""No view class in JsonView annotation on "" + returnType);
-		bodyContainer.setSerializationView(annotation.value()[0]);
+		Class<?>[] classes = annotation.value();
+		if (classes.length != 1) {
+			throw new IllegalArgumentException(
+					""@JsonView only supported for response body advice with exactly 1 class argument: "" + returnType);
+		}
+		bodyContainer.setSerializationView(classes[0]);",10,condition,JsonViewResponseBodyAdvice throws IllegalArgumentException in case of >1 view class specified,"Issue: SPR-12270
",,16875,1,['Clarify the single class restriction with @JsonView for a response body advice [SPR-12270]'],"['**[Alexey Krylov](https://jira.spring.io/secure/ViewProfile.jspa?name=lexx)** opened **[SPR-12270](https://jira.spring.io/browse/SPR-12270?redirect=false)** and commented\n\nCurrently only one `@JsonView` class is used:\n\nJsonViewResponseBodyAdvice.java:\n\n```\n\t@Override\n\tprotected void beforeBodyWriteInternal(MappingJacksonValue bodyContainer, MediaType contentType,\n\t\t\tMethodParameter returnType, ServerHttpRequest request, ServerHttpResponse response) {\n\n\t\tJsonView annotation = returnType.getMethodAnnotation(JsonView.class);\n\t\tAssert.isTrue(annotation.value().length != 0, ""No view class in JsonView annotation on "" + returnType);\n\t\tbodyContainer.setSerializationView(annotation.value()[0]);\n\t}\n```\n\nMy code:\n\n```\n@JsonView({Category.Default.class, Product.Default.class})\n   @RequestMapping(""/catalog.json"")\n   public Collection<Category> getCatalog(@Named(""deviceId"") @RequestParam(value = ""device_id"", required = false) Integer deviceId) {\n       return retrieveCatalog(deviceId);\n   }\n```\n\nIn this example only Category.Default.class will be used.\nIt will be very nice to have full support for `@JsonView`.\n\n\n\n---\n\n**Affects:** 4.1 GA\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/a3fd00eadbc59698a9c7870fb3539431d4579f00, https://github.com/spring-projects/spring-framework/commit/ae43b17fa0f7c6303a53a97803a8a64ce3d42b01\n']",['closed'],[4],"['**[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze)** commented\n\nHi Alexey,\n\n`@JsonView` was originally created to annotate a field with one or multiple views, but like JAX-RS `@JsonView` support (more details at http://wiki.fasterxml.com/JacksonJsonViews), we are reusing this annotation in Spring MVC for another purpose: enabling a view on a per handler method basis, and in this context Jackson API does not support multiple views.\n\nI am going to add a check in order to actively reject multiple view classes in this context, and update our documentation accordingly.\n\nFor your need, you should use a single view interface that will inherit of multiple other ones. Jackson will use the view specified and all the inherited ones to serialize the output.\n\nPlease also notice that we are going to change the default configuration in the upcoming 4.1.1 release when using `@EnableWebMvc` or `<mvc:annotation-driven />`. By default, `SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION` will be set to false in order to avoid including non annotated fields/properties in the output when `@JsonView` is used on a method handler. See #16793 for more details.\n\nRegards,\nSébastien Deleuze\n', '**[Alexey Krylov](https://jira.spring.io/secure/ViewProfile.jspa?name=lexx)** commented\n\nHi Sebastien,\nWill try this approach with one composite interface.\nThanks.\n', '**[Alexey Krylov](https://jira.spring.io/secure/ViewProfile.jspa?name=lexx)** commented\n\nYes, it works!\nThanks!\n\n```\npublic interface NativeClient extends Category.WithProductsCount, Product.WithSections, Product.WithoutDescription {\n}\n...\n\n@JsonView(NativeClient.class)\n```\n\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n[Sébastien Deleuze](https://jira.spring.io/secure/ViewProfile.jspa?name=sdeleuze), I've revised `JsonViewResponseBodyAdvice`'s assertion to insist on exactly 1 class specified there. Let's mark this issue as resolved once we've also documented that as discussed on the team call today.\n\nJuergen\n""]"
aeb77cf4e1506745db53b4514479368387e72786,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Add_Condition,"-						// Another thread is busy in a singleton factory callback, potentially blocked.
-						// Fallback as of 6.2: process given singleton bean outside of singleton lock.
-						// Thread-safe exposure is still guaranteed, there is just a risk of collisions
-						// when triggering creation of other beans as dependencies of the current bean.
-						if (threadWithLock != null && logger.isInfoEnabled()) {
-							logger.info(""Creating singleton bean '"" + beanName + ""' in thread \"""" +
-									Thread.currentThread().getName() + ""\"" while thread \"""" + threadWithLock.getName() +
-									""\"" holds singleton lock for other beans "" + this.singletonsCurrentlyInCreation);
+						if (threadWithLock != null) {
+							// Another thread is busy in a singleton factory callback, potentially blocked.
+							// Fallback as of 6.2: process given singleton bean outside of singleton lock.
+							// Thread-safe exposure is still guaranteed, there is just a risk of collisions
+							// when triggering creation of other beans as dependencies of the current bean.
+							if (logger.isInfoEnabled()) {
+								logger.info(""Creating singleton bean '"" + beanName + ""' in thread \"""" +
+										Thread.currentThread().getName() + ""\"" while thread \"""" + threadWithLock.getName() +
+										""\"" holds singleton lock for other beans "" + this.singletonsCurrentlyInCreation);
+							}",10,condition,Restore correct threadWithLock check without isInfoEnabled(),"See gh-23501
",,23501,1,['Synchronization during singleton creation may result in deadlock'],"[""**Affects:** 5.1.9.RELEASE\r\n\r\nDuring singleton creation, `DefaultSingletonBeanRegistry` synchronises on `this.singletonObjects`:\r\n\r\nhttps://github.com/spring-projects/spring-framework/blob/b1171d82967cfd374f0b08f9580fe662fa1a98e8/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java#L204\r\n\r\nWhile synchronized, it then uses the `singletonFactory` to create the singleton:\r\n\r\nhttps://github.com/spring-projects/spring-framework/blob/b1171d82967cfd374f0b08f9580fe662fa1a98e8/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java#L222\r\n\r\nThis call into user code while holding a lock can result in deadlock. We've seen one example reported in [this Spring Boot issue](https://github.com/spring-projects/spring-boot/issues/17765) where Micrometer is also involved. I've also reproduced a very similar problem without Micrometer and with no synchronization in user code:\r\n\r\n```java\r\npackage example;\r\n\r\nimport javax.annotation.PostConstruct;\r\nimport javax.validation.Validator;\r\nimport javax.validation.constraints.Max;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.context.annotation.Lazy;\r\nimport org.springframework.validation.annotation.Validated;\r\nimport org.springframework.validation.beanvalidation.LocalValidatorFactoryBean;\r\nimport org.springframework.validation.beanvalidation.MethodValidationPostProcessor;\r\n\r\npublic class SingletonCreationDeadlockTests {\r\n\t\r\n\t@Test\r\n\tpublic void create() {\r\n\t\tnew AnnotationConfigApplicationContext(Config.class).close();;\r\n\t}\r\n\t\r\n\tprivate static final class Registry {\r\n\t\t\r\n\t\tprivate final ConfigProperties properties;\r\n\t\t\r\n\t\tRegistry(ConfigProperties properties) {\r\n\t\t\tthis.properties = properties;\r\n\t\t}\r\n\t\t\r\n\t\tvoid register() {\r\n\t\t\tthis.properties.getSetting();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t@Validated\r\n\tstatic class ConfigProperties {\r\n\r\n\t\t@Max(10)\r\n\t\tprivate int setting = 5;\r\n\r\n\t\tpublic int getSetting() {\r\n\t\t\treturn this.setting;\r\n\t\t}\r\n\r\n\t\tpublic void setSetting(int setting) {\r\n\t\t\tthis.setting = setting;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t@Configuration\r\n\tstatic class Config {\r\n\t\t\r\n\t\t@Bean\r\n\t\tpublic Registry registry(ConfigProperties properties) {\r\n\t\t\treturn new Registry(properties);\r\n\t\t}\r\n\t\t\r\n\t\t@Bean\r\n\t\tpublic ConfigProperties properties() {\r\n\t\t\treturn new ConfigProperties();\r\n\t\t}\r\n\t\t\r\n\t\t@Bean\r\n\t\tpublic LocalValidatorFactoryBean localValidatorFactoryBean() {\r\n\t\t\treturn new LocalValidatorFactoryBean();\r\n\t\t}\r\n\t\t\r\n\t\t@Bean\r\n\t\tpublic static MethodValidationPostProcessor methodValidationPostProcessor(@Lazy Validator validator) {\r\n\t\t\tMethodValidationPostProcessor postProcessor = new MethodValidationPostProcessor();\r\n\t\t\tpostProcessor.setValidator(validator);\r\n\t\t\treturn postProcessor;\r\n\t\t}\r\n\t\t\r\n\t\t@Bean\r\n\t\tpublic Registrar registrar(Registry registry) {\r\n\t\t\treturn new Registrar(registry);\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tstatic class Registrar {\r\n\t\t\r\n\t\tprivate final Registry registry;\r\n\t\t\r\n\t\tRegistrar(Registry registry) {\r\n\t\t\tthis.registry = registry;\r\n\t\t}\r\n\t\t\r\n\t\t@PostConstruct\r\n\t\tvoid register() {\r\n\t\t\tThread thread = new Thread(() -> {\r\n\t\t\t\tregistry.register();\r\n\t\t\t});\r\n\t\t\tthread.start();\r\n\t\t\ttry {\r\n\t\t\t\tthread.join();\r\n\t\t\t} catch (InterruptedException ex) {\r\n\t\t\t\tThread.currentThread().interrupt();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n```\r\n\r\nHere's a zip of a complete project containing the above test: [singleton-creation-deadlock.zip](https://github.com/spring-projects/spring-framework/files/3529528/singleton-creation-deadlock.zip)\r\n\r\nThe deadlock occurs because the main thread has locked `singletonObjects` and then waits for the thread created by `Registrar` to complete. The thread created by `Registrar` ends up waiting to lock `singletonObjects` due to `ConfigProperties` being `@Validated` and the resolution of the `@Lazy` `Validator` requiring a call to `DefaultListableBeanFactory.doResolveDependency` which results in a call to `DefaultSingletonBeanRegistry.getSingleton` where the attempt to lock `singletonObjects` is made.""]",['closed'],[6],"['I am seeing this exact same deadlock. Why are we `synchronizing` on a `ConcurrentHashMap (singletonObjects)` anyways?', ""We've just seen this problem again in https://github.com/spring-projects/spring-boot/issues/33070. Here's a slightly simpler recreation that uses an `ObjectProvider` rather than a `@Lazy` `Validator` to trigger the problem:\r\n\r\n```java\r\npackage com.example.demo;\r\n\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.ObjectProvider;\r\nimport org.springframework.context.annotation.AnnotationConfigApplicationContext;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\n\r\nimport jakarta.annotation.PostConstruct;\r\n\r\npublic class SingletonCreationDeadlockTests {\r\n\t\r\n\t@Test\r\n\tpublic void create() {\r\n\t\tnew AnnotationConfigApplicationContext(Config.class).close();;\r\n\t}\r\n\t\r\n\tprivate static final class Registry {\r\n\t\t\r\n\t\tprivate final ObjectProvider<ConfigProperties> properties;\r\n\t\t\r\n\t\tRegistry(ObjectProvider<ConfigProperties> properties) {\r\n\t\t\tthis.properties = properties;\r\n\t\t}\r\n\t\t\r\n\t\tvoid register() {\r\n\t\t\tthis.properties.getIfAvailable().getSetting();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tstatic class ConfigProperties {\r\n\r\n\t\tprivate int setting = 5;\r\n\r\n\t\tpublic int getSetting() {\r\n\t\t\treturn this.setting;\r\n\t\t}\r\n\r\n\t\tpublic void setSetting(int setting) {\r\n\t\t\tthis.setting = setting;\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\t@Configuration\r\n\tstatic class Config {\r\n\t\t\r\n\t\t@Bean\r\n\t\tpublic Registry registry(ObjectProvider<ConfigProperties> properties) {\r\n\t\t\treturn new Registry(properties);\r\n\t\t}\r\n\t\t\r\n\t\t@Bean\r\n\t\tpublic Registrar registrar(Registry registry) {\r\n\t\t\treturn new Registrar(registry);\r\n\t\t}\r\n\t\t\r\n\t\t@Bean\r\n\t\tpublic ConfigProperties properties() {\r\n\t\t\treturn new ConfigProperties();\r\n\t\t}\r\n\t\t\r\n\t}\r\n\t\r\n\tstatic class Registrar {\r\n\t\t\r\n\t\tprivate final Registry registry;\r\n\t\t\r\n\t\tRegistrar(Registry registry) {\r\n\t\t\tthis.registry = registry;\r\n\t\t}\r\n\t\t\r\n\t\t@PostConstruct\r\n\t\tvoid register() {\r\n\t\t\tThread thread = new Thread(() -> {\r\n\t\t\t\tregistry.register();\r\n\t\t\t});\r\n\t\t\tthread.start();\r\n\t\t\ttry {\r\n\t\t\t\tthread.join();\r\n\t\t\t} catch (InterruptedException ex) {\r\n\t\t\t\tThread.currentThread().interrupt();\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t}\r\n\r\n}\r\n```"", ""The problem here is the starting of a new thread in `@PostConstruct` which is conceptually a variant of `InitializingBean.afterPropertiesSet`, only really meant to validate configuration state before publishing the bean instance to the container (which is why it has happening within the singleton creation lock). It's a bit like the end of a constructor implementation.\r\n\r\nDoing extensive work that might trigger new threads - and even wait for them to return - is rather meant to happen in a `SmartInitializingSingleton.afterSingletonsInstantiated` callback (or in an `ApplicationListener<ContextRefreshedEvent>` or the like). For a simple guideline: Whatever you would not do in a constructor, you should not do in a `@PostConstruct` method either.\r\n\r\nRevisiting the singleton creation lock is a tough challenge due to singleton beans typically being part of a larger bean dependency graph. With a relaxed per-bean lock, circular references might run into a deadlock when triggered from different threads. There is no simple works-for-everything solution here, I'm afraid."", 'Thanks, Juergen. The new thread started in `@PostConstruct` was just a synthetic way of recreating the deadlock. In the latest situation where we\'ve seen the problem there\'s no user code starting or joining a thread.\r\n\r\nThe two threads that are involved are the main thread and the JVM\'s ""Notification Thread"". Due to Micrometer listening for GC notifications, the notification thread is making a call to a `SingletonSupplier` that\'s calling `ObjectProvider.getObject()` to supply the singleton. This results in it waiting to take the singleton creation lock. At the same time, the main thread is holding the singleton creation lock and then ends up trying to call the same `SingletonSupplier` which is locked by the notification thread.', 'Thanks for the clarification, Andy - that clarifies a lot.\r\n\r\nCould Micrometer possibly only start listening to GC notifications once it is fully initialized, including the beans that it depends on? It seems brittle to let GC notifications trigger any kind of bean initialization to begin with...', ""It's tricky and quite complex. In some situations, listening to the GC notification won't cause any bean creation. It will cause bean creation if you're using Prometheus, have Exemplars enabled, and the lazily created `SpanContextSupplier` implementation hasn't already been created. The laziness is necessary as there's a dependency cycle otherwise:\r\n\r\n```\r\n/**\r\n * Since the MeterRegistry can depend on the {@link Tracer} (Exemplars) and the\r\n * {@link Tracer} can depend on the MeterRegistry (recording metrics), this\r\n * {@link SpanContextSupplier} breaks the cycle by lazily loading the {@link Tracer}.\r\n */\r\n```\r\n\r\nI take the general point though that in all likelihood we need to find a way to resolve this in Boot and/or Micrometer.\r\n\r\n/cc @jonatan-ivanov""]"
af03fa765785973944bed689250b13c5ea9ff6f7,spring-projects/spring-framework,spring-context-indexer/src/main/java/org/springframework/context/index/processor/StandardStereotypesProvider.java,Condition_Change,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
- * {@code jakarta.*} annotation <i>present</i> on a class or interface.
+ * {@code jakarta.*} or {@code javax.*} annotation <i>present</i> on a class or
+ * interface.
-			if (type.startsWith(""jakarta."")) {
+			if (type.startsWith(""jakarta."") || type.startsWith(""javax."")) {",2,condition,Reinstate support for javax.* annotations in component indexer,"- for consistency with the changes made in e1826d2322

See gh-31090
",,31090,1,['Reinstate support for legacy JSR-250 `@javax.annotation.ManagedBean` and JSR-330 `@javax.inject.Named` annotations'],"['With the migration to Jakarta annotations in 6.0, we switched to supporting `@jakarta.annotation.ManagedBean` and `@jakarta.inject.Named` annotations for component scanning and component name lookups.\r\n\r\nTo better assist projects in the migration to Spring 6+, we should reinstate support for the legacy JSR-250 `@javax.annotation.ManagedBean` and JSR-330 `@javax.inject.Named` annotations so that existing compiled code will continue to work as expected.\r\n\r\n## Related Issues\r\n\r\n- #27444\r\n- #30695\r\n\r\n## Deliverables\r\n\r\n- [x] Support `@javax.annotation.ManagedBean` and `@javax.inject.Named` in `ClassPathScanningCandidateComponentProvider#registerDefaultFilters(...)`.\r\n- [x] Support `@javax.annotation.ManagedBean` and `@javax.inject.Named` in `AnnotationBeanNameGenerator#isStereotypeWithNameValue(...)`.\r\n- [x] Update tests.\r\n- [x] Update Javadoc.\r\n']",['closed'],[1],['Current work on this feature can be viewed in the following feature branch: https://github.com/spring-projects/spring-framework/compare/main...sbrannen:spring-framework:issues/gh-31090-legacy-ManagedBean-and-Named-annotations']
af13580fd52be266df4e10b058c134bf05373d9f,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/MvcUriComponentsBuilder.java,Remove_Condition,"-			for (int i = 0; i < this.argumentValues.length; i++) {
-				this.argumentValues[i] = null;
-			}",3,iteration,Remove unnecessary array initialization,,,,0,N/A,N/A,N/A,N/A,N/A
b082f546ecf781af7d572c22dc52f0c49760452b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ReflectionUtils.java,Condition_Change,"-				List<Method> defaultMethods = findConcreteMethodsOnInterfaces(clazz);
+				List<Method> defaultMethods = findDefaultMethodsOnInterfaces(clazz);
-	private static List<Method> findConcreteMethodsOnInterfaces(Class<?> clazz) {
+	private static List<Method> findDefaultMethodsOnInterfaces(Class<?> clazz) {
-			for (Method ifcMethod : ifc.getMethods()) {
-				if (ifcMethod.isDefault()) {
+			for (Method method : ifc.getMethods()) {
+				if (method.isDefault()) {
-					result.add(ifcMethod);
+					result.add(method);",10,"condition, iteration",Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
b0d273e047871a50709535a8af8823a2b892a9ad,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/support/BitsCronField.java,Condition_Change,"-		if (value.indexOf('?') != -1) {
+		if (value.equals(""?"")) {",2,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
b0e6091cadeaf29a95ab7d85eebd3c46671b6ac6,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/SubProtocolWebSocketHandler.java,Add_Condition,"-			logger.error(""No session for "" + message);
+			if (logger.isDebugEnabled()) {
+				// The broker may not have removed the session yet
+				logger.debug(""No session for "" + message);
+			}",4,condition,"Lower ""no session"" message log level in SubProtocolWSH","Issue: SPR-12247
",,16861,1,['Sending message in ApplicationListener<SessionDisconnectEvent> results in ERROR level logging  [SPR-12247]'],"['**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12247](https://jira.spring.io/browse/SPR-12247?redirect=false)** and commented\n\nWhen sending a message in an `ApplicationListener<SessionDisconnectEvent>` I get an error similar to the following:\n\n```\nERROR 3993 --- [tboundChannel-3] o.s.w.s.m.SubProtocolWebSocketHandler    : No session for GenericMessage [payload=byte[19], headers={simpMessageType=MESSAGE, simpSubscriptionId=sub-3, contentType=application/json;charset=UTF-8, simpSessionId=1q1pejao, simpDestination=/topic/friends/signout}]\n```\n\nThis should not result in error level logging.\n\nThe reason I want to send a message from an `ApplicationListener<SessionDisconnectEvent>` is that I am writing a chat application that is sending a message to all connected clients to indicate the user has signed out.\n\n\n---\n\n**Affects:** 4.1 GA\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b0e6091cadeaf29a95ab7d85eebd3c46671b6ac6\n']",['closed'],[4],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nHow are you sending the message exactly?\n', '**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** commented\n\nI\'m using the `SimpMessageSendingOperations` as shown below:\n\n```\nmessagingTemplate.convertAndSend(""/topic/friends/signout"", Arrays.asList(user.getUsername()));\n```\n\nYou can find a complete example in [github](https://github.com/rwinch/spring-security-0-to-4.0/blob/dda960c125c4ef2cfb34f5bb8c9942ffc1b8b46f/src/main/java/sample/config/WebSocketConfig.java#L167)\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nOkay most likely the broker hasn't had a chance to remove the subscription yet.\n"", '**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** commented\n\nThanks for the quick replies. This was my guess as well.\n']"
b121c0e2eac898d9762523af01895ca18219126d,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/TomcatHttpHandlerAdapter.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+import javax.servlet.ServletInputStream;
+			ServletInputStream inputStream = ((ServletRequest) getNativeRequest()).getInputStream();
+			if (!(inputStream instanceof CoyoteInputStream)) {
+				// It's possible InputStream can be wrapped, preventing use of CoyoteInputStream
+				return super.readFromInputStream();
+			}
-				ServletRequest request = getNativeRequest();
-				int read = ((CoyoteInputStream) request.getInputStream()).read(byteBuffer);
+				int read = ((CoyoteInputStream) inputStream).read(byteBuffer);",8,condition,Avoid ClassCastException in TomcatHttpHandlerAdapter,"Closes gh-24707
",,24707,1,['Avoid ClassCastException for CoyoteInputStream in TomcatHttpHandlerAdapter'],"[""Servlet filter added in Spring Boot's `org.springframework.boot.web.embedded.tomcat.TomcatContextCustomizer` may override `HttpServletRequestWrapper.getInputStream()` and return an object derived from `ServletInputStream` that is not assignment compatible with Tomcat's `CoyoteInputStream`.""]",['closed'],[6],"['@sada-sigsci, do you have a concrete use case where you encountered a `ClassCastException` in conjunction with the `TomcatHttpHandlerAdapter`?', 'Tentatively slated for 5.2.5 since this seems like a potential bug.', 'Thank you for reviewing the PR.\r\nYes, web application security servlet filter middleware we work on reads the POST body and inspects for any anomalies before the HTTP servlet can read the POST body. Unbuffered POST body can be read (ServletInputStream.markSupported() may return false) only once in the filter. So the servlet filter has to extend the ServletInputStream class and wrap the body already read in the filter.', '`TomcatHttpHandlerAdapter` is for use in WebFlux where direct use of the Servlet is not supported. It is expected to use `WebFilter` instead. For example Spring Security provides a WebFlux integration based on that.\r\n\r\nAs an aside, when Servlet 3.1 non-blocking I/O is used, as in WebFlux, quite a few other parts of the Servlet API should not be used, or would interfere if used.\r\n\r\n', 'Example application is standard Reactive `SpringBootApplication` using embedded Tomcat instead of default Netty and customized using component `WebServerFactoryCustomizer<TomcatReactiveWebServerFactory>`.\r\n\r\nApplication was throwing ClassCastException when `@RestController` method tried to read `@RequestBody`. \r\n\r\n`TomcatHttpHandlerAdapter` wrapped `httpHandlerServlet` and added to `TomcatReactiveWebserver` in spring-boot(`TomcatReactiveWebServerFactory.java`). This fix is required so the servlet `httpHandlerServlet` is able to read the POST body on behalf of application `@RequestBody` \r\n\r\nOur middleware class derived from ServletInputStream overrides non-blocking i/o methods and `ReadListener` of servlets 3.1 ', ""So you are wrapping `ServletInputStream` and don't want it (e.g. unwrapped and) read more efficiently via `CoyoteInputStream` writing directly to a `ByteBuffer` (vs via `byte[]` first)? ""]"
b1231de062f58571702e77ad9a3896fdbad092ef,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/AbstractNestablePropertyAccessor.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-	private static int getPropertyNameKeyEnd(String propertyName, int startIndex) {
+	private int getPropertyNameKeyEnd(String propertyName, int startIndex) {
-					// The property name contains opening prefix(es)
+					// The property name contains opening prefix(es)...
-						// No unclosed prefix(es) in the property name (left), this is the suffix we are looking for
+						// No unclosed prefix(es) in the property name (left) ->
+						// this is the suffix we are looking for.
-					} else {
-						// This suffix does not close the initial prefix, but one that occurred within the property name
+					}
+					else {
+						// This suffix does not close the initial prefix but rather
+						// just one that occurred within the property name.
+",6,condition,Fix formatting,"See gh-21855
",,21855,1,"['Correctly parse property name in path ""map[key[foo]]""']","[""We have a `Bean` that contains a `Map`. In this `Map` we want to save properties with property names which contain an index that is relevant for our application only, like `key5[foo]`. For spring that index doesn't matter, it should just treat `key5[foo]` as property name.\r\nHowever spring-bean is not able to correctly retrieve the property name, it tries to retrieve `key5[foo` (missing square bracket at the end). That's because spring just looks for the first occurrence of `]` and thinks it's the closing square bracket of the property name, however in our case that square bracket is part of the property name, and the relevant square bracket for spring (to actually close the property name) comes afterwards.\r\n\r\n- [x] Added tests\r\n- [x] Signed the CLA.\r\n\r\nWould be nice if this could be backported to `5.1.x`.\r\nThanks!""]",['closed'],[3],"[""The Codacy check fails because the `switch` statement I added does not have a `default`. However that isn't necessary for the logic I added.\r\nDo I really have to add an empty/no-op `default` to that `switch` statement?"", '@jhoeller any chance you will assign this issue to the `5.1.5` milestone? I think the bug here - as well as the fix - is obvious. Thanks!', ""On review, I'll rather make this a 5.2 topic since the bean property binding is a high-risk area for regressions. Even if some such paths are not meant to be valid from our side, people may encounter e.g. property paths with incomplete nested brackets which we would possibly parse differently then.""]"
b13f86cf461feaa32f5298a0f12f17e79d7a2a32,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/util/RfcUriParser.java,Remove_Condition,"+					case '.':
+						parser.index(--i);
+						parser.advanceTo(PATH);
+						break;
-						if (c == '.') {
-							parser.index(--i);
-						}",7,condition,Fix failing tests in spring-test after recent changes,"See gh-33639
",,33639,1,['Add URL Parser for RFC 3986'],"['Before 6.2, `UriComponentsBuilder` used regex expressions. Generally, they split on the main component delimiters, `"":""`, `""/""`, `""?""`, and `""#""`, but did not enforce deviations from the allowed character set by component. The resulting `UriComponents` can then encode any non-conforming characters.\r\n\r\nRegular expressions are convenient, but provide limited control and visibility. This is why in #32513 we added an implementation of the URL parsing algorithm from the [WhatWg URL Living Standard](https://url.spec.whatwg.org/) that browsers use to align on how to handle a wide range of cases leniently. While this provides more robust parsing than before, arguably on a server we can expect URLs that don\'t deviate from the RFC quite as far as what browsers need to be able to handle.\r\n\r\nWe can add a new parser that follows RFC syntax along the lines of the `java.net.URI` or Jetty\'s `HttpUri` parsers. The new parser should respect the main component delimiters, but otherwise leave some room for leniency within each component to allow some characters like spaces or curly braces (URI variables), similar to what the regex expressions did. `UriComponents` can then encode any non-confirming characters that remain after URI variables are expanded.\r\n\r\nIt should be possible to choose which parser to use, RFC or the WhatWG, when more leniency or alignment with browsers is needed.\r\n\r\nThe topic of RFC vs WhatWG parsing was first brought up by @joakime in #33542. For broader context, and possible future effort to standardize lenient parsing of user provided URLs, see https://lists.w3.org/Archives/Public/ietf-http-wg/2024JulSep/0281.html.\r\n']",['closed'],[0],[]
b158110801db32b50243be538165274551a49512,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/AbstractMessageConverterMethodProcessor.java,Condition_Change,"-				if (body != null) {
-					throw new HttpMediaTypeNotAcceptableException(producibleTypes);
-				}
+				if (body != null) {
+					throw new HttpMediaTypeNotAcceptableException(producibleTypes);
+				}",6,condition,Fix debug log for no matching acceptableTypes,,,,0,N/A,N/A,N/A,N/A,N/A
b23cc01cb7981bdaf7274483a69673c519123444,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java,Remove_Condition,"-				Method[] destroyMethods = new Method[destroyMethodNames.length];
+				List<Method> destroyMethods = new ArrayList<>(destroyMethodNames.length);
+						destroyMethods.add(destroyMethod);
-					destroyMethods[i] = destroyMethod;
-				this.destroyMethods = destroyMethods;
+				this.destroyMethods = destroyMethods.toArray(Method[]::new);
-				if (destroyMethod != null) {
-					invokeCustomDestroyMethod(destroyMethod);
-				}
+				invokeCustomDestroyMethod(destroyMethod);",10,condition,"Revise ""Ignore nonexistent default-destroy-method in XML config""","This commit revises the fix in c811428512ffd04d41e558dbbc672382079ced2c.

Closes gh-30301
",,30301,1,['NPE thrown for nonexistent `default-destroy-method` in XML config'],"['**Affects:** v6.0.7\r\n\r\n---\r\n\r\nWhen I configure the `default-destroy-method` in XML config and there is a bean that does not have a destroy method, a `NullPointerException` is thrown when closing the `ApplicationContext`.\r\n\r\n\r\n### Example Config and Code\r\n\r\n```xml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<beans xmlns=""http://www.springframework.org/schema/beans""\r\n  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\r\n  xsi:schemaLocation=""http://www.springframework.org/schema/beans\r\n        https://www.springframework.org/schema/beans/spring-beans.xsd""\r\n  default-init-method=""myInit""\r\n  default-destroy-method=""myDestroy"">\r\n\r\n  <bean id=""a"" class=""com.wpp.core.c1.s1_6._3.AInit""/>\r\n  <bean id=""b"" class=""com.wpp.core.c1.s1_6._3.BDestroy""/>\r\n\r\n</beans>\r\n```\r\n\r\n```java\r\npackage com.wpp.core.c1.s1_6._3;\r\npublic class AInit {\r\n  public void myInit() {\r\n    System.out.println(""A myInit"");\r\n  }\r\n}\r\n\r\n```\r\n\r\n```java\r\npackage com.wpp.core.c1.s1_6._3;\r\npublic class BDestroy {\r\n  public void myDestroy() {\r\n    System.out.println(""B myDestroy"");\r\n  }\r\n}\r\n```\r\n\r\n```java\r\npackage com.wpp.core.c1.s1_6._3;\r\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\r\npublic class DefaultInitAndDestroyDemo {\r\n  public static void main(String[] args) {\r\n    var context = new ClassPathXmlApplicationContext(""com/wpp/core/c1/s1_6/_3/DefaultInitAndDestroyDemo.xml"");\r\n    context.close();\r\n  }\r\n}\r\n```\r\n\r\n### Exception\r\n\r\n```\r\n09:59:03.853 [main] DEBUG org.springframework.context.support.ClassPathXmlApplicationContext -- Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@880ec60\r\n09:59:04.048 [main] DEBUG org.springframework.beans.factory.xml.XmlBeanDefinitionReader -- Loaded 2 bean definitions from class path resource [com/wpp/core/c1/s1_6/_3/DefaultInitAndDestroyDemo.xml]\r\n09:59:04.088 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory -- Creating shared instance of singleton bean \'a\'\r\nA myInit\r\n09:59:04.123 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory -- Creating shared instance of singleton bean \'b\'\r\n09:59:04.194 [main] DEBUG org.springframework.context.support.ClassPathXmlApplicationContext -- Closing org.springframework.context.support.ClassPathXmlApplicationContext@880ec60, started on Fri Apr 07 09:59:03 CST 2023\r\nB myDestroy\r\n09:59:04.197 [main] WARN org.springframework.beans.factory.support.DefaultListableBeanFactory -- Destruction of bean with name \'a\' threw an exception\r\njava.lang.NullPointerException: Cannot invoke ""java.lang.reflect.Method.getParameterCount()"" because ""destroyMethod"" is null\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:278)\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:238)\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587)\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559)\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1189)\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520)\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1182)\r\n\tat org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1084)\r\n\tat org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1053)\r\n\tat org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1003)\r\n\tat com.wpp.core.c1.s1_6._3.DefaultInitAndDestroyDemo.main(DefaultInitAndDestroyDemo.java:25)\r\n```\r\n\r\n### Related Issues\r\n\r\n- #10879\r\n- #30295\r\n']",['closed'],[3],"['Hi @edfeff,\r\n\r\nThanks for raising the issue and providing the sample application.\r\n\r\nIt turns out that we already have a test in our own test suite which demonstrates the `NullPointerException`.\r\n\r\nIf we run `org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.ignoreDefaultLifecycleMethods()`, we see the following message logged at WARN level.\r\n\r\n```\r\n13:31:19.852 [main] WARN  o.s.b.f.s.DefaultListableBeanFactory - Destruction of bean with name \'foo\' threw an exception\r\njava.lang.NullPointerException: Cannot invoke ""java.lang.reflect.Method.getParameterCount()"" because ""destroyMethod"" is null\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:290) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:239) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1189) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1182) ~[main/:?]\r\n\tat org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.ignoreDefaultLifecycleMethods(DefaultLifecycleMethodsTests.java:70) ~[test/:?]\r\n```', 'This appears to have been a regression introduced in 6.0.x and has been fixed for inclusion in 6.0.8.', 'Reopening to investigate a potentially more suitable fix for the regression.']"
b27735d4a6ab6f0f17174e2cd1ffae1a41dbc219,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/aot/hint/BindingReflectionHintsRegistrar.java,Condition_Change,"+					// For Kotlin reflection
+					typeHint.withMembers(MemberCategory.INTROSPECT_DECLARED_METHODS);
-					if (methodName.startsWith(""component"") || methodName.equals(""copy"")) {
+					if (methodName.startsWith(""component"") || methodName.equals(""copy"") || methodName.equals(""copy$default"")) {",3,condition,Refine BindingReflectionHintsRegistrar Kotlin support,"Closes gh-29593
",,29593,1,['Refine `BindingReflectionHintsRegistrar` Kotlin support'],"[""Originally reported at https://github.com/spring-projects/spring-boot/issues/33351. It looks like Spring Data isn't contributing the necessary reflection hints to allow `BeanWrapper.KotlinCopyUtil.setProperty` to find and invoke the copy method.""]",['closed'],[5],"[""thanks @wilkinsona - we'll take care of it."", 'Looking at `BindingReflectionHintsRegistrar.KotlinDelegate` the `registerComponentHints` method only registers the ones where name equals `copy` which misses those named `copy$default`. \\\\ cc @sdeleuze ', 'adding reflection for the `copy$default` methods solves the issue. Think we should fix this in framework.\r\n```kotlin\r\nhints.reflection().registerType(Book::class.java) {\r\n\tit.withMethod(\r\n\t\t""copy\\$default"",\r\n\t\tlistOf(\r\n\t\t\tTypeReference.of(Book::class.java),\r\n\t\t\tTypeReference.of(java.lang.Long::class.java),\r\n\t\t\tTypeReference.of(java.lang.String::class.java),\r\n\t\t\tTypeReference.of(Int::class.java),\r\n\t\t\tTypeReference.of(java.lang.Object::class.java)),\r\n\t\tExecutableMode.INVOKE\r\n\t)\r\n}\r\nhints.reflection().registerType(Author::class.java) {\r\n\tit.withMethod(\r\n\t\t""copy\\$default"",\r\n\t\tlistOf(\r\n\t\t\tTypeReference.of(Author::class.java),\r\n\t\t\tTypeReference.of(java.lang.Long::class.java),\r\n\t\t\tTypeReference.of(java.lang.String::class.java),\r\n\t\t\tTypeReference.of(java.util.Set::class.java),\r\n\t\t\tTypeReference.of(Int::class.java),\r\n\t\t\tTypeReference.of(java.lang.Object::class.java)),\r\n\t\tExecutableMode.INVOKE\r\n\t)\r\n}\r\n```', 'Thanks, @christophstrobl. I agree that a fix for this belongs in Framework.', 'We should also probably configure `queryAllDeclaredMethods` on those types, see [this comment](https://github.com/spring-projects/spring-data-commons/issues/2737?notification_referrer_id=NT_kwDOAAInNbE0OTI1ODExMDAxOjE0MTEwOQ#issuecomment-1328677161).']"
b35d44bd4c4f2f12d6c337bc96f53f246df3c4c0,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java,Condition_Change,"-			if (bytesRead < buffer.length) {
+			if (bytesRead == -1) {",2,condition,Fix inputstream reading for HTTP range requests,"Prior to this commit, range requests would be served by
ResourceHttpRequestHandler by partially reading the inputstream of
static resources. In case of resources contained in ZIP/JAR containers,
InputStreams may not fill the entire read buffer when calling
`inputStream.read(byte[])`. This was the case when using Spring Boot's
ZipInflaterInputStream - this would then not read the entire file
content and would close the response without writing the expected body
length indicated in the ""Content-Length"" header.

This commit makes sure that the whole resource is read.

Issue: SPR-13661
",,18236,1,['HTTP Range requests hang on large file in nested jar [SPR-13661]'],"['**[Kevin McLaughlin](https://jira.spring.io/secure/ViewProfile.jspa?name=krm1312)** opened **[SPR-13661](https://jira.spring.io/browse/SPR-13661?redirect=false)** and commented\n\nFollowup from #15431.\n\nWe ended up adding a servlet filter that drops attempts to set ACCEPT_RANGE header.\nSample bootapp showing this issue is at https://github.com/krm1312/springrangeissues. Take that project and:\n\n```\nmvn clean package && java -jar bootapp/target/bootapp.jar\n```\n\nand then try a range request with curl:\n\n```\ncurl -vvv -H ""Accept-Encoding: gzip""  -H \'Range: bytes=4726785-5726784\' http://localhost:8080/test/file.bin > /tmp/f\n```\n\nIt effectively hangs.\n\n---\n\n**Affects:** 4.2.2\n\n**Issue Links:**\n- #18235 Allow disabling HTTP range support\n- #15431 Add support for http byte-range requests\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/b35d44bd4c4f2f12d6c337bc96f53f246df3c4c0\n']",['closed'],[2],"['**[Brian Clozel](https://jira.spring.io/secure/ViewProfile.jspa?name=bclozel)** commented\n\nThis has been fixed and should be available shortly on https://repo.spring.io.\n\nI think this problem can only be seen when running a packaged Spring Boot application, so indeed using Spring Boot\'s `ZipInflaterInputStream` for reading resources. Serving resources just using Spring Framework does not show the problem.\n\nYou can test this fix in your Boot application by configuring it to use the latest SNAPSHOT version of Framework. Note: obviously, I don\'t think doing this is supported by the Boot team, but rather a simple way to verify the fix if you want to. You can add the following in your POM to do so (along a repository declaration to `""repo.spring.io/libs-snapshot""`):\n\n```xml\n<properties>\n  <spring.version>4.2.4.BUILD-SNAPSHOT</spring.version>\n</properties>\n```\n\nThanks for this report and this very useful repro project!\n', ""**[Kevin McLaughlin](https://jira.spring.io/secure/ViewProfile.jspa?name=krm1312)** commented\n\nFinally had a chance to test this with our real application.  Looks good.\n\nAlso, as a side note, serving the entire file seems to take about half the time in my unscientific test (time curl) w/ 4.2.4 from localhost.  Not sure if that was expected with the fix, but, we'll take it.\n\nThanks!\n""]"
b6144e5682c966759e7fd16dbac4d4948d332161,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/socket/adapter/AbstractListenerWebSocketSession.java,Add_Condition,"+import org.springframework.util.StringUtils;
-		close(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));
+		if(!StringUtils.hasText(ex.getMessage())) {
+			close(CloseStatus.SERVER_ERROR);
+		}
+		else {
+			close(CloseStatus.SERVER_ERROR.withReason(ex.getMessage()));
+		}",8,condition,Improve setting of WebSocket error status,"See gh-28836
",,28836,1,['Avoid IllegalArgumentException when setting WebSocket error status'],"[""Fixing internal error, when the message of an exception doesn't contain any text.\r\n\r\nIn my application, this probably caused a memory leak. (Which I will retest with a fork, but it will take some time because the issue happened very infrequently)\r\n\r\nThis is how it looks in the log:\r\n```\r\njava.lang.IllegalArgumentException: Reason must not be empty\r\n\tat org.springframework.util.Assert.hasText(Assert.java:289) ~[spring-core-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.CloseStatus.withReason(CloseStatus.java:184) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.onError(AbstractListenerWebSocketSession.java:250) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat reactor.core.publisher.StrictSubscriber.onError(StrictSubscriber.java:106) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:544) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxDoFinally$DoFinallySubscriber.onError(FluxDoFinally.java:119) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.secondError(MonoFlatMap.java:192) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapInner.onError(MonoFlatMap.java:259) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoIgnoreElements$IgnoreElementsSubscriber.onError(MonoIgnoreElements.java:84) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.checkTerminated(FluxFlatMap.java:842) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.drainLoop(FluxFlatMap.java:608) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.drain(FluxFlatMap.java:588) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapMain.innerError(FluxFlatMap.java:863) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxFlatMap$FlatMapInner.onError(FluxFlatMap.java:990) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:258) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxPeekFuseable$PeekConditionalSubscriber.onError(FluxPeekFuseable.java:903) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoSubscribeOn$SubscribeOnSubscriber.onError(MonoSubscribeOn.java:152) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.SinkEmptyMulticast$VoidInner.error(SinkEmptyMulticast.java:247) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.SinkEmptyMulticast.tryEmitError(SinkEmptyMulticast.java:88) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.SinkEmptySerialized.tryEmitError(SinkEmptySerialized.java:65) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.onError(AbstractListenerWebSocketSession.java:245) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat reactor.core.publisher.StrictSubscriber.onError(StrictSubscriber.java:106) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onError(FluxOnAssembly.java:544) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoPeekTerminal$MonoTerminalPeekSubscriber.onError(MonoPeekTerminal.java:258) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat reactor.core.publisher.MonoNext$NextSubscriber.onError(MonoNext.java:93) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat org.springframework.http.server.reactive.WriteResultPublisher$State.publishError(WriteResultPublisher.java:277) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.WriteResultPublisher.publishError(WriteResultPublisher.java:99) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor$State.onError(AbstractListenerWriteProcessor.java:479) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.AbstractListenerWriteProcessor.onError(AbstractListenerWriteProcessor.java:132) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat reactor.core.publisher.StrictSubscriber.onError(StrictSubscriber.java:106) ~[reactor-core-3.4.19.jar!/:3.4.19]\r\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher$State.onError(AbstractListenerReadPublisher.java:497) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher.onError(AbstractListenerReadPublisher.java:145) ~[spring-web-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.adapter.AbstractListenerWebSocketSession.handleError(AbstractListenerWebSocketSession.java:208) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat org.springframework.web.reactive.socket.adapter.StandardWebSocketHandlerAdapter.onError(StandardWebSocketHandlerAdapter.java:120) ~[spring-webflux-5.3.21.jar!/:5.3.21]\r\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.onError(WsHttpUpgradeHandler.java:234) ~[tomcat-embed-websocket-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.websocket.server.WsHttpUpgradeHandler.upgradeDispatch(WsHttpUpgradeHandler.java:161) ~[tomcat-embed-websocket-9.0.64.jar!/:na]\r\n\tat org.apache.coyote.http11.upgrade.UpgradeProcessorInternal.dispatch(UpgradeProcessorInternal.java:60) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.coyote.AbstractProcessorLight.process(AbstractProcessorLight.java:59) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.coyote.AbstractProtocol$ConnectionHandler.process(AbstractProtocol.java:890) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1787) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.net.SocketProcessorBase.run(SocketProcessorBase.java:49) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1191) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.threads.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:659) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat org.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61) ~[tomcat-embed-core-9.0.64.jar!/:na]\r\n\tat java.base/java.lang.Thread.run(Thread.java:833) ~[na:na]\r\n```""]",['closed'],[3],"['I think we could switch to a very generic message instead.', 'Any suggestions? Then I will change the PR accordingly.', ""I've left it as a status-only response since the status code itself communicates the nature. I've also added logging with the exception message at INFO and the full stacktrace at DEBUG.""]"
b65984a0782c96e1799475ebaed45b5ed4a908c6,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java,Condition_Change,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-		for (ProtocolResolver protocolResolver : this.protocolResolvers) {
+		for (ProtocolResolver protocolResolver : getProtocolResolvers()) {",2,iteration,Consume getProtocolResolvers() rather than internal list,"This commit makes sure that DefaultResourceLoader consistently use
getProtocolResolvers() to access additional protocol resolvers. This
allows subclasses to define how the list is provided.

Closes gh-23564
",,23564,1,['Custom DefaultResourceLoader subclass should be able to consume context-provided ProtocolResolvers'],"[""**Affects:** 4.3+\r\n\r\n`ConfigurableApplicationContext` has a `addProtocolResolver` method that can be used to register additional `ProtocolResolver` implementations. As far as I can see, this is the recommended approach that is followed by a number of implementations out there (example in [Spring Cloud AWS](https://github.com/spring-cloud/spring-cloud-aws/blob/f436ecab53dbdbd549e2e73298975a8c34b15931/spring-cloud-aws-context/src/main/java/org/springframework/cloud/aws/context/support/io/SimpleStorageProtocolResolverConfigurer.java#L55)).\r\n\r\nWhen setting a custom `ResourceLoader` on the context, one could get the already registered  `ProtocolResolver` instances (via `getProtocolResolvers`) if they want to reuse them but there is no way to be notified that additional instances have been configured. Unfortunately, the vast majority of the current implementations will register their protocol resolver later.\r\n\r\nA concrete example is Spring Boot Devtools that has to set a custom `ResourceLoader` but should be improved to honour `ProtocolResolver` as well, see https://github.com/spring-projects/spring-boot/issues/9331\r\n\r\nOne way to workaround this problem is to get the registered list every time a resource has to be resolved. If you just want the default behaviour it's not super obvious to do that. I have some prototype in https://github.com/snicoll/spring-boot/commit/1ceba096825869707f3c048d15c7068e3ef0e4a7, wondering if we could improve the code by a change in framework.\r\n\r\n ""]",['closed'],[1],"['As per our discussion today, we should at least make it easier for a custom `DefaultResourceLoader` to consume context-provided ProtocolResolvers. It seems that using the `getProtocolResolvers()` method instead of iterating the internal collection is an easy step to take there, making it convenient enough for Spring Boot and others to arrange for such a scenario. This is also doable for 5.1.10.']"
b6e252495a70d716179db1e91397190ac2a0aee9,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/broker/DefaultSubscriptionRegistry.java,Condition_Change,"-						if (!subs.containsKey(sessionId) || !subs.get(sessionId).contains(subsId)) {
+						List<String> subsForSession = subs.get(sessionId);
+						if (subsForSession == null || !subsForSession.contains(subsId)) {",3,condition,Protect against NPE in DefaultSubscriptionRegistry,"Follow-up fix on the recent commit:
https://github.com/spring-projects/spring-framework/commit/44c31a

Issue: SPR-15543
",,20102,1,['DefaultSubscriptionRegistry should prevent duplicate subscription id in accessCache [SPR-15543]'],"[""**[Bao Tran](https://jira.spring.io/secure/ViewProfile.jspa?name=tran.bao51093)** opened **[SPR-15543](https://jira.spring.io/browse/SPR-15543?redirect=false)** and commented\n\nIn DefaultSubscriptionRegistry, multiple subscriptions on the same session should have unique subscription id's.\nIn DefaultSubscriptionRegistry.addSubscriptionInternal method, there are calls to:\n\n```java\nthis.subscriptionRegistry.addSubscription(sessionId, subsId, destination, expression);\nthis.destinationCache.updateAfterNewSubscription(destination, sessionId, subsId);\n```\n\n* Assume that registerSubscription is called with a message argument.\n* If findSubscriptions method is called with destination argument after addSubscription and before updateAfterNewSubscription, accessCache will contain duplicate subscriptionId for destination - sessionId key.\n* This will lead to a subscriber receives a message twice due to loop in SimpleBrokerMessageHandler.sendMessageToSubscribers\n\n---\n\n**Affects:** 4.3.8\n\n**Issue Links:**\n- #19848 Cannot receive message sometimes with SimpleBrokerMessageHandler\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1427, and commits https://github.com/spring-projects/spring-framework/commit/4fc41eeeb90f9c5cd01f96ec46a1438ce2fbdc0e, https://github.com/spring-projects/spring-framework/commit/b6e252495a70d716179db1e91397190ac2a0aee9, https://github.com/spring-projects/spring-framework/commit/44c31a6aad26ce2a4e7225e93e6fb26612f07b2c, https://github.com/spring-projects/spring-framework/commit/8deec9569c2741c2fc5a78e375765dfb93586f49\n""]",['closed'],[1],['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThanks for finding this and identifying the fix!\n']
b8e663c531a0e1e628095cba37a74efaa40a1419,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/AbstractAutoProxyCreator.java,Remove_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
-	private final Set<Object> earlyProxyReferences = Collections.newSetFromMap(new ConcurrentHashMap<>(16));
+	private final Map<Object, Object> earlyProxyReferences = new ConcurrentHashMap<>(16);
-		if (!this.earlyProxyReferences.contains(cacheKey)) {
-			this.earlyProxyReferences.add(cacheKey);
-		}
+		this.earlyProxyReferences.put(cacheKey, bean);
-			if (!this.earlyProxyReferences.contains(cacheKey)) {
+			if (this.earlyProxyReferences.remove(cacheKey) != bean) {",8,condition,AbstractAutoProxyCreator ignores unused early proxy references,"Closes gh-22370
",,22370,1,['@Transactional beans not getting proxied when being initialized during failed circular reference attempt'],"[""Currently using spring 4.3.22.RELEASE\r\n\r\nWorking in a large project with a bunch of circular preferences.  When creating the bean structure, if bean creation fails initially(seeing a beanCreationException due to a failed ProxyBean creation without a known target class), the entire dependency graph of failed bean creations is rolled back.  In our case, this includes our proxied @ Transactional bean.  When the bean graph creation continues down a different, eventually successful path, the @ Transactional bean is recreated.  However, during the original rollback, InfrastructureAdvisorAutoProxyCreator (extending AbstractAutoProxyCreator) isn't informed, so it's copy of earlyProxyReferences isn't informed that the early bean creation from earlier is gone, so when org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator.postProcessAfterInitialization(Object, String) is called, it does not call wrapIfNecessary, as earlyProxyReferences still contains the bean name, from when it fails the first time.\r\n\r\nNote, that if the circular reference causes a failure only once, this doesn't seem to happen, but if there are 2 failures, it seems to start returning unproxied beans. It appears to be the case that we have to be trying to wire the @ transactional bean into a bean in a different context for this to happen.  It should be noted spring ends up initializing, just with missing proxies, which is almost worse than just failing, as the app comes up in an unknown state""]",['closed'],[2],"[""This is available in `5.1.5.BUILD-SNAPSHOT` from https://repo.spring.io/snapshot now. Feel free to give it an early try before the official 5.1.5 release on Wednesday...\r\n\r\nIt's also available in `4.3.23.BUILD-SNAPSHOT` in case you'd like that branch a try. However, please note that the official 4.3.23 release is only scheduled for late March."", 'Thank you for this fixed.  It appears to have fixed the creation of non-proxied beans.  We had some other issues behind it that have kept us from verifying it 100%']"
b92515bdee5a3f153183e2f86ee5e378c28b0d1e,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java,Condition_Change,"-			if (this.targetName == null) {
+			if (this.targetName == null && logger.isInfoEnabled()) {",2,condition,Add logger.isInfoEnabled check before logger.info,Closes gh-24667,,24667,1,['Add logger.isInfoEnabled check before logger.info'],[''],['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks']
b95362a3fd170a5ee16b90b74d4939efde06db02,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java,Condition_Change,"- * Copyright 2002-2021 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
-			if (StringUtils.startsWithIgnoreCase(request.getContentType(), ""multipart/"")) {
+			String contentType = request.getContentType();
+			if (StringUtils.startsWithIgnoreCase(contentType, ""multipart/"")) {
-				params = (request.getParameterMap().isEmpty() ? """" : ""masked"");
+				// Avoid request body parsing for form data
+				params = (StringUtils.startsWithIgnoreCase(contentType, ""application/x-www-form-urlencoded"") ||
+						!request.getParameterMap().isEmpty() ? ""masked"" : """");",6,condition,Avoid request params access for form data in logRequest,"Close gh-28587
",,28587,1,"['Avoid parsing request body in DispatcherServlet for ""parameters={masked}"" log message']","['**Affects:** spring-webmvc-5.3.20 and possibly many more\r\n\r\nWhen having trace logging enabled... e.g.\r\n```\r\nlogging:\r\n  level:\r\n    org.springframework.web: TRACE\r\n```\r\n\r\nand sending a **POST** request with content type **application/x-www-form-urlencoded**, the body of the request may be consumed by trace logging and only an empty stream or reader be available for the application.\r\n\r\nThe reason seems to be this line: https://github.com/spring-projects/spring-framework/blob/main/spring-webmvc/src/main/java/org/springframework/web/servlet/DispatcherServlet.java#L988\r\n\r\nEven though it only attempts to check for existence of parameters it also triggers parsing of parameters which seems to consume the request body.']",['closed'],[5],"['Yes, It will cause `request::setCharacterEncoding` not working.', 'Potentially related to:\r\n\r\n- #27350', ""This happens transparently when request parameters are accessed. It's how the Servlet API works. We can't prevent it from happening entirely but rather accept that it can happen.\r\n\r\nThere are two ways form data can be used. For data binding, which is the most convenient way to handle form data, it makes no difference because we bind from request parameters. For `@RequestBody`, the message converter relies on `ServletServerHttpRequest`, which reconstitutes the body content from request parameters. So, in most cases you shouldn't notice any of this. \r\n\r\nDid you run into a specific issue or just happened to notice? "", ""Hi @rstoyanchev,\r\n\r\nThanks for your reply.\r\nI came across this issue when trying to forward the raw body content to another network service.\r\n\r\nI understand this might happen transparently (e.g. the FormContentFilter implementation has a similar effect on PATCH requests).\r\nHowever in my opinion it would be better to avoid this to be triggered solely by the log level if possible.\r\nI just wouldn't expect the application behaviour to change when I switch from WARN to DEBUG or TRACE.\r\nWhat do you think?\r\n"", 'I think it\'s important to show ""masked"" for request parameters in order to hint that there is something to see if logging is changed. We could however print the same when the content-type is ""application/x-www-form-urlencoded"" and thus avoid the `getParameters.size()` check for that case.']"
baa7b1c6c84f64465cecdf6ad2e2bf90371cbd7b,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/AntPathMatcher.java,Remove_Condition,"-				return (pattern.endsWith(this.pathSeparator) ? path.endsWith(this.pathSeparator) :
-						!path.endsWith(this.pathSeparator));
+				return (pattern.endsWith(this.pathSeparator) == path.endsWith(this.pathSeparator));
-					if (skipped > 0) {
-						return true;
-					}
-					return (pattDir.length() > 0) && isWildcardChar(pattDir.charAt(0));
+					return (skipped > 0 || (pattDir.length() > 0 && isWildcardChar(pattDir.charAt(0))));",8,condition,Simplified match condition checks,"Issue: SPR-15477
",,20037,1,['Optimize AntPathMatcher when checking for potential matches [SPR-15477]'],"['**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-15477](https://jira.spring.io/browse/SPR-15477?redirect=false)** and commented\n\nHey,\n\njust noticed a possible improvement when checking for potential matches in AntPathMatcher. The problem here is that `toCharArray()` is called in `isPotentialMatch()` and `skipSegment()` which clones the array under the hood and causes allocations that we could avoid.\n\nThe attached patch shows a possible solution with simply using `charAt()` that leads to the following benchmark results. Would be happy if this is accepted.\n\n#### New\n\n```\nBenchmark                                      Mode  Cnt         Score         Error   Units\nBenchmark.testNew                      thrpt   20  43196627,181 ± 1235654,920   ops/s\nBenchmark.testNew:·gc.alloc.rate       thrpt   20         0,001 ±       0,002  MB/sec\nBenchmark.testNew:·gc.alloc.rate.norm  thrpt   20        ? 10??                  B/op\nBenchmark.testNew:·gc.count            thrpt   20           ? 0                counts\n```\n\n#### Old\n\n```\nBenchmark                                                   Mode  Cnt         Score        Error   Units\nBenchmark.testOld                                   thrpt   20  29555122,576 ± 507145,389   ops/s\nBenchmark.testOld:·gc.alloc.rate                    thrpt   20      1052,083 ±     18,027  MB/sec\nBenchmark.testOld:·gc.alloc.rate.norm               thrpt   20        56,000 ±      0,001    B/op\nBenchmark.testOld:·gc.churn.PS_Eden_Space           thrpt   20      1050,787 ±     28,954  MB/sec\nBenchmark.testOld:·gc.churn.PS_Eden_Space.norm      thrpt   20        55,927 ±      1,048    B/op\nBenchmark.testOld:·gc.churn.PS_Survivor_Space       thrpt   20         0,190 ±      0,046  MB/sec\nBenchmark.testOld:·gc.churn.PS_Survivor_Space.norm  thrpt   20         0,010 ±      0,002    B/op\nBenchmark.testOld:·gc.count                         thrpt   20       354,000               counts\nBenchmark.testOld:·gc.time                          thrpt   20       182,000                   ms\n```\n\nCheers,\nChristoph\n\n\n---\n\n**Affects:** 4.3.8\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1399, and commits https://github.com/spring-projects/spring-framework/commit/baa7b1c6c84f64465cecdf6ad2e2bf90371cbd7b, https://github.com/spring-projects/spring-framework/commit/13b39521d80ca5b736c36572de2159144b2f7b26, https://github.com/spring-projects/spring-framework/commit/cd95f346662148b6bb9d2c9a2b11eee334b3d441, https://github.com/spring-projects/spring-framework/commit/84d2e5a3c8a2b559c339996cbc191dddea681748\n']",['closed'],[5],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nOptimizing local computations as well, I guess this would be even better:\n\n```\nprivate int skipSegment(String path, int pos, String prefix) {\n     int skipped = 0;\n     for (int i = 0; i < prefix.length(); i++) {\n          char c = prefix.charAt(i);\n          if (isWildcardChar(c)) {\n               return skipped;\n          }\n          int currPos = pos + skipped;\n          if (currPos >= path.length()) {\n               return 0;\n          }\n          if (c == path.charAt(currPos)) {\n               skipped++;\n          }\n     }\n     return skipped;\n}\n```\n\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nFeel free to update your PR accordingly, we can merge it straight away then. Otherwise I can also proceed with my local changes if you prefer.\n', ""**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** commented\n\nThanks for looking into this. Jep, you're right - we could save a bit more. For completeness reasons the newest benchmark:\n\n```java\nBenchmark.testNew                      thrpt   20  43428506,223 ± 542779,409   ops/s\nBenchmark.testNew:·gc.alloc.rate       thrpt   20         0,001 ±      0,002  MB/sec\nBenchmark.testNew:·gc.alloc.rate.norm  thrpt   20        ? 10??                 B/op\nBenchmark.testNew:·gc.count            thrpt   20           ? 0               counts\n```\n\nI've updated the PR accordingly.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAlright, here we go then :-) I'll backport it to 4.3.x tomorrow.\n"", '**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** commented\n\nThank you!\n']"
bac5cd866e3ad685b84be0bcce2bdef573077242,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestMappingHandlerAdapter.java,Remove_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-				sessionAttrHandler = this.sessionAttributesHandlerCache.get(handlerType);
-				if (sessionAttrHandler == null) {
-					sessionAttrHandler = new SessionAttributesHandler(handlerType, this.sessionAttributeStore);
-					this.sessionAttributesHandlerCache.put(handlerType, sessionAttrHandler);
-				}
+				sessionAttrHandler = this.sessionAttributesHandlerCache.computeIfAbsent(handlerType, type -> new SessionAttributesHandler(type, this.sessionAttributeStore));",6,condition,Simplify getSessionAttributesHandler() method,,,,0,N/A,N/A,N/A,N/A,N/A
bac68c8d3f9ca4caa70b54c14e0e9805f88f8d34,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/multipart/support/StandardServletMultipartResolver.java,Remove_Condition,"- *	// ...
- *	&#064;Override
- *	protected void customizeRegistration(ServletRegistration.Dynamic registration) {
- *
- *		// Optionally also set maxFileSize, maxRequestSize, fileSizeThreshold
- *		registration.setMultipartConfig(new MultipartConfigElement(""/tmp""));
- *	}
+ *	 // ...
+ *	 &#064;Override
+ *	 protected void customizeRegistration(ServletRegistration.Dynamic registration) {
+ *     // Optionally also set maxFileSize, maxRequestSize, fileSizeThreshold
+ *     registration.setMultipartConfig(new MultipartConfigElement(""/tmp""));
+ *   }
-		// Same check as in Commons FileUpload...
-		if (!""post"".equalsIgnoreCase(request.getMethod())) {
-			return false;
-		}
-		String contentType = request.getContentType();
-		return StringUtils.startsWithIgnoreCase(contentType, ""multipart/"");
+		return StringUtils.startsWithIgnoreCase(request.getContentType(), ""multipart/"");",6,condition,StandardServletMultipartResolver accepts any HTTP method for multipart,"Issue: SPR-16975
",,21513,1,['StandardServletMultipartResolver should support also HTTP PUT method [SPR-16975]'],"['**[Michal Aron](https://jira.spring.io/secure/ViewProfile.jspa?name=michalaron)** opened **[SPR-16975](https://jira.spring.io/browse/SPR-16975?redirect=false)** and commented\n\nStandardServletMultipartResolver should support HTTP PUT method as well.\n\nIn the referenced StackOverflow question (in the accepted answer), there is justification that the limitation for POST method is chosen because of W3C RFC and the deduction that ""PUT request represent a single resource.\xa0But multiparts means multiple resources in a single body."".\n\nBut I do not think this argument is really convincing, when reading the original W3C RFC - it is rather vague, the term ""entity enclosed with the request"" may have more meanings and does not have to necessarily forbid ""multiple body parts"", therefore I think the derived limitation to POST method only is too strict.\n\nThe other answer to the same question (https://stackoverflow.com/a/20374337/3626641)\xa0gives pretty good argument that ""custom object that contains multiple fields, including one or more files, should be ok, it could still be considered as being one resource in REST terms"".\n\nThis is exactly the situation I am facing on my project and I believe I am not the only one - there are multiple examples of people having to extend the\xa0StandardServletMultipartResolver to support POST as as well - e.g. [https://stackoverflow.com/questions/7981640/spring-3-0-fileupload-only-with-post/33658066](https://stackoverflow.com/questions/7981640/spring-3-0-fileupload-only-with-post/33658066#33658066))\n\nOn our project, we have a method for updating complex form in one request (including both JSON part and file part, so we need to use multipart request), but the method should be still PUT in my opinion, as according to RESTful design best practices, an idempotent update (even a complex one), should be handled using PUT method.\n\nBy the way, we are migrating the project from JAX-RS / Apache CXF endpoints to Spring WEB REST controllers and with the previous solution, PUT multipart requests worked fine.\n\n\xa0\n\n\xa0\n\n\n---\n\n**Affects:** 4.3.16\n\n**Reference URL:** https://stackoverflow.com/questions/20373912/spring-mvc-framework-multipartresolver-with-put-method?lq=1\n']",['closed'],[4],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop), what's your take on this? I'm inclined to relax that check to POST and PUT but I'm wondering about the implications, in particular towards potential vulnerabilities.\n\nNotably, Commons FileUpload traditionally restricts its multipart check to POST, so we should leave our `CommonsMultipartResolver` restricted accordingly... but we could relax it for `StandardServletMultipartResolver` at least.\n"", ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI can't think of any reasons not to do that, and looking at underlying code in Tomcat and Jetty, I don't see any checks for the HTTP method, only\xa0for the presence of the multipart config element.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI\'ll remove that entire HTTP method check in `StandardServletMultipartResolver` then, generally accepting any HTTP method (potentially even custom HTTP methods) with content type ""multipart/..."" there.\n', '**[Michal Aron](https://jira.spring.io/secure/ViewProfile.jspa?name=michalaron)** commented\n\nThank you very much [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) for implementing this so quickly!\n']"
bb45fb4538d723ecdc136ceaaba032bcf8cdb42c,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java,Add_Condition,"+				if (!this.lastMessageSucceeded) {
+					// We failed more than once in a row or on startup - sleep before
+					// first recovery attempt.
+					sleepBeforeRecoveryAttempt();
+				}
+		/**
+		 * Apply the back off time once. In a regular scenario, the back off is only applied if we
+		 * failed to recover with the broker. This additional sleep period avoids a burst retry
+		 * scenario when the broker is actually up but something else if failing (i.e. listener
+		 * specific).
+		 */
+		private void sleepBeforeRecoveryAttempt() {
+			BackOffExecution execution = DefaultMessageListenerContainer.this.backOff.start();
+			applyBackOffTime(execution);
+		}
+",9,condition,Restore sleep interval between recovery attempt,"Commit 6a04831 introduced a regression that lead to burst recovery
attempts when the broker is up but the listener is failing for some
reason (the most obvious one being that the destination does not
exist).

Since the sleep period between recovery attempts strategy is more
complex, we can't just sleep for a period of time. But we can create
an execution and apply it once which should work just fine for most
use cases.

Issue: SPR-12183
",,16797,1,['Message listener container does not apply proper recovery anymore [SPR-12183]'],"['**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-12183](https://jira.spring.io/browse/SPR-12183?redirect=false)** and commented\n\nThere is [this question](http://stackoverflow.com/questions/25778127/spring-jms-listener-container-listener-setup-timeout) on SO and also some other tests that confirm that 4.1 introduced a regression in the way the message listener container handles recovery.\n\nIt seems that certain exceptions are not being recognized the same way, not leading to an invalidation of the connection and therefore not applying the recovery at all.\n\nIt looks like #16400 may be the reason of the regression even though it\'s not obviously clear why it would be.\n\n---\n\n**Affects:** 4.1 GA\n\n**Issue Links:**\n- [AMQP-427](https://jira.spring.io/browse/AMQP-427) BackOff support in SimpleMessageListenercontainer (_**""is depended on by""**_)\n- #16400 MessageListenerAdapter might throw JMSException on message deserialization\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/bb45fb4538d723ecdc136ceaaba032bcf8cdb42c\n']",['closed'],[2],"[""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nThe regression was introduced by `6a04831`. We have an extra trick to detect that we failed several times in a row that got removed. Actually this trick serves an additional purpose: if the listener fails to initialize, we would go in that removed if since the listener has not been called already and we faulty assume that it's the second time we're failing (while it's the first time, really).\n\nThere are probably a few things we could do here:\n\n1. Track back why we implemented this logic and figure out if that's still valid. If that's not, that whole boolean flag should go away. If that is we have a problem as it does not play nicely with the backoff mechanism anymore. Maybe we need to restore the previous mechanism for that use case only?\n2. Handle the initialization exception in a better way (i.e. if the listener hasn't even been called at all, maybe we should wrap that exception in such a way we can detect it and call a **dedicated** protected class which should give enough flexibility to figure out what to do. Right now we run a recovery (as we should) but that recovery works immediately as the broker is up. We should probably have some ways to manage that.\n\nTo be clear, the previous situation wasn't that better either: the app starts, we fail to connect to a certain queue, we wait X secs (5 by default) and we try again, it fails, etc. The only difference is that we've removed an extra if block that was applying the recovery timeout so now we're trying and failing in burst mode.\n\nUsers seem to rely on the feature if the broker starts at the same time as the app (it might fail one or two times and then the queue would eventually come up). This regression is therefore quite major.\n"", '**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nAs a safety precaution for 4.1.1, we have restored the sleep period interval that was wrongly removed. We can revisit the hook points in 4.2 if need to be.\n']"
bbc85ea466bda4539caf96990df37dfad5958751,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,Condition_Change,"-		if (getTransactionManager() == null && getBeanFactory() == null) {
+		if (getTransactionManager() == null && this.beanFactory == null) {
-					""Setting the property 'transactionManager' or running in a BeanFactory is required"");
+					""Set the 'transactionManager' property or make sure to run within a BeanFactory "" +
+					""containing a PlatformTransactionManager bean!"");",5,condition,Refined exception message,"Issue: SPR-14609
(cherry picked from commit ab68673)
",,19177,1,['Transaction manager cache fails to repopulate when multiple transaction managers defined [SPR-14609]'],"['**[Tim Lenz](https://jira.spring.io/secure/ViewProfile.jspa?name=seabamirum)** opened **[SPR-14609](https://jira.spring.io/browse/SPR-14609?redirect=false)** and commented\n\nWhen `TransactionAspectSupport` is initialized, the transaction manager cache is populated by the `setTransactionManager` method. At this point there can be multiple `TransactionInterceptor` instances defined, each with its own cache, with no conflicts.\n\nHowever, as soon as the transaction cache entry in `TransactionAspectSupport` is cleared by the garbage collector, the transaction manager bean is then looked up by type, which leads to a `NoUniqueBeanDefinitionException` if multiple transaction managers are defined in your application context.\n\nThis is a regression caused by #19080.\n\n---\n\n**Affects:** 4.3.2\n\n**Issue Links:**\n- #19271 one beanfactory can not have more than one TransactionManager  when low memory (_**""is duplicated by""**_)\n- #19080 Transaction manager bean in TransactionInterceptor retained after JUnit test class completes\n- [INT-4104](https://jira.spring.io/browse/INT-4104) No qualifying bean of type [org.springframework.transaction.PlatformTransactionManager] is defined\n\n']",['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis is the trigger to undo #19080 for the (still unreleased) 4.2.8, whereas we'll try to fix it retaining #19080 for 4.3.3.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n`TransactionAspectSupport` stores a given `PlatformTransactionManager` instance as a strong reference (again) while retaining the soft cache for retrieved `PlatformTransactionManager` beans.\n']"
bc1f19ce18e9ad35d8127048737d6e6e9c276eb3,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java,Add_Condition,"-		} catch (Exception ex) {
+		}
+		catch (Exception ex) {
-			else if (requiredType.equals(javaUtilOptionalEmpty.getClass())) {
-				convertedValue = javaUtilOptionalEmpty;
+			else {
+				// convertedValue == null
+				if (javaUtilOptionalEmpty != null && requiredType.equals(javaUtilOptionalEmpty.getClass())) {
+					convertedValue = javaUtilOptionalEmpty;
+				}",9,condition,Defensively check javaUtilOptionalEmpty,"Issue: SPR-11888
",,16507,1,['WebMVC throws nullpointerexception on java 6 in TypeConverterDelegate [SPR-11888]'],"['**[Boris Bera](https://jira.spring.io/secure/ViewProfile.jspa?name=boris-b)** opened **[SPR-11888](https://jira.spring.io/browse/SPR-11888?redirect=false)** and commented\n\nWhen running the latest snapshot (4.1.0.BUILD-20140619.135109-207) of spring-webmvc on java 1.6, requests done with a MockMvc will throw a nullpointerexception in the TypeConverterDelegate class.\n\nStacktrace:\n\n```\norg.springframework.web.util.NestedServletException: Request processing failed; nested exception is java.lang.NullPointerException\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:973)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:852)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:668)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:837)\n\tat org.springframework.test.web.servlet.TestDispatcherServlet.service(TestDispatcherServlet.java:62)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:770)\n\tat org.springframework.mock.web.MockFilterChain$ServletFilterProxy.doFilter(MockFilterChain.java:170)\n\tat org.springframework.mock.web.MockFilterChain.doFilter(MockFilterChain.java:137)\n\tat org.springframework.test.web.servlet.MockMvc.perform(MockMvc.java:141)\n\tat com.vantrix.mp.mpcms.impl.rest.MPRESTServiceImplUT.thatFindConvertsParameters(MPRESTServiceImplUT.java:222)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:44)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.internal.runners.statements.RunBefores.evaluate(RunBefores.java:26)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:271)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:70)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:50)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.mockito.internal.runners.JUnit45AndHigherRunnerImpl.run(JUnit45AndHigherRunnerImpl.java:37)\n\tat org.mockito.runners.MockitoJUnitRunner.run(MockitoJUnitRunner.java:62)\n\tat org.junit.runners.Suite.runChild(Suite.java:127)\n\tat org.junit.runners.Suite.runChild(Suite.java:26)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:238)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:63)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:236)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:53)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:229)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:309)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:160)\n\tat com.intellij.junit4.JUnit4IdeaTestRunner.startRunnerWithArgs(JUnit4IdeaTestRunner.java:74)\n\tat com.intellij.rt.execution.junit.JUnitStarter.prepareStreamsAndStart(JUnitStarter.java:211)\n\tat com.intellij.rt.execution.junit.JUnitStarter.main(JUnitStarter.java:67)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat com.intellij.rt.execution.application.AppMain.main(AppMain.java:134)\nCaused by: java.lang.NullPointerException\n\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:260)\n\tat org.springframework.beans.TypeConverterDelegate.convertIfNecessary(TypeConverterDelegate.java:106)\n\tat org.springframework.beans.TypeConverterSupport.doConvert(TypeConverterSupport.java:64)\n\tat org.springframework.beans.TypeConverterSupport.convertIfNecessary(TypeConverterSupport.java:47)\n\tat org.springframework.validation.DataBinder.convertIfNecessary(DataBinder.java:582)\n\tat org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver.resolveArgument(AbstractNamedValueMethodArgumentResolver.java:105)\n\tat org.springframework.web.method.support.HandlerMethodArgumentResolverComposite.resolveArgument(HandlerMethodArgumentResolverComposite.java:79)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:157)\n\tat org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:124)\n\tat org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandleMethod(RequestMappingHandlerAdapter.java:781)\n\tat org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:721)\n\tat org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:83)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:938)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:870)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:961)\n\t... 46 more\n```\n\nI did some digging and I think the problem comes from this commit: https://github.com/spring-projects/spring-framework/commit/0dc6082b01606c3c996b728541467ba5104b747f\n\nThe problem is on line 260 in spring-beans/src/main/java/org/springframework/beans/TypeConverterDelegate.java\n\nIn java 1.6, javaUtilOptionalEmpty is null and calling .getClass() on it throws the exception.\n\n\n---\n\n**Affects:** 4.1 RC1\n']",['closed'],[1],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nIndeed, the same applies to a similar check in GenericConversionService.\n']"
bc5246938d07820305167e581e7a8ece23ed265e,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2013 the original author or authors.
+import org.springframework.util.CollectionUtils;
-		if (logger.isWarnEnabled()) {
+		if (logger.isWarnEnabled() && CollectionUtils.isEmpty(this.locations)) {",3,condition,Fix ResourceHttpRequestHandler empty location log,"Fix ResourceHttpRequestHandler to only log warning when locations
is empty.

Issue: SPR-10780
",,15407,1,['ResourceHttpRequestHandler always logs warning [SPR-10780]'],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-10780](https://jira.spring.io/browse/SPR-10780?redirect=false)** and commented\n\nResourceHttpRequestHandler always logs a warning about missing resources\n\n\n---\n\n**Affects:** 3.2.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/8feeec4a6008f7b4b0202ca8c595ac7aaefee87c, https://github.com/spring-projects/spring-framework/commit/bc5246938d07820305167e581e7a8ece23ed265e\n']",['closed'],[0],[]
bd8d71be0e6ff0a6cb5cded33b473c6ba8260e9d,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageWriterResultHandler.java,Condition_Change,"+		ResolvableType actualElementType;
+			actualElementType = elementType;
-			elementType = (bodyType.toClass() == Object.class && body != null ?
-					ResolvableType.forInstance(body) : bodyType);
+			actualElementType = body != null ? ResolvableType.forInstance(body) : bodyType;
+			elementType = (bodyType.toClass() == Object.class && body != null ? actualElementType : bodyType);
-				if (writer.canWrite(elementType, bestMediaType)) {
+				if (writer.canWrite(actualElementType, bestMediaType)) {",8,condition,canWrite uses actual return value type if known,"Closes gh-22803
",,22803,1,"[""Return value doesn't serialize to JSON when return type is Mono of Interface in WebFlux""]","['In WebMVC type application, Spring\'s message converter can convert the return value to a proper message(like a JSON) when controller return type declared by interface.\r\n\r\nBut, Webflux\'s behavior is different.\r\n\r\nFor example, we have Car class that implements Vehicle interface.\r\n```\r\npublic interface Vehicle {\r\n}\r\n\r\npublic class Car implements Vehicle {\r\n    private String gearType;\r\n}\r\n```\r\nAnd then there is a controller method like that.\r\n```\r\n@GetMapping(""vehicle"")\r\npublic Vehicle getVehicle() {\r\n    return new Car();\r\n}\r\n```\r\nI can get a json response of Car class with `content-type: application/json` header.\r\n\r\nBut, webflux\'s result is defferent. \r\n```\r\n@GetMapping(""vehicle"")\r\npublic Mono<Vehicle> getVehicle() {\r\n    return Mono.just(new Car());\r\n}\r\n```\r\nIt only supports a \'content-type: text/event-stream\' when return type is a mono of interface.\r\nIs it a bug?']",['closed'],[3],"['This odd. The signature with `Mono<Vehicle>` should work in both Spring MVC and WebFlux as expected. Do you have a sample?', 'Here is my simple example.\r\n\r\nWebflux : https://github.com/freddieyyh/demo/tree/webflux\r\nWebMVC : https://github.com/freddieyyh/demo/tree/webmvc\r\n\r\nCommand `curl -X GET -H ""Accept: application/json"" ""localhost:8080/interface-a""`\r\nworks on WebMVC demo, but doesn\'t work on  Webflux demo.', ""The `Result` interface from the sample has no methods, so Jackson returns false for `getObjectMapper().canSerialize(Result.class)`. Adding at least one accessor makes it work. \r\n\r\nSpring MVC works is because it uses the actual type `ResultA`. We can make an improvement in WebFlux so that a concrete return value works the same, but for `Mono<Result>` it would still rely on the declared type, so it's best to have some sort of accessor on the interface.""]"
bd8e682c51a6a383df559717d5352188032afb1b,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/BeanUtils.java,Remove_Condition,"-			Constructor<T> kotlinPrimaryConstructor = KotlinDelegate.findPrimaryConstructor(clazz);
-			if (kotlinPrimaryConstructor != null) {
-				return kotlinPrimaryConstructor;
-			}
+			return KotlinDelegate.findPrimaryConstructor(clazz);",5,condition,Simplify BeanUtils.findPrimaryConstructor(),Closes gh-26519,,26519,1,['Simplify BeanUtils.findPrimaryConstructor()'],['Simplified code.'],['closed'],[4],"['@1993heqiang Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26519)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26519) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@1993heqiang Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=26519)!', 'This has been merged into `master`.\r\n\r\nThanks', 'good']"
be853d466b406b7f6a66420158b5eba1de2fe267,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,Add_Condition,"+		@Override
+		public boolean isAnnotationPresent(Class<? extends Annotation> annotationClass) {
+			for (Annotation annotation : getAnnotations()) {
+				if (annotation.annotationType() == annotationClass) {
+					return true;
+				}
+			}
+			return false;
+		}
+",10,"condition, iteration",AnnotatedElementAdapter explicitly declares isAnnotationPresent method,"Issue: SPR-14872
(cherry picked from commit 17863df)
",,19438,1,['NoSuchMethodError when using AnnotatedElementAdapter with Java 7 [SPR-14872]'],"[""**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-14872](https://jira.spring.io/browse/SPR-14872?redirect=false)** and commented\n\nThe changes made in [this commit](https://github.com/spring-projects/spring-framework/commit/62918ca7797a9c7822fdf960c63a29b901c2343b#diff-fc2c4d51949d677cc8ad3d926d0186e9) don't appear to work on Java 7. It looks like `AnnotatedElementAdapter` is relying on `isAnnotationPresent(Class<? extends Annotation>)` being provide as a default method. That's not the case when running on Java 7. An example of the failure is:\n\n```\njava.lang.AbstractMethodError: org.springframework.core.convert.TypeDescriptor$AnnotatedElementAdapter.isAnnotationPresent(Ljava/lang/Class;)Z\n\tat org.springframework.core.annotation.AnnotatedElementUtils.isAnnotated(AnnotatedElementUtils.java:272)\n\tat org.springframework.core.convert.TypeDescriptor.hasAnnotation(TypeDescriptor.java:243)\n\tat org.springframework.format.support.FormattingConversionService$AnnotationPrinterConverter.matches(FormattingConversionService.java:246)\n\tat org.springframework.core.convert.support.GenericConversionService$ConvertersForPair.getConverter(GenericConversionService.java:668)\n\tat org.springframework.core.convert.support.GenericConversionService$Converters.getRegisteredConverter(GenericConversionService.java:566)\n\tat org.springframework.core.convert.support.GenericConversionService$Converters.find(GenericConversionService.java:551)\n\tat org.springframework.core.convert.support.GenericConversionService.getConverter(GenericConversionService.java:269)\n\tat org.springframework.core.convert.support.GenericConversionService.canConvert(GenericConversionService.java:159)\n\tat org.springframework.core.convert.support.GenericConversionService.canConvert(GenericConversionService.java:149)\n\tat org.springframework.binding.convert.service.GenericConversionService.getConversionExecutor(GenericConversionService.java:159)\n\tat org.springframework.binding.convert.service.GenericConversionService.executeConversion(GenericConversionService.java:345)\n\tat org.springframework.binding.expression.el.BindingValueExpression.convertValueIfNecessary(BindingValueExpression.java:99)\n\tat org.springframework.binding.expression.el.BindingValueExpression.getValue(BindingValueExpression.java:55)\n\tat org.springframework.binding.expression.el.ELExpression.getValue(ELExpression.java:54)\n\tat org.springframework.binding.expression.el.ELExpressionParserTests.testGetValueWithCoersion(ELExpressionParserTests.java:160)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:252)\n\tat junit.framework.TestSuite.run(TestSuite.java:247)\n\tat org.junit.internal.runners.JUnit38ClassRunner.run(JUnit38ClassRunner.java:86)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.runTestClass(JUnitTestClassExecuter.java:86)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassExecuter.execute(JUnitTestClassExecuter.java:49)\n\tat org.gradle.api.internal.tasks.testing.junit.JUnitTestClassProcessor.processTestClass(JUnitTestClassProcessor.java:64)\n\tat org.gradle.api.internal.tasks.testing.SuiteTestClassProcessor.processTestClass(SuiteTestClassProcessor.java:50)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.messaging.dispatch.ContextClassLoaderDispatch.dispatch(ContextClassLoaderDispatch.java:32)\n\tat org.gradle.messaging.dispatch.ProxyDispatchAdapter$DispatchingInvocationHandler.invoke(ProxyDispatchAdapter.java:93)\n\tat com.sun.proxy.$Proxy2.processTestClass(Unknown Source)\n\tat org.gradle.api.internal.tasks.testing.worker.TestWorker.processTestClass(TestWorker.java:106)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:57)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:606)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:35)\n\tat org.gradle.messaging.dispatch.ReflectionDispatch.dispatch(ReflectionDispatch.java:24)\n\tat org.gradle.messaging.remote.internal.hub.MessageHub$Handler.run(MessageHub.java:360)\n\tat org.gradle.internal.concurrent.ExecutorPolicy$CatchAndRecordFailures.onExecute(ExecutorPolicy.java:54)\n\tat org.gradle.internal.concurrent.StoppableExecutorImpl$1.run(StoppableExecutorImpl.java:40)\n\tat java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1145)\n\tat java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:615)\n\tat java.lang.Thread.run(Thread.java:745)\n```\n\n---\n\n**Affects:** 4.3.4\n\n**Issue Links:**\n- #19410 AnnotationFormatterFactory should support `@AliasFor`\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/17863dfbda56f1a9d820d5dd550ca9e6d8d7b01a, https://github.com/spring-projects/spring-framework/commit/be853d466b406b7f6a66420158b5eba1de2fe267\n""]",['closed'],[1],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThanks for catching this, Andy! I've added a corresponding implementation of `isAnnotationPresent` to our internal `AnnotatedElementAdapter`.\n""]"
be85bd8e09293169342668f89540a9b668dc48b8,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/OpPlus.java,Condition_Change,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-	
+
-		if (this.exitTypeDescriptor == ""Ljava/lang/String"") {
+		if (""Ljava/lang/String"".equals(this.exitTypeDescriptor)) {
-					case 'F': 
+					case 'F':
-						break;				
+						break;",8,condition,Don't use `==` when comparing strings,"Fix a few places where `==` was accidentally used to compare
strings.

Issue: SPR-16968
",,21506,1,['Add checkstyle [SPR-16968]'],['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-16968](https://jira.spring.io/browse/SPR-16968?redirect=false)** and commented\n\nAdding checkstyle to the Spring Framework build would help catch common coding issues and aid contributors.\n\n\n---\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1865\n'],['closed'],[10],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nI have a PR in progress\n', ""**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nhttps://github.com/spring-projects/spring-framework/pull/1865\n\nFirst off, a massive apology for the size of the PR. It turned out to be a lot more involved that I first thought. Other than the number of files touched, I don't think there's too many controversial parts to the PR. Perhaps the one that might cause the the biggest concern is the change in imports. I've added rules to enforce the import order based on [the rules in the WIKI](https://github.com/spring-projects/spring-framework/wiki/Code-Style#import-statements) but I've also enforced that `star` static imports shouldn't be allowed. This was mainly so I could use IDE tooling, but I also think it makes sense as it's very easy to mess up if the same method name is declared in more than one `star` import. I've had this happen quite often with Mockito and Hamcrest. I also think it's easier to read the source offline when when exact import statements are declared.\n\nThe other one that might be a bit controversial is single argument lambdas. In Spring Boot we opted to always use the parentheses around the argument so that single argument and multi-argument lambdas look the same.\n\nLet me know if you want me to refine any of the rules or rework the commits in any way.\n\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nPhil, there is plenty of good polish in that PR but it also adapts a few widespread things that we intentionally did differently: e.g. no copyright headers on package-info, no ""this."" prefix on logger access, no type+""this."" prefix in inner classes for access to outer state... and allowing star imports in test classes.\n\nGenerally speaking, I\'m not sure whether enforcing production checkstyle guidelines on test sources is necessary or even desirable. At the very least, we could have more relaxed guidelines for test sources. For a start, enumerating the assertion method imports for every single test class feels odd to me... but I\'m also generally much more relaxed about the code style used for test methods or inner classes used by them, with many production rules not needing to apply there.\n\nAs for single-argument lambdas, I visually object to the enforced parentheses there. Frankly, I\'d rather wrap the expression itself in additional parentheses than such a plain parameter name part. We knew you chose differently in Boot but I\'m afraid I\'m not up for changing our style here in this respect.\n\nThe equals/hashCode stuff is unfortunately a common false signal by style-checking tools. All of those classes were valid since the superclass `hashCode()` implementation has a base hash that the subclasses choose to keep in that coarse-grained fashion. Enforcing `hashCode()` in those subclasses seems rather pointless, in particular when the overridden methods literally just call super and are effectively just there to keep checkstyle happy.\n\nWith respect to consistent code blocks and consistent ternary expression style, there were a few glitches... but also a few cases where we intentionally used one-line if variants, e.g. in `AbstractBeanDefinition` for better readability of that long if cascade. I\'m also not opposed to shortened blocks in test classes, and I don\'t see all those inverted ternary expressions as really worthwhile... when local readability doesn\'t really improve through that measure.\n\nAll in all, from where I stand at the moment, the PR itself is way too much to merge. Let me rather go through the commits individually and hand-pick key changes while ignoring a whole range of others... and see where we end up with. In particular, I\'m going to focus on production source fine-tuning, not touching test sources unless there is something totally bogus there. Once I\'ve done an initial pass through this, let\'s see which checkstyle rules we\'ll eventually set up.\n\nLast but not least, thanks for your efforts there! This is pointing out a lot of stuff worth reviewing, even in areas where we might not enforce hard rules eventually.\n', '**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nThanks for the fast review, I know there\'s a way too much in one PR so I was expecting to need a few rounds. I might be able to do something with the commits I have locally which are a lot more fine grained.\n\n> Phil, there is plenty of good polish in that PR but it also adapts a few widespread things that we intentionally did differently: e.g. no copyright headers on package-info, no ""this."" prefix on logger access, no type+""this."" prefix in inner classes for access to outer state... and allowing star imports in test classes.\n\nI figured some of those were intentional, but I wasn\'t 100% sure. For Spring Boot I have a lot of IDE templates and auto-cleanup enabled so I\'ve tended to take a blanket rule over exceptions. For example, if I create a new class file I get the copyright header, but Eclipse doesn\'t give me a way to skip it only for `package-info.java` files. Likewise, if I save a file in Spring Boot the IDE automatically adds `this.`, but it doesn\'t offer a way to skip it for `this.logger`. Same with star imports, I either get all or none, so I opted for none.\n\nI intentionally started this PR with the same approach to see what you thought about it. I think with checkstyle we can refine the rules to enforce what we want. I\'ll have a look to see if we can refine some of those checks to also enforce the exceptions. For me, one of the biggest benefits to checkstyle is helping to know what the rules are. I had no idea that `this.logger` shouldn\'t be used, so I think it would be really beneficial to enforce that one.\n\n> Generally speaking, I\'m not sure whether enforcing production checkstyle guidelines on test sources is necessary or even desirable. At the very least, we could have more relaxed guidelines for test sources. For a start, enumerating the assertion method imports for every single test class feels odd to me... but I\'m also generally much more relaxed about the code style used for test methods or inner classes used by them, with many production rules not needing to apply there.\n\nIt\'s easy to add a blanket exclude for `src/test/*` if that\'s a better option. I didn\'t do that for pretty much the same reason as above. Eclipse doesn\'t offer an easy opt-out of formatting and cleanup for `src/test` so I just treated them in exactly the same way.\n\n> As for single-argument lambdas, I visually object to the enforced parentheses there. Frankly, I\'d rather wrap the expression itself in additional parentheses than such a plain parameter name part. We knew you chose differently in Boot but I\'m afraid I\'m not up for changing our style here in this respect.\n\nNo problem, I wasn\'t 100% sold on it myself at first in Boot (but I do really like the consistency now). I can refine the checkstyle rule in the other direction and enforce that all single parameter lambdas must _not_ have parentheses.\n\n> The equals/hashCode stuff is unfortunately a common false signal by style-checking tools. All of those classes were valid since the superclass hashCode() implementation has a base hash that the subclasses choose to keep in that coarse-grained fashion. Enforcing hashCode() in those subclasses seems rather pointless, in particular when the overridden methods literally just call super and are effectively just there to keep checkstyle happy.\n\nI agree, It\'s a little pointless. On the other hand, it found at least one that was genuine I think. Do you think the empty `hashCode` is worth it for those few false-positive cases, since it helps when new code is developed? Or would you rather drop that rule entirely?\n\n> With respect to consistent code blocks and consistent ternary expression style, there were a few glitches... but also a few cases where we intentionally used one-line if variants, e.g. in AbstractBeanDefinition for better readability of that long if cascade.\n\nI could either drop the rule, or add an exception for the few cases where it looks better shortened. I\'m personally in favor of hard rules here, just so nothing is open to interpretation. I think I use more brain cycles working out why a bit of code is formatted differently than just dealing with more whitespace.\n\n> I\'m also not opposed to shortened blocks in test classes, and I don\'t see all those inverted ternary expressions as really worthwhile... when local readability doesn\'t really improve through that measure.\n\nIf we drop test checks then those blocks won\'t be enforced. On the other hand, if it\'s test code perhaps if doesn\'t really matter if they take up a bit more space? The ternary things is a bit strict as well. Stephane pointed out that you polish a lot of them to use `!=` and he finds that it helps when scanning code because his eyes just go `(the test ? the not equals case ? the equals case)`. Individually they don\'t add much, but collectively they might help. It will be easy to make that an option if you prefer?\n\n> All in all, from where I stand at the moment, the PR itself is way too much to merge. Let me rather go through the commits individually and hand-pick key changes while ignoring a whole range of others... and see where we end up with. In particular, I\'m going to focus on production source fine-tuning, not touching test sources unless there is something totally bogus there. Once I\'ve done an initial pass through this, let\'s see which checkstyle rules we\'ll eventually set up.\n\nI\'m happy to have another pass here as well if it helps. Splitting out the PR into test, production and unwinding a few of the rules discussed above shouldn\'t take me too long. Probably the most labor intensive part was the javadoc changes so I\'d be super happy if those could go in?\n\n> Last but not least, thanks for your efforts there! This is pointing out a lot of stuff worth reviewing, even in areas where we might not enforce hard rules eventually.\n\nSorry it ballooned into such a monster. It really ended up being quite extreme all things considered!\n', '**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\n3 things...\n1. Thanks for taking the initiative here.\n2. Yes, that is indeed quite a doozie of a PR. ;)\n3. Regarding the Eclipse formatter settings, I took a look, but TBH it\'s impossible to make heads or tails of that diff. Would you mind sorting the current settings on `master` alpha-numerically (and pushing to `master`) and then sort your updated settings the same way so that the diff becomes suitable for human consumption? That would make it much easier for me to make sense of the changes. Also, please change ""5.0"" to ""5.1"" for `@since` tags for new types.\n\nCheers!\n', ""**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nI'm doing another round on this one, I'll take the eclipse settings as different commit.\n"", '**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\n[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen) The eclipse update is pushed\n', '**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\n[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) I\'ve forced pushed a second round so the PR should be a bit easier to digest now. I know you wanted the javadoc one as a different PR but I\'ve left it in this one for now (otherwise I can\'t get checkstyle to pass).\n\nHere are the updates:\n\n- Tests are no longer verified and I\'ve removed the test source from each commit. I\'ve added a couple of commits for test polishing that I still think is worthwhile.\n- The javadoc commits has been squashed into a single commit. The `@param` rule on classes has been changed to match the existing style.\n- The copyright header is no longer applied to `package-info.java` and I\'ve added a rule to enforce that nobody adds one by mistake.\n- I\'ve kept the block style rule but changed {[AbstractBeanDefinition.equals}} in a polish commit to make it more palatable.\n- The `this.` rule is now enforced for most items but relaxed for inner classes. I\'ve added a rule to make sure `this.logger` is never used.\n- I\'ve kept the rule of equals must have hashcode but added exceptions for the override cases. There are still a few legitimate ones I think.\n- The lambda rules are now enforced in the other direction (all single arg lambdas must not use parenthesis)\n- Star imports have still been expanded in the src/main but we can do another round on this if you let me know the exceptions.\n- I\'ve completely dropped the ternary checks for now. I\'m not sure what the rules should be regarding parenthesis. I\'ve see `a & b ? ""foo"" : ""bar""`, `(a & b) ? ""foo"" : ""bar""` and `(a & b ? ""foo"" : ""bar"")`. If there\'s a rule that can be applied I can refine the checkstyle code.\n\n', '**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\n[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)\n\n> The eclipse update is pushed\n\nWhere? To a different branch?\n', '**[Sam Brannen](https://jira.spring.io/secure/ViewProfile.jspa?name=sbrannen)** commented\n\nAhhh... you pushed to `master`. Found the commit.\n']"
c052a0259238ee577a00a55abeb771fb967de440,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,Add_Condition,"-			if (ex instanceof RuntimeException &&
-					ex.getCause() != null &&
-					ex.getMessage().startsWith(""Async resource cleanup failed"")) {
-				return ex.getCause();
+			if (ex instanceof RuntimeException && ex.getCause() != null) {
+				String msg = ex.getMessage();
+				if (msg != null && msg.startsWith(""Async resource cleanup failed"")) {
+					return ex.getCause();
+				}",9,condition,Ignore null message when introspecting resource cleanup failure,"Closes gh-30597
",,30597,1,['NPE in `ReactiveTransactionSupport.unwrapIfResourceCleanupFailure`'],"['**Affects:** spring boot 3.0.7\r\n\r\n---\r\nin method unwrapIfResourceCleanupFailure of org.springframework.transaction.interceptor.TransactionAspectSupport.ReactiveTransactionSupport class\r\nif ex.getMessage() returns null then we get NullPointerException:\r\n\r\n```java\r\n\t\t\tif (ex instanceof RuntimeException &&\r\n\t\t\t\t\tex.getCause() != null &&\r\n\t\t\t\t\tex.getMessage().startsWith(""Async resource cleanup failed"")) {\r\n\t\t\t\treturn ex.getCause();\r\n\t\t\t}\r\n```\r\nhttps://github.com/spring-projects/spring-framework/blob/main/spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java#L1088']",['closed'],[1],['This seems to be a regression caused by #27572. To be revised for 6.0.10.']
c0f4d78ef9b9e03836baa31ac3ada0b4c48197e7,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/namedparam/AbstractSqlParameterSource.java,Remove_Condition,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-		Integer sqlType = this.sqlTypes.get(paramName);
-		if (sqlType != null) {
-			return sqlType;
-		}
-		return TYPE_UNKNOWN;
+		return this.sqlTypes.getOrDefault(paramName, TYPE_UNKNOWN);",6,condition,Use Map.getOrDefault in getSqlType implementation,"Issue: SPR-15238
",,19803,1,['Use Map.getOrDefault in AbstractSqlParameterSource.getSqlType [SPR-15238]'],"['**[Jonathan Borenstein](https://jira.spring.io/secure/ViewProfile.jspa?name=jonborenstein)** opened **[SPR-15238](https://jira.spring.io/browse/SPR-15238?redirect=false)** and commented\n\nThe getOrDefault method for Maps in Java 8 can be used throughout the Spring Framework if applicable.\n\n\n---\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1321, and commits https://github.com/spring-projects/spring-framework/commit/c0f4d78ef9b9e03836baa31ac3ada0b4c48197e7\n']",['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI see `getOrDefault` as a convenience method that's only really useful for constant default values. Performing object construction or retrieval for a default value is arguably an expensive operation that should only be triggered when necessary, in particular when we are likely to encounter a cache hit. `getOrDefault` unfortunately suggests a less-than-optimal idiom there.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIn the discussion on the pull request, we ruled out cases with expensive default calculation but identified `AbstractSqlParameterSource.getSqlType` as a remaining worthwhile change.\n']"
c1437f9817d9c4ac2ca16eaa4440fc39acfa18ac,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,Add_Condition,"-import java.time.Duration;
-			long restartTime = System.nanoTime();
-			long timeTakenToRestart = Duration.ofNanos(System.nanoTime() - restartTime).toMillis();
-			long timeTakenToRestoreJvm = CRaCMXBean.getCRaCMXBean().getUptimeSinceRestore();
-			logger.info(""Spring-managed lifecycle restart completed in "" + timeTakenToRestart
-					+ "" ms (restored JVM running for "" + timeTakenToRestoreJvm + "" ms)"");
+			if (!checkpointOnRefresh) {
+				logger.info(""Spring-managed lifecycle restart completed (restored JVM running for "" +
+						CRaCMXBean.getCRaCMXBean().getUptimeSinceRestore() + "" ms)"");
+			}",10,condition,Refine CRaC restoration logs,"Closes gh-31462
",,31462,1,['Refine CRaC restoration logs'],"[""As discussed with @wilkinsona, we should refine CRaC restoration logs in order to ensure consistency with Spring Boot and avoid duplicated and inconsistent logging.\r\n\r\nWith the changes introduced by this issue, the logs for [on demand checkpoint/restore of a running application](https://docs.spring.io/spring-framework/reference/6.1/integration/checkpoint-restore.html#_on_demand_checkpointrestore_of_a_running_application) will be:\r\n```\r\nRestarting Spring-managed lifecycle beans after JVM restore\r\nTomcat started on port 8080 (http) with context path ''\r\nSpring-managed lifecycle restart completed (restored JVM running for 181 ms)\r\n```\r\n\r\nThe logs for [automatic checkpoint/restore at startup](https://docs.spring.io/spring-framework/reference/6.1/integration/checkpoint-restore.html#_automatic_checkpointrestore_at_startup) will be:\r\n```\r\nRestarting Spring-managed lifecycle beans after JVM restore\r\nTomcat started on port 8080 (http) with context path ''\r\nRestored Application in 0.11 seconds (process running for 0.112)\r\n```""]",['closed'],[0],[]
c188f22378ffa060b1be98ffdf6776c3a35513ca,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/Indexer.java,Condition_Change,"- * <li>Collections (list and sets): the n<sup>th</sup> element</li>
+ * <li>Collections (lists and sets): the n<sup>th</sup> element</li>
-			if (targetDescriptor.getMapKeyTypeDescriptor() != null) {
-				key = state.convertValue(key, targetDescriptor.getMapKeyTypeDescriptor());
+			TypeDescriptor mapKeyTypeDescriptor = targetDescriptor.getMapKeyTypeDescriptor();
+			if (mapKeyTypeDescriptor != null) {
+				key = state.convertValue(key, mapKeyTypeDescriptor);",5,condition,Polishing,,,,0,N/A,N/A,N/A,N/A,N/A
c2101cbcf49feeacb8f7796cdb69eaa0f9814fe6,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,Condition_Change,"-		if (StringUtils.hasLength(qualifier)) {
+		if (StringUtils.hasText(qualifier)) {
-		else if (this.transactionManagerBeanName != null) {
+		else if (StringUtils.hasText(this.transactionManagerBeanName)) {",4,condition,Require non-empty values for TxMgr qualifiers & bean names,,,,0,N/A,N/A,N/A,N/A,N/A
c23fd784a0d91f5de1e6b5cab82e86b1746fc3b4,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/scheduling/concurrent/ConcurrentTaskExecutor.java,Remove_Condition,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-	 * <p><b>NOTE:</b> Exception handling in {@code TaskDecorator} implementations
-	 * is limited to plain {@code Runnable} execution via {@code execute} calls.
-	 * In case of {@code #submit} calls, the exposed {@code Runnable} will be a
-	 * {@code FutureTask} which does not propagate any exceptions; you might
-	 * have to cast it and call {@code Future#get} to evaluate exceptions.
-	private TaskExecutorAdapter getAdaptedExecutor(Executor concurrentExecutor) {
-		if (managedExecutorServiceClass != null && managedExecutorServiceClass.isInstance(concurrentExecutor)) {
-			return new ManagedTaskExecutorAdapter(concurrentExecutor);
-		}
-		TaskExecutorAdapter adapter = new TaskExecutorAdapter(concurrentExecutor);
+	private TaskExecutorAdapter getAdaptedExecutor(Executor originalExecutor) {
+		TaskExecutorAdapter adapter =
+				(managedExecutorServiceClass != null && managedExecutorServiceClass.isInstance(originalExecutor) ?
+						new ManagedTaskExecutorAdapter(originalExecutor) : new TaskExecutorAdapter(originalExecutor));",9,condition,Consistently apply TaskDecorator to ManagedExecutorService as well,"Closes gh-32455
",,32455,1,['Consistently apply TaskDecorator to ManagedExecutorService as well'],"['Following up on #30442, there is still one case where a configured `TaskDecorator` is not applied: to a late-initialized JSR-236 `ManagedExecutorService`, as typically encountered by `DefaultManagedTaskExecutor` in an application server environment.']",['closed'],[0],[]
c24825ca195a4d4eeb642d603b1db62639cf0024,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Condition_Change,"-		return getSingleton(beanName, true);
+		return getSingleton(beanName, isSingletonCurrentlyInCreation(beanName));
-		if (singletonObject == null) {
+		if (singletonObject == null && allowEarlyReference) {
-				if (singletonObject == null && allowEarlyReference) {
+				if (singletonObject == null) {",6,condition,DefaultSingletonBeanRegistry avoids singletonObjects lock wherever possible for non-singleton factory performance,"Issue: SPR-9819
",,14452,1,['Non-singleton beans performance issue  [SPR-9819]'],"['**[Andriy Rosa](https://jira.spring.io/secure/ViewProfile.jspa?name=andriyrosa)** opened **[SPR-9819](https://jira.spring.io/browse/SPR-9819?redirect=false)** and commented\n\nFor each method invocation for not-singleton scope bean\nInterceptor got bean from bean-factory by using AbstractBeanFactory.getBean\n\nBut before getting required bean inside method getBean we have cheeking\n\nObject sharedInstance = getSingleton(beanName);\nif (sharedInstance != null && args == null) {\n\nInside getSingleton we have synchronized blocks.\n\nconsidering that in high-load project we can have a lot of scoped-beans methods invocations, getSingleton lock all threads, and performance gone to very poor.\n\nI\'m not very good in spring-core architecture, however by my mean the most obvious solution - it push into args argument of getBean method specific arg, which will show, that we request not singleton bean for sure\n\nP.S.: Take my apologies for my bad English.\n\n---\n\n**Affects:** 3.1.1\n\n**Issue Links:**\n- #10033 Threads bottlenecking in DefaultSingletonBeanRegistry when using Wicket\'s `@SpringBean` annotation for injection (_**""is duplicated by""**_)\n- #13117 Performance bottleneck and potential thread deadlock in DefaultSingletonBeanRegistry\n- #14414 AbstractBeanFactory#markBeanAsCreated performance issue due to lock contention\n- #15302 DefaultSingletonBeanRegistry::getSingleton(String beanName) attempts to create bean when it shouldn\'t\n- #16864 Further locking optimizations for the retrieval of non-singleton beans\n\n0 votes, 5 watchers\n']",['closed'],[1],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe've addressed this for 3.2 now, avoiding that singletonObjects lock wherever possible (i.e. just doing an efficient ConcurrentHashMap check).\n\nJuergen\n""]"
c28a0d562761f7f8f85e7637e40cacdad7fa2390,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/jpa/persistenceunit/PersistenceManagedTypesBeanRegistrationAotProcessor.java,Add_Condition,"+
+			Class<? extends Annotation> attributeBinderTypeClass = loadClass(""org.hibernate.annotations.AttributeBinderType"", classLoader);
+			if (attributeBinderTypeClass != null) {
+				ReflectionUtils.doWithFields(managedClass, field -> registerForReflection(reflection,
+						AnnotationUtils.findAnnotation(field, attributeBinderTypeClass), ""binder""));
+				ReflectionUtils.doWithMethods(managedClass, method -> registerForReflection(reflection,
+						AnnotationUtils.findAnnotation(method, attributeBinderTypeClass), ""binder""));
+			}",8,condition,Add missing hints for Hibernate `@TenantId`,"Closes gh-32967
",,32967,1,['Add missing hints for Hibernate `@TenantId`'],['Related to #32842 but for `@AttributeBinderType` meta annotation support.'],['closed'],[0],[]
c2f6a98c907c01596f3a082dd0bc3dcf65fcb927,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/HttpHeaders.java,Condition_Change,"-		if (filename != null) {
+		if (StringUtils.hasText(filename)) {
-		if (contentDisposition != null) {
+		if (StringUtils.hasText(contentDisposition)) {",4,condition,Lenient handling of empty Content-Disposition filename,"Closes gh-25769
",,25769,1,['HttpHeaders.setContentDispositionFormData should ignore empty filename'],"['When a Multipart Form request is used with an empty string as Filename, a ""No Filename"" exception is thrown. Can an empty String check be added to prevent the code from failing in empty string scenarios?\r\n\r\nhttps://github.com/spring-projects/spring-framework/blob/3b0f14fd2e1964dfd9a23cbb19d6eb240e7e511e/spring-web/src/main/java/org/springframework/http/HttpHeaders.java#L864\r\n```\r\npublic void setContentDispositionFormData(String name, @Nullable String filename) {\r\n\t\tAssert.notNull(name, ""Name must not be null"");\r\n\t\tContentDisposition.Builder disposition = ContentDisposition.builder(""form-data"").name(name);\r\n\t\t if (filename != null) {  // Add Empty String check here, don\'t let through if empty String\r\n\t\t\tdisposition.filename(filename);    // calls method below\r\n\t\t}\r\n\t\tsetContentDisposition(disposition.build());\r\n\t}\r\n```\r\n\r\n\r\nhttps://github.com/spring-projects/spring-framework/blob/29885e2b9f18646fd8b0971daa51ff7ce2401935/spring-web/src/main/java/org/springframework/http/ContentDisposition.java#L601\r\n```\r\n@Override\r\n\t\tpublic Builder filename(String filename) {\r\n\t\t\tAssert.hasText(filename, ""No filename"");  // Assertion Fails since the the filename does not have text\r\n\t\t\tthis.filename = filename;\r\n\t\t\treturn this;\r\n\t\t}\r\n\r\n```']",['closed'],[0],[]
c3dbaed4ced5dafe736dfe391807ac85bfe6858e,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,Condition_Change,"+				result = synthesizeAnnotation(result, method);
-		return synthesizeAnnotation(result, method);
+		return result;
-			if (result != null) {
+			if (result != null && synthesize) {
+				result = synthesizeAnnotation(result, clazz);
-		return (synthesize ? synthesizeAnnotation(result, clazz) : result);
+		return result;",8,condition,AnnotationUtils caches findAnnotation results in pre-synthesized form,"Issue: SPR-13621
",,18199,1,['Performance regression on startup (in particular in AnnotationUtils) [SPR-13621]'],"['**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** opened **[SPR-13621](https://jira.spring.io/browse/SPR-13621?redirect=false)** and commented\n\nThere is a major performance regression on annotations lookup in Spring Framework 4.2. We found out that a basic Spring Boot application was 10% slower between 1.2 and 1.3. We did some investigation and found out that a Spring boot 1.3 app based on 4.2 was also 10% slower  than the same app on 4.1\n\nOne of the major hotspot difference is `AnnotationUtils.findAnnotation`. On 4.1 its own time is 23 ms (232ms in total) while on 4.2 it is 1,936ms (5,340ms in total)\n\n---\n\n**Affects:** 4.2.2\n\n**Issue Links:**\n- #21208 Reduce ClassUtils.forName overhead (in particular for annotation introspection purposes)\n- #21271 Avoid repeated superclass introspection in AnnotationUtils.findAnnotation\n\n1 votes, 10 watchers\n']",['closed'],[3],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nBased on my attempts today, a particularly wasteful part seems to be the synthesize step for annotations on re-retrieval: While we have been caching the original annotation result, we always re-synthesize the entire annotation for every lookup call... I've modified this to cache the synthesized result now which should provide a significant boost for re-retrieval attempts. However, I have no idea how much of a difference this makes in actual Boot startup time, so please re-run the tests there, [Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)...\n\nIf this doesn't provide enough benefit yet, we could also try to skip the synthesize step altogether for lookup attempts where it doesn't make an actual difference, i.e. where the calling code is ok with aliased attributes to be exposed independently (which it may signal through a boolean flag). However, let's see where the change above takes us first.\n\nJuergen\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nA few further steps taken in the meantime:\n\nWe're avoiding our rather expensive annotation retrieval algorithm in common callers of AnnotatedElementUtils when there are no annotations to begin with: e.g. in StandardAnnotationMetadata, AutowiredAnnotationBeanPostProcessor, AnnotationTransactionAttributeSource. StandardAnnotationMetadata also caches the annotation array now, avoiding repeated re-retrieval.\n\nAnnotatedElementUtils consistently operates on the actual annotation type if available, avoiding String name comparisons in favor of annotation type identity checks wherever possible. Also, it avoids double getDeclaredAnnotations/getAnnotations checks on anything other than Classes now - since they'll always deliver the same result for Methods etc anyway, just in a wasteful fresh array.\n\nI've also fixed our new 4.2 order determination check in ConfigurationClassUtils so that it only kicks in for actual configuration candidates; it was running through an unnecessary Order annotation lookup for every single bean in the context before.\n\nJuergen\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAs a further step, we're avoiding annotation synthesizing for getAnnotationAttributes retrieval now, in particular affecting ASM-based introspection during component scans.\n""]"
c4e8ffece16db679ef4d92d97d7b3e8c748f0b5a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java,Condition_Change,"- * Copyright 2002-2021 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
-		// TODO Remove this conditional inclusion when upgrading to Kotlin 1.5, see https://youtrack.jetbrains.com/issue/KT-44594
-		if (KotlinDetector.isKotlinReflectPresent() && !NativeDetector.inNativeImage()) {
+		if (KotlinDetector.isKotlinReflectPresent()) {",2,condition,Remove outdated NativeDetector check for Kotlin reflection,"See gh-25179
",,25179,1,['Disable and remove unsupported features from native images'],['The work done on [spring-graalvm-native substitutions](https://github.com/spring-projects-experimental/spring-graalvm-native/tree/master/spring-graalvm-native-substitutions) has allows to identify a first set of classes where we need to add a specific code path for GraalVM native images:\r\n\r\n- Remove load time weaving capabilities from `org.springframework.context.support.AbstractApplicationContext`\r\n- Remove `ConfigurationClassEnhancer` usage from `org.springframework.context.annotation.ConfigurationClassPostProcessor`\r\n- Remove usage of `ObjenesisCglibAopProxy` from   `org.springframework.aop.framework.DefaultAopProxyFactory`\r\n- Remove `CglibSubclassCreator` usage from `org.springframework.beans.factory.support.CglibSubclassingInstantiationStrategy`\r\n\r\nThere are likely other ones to be identified.'],['closed'],[0],[]
c5590ae9e6a3d75feae96f3015a65462c67dbcf8,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/support/JdbcUtils.java,Add_Condition,"-			catch (AbstractMethodError err) {
-				logger.debug(""JDBC driver does not implement JDBC 4.1 'getObject(int, Class)' method"", err);
-			}
-			catch (SQLFeatureNotSupportedException ex) {
+			catch (SQLFeatureNotSupportedException | AbstractMethodError ex) {
-				logger.debug(""JDBC driver has limited support for JDBC 4.1 'getObject(int, Class)' method"", ex);
+				if (logger.isDebugEnabled()) {
+					logger.debug(""JDBC driver has limited support for 'getObject(int, Class)' with column type: "" +
+							requiredType.getName(), ex);
+				}",10,condition,Log column type for limited support message in getResultSetValue,"Closes gh-32601
",,32601,1,['Log column type for limited support message in `JdbcUtils.getResultSetValue`'],"['It would have been great to see which type is not supported in the logs, all the more as a driver provider gives a very terse error message (""Invalid column type""):\r\nlogger.debug(""JDBC driver has limited support for JDBC 4.1 \'getObject(int, Class)\' method for class = "" + requiredType, ex);\r\n\r\n_Originally posted by @PhilippeHaution in https://github.com/spring-projects/spring-framework/issues/16223#issuecomment-2035184262_']",['closed'],[0],[]
c56c3045364a93d135309536cc905e56a2eae38d,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/propertyeditors/PathEditor.java,Condition_Change,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-				if (uri.getScheme() != null) {
-					nioPathCandidate = false;
+				String scheme = uri.getScheme();
+				if (scheme != null) {
+					// No NIO candidate except for ""C:"" style drive letters
+					nioPathCandidate = (scheme.length() == 1);
-				throw new IllegalArgumentException(""Failed to retrieve file for "" + resource, ex);
+				throw new IllegalArgumentException(
+						""Could not retrieve file for "" + resource + "": "" + ex.getMessage());",8,condition,PathEditor considers single-letter URI scheme as NIO path candidate,"Closes gh-29881
",,29881,1,['PathEditor cannot handle absolute Windows paths with forward slashes'],"['Since Java can handle Windows paths expressed with forward slashes, people usually express any filesystem path in a configuration file with forward slashes, no matter the OS.\r\n\r\nHowever, Spring\'s `PathEditor` doesn\'t seem to handle what seems to me like a pretty common case:\r\n\r\n```java\r\nPathEditor tested = new PathEditor();\r\ntested.setAsText(""c:/tmp"");\r\n```\r\n\r\nWhile `FileEditor` handles this case just fine and the rather obvious `Path.of(""c:/tmp"");` works, the second line will result in:\r\n\r\n```\r\njava.io.FileNotFoundException: class path resource [c:/tmp] cannot be resolved to URL because it does not exist\r\n\tat org.springframework.core.io.ClassPathResource.getURL(ClassPathResource.java:214)\r\n\tat org.springframework.core.io.AbstractFileResolvingResource.getFile(AbstractFileResolvingResource.java:160)\r\n\tat org.springframework.beans.propertyeditors.PathEditor.setAsText(PathEditor.java:109)\r\n\t... 71 more\r\n```\r\n\r\nI should mention that, like for `Path.of(...);`, as a user, I wouldn\'t expect the resulting Path to necessarily exist on the filesystem. An example use-case would be specifying a path at which something should be created by the application. Such a path wouldn\'t exist at startup.\r\n\r\nUsing: org.springframework:spring-beans:5.3.25']",['closed'],[5],"['Hi, I would like to contribute to this issue can you assign this issue to me? Can you let me know how I can go about solving this issue?', ""Hi @sreenath-tm,\r\n\r\nThanks for making the offer, but please hold off on submitting a PR.\r\n\r\nThis issue is still labeled as `waiting-for-triage`. Consequently, we have not yet investigated the claim. I'll bring this up with the team, and we will come to a decision."", '> However, Spring\'s PathEditor doesn\'t seem to handle what seems to me like a pretty common case:\r\n\r\nThe value is not a path but an URL that ultimately delegates to `DefaultResourceLoader#getResource`. As such, it\'s like any file URL in Java using Windows. You can make it more obvious it\'s an url and the following should work:\r\n\r\n```java\r\ntested.setAsText(""file:///c:/tmp"");\r\n```\r\n', ""May I kindly ask you to reconsider this?\r\n\r\nI find it very counterintuitive that a class called `PathEditor` doesn't behave like the `Path` class it's supposed to convert to. If I use a `Path` object in a configuration, I would expect to be able to specify an actual path as string - straight forward - and not having to disguise it as file URL (otherwise I would've used `URL`).\r\n\r\nThe reliance on `DefaultResourceLoader` seems like an implementation detail and shouldn't be a justification for a clumsy API."", ""Alright. I thought using it as an URI was actually expected to avoid ending in a situation where we'd have too many fallbacks. We've discussed this and @jhoeller thinks we can make the fallback more lenient.""]"
c6c61d64853cbe908caba07c67e7453b45c01f97,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/DefaultLifecycleProcessor.java,Add_Condition,"+		else if (checkpointOnRefresh) {
+			throw new IllegalStateException(""Checkpoint on refresh requires a CRaC-enabled JVM and 'org.crac:crac' on the classpath"");
+		}",3,condition,"Refine ""checkpoint on refresh"" error handling","Closes gh-31096
",,31096,1,"['Refine ""checkpoint on refresh"" error handling ']",['Using `-Dspring.context.checkpoint=onRefresh` without the CRaC dependency on the classpath  results in a `NoClassDefFoundError` thrown at `DefaultLifecycleProcessor.onRefresh` level.\r\n\r\nWe should refine `DefaultLifecycleProcessor` to log a more approachable message earlier in the lifecycle.'],['closed'],[0],[]
c811428512ffd04d41e558dbbc672382079ced2c,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DisposableBeanAdapter.java,Add_Condition,"-				invokeCustomDestroyMethod(destroyMethod);
+				if (destroyMethod != null) {
+					invokeCustomDestroyMethod(destroyMethod);
+				}",4,condition,Ignore nonexistent default-destroy-method in XML config,"Prior to this commit, DisposableBeanAdapter attempted to invoke a
configured default-destroy-method on every bean, including beans that
do not declare the named destroy method, resulting in a
NullPointerException being thrown and logged at WARN level.

This commit addresses this by effectively ignoring any nonexistent
destroy method.

Closes gh-30301
",,30301,1,['NPE thrown for nonexistent `default-destroy-method` in XML config'],"['**Affects:** v6.0.7\r\n\r\n---\r\n\r\nWhen I configure the `default-destroy-method` in XML config and there is a bean that does not have a destroy method, a `NullPointerException` is thrown when closing the `ApplicationContext`.\r\n\r\n\r\n### Example Config and Code\r\n\r\n```xml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<beans xmlns=""http://www.springframework.org/schema/beans""\r\n  xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\r\n  xsi:schemaLocation=""http://www.springframework.org/schema/beans\r\n        https://www.springframework.org/schema/beans/spring-beans.xsd""\r\n  default-init-method=""myInit""\r\n  default-destroy-method=""myDestroy"">\r\n\r\n  <bean id=""a"" class=""com.wpp.core.c1.s1_6._3.AInit""/>\r\n  <bean id=""b"" class=""com.wpp.core.c1.s1_6._3.BDestroy""/>\r\n\r\n</beans>\r\n```\r\n\r\n```java\r\npackage com.wpp.core.c1.s1_6._3;\r\npublic class AInit {\r\n  public void myInit() {\r\n    System.out.println(""A myInit"");\r\n  }\r\n}\r\n\r\n```\r\n\r\n```java\r\npackage com.wpp.core.c1.s1_6._3;\r\npublic class BDestroy {\r\n  public void myDestroy() {\r\n    System.out.println(""B myDestroy"");\r\n  }\r\n}\r\n```\r\n\r\n```java\r\npackage com.wpp.core.c1.s1_6._3;\r\nimport org.springframework.context.support.ClassPathXmlApplicationContext;\r\npublic class DefaultInitAndDestroyDemo {\r\n  public static void main(String[] args) {\r\n    var context = new ClassPathXmlApplicationContext(""com/wpp/core/c1/s1_6/_3/DefaultInitAndDestroyDemo.xml"");\r\n    context.close();\r\n  }\r\n}\r\n```\r\n\r\n### Exception\r\n\r\n```\r\n09:59:03.853 [main] DEBUG org.springframework.context.support.ClassPathXmlApplicationContext -- Refreshing org.springframework.context.support.ClassPathXmlApplicationContext@880ec60\r\n09:59:04.048 [main] DEBUG org.springframework.beans.factory.xml.XmlBeanDefinitionReader -- Loaded 2 bean definitions from class path resource [com/wpp/core/c1/s1_6/_3/DefaultInitAndDestroyDemo.xml]\r\n09:59:04.088 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory -- Creating shared instance of singleton bean \'a\'\r\nA myInit\r\n09:59:04.123 [main] DEBUG org.springframework.beans.factory.support.DefaultListableBeanFactory -- Creating shared instance of singleton bean \'b\'\r\n09:59:04.194 [main] DEBUG org.springframework.context.support.ClassPathXmlApplicationContext -- Closing org.springframework.context.support.ClassPathXmlApplicationContext@880ec60, started on Fri Apr 07 09:59:03 CST 2023\r\nB myDestroy\r\n09:59:04.197 [main] WARN org.springframework.beans.factory.support.DefaultListableBeanFactory -- Destruction of bean with name \'a\' threw an exception\r\njava.lang.NullPointerException: Cannot invoke ""java.lang.reflect.Method.getParameterCount()"" because ""destroyMethod"" is null\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:278)\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:238)\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587)\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559)\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1189)\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520)\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1182)\r\n\tat org.springframework.context.support.AbstractApplicationContext.destroyBeans(AbstractApplicationContext.java:1084)\r\n\tat org.springframework.context.support.AbstractApplicationContext.doClose(AbstractApplicationContext.java:1053)\r\n\tat org.springframework.context.support.AbstractApplicationContext.close(AbstractApplicationContext.java:1003)\r\n\tat com.wpp.core.c1.s1_6._3.DefaultInitAndDestroyDemo.main(DefaultInitAndDestroyDemo.java:25)\r\n```\r\n\r\n### Related Issues\r\n\r\n- #10879\r\n- #30295\r\n']",['closed'],[3],"['Hi @edfeff,\r\n\r\nThanks for raising the issue and providing the sample application.\r\n\r\nIt turns out that we already have a test in our own test suite which demonstrates the `NullPointerException`.\r\n\r\nIf we run `org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.ignoreDefaultLifecycleMethods()`, we see the following message logged at WARN level.\r\n\r\n```\r\n13:31:19.852 [main] WARN  o.s.b.f.s.DefaultListableBeanFactory - Destruction of bean with name \'foo\' threw an exception\r\njava.lang.NullPointerException: Cannot invoke ""java.lang.reflect.Method.getParameterCount()"" because ""destroyMethod"" is null\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.invokeCustomDestroyMethod(DisposableBeanAdapter.java:290) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DisposableBeanAdapter.destroy(DisposableBeanAdapter.java:239) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroyBean(DefaultSingletonBeanRegistry.java:587) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingleton(DefaultSingletonBeanRegistry.java:559) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingleton(DefaultListableBeanFactory.java:1189) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.destroySingletons(DefaultSingletonBeanRegistry.java:520) ~[main/:?]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.destroySingletons(DefaultListableBeanFactory.java:1182) ~[main/:?]\r\n\tat org.springframework.beans.factory.xml.DefaultLifecycleMethodsTests.ignoreDefaultLifecycleMethods(DefaultLifecycleMethodsTests.java:70) ~[test/:?]\r\n```', 'This appears to have been a regression introduced in 6.0.x and has been fixed for inclusion in 6.0.8.', 'Reopening to investigate a potentially more suitable fix for the regression.']"
c8c0737ce712569a7e03a97dfe7ef11cbbc33e39,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,Remove_Condition,"-		else {
-			this.applicationListeners.add(listener);
-		}
+		this.applicationListeners.add(listener);",4,condition,AbstractApplicationContext.getApplicationListeners() exposes all statically registered listeners,"Issue: SPR-17324
",,21858,1,['ApplicationListener is missing from Collection returned by getApplicationListeners() if it was added after the multicaster was initialised [SPR-17324]'],"[""**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-17324](https://jira.spring.io/browse/SPR-17324?redirect=false)** and commented\n\nIn Boot, if context refresh fails, we publish an `ApplicationFailedEvent`. We can't rely on the context's multicaster being available at this point so we create our own. It is initialised with the collection of listeners returned by `AbstractApplicationContext.getApplicationListeners()`. Unfortunately, any listeners that were added after the context's multicaster was initialised are missing from this collection so they do not receive the `ApplicationFailedEvent`.\n\nIn `AbstractApplicationContext.addApplicationListener(ApplicationListener<?>)`, would it be possible to always call `this.applicationListeners.add(listener)` rather than only calling it when `this.applicationEventMulticaster` is `null`?\n\n---\n\n**Affects:** 5.0.9\n\n**Reference URL:** https://github.com/spring-projects/spring-boot/issues/14490\n\n**Issue Links:**\n- #21840 Unnecessary sort in AbstractApplicationEventMulticaster\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c8c0737ce712569a7e03a97dfe7ef11cbbc33e39, https://github.com/spring-projects/spring-framework/commit/d61a7ed1f0e0ae91e8aeb29af0447e1d2f473846\n\n**Backported to:** [5.0.10](https://github.com/spring-projects/spring-framework/milestone/191?closed=1)\n""]",['closed'],[0],[]
c94b6765766358a5816d0818a97e45feef1c8ea8,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/cglib/core/SpringNamingPolicy.java,Condition_Change,"-		else if (prefix.startsWith(""java"")) {
+		else if (prefix.startsWith(""java."") || prefix.startsWith(""javax."")) {",2,condition,"Specifically handle ""java.""/""javax."" packages in SpringNamingPolicy","Closes gh-27622
",,27622,1,"['CGLIB does not allow packages to start with ""java""']","[""`net.sf.cglib.core.DefaultNamingPolicy`, which is also used by the `SpringNamingPolicy` of the Spring Framework checks explicitly for a `java` prefix.\r\n\r\nA problem that might occur here is that someone tries to build a `javabeat.net` Spring example. This would cause a crash during any CGLIB define class due to the prepended dollar sign (`$`).\r\n\r\nWouldn't it therefore make sense to check for `java.` as a prefix instead of `java`?""]",['closed'],[9],"['> A problem that might occur here is that e.g. someone tries to build a ""javabeat.net"" spring example.\r\n\r\nWouldn\'t the package name be `net.javabeat`, which starts with `net` instead of `java`?\r\n\r\n> This would cause a crash during any cglib define class due to the prepended dollar sign...\r\n\r\nDo you have a concrete use case that results in such a crash?\r\n\r\nAlso, what version of the JDK/JRE are you using?\r\n\r\n\r\n', 'I mean the example was just meant to be demonstrative...\r\nBut I actually ran across the issue while trying to run a spring-boot v2.5.6 (spring framework 5.3.12) sample app under orcale jdk 17.\r\nDue to the fact that the fallback method of using ClassLoader::defineClass not being available without a ""--add-opens java.base/java.lang=ALL-UNNAMED"" it just results in a InaccessibleObjectException.\r\n\r\nFull version info for my java binary: Java HotSpot(TM) 64-Bit Server VM (build 17+35-LTS-2724, mixed mode, sharing)\r\n\r\nIt does work under java 11.. but yea i find it kind of odd that cglib implies these restrictions and doesn\'t make it clear that it does in fact not support these usecases.\r\nOracles naming convention itself does not impose such restrictions:\r\nhttps://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html\r\n\r\nExample.jar and sources:\r\nhttps://drive.google.com/file/d/1Y9ejDOixpaPPP9yMUsIftg3xA0bkcNJv/view?usp=sharing', ""Thanks for the feedback.\r\n\r\nIt sounds like you're saying it's only a result of enforcement of strong encapsulation since JDK 16/17 -- right?\r\n\r\nAnd in that case, there is in fact a workaround as you've mentioned with `--add-opens ...`.\r\n\r\nAs for the reason why CGLIB prepends `$` to any fully qualified class name starting with `java` instead of `java.` or `javax.`, perhaps @vlsi can shed some light on that."", '@MuellerMP ,\r\n1) I guess you are right, and it would be better to use `java.` and `javax.` prefix tests (see https://github.com/cglib/cglib/blame/975e481faf39c91b8ac5b9b3d62822b7c52c5f47/cglib/src/main/java/net/sf/cglib/core/DefaultNamingPolicy.java#L41-L42 )\r\n2) However, I guess, it does not matter much, as `$` should be a valid character in the class name even at the very beginning.\r\n\r\nDo you have a stack trace and/or reproducer at hand?', '@sbrannen i think the fallback method using a reflective call to ClassLoader::defineClass is a separate design issue of the CGLIB...\r\nCurrent state in spring and the problem in my case is the naming issue.\r\nIt could also confuse users to see a InaccessibleObjectException just because they named there package in an apparently wrong way. So atleast a helpful exception would be nice trat this usecase is in fact unsupported.\r\n\r\n@vlsi Hey! Can you access the google drive link I posted? It should contain a jar and sources to the sample that reproduces the exception under java 16+.', ""@MuellerMP , I've never worked with maven-based spring boot project, and it would take me ages to start. Could you please share the stack trace related to `$`-based class name?"", 'this is the complete log of the program runthrough (including exception in the reflectutils).\r\n[example-run.txt](https://github.com/spring-projects/spring-framework/files/7447201/example-run.txt)\r\n\r\nOriginal Exception is caught here:\r\nhttps://github.com/spring-projects/spring-framework/blob/v5.3.12/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java#L566\r\nFallthrough throw here:\r\nhttps://github.com/spring-projects/spring-framework/blob/v5.3.12/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java#L589\r\n\r\nThe exception with the naming issue isnt thrown though and occurs here:\r\nhttps://github.com/spring-projects/spring-framework/blob/v5.3.12/spring-core/src/main/java/org/springframework/cglib/core/ReflectUtils.java#L507\r\n\r\nbecause the package name starts with a $ sign so the ContextClass is not in the same package and it results in a IllegalArgumentException.\r\nFor IllegalArgumentException and LinkageErrors there exists a fallback in the ReflectUtils using the ClassLoader::defineClass via reflection which is no longer allowed due to the strong encapsulation.\r\n\r\nthe package name is determined in this stacktrace:\r\nAbstractClassGenerator::generate(ClassLoaderData data)\r\nhttps://github.com/spring-projects/spring-framework/blob/v5.3.12/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java#L345\r\nAbstractClassGenerator::generateClassName(Predicate nameTestPrediacte)\r\nhttps://github.com/spring-projects/spring-framework/blob/v5.3.12/spring-core/src/main/java/org/springframework/cglib/core/AbstractClassGenerator.java#L177\r\nSpringNamingPolicy via inheritance from DefaultNamingPolicy::getClassName(String prefix, String source, Object key, Predicate names):\r\nhttps://github.com/cglib/cglib/blob/master/cglib/src/main/java/net/sf/cglib/core/DefaultNamingPolicy.java#L42\r\n', 'I have to admit debugging this sort of error handling is non-trivial and using a reassignable temporary variable that is thrown somewhere else instead of using the Throwable(Throwable cause) constructor first and throwing after is very evil... =(\r\n1) You dont know where the exception actually occured\r\n2) You dont know if there occured an exception beforehand because it is simply ignored and overriden by the latter occuring one\r\n\r\nIMO calling Throwable::addSurpressed would be a better alternative if you really dont want to throw...\r\n\r\n\r\n', '#### Related Issues\r\n\r\n- #28138']"
c95dfca726aa72ef0c7dc64526b5808f28e258f1,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/xml/DefaultBeanDefinitionDocumentReader.java,Add_Condition,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
+					if (logger.isInfoEnabled()) {
+						logger.info(""Skipped XML bean definition file due to specified profiles ["" + profileSpec +
+								""] not matching: "" + getReaderContext().getResource());
+					}",4,condition,Log profile-based exclusion of XML bean definition file,"Issue: SPR-10202
",,14835,1,['Log at info level when skipping an application context due to profile not being active [SPR-10202]'],['**[Greg Lloyd](https://jira.spring.io/secure/ViewProfile.jspa?name=glloyd)** opened **[SPR-10202](https://jira.spring.io/browse/SPR-10202?redirect=false)** and commented\n\nWhen you are expecting an applicationContext to be processed and it contains a profile attribute which is not active there is no indication of why the context was not processed.\n\nIt would be nice if there were an info level log that explicitly logged that applicationContext Y was being skipped because X profile is not active.\n\nThe NoSuchBeanDefinitionException could be caused by any number of issues so it would be nice if there were a few breadcrumbs concerning a profile to help track down the cause.\n\n\n---\n\n**Affects:** 3.1.1\n\n**Reference URL:** http://blog.springsource.org/2011/02/11/spring-framework-3-1-m1-released/\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/c95dfca726aa72ef0c7dc64526b5808f28e258f1\n'],['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe're logging an explicit info-level message for a skipped XML bean definition file now, aligned with the info-level logging that `XmlBeanDefinitionReader` generally performs.\n\nJuergen\n"", '**[Greg Lloyd](https://jira.spring.io/secure/ViewProfile.jspa?name=glloyd)** commented\n\nAmazing. Thanks.\n']"
ca2b3c170c439b775a40fd36bd6b71e2adfe3cf3,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/aot/KotlinReflectionBeanRegistrationAotProcessor.java,Add_Condition,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
+			Class<?> enclosingClass = type.getEnclosingClass();
+			if (enclosingClass != null) {
+				runtimeHints.reflection().registerType(enclosingClass);
+			}",4,condition,Add Kotlin hints for enclosing class,"This is needed by Kotlin reflection in order to be able to list
class members on native.

Closes gh-32472
",,32472,1,['Missing bean class in native image with a Kotlin nested class'],"['<!--\r\n!!! For Security Vulnerabilities, please go to https://spring.io/security-policy !!!\r\n-->\r\n**Affects:** \\<6.1.2>\r\n**Reproducer:** <https://github.com/juliuskrah/graphql-demo/tree/spf-32472>\r\n\r\n# Missing class in AOT processed Bean\r\nGiven the following bean definition:\r\n---\r\n<!--\r\nThanks for taking the time to create an issue. Please read the following:\r\n\r\n- Questions should be asked on Stack Overflow.\r\n- For bugs, specify affected versions and explain what you are trying to do.\r\n- For enhancements, provide context and describe the problem.\r\n\r\nIssue or Pull Request? Create only one, not both. GitHub treats them as the same.\r\nIf unsure, start with an issue, and if you submit a pull request later, the\r\nissue will be closed as superseded.\r\n-->\r\n\r\n```kotlin\r\nclass MongockBeanDefinitionRegistrar(\r\n    private val environment: Environment\r\n): ImportBeanDefinitionRegistrar {\r\n// ...\r\n\r\n    override fun registerBeanDefinitions(\r\n        metadata: AnnotationMetadata,\r\n        registry: BeanDefinitionRegistry,\r\n        importBeanNameGenerator: BeanNameGenerator,\r\n    ) {\r\n      // ...\r\n       val mongockSupportBeanDefinitionBuilder = BeanDefinitionBuilder\r\n            .rootBeanDefinition(MongockRunnerSupport::class.java)\r\n            .addPropertyValue(""migrationClasses"", changeUnitSets)\r\n            .addPropertyReference(""driver"", ""connectionDriver"")\r\n            .addPropertyReference(""config"", ""mongock-io.mongock.runner.springboot.base.config.MongockSpringConfiguration"")\r\n\r\n        val mongockRunnerBeanDefinitionBuilder = BeanDefinitionBuilder.rootBeanDefinition(MongockRunner::class.java)\r\n            .setFactoryMethodOnBean(""create"", ""mongockRunnerSupport"")\r\n            .setInitMethodName(""execute"")\r\n\r\n        registry.registerBeanDefinition(getName(MongockRunner::class.java), mongockRunnerBeanDefinitionBuilder.beanDefinition)\r\n        registry.registerBeanDefinition(""mongockRunnerSupport"", mongockSupportBeanDefinitionBuilder.beanDefinition)\r\n  }\r\n\r\n  class MongockRunnerSupport: ApplicationContextAware, ApplicationEventPublisherAware {\r\n        var driver: ConnectionDriver? = null\r\n        var config: MongockConfiguration? = null\r\n        var migrationClasses: List<Class<*>>? = emptyList()\r\n        private lateinit var applicationContext: ApplicationContext\r\n        private lateinit var eventPublisher: ApplicationEventPublisher\r\n\r\n        fun create(): MongockRunner {\r\n            val builder: RunnerSpringbootBuilder = MongockSpringboot.builder()\r\n            if (this.driver != null) builder.setDriver(driver)\r\n            if (this.config != null) builder.setConfig(config)\r\n            builder.setSpringContext(applicationContext)\r\n            builder.setEventPublisher(eventPublisher)\r\n            migrationClasses?.forEach(builder::addMigrationClass)\r\n            return builder.buildRunner()\r\n        }\r\n\r\n        override fun setApplicationContext(applicationContext: ApplicationContext) {\r\n            this.applicationContext = applicationContext\r\n        }\r\n\r\n        override fun setApplicationEventPublisher(applicationEventPublisher: ApplicationEventPublisher) {\r\n            this.eventPublisher = applicationEventPublisher\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nThe aot process generates the following class:\r\n\r\n```java\r\n@Generated\r\npublic class MongockBeanDefinitionRegistrar__BeanDefinitions {\r\n\r\n  @Generated\r\n  public static class MongockRunnerSupport {\r\n\r\n    private static BeanInstanceSupplier<MongockRunner> getMongockRunnerInstanceSupplier() {\r\n      return BeanInstanceSupplier.<MongockRunner>forFactoryMethod(MongockBeanDefinitionRegistrar.MongockRunnerSupport.class, ""create"")\r\n              .withGenerator((registeredBean) -> registeredBean.getBeanFactory().getBean(MongockBeanDefinitionRegistrar.MongockRunnerSupport.class).create());\r\n    }\r\n\r\n\r\n    public static BeanDefinition getMongockRunnerBeanDefinition() {\r\n      RootBeanDefinition beanDefinition = new RootBeanDefinition(MongockRunner.class);\r\n      beanDefinition.setTargetType(MongockRunner.class);\r\n      beanDefinition.setInitMethodNames(""execute"");\r\n      beanDefinition.setInstanceSupplier(getMongockRunnerInstanceSupplier());\r\n      return beanDefinition;\r\n    }\r\n\r\n\r\n    public static BeanDefinition getMongockRunnerSupportBeanDefinition() {\r\n      RootBeanDefinition beanDefinition = new RootBeanDefinition(MongockBeanDefinitionRegistrar.MongockRunnerSupport.class);\r\n      beanDefinition.getPropertyValues().addPropertyValue(""migrationClasses"", List.of(CreateProductCollectionChangeUnit202401151530.class));\r\n      beanDefinition.getPropertyValues().addPropertyValue(""driver"", new RuntimeBeanReference(""connectionDriver""));\r\n      beanDefinition.getPropertyValues().addPropertyValue(""config"", new RuntimeBeanReference(""mongock-io.mongock.runner.springboot.base.config.MongockSpringConfiguration""));\r\n      beanDefinition.setInstanceSupplier(MongockBeanDefinitionRegistrar.MongockRunnerSupport::new);\r\n      return beanDefinition;\r\n    }\r\n  }\r\n}\r\n\r\n```\r\n\r\nI encounter the following exception when running the native executable:\r\n\r\n```java\r\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name \'mongockRunnerSupport\': Unresolved class: class com.example.graph.spring.MongockBeanDefinitionRegistrar$MongockRunnerSupport (kind = CLASS)\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:606) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:224) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1323) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1284) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveBean(DefaultListableBeanFactory.java:486) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:341) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:334) ~[graphql-demo:6.1.2]\r\n\tat com.example.graph.spring.MongockBeanDefinitionRegistrar__BeanDefinitions$MongockRunnerSupport.lambda$getRunnerSpringbootBuilderInstanceSupplier$0(MongockBeanDefinitionRegistrar__BeanDefinitions.java:28) ~[na:na]\r\n\tat org.springframework.util.function.ThrowingFunction.apply(ThrowingFunction.java:63) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.util.function.ThrowingFunction.apply(ThrowingFunction.java:51) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.aot.BeanInstanceSupplier.lambda$withGenerator$0(BeanInstanceSupplier.java:171) ~[na:na]\r\n\tat org.springframework.util.function.ThrowingBiFunction.apply(ThrowingBiFunction.java:68) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.util.function.ThrowingBiFunction.apply(ThrowingBiFunction.java:54) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.aot.BeanInstanceSupplier.lambda$get$2(BeanInstanceSupplier.java:206) ~[na:na]\r\n\tat org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:58) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.util.function.ThrowingSupplier.get(ThrowingSupplier.java:46) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.aot.BeanInstanceSupplier.invokeBeanSupplier(BeanInstanceSupplier.java:218) ~[na:na]\r\n\tat org.springframework.beans.factory.aot.BeanInstanceSupplier.get(BeanInstanceSupplier.java:206) ~[na:na]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.obtainInstanceFromSupplier(DefaultListableBeanFactory.java:949) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.obtainFromSupplier(AbstractAutowireCapableBeanFactory.java:1216) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:561) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:521) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:325) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:323) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:975) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:960) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:625) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.boot.web.reactive.context.ReactiveWebServerApplicationContext.refresh(ReactiveWebServerApplicationContext.java:66) ~[graphql-demo:3.2.1]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:762) ~[graphql-demo:3.2.1]\r\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:464) ~[graphql-demo:3.2.1]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:334) ~[graphql-demo:3.2.1]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1358) ~[graphql-demo:3.2.1]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1347) ~[graphql-demo:3.2.1]\r\n\tat com.example.graph.ApplicationKt.main(Application.kt:16) ~[graphql-demo:na]\r\n\tat java.base@21/java.lang.invoke.LambdaForm$DMH/sa346b79c.invokeStaticInit(LambdaForm$DMH) ~[na:na]\r\nCaused by: kotlin.reflect.jvm.internal.KotlinReflectionInternalError: Unresolved class: class com.example.graph.spring.MongockBeanDefinitionRegistrar$MongockRunnerSupport (kind = CLASS)\r\n\tat kotlin.reflect.jvm.internal.KClassImpl.createSyntheticClassOrFail(KClassImpl.kt:340) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl.access$createSyntheticClassOrFail(KClassImpl.kt:49) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data$descriptor$2.invoke(KClassImpl.kt:67) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data$descriptor$2.invoke(KClassImpl.kt:53) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal.invoke(ReflectProperties.java:70) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.ReflectProperties$Val.getValue(ReflectProperties.java:32) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data.getDescriptor(KClassImpl.kt:53) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl.getDescriptor(KClassImpl.kt:193) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl.getMemberScope$kotlin_reflection(KClassImpl.kt:202) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data$declaredNonStaticMembers$2.invoke(KClassImpl.kt:173) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data$declaredNonStaticMembers$2.invoke(KClassImpl.kt:173) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal.invoke(ReflectProperties.java:70) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.ReflectProperties$Val.getValue(ReflectProperties.java:32) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data.getDeclaredNonStaticMembers(KClassImpl.kt:173) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data$allNonStaticMembers$2.invoke(KClassImpl.kt:182) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data$allNonStaticMembers$2.invoke(KClassImpl.kt:182) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal.invoke(ReflectProperties.java:70) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.ReflectProperties$Val.getValue(ReflectProperties.java:32) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data.getAllNonStaticMembers(KClassImpl.kt:182) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data$allMembers$2.invoke(KClassImpl.kt:188) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data$allMembers$2.invoke(KClassImpl.kt:188) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.ReflectProperties$LazySoftVal.invoke(ReflectProperties.java:70) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.ReflectProperties$Val.getValue(ReflectProperties.java:32) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl$Data.getAllMembers(KClassImpl.kt:188) ~[graphql-demo:1.9.21-release-633]\r\n\tat kotlin.reflect.jvm.internal.KClassImpl.getMembers(KClassImpl.kt:206) ~[graphql-demo:1.9.21-release-633]\r\n\tat org.springframework.data.util.KotlinBeanInfoFactory.getBeanInfo(KotlinBeanInfoFactory.java:64) ~[graphql-demo:3.2.1]\r\n\tat org.springframework.beans.CachedIntrospectionResults.getBeanInfo(CachedIntrospectionResults.java:222) ~[na:na]\r\n\tat org.springframework.beans.CachedIntrospectionResults.<init>(CachedIntrospectionResults.java:248) ~[na:na]\r\n\tat org.springframework.beans.CachedIntrospectionResults.forClass(CachedIntrospectionResults.java:157) ~[na:na]\r\n\tat org.springframework.beans.BeanWrapperImpl.getCachedIntrospectionResults(BeanWrapperImpl.java:162) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.BeanWrapperImpl.getLocalPropertyHandler(BeanWrapperImpl.java:193) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.BeanWrapperImpl.getLocalPropertyHandler(BeanWrapperImpl.java:58) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.AbstractNestablePropertyAccessor.getPropertyHandler(AbstractNestablePropertyAccessor.java:739) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.AbstractNestablePropertyAccessor.isWritableProperty(AbstractNestablePropertyAccessor.java:565) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.applyPropertyValues(AbstractAutowireCapableBeanFactory.java:1686) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1433) ~[graphql-demo:6.1.2]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:598) ~[graphql-demo:6.1.2]\r\n\t... 41 common frames omitted\r\n```\r\n']",['closed'],[5],"['When running `docker compose -f src/main/resources/compose.yml -f src/main/resources/compose.dev.yml up`, I get a `permissions on /docker-entrypoint-initdb.d/keyfile are too open` error with Docker 24.0.5, could you please fix it to allow me to run the sample properly?', '> When running `docker compose -f src/main/resources/compose.yml -f src/main/resources/compose.dev.yml up`, I get a `permissions on /docker-entrypoint-initdb.d/keyfile are too open` error with Docker 24.0.5, could you please fix it to allow me to run the sample properly?\r\n\r\nSet the permissions on the file\r\n\r\n```bash\r\nchmod 400 src/main/resources/docker/keyfile\r\n```', 'I am able to reproduce, that said, I am not sure something has to be fixed in Spring Framework since `org.springframework.data.util.KotlinBeanInfoFactory` is triggering this error. But we can try to qualify more precisely this issue.\r\n\r\nI am not sure yet why we see this error because `com.example.graph.spring.MongockBeanDefinitionRegistrar$MongockRunnerSupport` seems to have various metadata provided, and even if I add `allDeclaredMethods: true` and `""allPublicMethods"": true` I still see the same error (see [related `kotlin-reflect` source code](https://github.com/JetBrains/kotlin/blob/29efe8645c9e787aa81438b4729cb3388594329e/core/reflection.jvm/src/kotlin/reflect/jvm/internal/KClassImpl.kt#L340)).', ""After more tests, I found that the applications works as expected if you add a reflection hint for the outer class `com.example.graph.spring.MongockBeanDefinitionRegistrar` (currently missing).\r\n\r\n@snicoll The code path involves Spring Data which invokes `kotlinClass.getMembers()` which requires the outer class hint, but maybe we could handle that defensively at Framework level. Any thoughts?\r\n\r\nUnrelated, notice that an additional hint for `io.mongock.runner.core.executor.MongockRunnerImpl` is also needed to be able to detect the `execute` function and can't  be, by design, guessed by the inference mechanism if I am not mistaken."", 'After chatting with Sébastien, we think that we should detect this case whenever we infer a reflection hint on a type. We also wonder if the same issue would happen if a non-static inner class was exposed that way in Java.']"
ca7634dfe8389e2be85874628e12fac6dd781466,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Add_Condition,"-					ann = AnnotationUtils.findAnnotation(abd.getBeanClass(), annotationType);
+					Class<?> beanClass = abd.getBeanClass();
+					if (beanClass != beanType) {
+						ann = AnnotationUtils.findAnnotation(beanClass, annotationType);
+					}",5,condition,Avoid duplicate class introspection during findAnnotationOnBean,"Closes gh-22318
",,22318,1,['Avoid duplicate call to findAnnotations in DefaultListableBeanFactory.findAnnotationOnBean'],"['**Affects:** 5.2.0.BUILD-SNAPSHOT\r\n\r\nhttps://github.com/spring-projects/spring-framework/blob/d3b5ba7a361866ea96fcc64d3f76be9b5be3b8e4/spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java#L671-L683\r\n\r\nIf `abd.getBeanClass()` returns a `Class` that is equal to `beanType`, it looks to me like the call to `AnnotationUtils.findAnnotation` on line 680 duplicates the call made on line 673 and can be skipped.']",['closed'],[0],[]
cac76192e28ccf18faa8d19147011cbde040e3b4,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/validation/beanvalidation/LocalValidatorFactoryBean.java,Add_Condition,"- * <p>As of Spring 4.0, this class supports Bean Validation 1.0 and 1.1, with special support
- * for Hibernate Validator 4.x and 5.0 (see {@link #setValidationMessageSource}).
+ * <p><b>As of Spring 4.0, this class supports Bean Validation 1.0 and 1.1, with special support
+ * for Hibernate Validator 4.x and 5.0</b> (see {@link #setValidationMessageSource}).
+		// Allow for custom post-processing before we actually build the ValidatorFactory.
+		postProcessConfiguration(configuration);
+
+	/**
+	 * Post-process the given Bean Validation configuration,
+	 * adding to or overriding any of its settings.
+	 * <p>Invoked right before building the {@link ValidatorFactory}.
+	 * @param configuration the Configuration object, pre-populated with
+	 * settings driven by LocalValidatorFactoryBean's properties
+	 */
+	protected void postProcessConfiguration(Configuration configuration) {
+	}
+
-		ReflectionUtils.invokeMethod(closeMethod, this.validatorFactory);
+		if (closeMethod != null) {
+			ReflectionUtils.invokeMethod(closeMethod, this.validatorFactory);
+		}",10,condition,"Added ""postProcessConfiguration"" template method to LocalValidatorFactoryBean",,,,0,N/A,N/A,N/A,N/A,N/A
cb095132b14eb61e1dfed8079a459633ea18a256,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/ClassReader.java,Condition_Change,"-            if (mw.cw.cr == this && signature == mw.signature) {
+            if (mw.cw.cr == this &&
+					(signature != null ? signature.equals(mw.signature) : mw.signature == null)) {",3,condition,Defensive String equals comparison in ClassReader,"Issue: SPR-12382
",,16990,1,['String comparison using .equals() in ASM ClassReader [SPR-12382]'],"['**[Ahn Jung Su](https://jira.spring.io/secure/ViewProfile.jspa?name=iamjs77)** opened **[SPR-12382](https://jira.spring.io/browse/SPR-12382?redirect=false)** and commented\n\nComparison of String objects using == or != in org.springframework.asm.ClassReader.readMethod(ClassVisitor, Context, int)\n\nif (mw.cw.cr == this && signature==mw.signature) {\n...\n}\n\nActually Type of signature and mw.signature are String.\nIt is better to use .equals()\n\n---\n\n**Affects:** 4.1.1\n\n**Issue Links:**\n- #16970 Inefficient new Byte, Integer, Character constructor calls in ASM ClassReader\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/678, and commits https://github.com/spring-projects/spring-framework/commit/cb095132b14eb61e1dfed8079a459633ea18a256\n']",['closed'],[2],"['**[Ahn Jung Su](https://jira.spring.io/secure/ViewProfile.jspa?name=iamjs77)** commented\n\nI changed source == operations to equlas() method. and commit\n\npull request  : https://github.com/spring-projects/spring-framework/pull/678\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've applied this to master in a more defensive fashion including a null check.\n\nJuergen\n""]"
ccec75c98daa681727f510fa8e69d9651615d59c,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CollectionFactory.java,Condition_Change,"-		else if (SortedSet.class == collectionType || NavigableSet.class == collectionType) {
+		else if (TreeSet.class == collectionType || SortedSet.class == collectionType || NavigableSet.class == collectionType) {",2,condition,Add missing TreeSet to CollectionFactory.createCollection(),"See gh-28949
",,28949,1,['Support TreeSet collection type in CollectionFactory.createCollection() without using reflection'],['It seems to have been missed in #28718.'],['closed'],[0],[]
cd4ce8727e97366cd50281f9ad2dd22922578ac1,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/config/WebSocketNamespaceUtils.java,Condition_Change,"-
-
-			interceptors.add(new OriginHandshakeInterceptor(allowedOrigins));
+			RootBeanDefinition originHandshakeInterceptor = new RootBeanDefinition(OriginHandshakeInterceptor.class);
+			originHandshakeInterceptor.getPropertyValues().add(""allowedOrigins"", allowedOrigins);
+			interceptors.add(originHandshakeInterceptor);
-			for (Element beanElement : DomUtils.getChildElementsByTagName(parentElement, new String[] {""bean"", ""ref""})) {
+			for (Element beanElement : DomUtils.getChildElementsByTagName(parentElement, ""bean"", ""ref"")) {",8,iteration,WebSocket namespace consistently applies resolvable allowed-origins value,"Issue: SPR-13760
",,18333,1,['allowed-origins are not resolved from properties variables [SPR-13760]'],"['**[Emir Bucalovic](https://jira.spring.io/secure/ViewProfile.jspa?name=emir.bucalovic@gmail.com)** opened **[SPR-13760](https://jira.spring.io/browse/SPR-13760?redirect=false)** and commented\n\nIn the Spring XML configuration for stomp-endpoint property \'allowed-origins\' is parsed but if there is a property variable it is not resolved to a value. Here is example configuration:\n\n```xml\n<websocket:message-broker application-destination-prefix=""/app"">\n  <websocket:stomp-endpoint path=""/websocketcallback"" allowed-origins=""${system.secure.url},${system.secure.url.wss}""*>\n\t<websocket:sockjs/>\n  </websocket:stomp-endpoint>\n  <websocket:simple-broker prefix=""/topic"" />\n</websocket:message-broker>\n```\n\nThis same configuration is parsed and used by AbstractSockJsService where properties variables are indeed processed and resolved to their correct value. In WebSocketNamespaceUtils however, these values are simple read from XML and added to\nOriginHandshakeInterceptor via constructor as strings. Effect of this is that OriginHandshakeInterceptor tries to compare incoming origin header against literal string: \'${system.secure.url.wss}\' which fails.\n\n---\n\n**Affects:** 4.1.8, 4.2.3\n\n**Issue Links:**\n- #18334 Inefficient and inconsistent setAllowedOrigins collection types in AbstractSockJsService/OriginHandshakeInterceptor\n\n**Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1)\n']",['closed'],[5],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch: We need to create that `OriginHandshakeInterceptor` as an inner bean definition, then the specified constructor argument value should automatically get resolved just like the bean property value specified above...\n\nThis will be available in the upcoming `4.2.4.BUILD-SNAPSHOT`. Please give it a try!\n\nJuergen\n', ""**[Emir Bucalovic](https://jira.spring.io/secure/ViewProfile.jspa?name=emir.bucalovic@gmail.com)** commented\n\nGreat job on resolving this so quickly! I'll certainly test it when it's out.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIt would be great if you give it a try against the current 4.2.4 snapshot, ahead of the GA release next week:\n\n```\n<dependencies>\n    <dependency>\n        <groupId>org.springframework</groupId>\n        <artifactId>spring-websocket</artifactId>\n        <version>4.2.4.BUILD-SNAPSHOT</version>\n    </dependency>\n</dependencies>\n<repositories>\n    <repository>\n        <id>spring-snapshots</id>\n        <name>Spring Snapshots</name>\n        <url>http://repo.spring.io/snapshot</url>\n        <snapshots>\n            <enabled>true</enabled>\n        </snapshots>\n    </repository>\n</repositories>\n```\n\n', ""**[Emir Bucalovic](https://jira.spring.io/secure/ViewProfile.jspa?name=emir.bucalovic@gmail.com)** commented\n\nI've just run some tests with a 4.2.4.BUILD-SNAPSHOT and both AbstractSockJsService and OriginHandshakeInterceptor get their properties resolved correctly (via setter methods). Great job!\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThanks for the feedback!\n']"
cdf6eb95ab1ec041b1512185d2e00b09f433e866,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/AbstractApplicationContext.java,Add_Condition,"-				logger.warn(""Exception encountered during context initialization - cancelling refresh attempt"", ex);
+				if (logger.isWarnEnabled()) {
+					logger.warn(""Exception encountered during context initialization - "" +
+							""cancelling refresh attempt: "" + ex);
+				}",5,condition,Reduced warn log entry without stacktrace for startup exceptions,"Issue: SPR-13663
",,18238,1,['Revisit BeansException warn logging after startup failure [SPR-13663]'],"[""**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** opened **[SPR-13663](https://jira.spring.io/browse/SPR-13663?redirect=false)** and commented\n\n#16626 added warn logging to `AbstractApplicationContext` to ensure that `BeansExceptions` don't get missed.\n\nAlthough the intention is good, it has the unwanted side effect of causing most refresh failures to log stacktraces twice. This is particularly obvious with Spring Boot applications where a simple startup failure results in multiple stack-traces.\n\nWe could provide a feature flag to suppress the message.\n\n---\n\n**Affects:** 3.2.15, 4.1.8, 4.2.2\n\n**Issue Links:**\n- #16626 Exceptions thrown during AbstractApplicationContext.refresh() not being logged right when they are caught\n- #22081 Do not swallow exception cause when context refresh fails\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/03585f2e4e3b9e886c7c0e0a684e083ad8a032c9, https://github.com/spring-projects/spring-framework/commit/5d6aab34cbe3c4db38dd1698e246967716befcfd, https://github.com/spring-projects/spring-framework/commit/cdf6eb95ab1ec041b1512185d2e00b09f433e866\n\n**Backported to:** [4.1.9](https://github.com/spring-projects/spring-framework/milestone/133?closed=1), [3.2.16](https://github.com/spring-projects/spring-framework/milestone/104?closed=1)\n""]",['closed'],[5],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nPull-request https://github.com/spring-projects/spring-framework/pull/917\n', ""**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nI'm in two minds about the feature flag. We could probably argue that `warn` logging is overkill and simply downgrade it to `debug`. The message was only added because the original reporter of #16626 had a deadlock, for most situations the rethrown exception will be logged eventually.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nNo need to wait until 4.2.4 - can easily deal with this for 4.2.3 still :-)\n\nJuergen\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nResolved through reducing the warn log entry to a single line with exception type and message but no stacktrace, as discussed on Skype.\n\nJuergen\n', ""**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nHas this been pushed? I don't see any update to the repo.\n""]"
cdfcc23b6f1424f04e8273b3aa69fe185fb73dde,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ExceptionHandlerExceptionResolver.java,Condition_Change,"-			if (logger.isErrorEnabled()) {
-				logger.error(""Failed to invoke @ExceptionHandler method: "" + exceptionHandlerMethod, invocationEx);
+			if (logger.isDebugEnabled()) {
+				logger.debug(""Failed to invoke @ExceptionHandler method: "" + exceptionHandlerMethod, invocationEx);",4,condition,Reduce log level for @ExceptionHandler failure,"Issue: SPR-13932
",,18504,1,['Exclude an exception from @ExceptionHandler [SPR-13932]'],"['**[Bill Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=billc.cn)** opened **[SPR-13932](https://jira.spring.io/browse/SPR-13932?redirect=false)** and commented\n\nAs seen in the referenced SO question, if one wants a blanket handler for all Exceptions apart from a few, one will have to rethrow the unhandled exception in the `@ExceptionHandler` method, which causes a horrendous `ERROR` to be logged.\n\nCan some facility be provided to statically (via the annotation) or, even better, dynamically skip an exception in a handler?\n\n---\n\n**Affects:** 4.2.4\n\n**Reference URL:** http://stackoverflow.com/q/35267756/499922\n\n**Issue Links:**\n- #19473 ExceptionHandlerExceptionResolver should not log propagated exceptions at warn level\n- #19427 Log exception from `@ExceptionHandler` at higher level than debug\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/cdfcc23b6f1424f04e8273b3aa69fe185fb73dde, https://github.com/spring-projects/spring-framework/commit/6ef2d827c67da49ba7751cae6b9bd9a6ec7f8fbc\n']",['closed'],[5],"[""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI've reduced the log level in `ExceptionHandlerExceptionResolver` to `DEBUG`. That probably resolves your issue. That said the idea of excluding an exception from `@ExceptionHandler` may be more generally useful since it allows other registered HandlerExceptionResolver's to get involved. Possibly an exclude flag on `@ExceptionHandler` in which case we might consider supporting it on the type level.\n\nFor anyone interested in the features please comment/vote.\n"", ""**[Martin Macko](https://jira.spring.io/secure/ViewProfile.jspa?name=linkedlist)** commented\n\nHi, I've tried to implement this feature. Could you possibly look at my code and do a review?\n\nhttps://github.com/spring-projects/spring-framework/pull/972\n\nThanks.\n"", '**[Bill Chen](https://jira.spring.io/secure/ViewProfile.jspa?name=billc.cn)** commented\n\n`@Rossen` I think changing the log level is okay for my case as it removes any undesired side effects of rethrowing. However, the more generic case you mentioned is more useful I guess.\n', 'Rather than an exclusion flag, it seems this could be done with two `@ExceptionHandler` methods, one for the more general exception and another for the more specific. ', ""Hi @rstoyanchev, I hope you don't mind If I explain our use case in this closed issue\r\n\r\nWe have a globalErrorHandler with `@ExceptionHandler(value = {Exception.class, Error.class})` that is catching every error in order to track them and check code regressions after each deployment.\r\n\r\nWe also have business exceptions (RedirectExceptions) that we'd like to handle in a custom HandleInterceptor, in its afterCompletion method. As you know this does not work because the exception has already been handled by our globalErrorHandler because we can not make it ignore these kind of business exceptions.\r\n""]"
ce1954da1edd64f1280ead0435c7b3923e33f6da,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassParser.java,Condition_Change,"-			if (!this.knownSuperclasses.containsKey(superclass)) {
+			if (!superclass.startsWith(""java"") && !this.knownSuperclasses.containsKey(superclass)) {",2,condition,Configuration class processing explicitly skips java.* classes since we'll never find @Bean annotations there anyway,"Issue: SPR-11718
(cherry picked from commit c8ea80d)
",,16340,1,['Fix/optimize handling of @Bean method override regression with return type narrowing on JDK 8 [SPR-11718]'],"[""**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-11718](https://jira.spring.io/browse/SPR-11718?redirect=false)** and commented\n\nOverriding an `@Bean` method with a narrowed return type is working fine with Spring 3.2.8 on legacy JDKs (6 and 7). However, it's breaking with Spring 3.2.8 on JDK 8. Spring 4.0 on JDK 8 fixes this already, as part of general `@Bean` overload support. For Spring 3.2.9, we should do a minimal fix for the regression on JDK 8, even if we're not allowing overloaded `@Bean` methods in the same class yet.\n\n---\n\n**Affects:** 3.2.8\n\n**Issue Links:**\n- #15653 ConfigurationClass.validate() should allow for overloading in general or not at all\n- #16341 Metadata reading should never use ASM for java.* and javax.* types (in particular on JDK 8)\n\n**Backported to:** [3.2.9](https://github.com/spring-projects/spring-framework/milestone/97?closed=1)\n""]",['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIt turns out that it's generally worthwhile to ignore bridge methods in our annotation method detection algorithms. As of JDK 8, bridge methods carry the same annotations as the corresponding original methods. However, we always want to operate on original methods anyway, exposing each annotated method just once that way (even on JDK 8).\n\nIn Spring Framework 4.x, we allow overloaded `@Bean` methods in general, simply picking the closest match at runtime. This works fine with the same method registered multiple times, as in our JDK 8 case here. Nevertheless, we should actively exclude bridge methods there as well since it doesn't serve any purpose to consider them, and may lead to subtle runtime differences between JDKs.\n\nJuergen\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI'll apply this bridge method exclusion fix to master and 4.0.x as well since it's a generally worthwhile optimization.\n\nWe're also explicitly skipping introspection on java.* classes since we'll never find `@Bean` annotations there anyway. Previously, we optimized their introspection through always using reflection instead of ASM. However, it's actually pointless to even go that far since we'll never find Spring annotations there in the first place.\n\nJuergen\n""]"
ce43d1b1da4361b6dbbbd9153a86602e891f5155,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ApplicationContextAwareProcessor.java,Condition_Change,"-		if (!((bean instanceof Aware) && (bean instanceof EnvironmentAware || bean instanceof EmbeddedValueResolverAware ||
-				bean instanceof ResourceLoaderAware || bean instanceof ApplicationEventPublisherAware ||
-				bean instanceof MessageSourceAware || bean instanceof ApplicationStartupAware ||
-				bean instanceof ApplicationContextAware))) {
-			return bean;
+		if (bean instanceof Aware) {
+			invokeAwareInterfaces(bean);
-
-		invokeAwareInterfaces(bean);",9,condition,Simplify logic in ApplicationContextAwareProcessor.postProcessBeforeInitialization(),,,,0,N/A,N/A,N/A,N/A,N/A
ce49354400936778b7a7a1e6ec1a373d2a1fa5cb,spring-projects/spring-framework,spring-web/src/testFixtures/java/org/springframework/web/testfixture/servlet/MockHttpServletResponse.java,Add_Condition,"+import java.nio.charset.StandardCharsets;
+	private static final MediaType APPLICATION_PLUS_JSON = new MediaType(""application"", ""*+json"");
+
+				else if (mediaType.isCompatibleWith(MediaType.APPLICATION_JSON) ||
+						mediaType.isCompatibleWith(APPLICATION_PLUS_JSON)) {
+						this.characterEncoding = StandardCharsets.UTF_8.name();
+				}",7,condition,Sync MockHttpServletResponse implementations,"See gh-33019
",,33019,1,['`MockHttpServletResponse` defaults to ISO-8859-1 for JSON while the rest of the framework defaults to UTF-8'],"['**Affects:** 6.1.8\r\n\r\nWhen Spring MVC serializes JSON and no charater encoding is specified, UTF-8 is used by default (see [this](https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/http/converter/json/AbstractJackson2HttpMessageConverter.java#L436) or [this](https://github.com/spring-projects/spring-framework/blob/main/spring-web/src/main/java/org/springframework/http/converter/StringHttpMessageConverter.java#L156)). \r\n\r\nMockMvc on the other hand always defaults to ISO-8859-1 which results in inconsistencies reproduced [here](https://github.com/lukas-krecan/JsonUnit/issues/212).\r\n\r\nThis is a follow-up of https://github.com/spring-projects/spring-framework/issues/32997\r\n\r\n']",['closed'],[0],[]
ce4eff321cd976df4ba26fe3971642259af891d2,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,Add_Condition,"-		StringBuilder sb = new StringBuilder(inString.length());
+		int capacity = inString.length();
+		if (newPattern.length() > oldPattern.length()) {
+			capacity += 16;
+		}
+		StringBuilder sb = new StringBuilder(capacity);
+
+",8,condition,Optimize StringUtils.replace for larger replacement pattern,"Issue: SPR-15430
",,19991,1,['Improve performance of StringUtils.replace() if pattern is not found [SPR-15430]'],"['**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** opened **[SPR-15430](https://jira.spring.io/browse/SPR-15430?redirect=false)** and commented\n\nHey,\n\njust noticed a small improvement for `StringUtils.replace()` in case the pattern that should be replaced is not found in the given String. I noticed this in our loadtests where lots of messages are send to user destinations, which are sanitized like this: `StringUtils.replace(user, ""/"", ""%2F"")`\n\nMost of the time, users don\'t contain a slash, so there is no replacement needed. Please find the PR attached, that yields the following microbenchmark results:\n\n```\nMyBenchmark.testNew                                   thrpt   20  56148767,184 ± 571831,993   ops/s\nMyBenchmark.testNew:·gc.alloc.rate                    thrpt   20         0,002 ±      0,003  MB/sec\nMyBenchmark.testNew:·gc.alloc.rate.norm               thrpt   20        ? 10??                 B/op\nMyBenchmark.testNew:·gc.count                         thrpt   20           ? 0               counts\nMyBenchmark.testOld                                   thrpt   20  15643379,634 ± 404629,728   ops/s\nMyBenchmark.testOld:·gc.alloc.rate                    thrpt   20      3698,512 ±     95,454  MB/sec\nMyBenchmark.testOld:·gc.alloc.rate.norm               thrpt   20       248,000 ±      0,001    B/op\nMyBenchmark.testOld:·gc.count                         thrpt   20       312,000               counts\nMyBenchmark.testOld:·gc.time                          thrpt   20       183,000                   ms\n```\n\n\n\n---\n\n**Affects:** 4.3.7\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/1384\n']",['closed'],[4],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point! I've addressed this as part of a larger revision, also initializing the `StringBuilder` capacity with the length of the input (in `replace` as well as `deleteAny`). We're enforcing the returning of the original `String` in our unit tests now.\n"", '**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** commented\n\nThanks for addressing this. I have one remark though. Setting the initial capacity for `StringBuilder` in `replace` might cause more allocations when the replacement is longer than the oldPattern. Which is the case for `StringUtils.replace(user, ""/"", ""%2F"")`\n\n```\nBenchmark                                                   Mode  Cnt         Score        Error   Units\nMyBenchMark.testNew                                   thrpt   20  11015863,506 ± 197360,119   ops/s\nMyBenchMark.testNew:·gc.alloc.rate                    thrpt   20      4285,222 ±     77,203  MB/sec\nMyBenchMark.testNew:·gc.alloc.rate.norm               thrpt   20       408,000 ±      0,001    B/op\nMyBenchMark.testNew:·gc.churn.PS_Eden_Space           thrpt   20      4275,075 ±    148,756  MB/sec\nMyBenchMark.testNew:·gc.churn.PS_Eden_Space.norm      thrpt   20       406,958 ±      9,871    B/op\nMyBenchMark.testNew:·gc.churn.PS_Survivor_Space       thrpt   20         0,261 ±      0,057  MB/sec\nMyBenchMark.testNew:·gc.churn.PS_Survivor_Space.norm  thrpt   20         0,025 ±      0,005    B/op\nMyBenchMark.testNew:·gc.count                         thrpt   20       357,000               counts\nMyBenchMark.testNew:·gc.time                          thrpt   20       178,000                   ms\nMyBenchMark.testOld                                   thrpt   20  11519565,769 ±  77319,784   ops/s\nMyBenchMark.testOld:·gc.alloc.rate                    thrpt   20      3954,225 ±     26,527  MB/sec\nMyBenchMark.testOld:·gc.alloc.rate.norm               thrpt   20       360,000 ±      0,001    B/op\nMyBenchMark.testOld:·gc.churn.PS_Eden_Space           thrpt   20      3963,766 ±     86,836  MB/sec\nMyBenchMark.testOld:·gc.churn.PS_Eden_Space.norm      thrpt   20       360,866 ±      7,397    B/op\nMyBenchMark.testOld:·gc.churn.PS_Survivor_Space       thrpt   20         0,280 ±      0,059  MB/sec\nMyBenchMark.testOld:·gc.churn.PS_Survivor_Space.norm  thrpt   20         0,025 ±      0,005    B/op\nMyBenchMark.testOld:·gc.count                         thrpt   20       348,000               counts\nMyBenchMark.testOld:·gc.time                          thrpt   20       182,000                   ms\n```\n\nShould be okay for most cases - I wanted to note it for completeness reasons though.\n\nCheers\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nHmm, indeed, if we end up with a capacity less than 16 (the `StringBuilder` default), there could indeed be more allocations than before. This was primarily meant as an optimization for larger Strings where the builder's capacity always has to be grown... so strictly speaking, we could enforce a minimum of 16 to have no regression there. Probably better, for cases with a replacement larger than the original pattern, we could simply use a builder capacity of input size + 16 (analogous to the `StringBuilder(String)` constructor). Any objections?\n"", '**[Christoph Dreis](https://jira.spring.io/secure/ViewProfile.jspa?name=christoph.dreis)** commented\n\nActually the example above is a username larger than 16 characters. Here is one with less than 16 characters:\n\n```\nBenchmark                                                   Mode  Cnt         Score        Error   Units\nMyBenchmark.testNew                                   thrpt   20  11689788,924 ± 298611,841   ops/s\nMyBenchmark.testNew:·gc.alloc.rate                    thrpt   20      2764,230 ±     70,548  MB/sec\nMyBenchmark.testNew:·gc.alloc.rate.norm               thrpt   20       248,000 ±      0,001    B/op\nMyBenchmark.testNew:·gc.count                         thrpt   20       368,000               counts\nMyBenchmark.testNew:·gc.time                          thrpt   20       171,000                   ms\nMyBenchmark.testOld                                   thrpt   20  16474672,626 ± 142928,901   ops/s\nMyBenchmark.testOld:·gc.alloc.rate                    thrpt   20      3267,337 ±     28,232  MB/sec\nMyBenchmark.testOld:·gc.alloc.rate.norm               thrpt   20       208,000 ±      0,001    B/op\nMyBenchmark.testOld:·gc.count                         thrpt   20       368,000               counts\nMyBenchmark.testOld:·gc.time                          thrpt   20       176,000                   ms\n```\n\nOpting for size + 16 in case the replacement is larger than the original pattern might be the way to go, though for smaller Strings it may create more allocations than before (shown in the results below with something like `new StringBuilder(newPattern.length() > oldPattern.length() ? inString.length() + 16 : inString.length())`.\n\n```\nBenchmark                                                   Mode  Cnt         Score        Error   Units\nMyBenchmark.testNew                                   thrpt   20  14444566,216 ± 111195,218   ops/s\nMyBenchmark.testNew:·gc.alloc.rate                    thrpt   20      3305,505 ±     25,452  MB/sec\nMyBenchmark.testNew:·gc.alloc.rate.norm               thrpt   20       240,000 ±      0,001    B/op\nMyBenchmark.testNew:·gc.count                         thrpt   20       327,000               counts\nMyBenchmark.testNew:·gc.time                          thrpt   20       163,000                   ms\nMyBenchmark.testOld                                   thrpt   20  16699064,442 ± 469500,527   ops/s\nMyBenchmark.testOld:·gc.alloc.rate                    thrpt   20      3439,320 ±     96,715  MB/sec\nMyBenchmark.testOld:·gc.alloc.rate.norm               thrpt   20       216,000 ±      0,001    B/op\nMyBenchmark.testOld:·gc.count                         thrpt   20       377,000               counts\nMyBenchmark.testOld:·gc.time                          thrpt   20       179,000                   ms\n```\n\nI intentionally left this out of my initial PR, because it leaves you with the question what the best capacity for the StringBuilder is and what the most common case for users is. ;-) I personally have no strong feelings against size + 16, though.\n']"
ceb79c9bee2b734cb6b3eb2e02494e69671cb20e,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/broker/AbstractBrokerMessageHandler.java,Condition_Change,"-import org.springframework.messaging.support.AbstractMessageChannel;
+import org.springframework.messaging.support.InterceptableChannel;
-			if (this.clientInboundChannel instanceof AbstractMessageChannel) {
-				((AbstractMessageChannel) this.clientInboundChannel).addInterceptor(0, this.unsentDisconnectInterceptor);
+			if (this.clientInboundChannel instanceof InterceptableChannel) {
+				((InterceptableChannel) this.clientInboundChannel).addInterceptor(0, this.unsentDisconnectInterceptor);
-			if (this.clientInboundChannel instanceof AbstractMessageChannel) {
-				((AbstractMessageChannel) this.clientInboundChannel).removeInterceptor(this.unsentDisconnectInterceptor);
+			if (this.clientInboundChannel instanceof InterceptableChannel) {
+				((InterceptableChannel) this.clientInboundChannel).removeInterceptor(this.unsentDisconnectInterceptor);",10,condition,Use InterceptableChannel in AbstractBrokerMessageHandler,"Issue: SPR-12218
",,16832,1,"['Exception in ""inboundClientChannel"" interceptor for DISCONNECT prevents broker from learning about it [SPR-12218]']","['**[Rob Winch](https://jira.spring.io/secure/ViewProfile.jspa?name=rwinch)** opened **[SPR-12218](https://jira.spring.io/browse/SPR-12218?redirect=false)** and commented\n\nIf an exception is thrown in ChannelInterceptor.preSend on DISCONNECT, then the following error is reported when sending to destinations a user has subscribed:\n\n```\nSubProtocolWebSocketHandler[ERROR] - No session for ...\n```\n\nEven if an Exception is thrown in ChannelInterceptor.preSend on DISCONNECT the user mapping should be cleaned up. One option to clean this up would be to use a `ApplicationListener<SessionDisconnectEvent>`\n\n\n---\n\n**Affects:** 4.1 GA\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ceb79c9bee2b734cb6b3eb2e02494e69671cb20e, https://github.com/spring-projects/spring-framework/commit/371d93b3463c5157f3c4b2b809084ddb00ae2b9e\n\n1 votes, 3 watchers\n']",['closed'],[1],['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThe issue mainly affects the simple broker which does not have a heartbeat and must see the DISCONNECT message. A full features broker supports heartbeats and will notice withing a short period that the client is no longer sending messages and will close the connection.\n']
cefd74555ada1285ecd8dc174f6dfc68115807f8,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractAutowireCapableBeanFactory.java,Condition_Change,"-		boolean hasInstAwareBpps = hasInstantiationAwareBeanPostProcessors();
-		if (!mbd.isSynthetic() && hasInstAwareBpps) {
+		if (!mbd.isSynthetic() && hasInstantiationAwareBeanPostProcessors()) {
-		if (hasInstAwareBpps) {
+		if (hasInstantiationAwareBeanPostProcessors()) {",5,condition,Polish contribution,,,,0,N/A,N/A,N/A,N/A,N/A
cfae40afb456c98b2a11be600096da89b8aacafd,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java,Add_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
+import org.springframework.http.HttpStatus;
+import org.springframework.web.server.ResponseStatusException;
-			return Mono.error(new IllegalStateException(
-					""In a WebFlux application, form data is accessed via ServerWebExchange.getFormData().""));
+			if (logger.isDebugEnabled()) {
+				logger.debug(""Form data is accessed via ServerWebExchange.getFormData() in WebFlux."");
+			}
+			return Mono.error(new ResponseStatusException(HttpStatus.UNSUPPORTED_MEDIA_TYPE));",8,condition,Return 415 for form data with @RequestBody in WebFlux,"Closes gh-26386
",,26386,1,['Return 415 for form data via @RequestBody in WebFlux'],"['A `@RestController` like\r\n\r\n```\r\n@RestController\r\n public class DemoController {\r\n     @PostMapping\r\n     public Map<String, Object> getAttributes(@RequestBody Body body, ServerWebExchange serverWebExchange) {\r\n         return serverWebExchange.getAttribute(body.getAttribute());\r\n     }\r\n }\r\n```\r\n\r\nis expected to handle requests with content type _application/json_. When the client request has a content type _x-www-form-urlencoded_, I would expect that the server returns _415 Unsupported Media Type_ or another client error.\r\nInstead Spring throws _java.lang.IllegalStateException: In a WebFlux application, form data is accessed via ServerWebExchange.getFormData()._\r\n\r\nA sample application with failing test can be found here: https://github.com/huberchrigu/spring-reactive-wrong-content-type']",['closed'],[1],"[""Technically it is possible to read the body via `FormHttpMessageReader` but we decided to prevent it as part of #22486 in order to avoid running into the issue of trying to consume the body twice, once via `ServerWebExchange#getFormData` (e.g. in a filter or other) and a second via `@RequestBody`. You're right though that 415 would be a better way to flag this since this effectively means that method doesn't support it.\r\n\r\n""]"
d1303affc8434537927e5ce0149ba4ae6d21c4f9,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/HttpRange.java,Add_Condition,"-	 * @throws IllegalArgumentException if the sum of all ranges exceeds the
-	 * resource length.
+	 * @throws IllegalArgumentException if the sum of all ranges exceeds the resource length
-			long total = regions.stream().map(ResourceRegion::getCount).reduce(0L, (count, sum) -> sum + count);
+			long total = 0;
+			for (ResourceRegion region : regions) {
+				total += region.getCount();
+			}",5,iteration,Avoid expensive Stream API usage in HttpRange,"See gh-22742
",,22742,1,['Avoid expensive assertions in HttpRange'],"['`HttpRange` is used in hot web request invocation paths and should therefore consistently not have any expensive assertions, neither with argument-capturing `Supplier` callbacks nor with direct String concatenation (as it still does in the 4.3.x line). An `if` check with manual exception throwing is the most efficient way to implement such checks, as used in other parts of `HttpRange` already.']",['closed'],[0],[]
d2868f5dd0840c158a5a60fa96c4afd9ce19f777,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/BeanUtils.java,Condition_Change,"+import java.util.HashSet;
-		List<String> ignoreList = (ignoreProperties != null ? Arrays.asList(ignoreProperties) : null);
+		Set<String> ignoreSet = (ignoreProperties != null ? new HashSet<>(Arrays.asList(ignoreProperties)) : null);
-			if (writeMethod != null && (ignoreList == null || !ignoreList.contains(targetPd.getName()))) {
+			if (writeMethod != null && (ignoreSet == null || !ignoreSet.contains(targetPd.getName()))) {",5,condition,Use Set to track ignored properties in BeanUtils.copyProperties(),"Closes gh-30088
",,30088,1,['Use `Set` to track ignored properties in `BeanUtils.copyProperties()`'],[None],['closed'],[2],"['@liupeng12345 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30088)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30088) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@liupeng12345 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30088)!']"
d2aa6a98f25274b99f48866d83c10cfe3bf00f52,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/CoroutinesUtils.java,Add_Condition,"-import org.springframework.util.ReflectionUtils;
+import org.springframework.util.ReflectionUtils;
-									} else {
+									}
+									else {",5,condition,Polishing,"Closes gh-31846
",,31846,1,['Convert args to Kotlin value class in CoroutinesUtils'],"['Currently, `IllegalArgumentException` occurs when Kotlin suspend function with value class parameters  in proxied class is called.\r\nThis is because those functions are called by `CoroutinesUtils` (called from `AopUtils`), but it does not convert Java type args to Kotlin value class.\r\n\r\nThis PR aims to avoid the exception.\r\nI referred to https://github.com/spring-projects/spring-framework/issues/31698\r\n\r\nRelated issue:\r\nhttps://github.com/ExpediaGroup/graphql-kotlin/issues/1894\r\n\r\nSample code:\r\nhttps://github.com/T45K/Spring_GraphQL-Kotlin_trial\r\n\r\nStack trace:\r\n<details><summary>Details</summary>\r\n<p>\r\n\r\n```\r\njava.lang.IllegalArgumentException: object is not an instance of declaring class\r\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.checkReceiver(DirectMethodHandleAccessor.java:197) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:99) ~[na:na]\r\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:580) ~[na:na]\r\n\tat kotlin.reflect.jvm.internal.calls.ValueClassAwareCaller.call(ValueClassAwareCaller.kt:190) ~[kotlin-reflect-1.9.20.jar:1.9.255-SNAPSHOT]\r\n\tat kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:207) ~[kotlin-reflect-1.9.20.jar:1.9.255-SNAPSHOT]\r\n\tat kotlin.reflect.full.KCallables.callSuspendBy(KCallables.kt:74) ~[kotlin-reflect-1.9.20.jar:1.9.255-SNAPSHOT]\r\n\tat org.springframework.core.CoroutinesUtils.lambda$invokeSuspendingFunction$2(CoroutinesUtils.java:124) ~[spring-core-6.1.1.jar:6.1.1]\r\n\tat kotlin.coroutines.intrinsics.IntrinsicsKt__IntrinsicsJvmKt$createCoroutineUnintercepted$$inlined$createCoroutineFromSuspendFunction$IntrinsicsKt__IntrinsicsJvmKt$4.invokeSuspend(IntrinsicsJvm.kt:270) ~[kotlin-stdlib-1.9.20.jar:1.9.255-SNAPSHOT]\r\n\tat kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) ~[kotlin-stdlib-1.9.20.jar:1.9.255-SNAPSHOT]\r\n\tat kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:108) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.EventLoop.processUnconfinedEvent(EventLoop.common.kt:68) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.DispatchedTaskKt.resumeUnconfined(DispatchedTask.kt:245) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.DispatchedTaskKt.dispatch(DispatchedTask.kt:163) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.dispatchResume(CancellableContinuationImpl.kt:474) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.resumeImpl(CancellableContinuationImpl.kt:508) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.resumeImpl$default(CancellableContinuationImpl.kt:497) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.CancellableContinuationImpl.resumeWith(CancellableContinuationImpl.kt:368) ~[kotlinx-coroutines-core-jvm-1.7.3.jar:na]\r\n\tat kotlinx.coroutines.reactive.AwaitKt$awaitOne$2$1.onNext(Await.kt:242) ~[kotlinx-coroutines-reactive-1.7.3.jar:na]\r\n\tat reactor.core.publisher.StrictSubscriber.onNext(StrictSubscriber.java:89) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxOnErrorResume$ResumeSubscriber.onNext(FluxOnErrorResume.java:79) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:158) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxContextWrite$ContextWriteSubscriber.onNext(FluxContextWrite.java:107) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:299) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:337) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.Operators$BaseFluxToMonoOperator.completePossiblyEmpty(Operators.java:2097) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.MonoCollect$CollectSubscriber.onComplete(MonoCollect.java:145) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:260) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:144) ~[reactor-core-3.6.0.jar:3.6.0]\r\n\tat reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:415) ~[reactor-netty-core-1.1.13.jar:1.1.13]\r\n\tat reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:446) ~[reactor-netty-core-1.1.13.jar:1.1.13]\r\n\tat reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:687) ~[reactor-netty-http-1.1.13.jar:1.1.13]\r\n\tat reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:114) ~[reactor-netty-core-1.1.13.jar:1.1.13]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:444) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:284) ~[reactor-netty-http-1.1.13.jar:1.1.13]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:436) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:346) ~[netty-codec-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:318) ~[netty-codec-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:251) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:442) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:412) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1410) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:440) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:420) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:919) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.nio.AbstractNioByteChannel$NioByteUnsafe.read(AbstractNioByteChannel.java:166) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKey(NioEventLoop.java:788) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeysOptimized(NioEventLoop.java:724) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.nio.NioEventLoop.processSelectedKeys(NioEventLoop.java:650) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.channel.nio.NioEventLoop.run(NioEventLoop.java:562) ~[netty-transport-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.util.concurrent.SingleThreadEventExecutor$4.run(SingleThreadEventExecutor.java:997) ~[netty-common-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.util.internal.ThreadExecutorMap$2.run(ThreadExecutorMap.java:74) ~[netty-common-4.1.101.Final.jar:4.1.101.Final]\r\n\tat io.netty.util.concurrent.FastThreadLocalRunnable.run(FastThreadLocalRunnable.java:30) ~[netty-common-4.1.101.Final.jar:4.1.101.Final]\r\n\tat java.base/java.lang.Thread.run(Thread.java:1583) ~[na:na]\r\n```\r\n\r\n</p>\r\n</details> ']",['closed'],[1],"['Merged, thanks!']"
d41ca095abee4e8284139f239d4b5bbf09f694a5,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/bind/annotation/ControllerMappingReflectiveProcessor.java,Add_Condition,"+import org.springframework.core.KotlinDetector;
+import org.springframework.util.ReflectionUtils;
+		Class<?> declaringClass = method.getDeclaringClass();
+		if (KotlinDetector.isKotlinType(declaringClass)) {
+			ReflectionUtils.doWithMethods(declaringClass, m -> hints.registerMethod(m, ExecutableMode.INVOKE),
+					m -> m.getName().equals(method.getName() + ""$default""));
+		}",7,condition,Add native support for Kotlin default values in controllers,"Closes gh-33384
",,33384,1,['spring native not support method handler with kotlin default value'],"['spring version: 6.1.8\r\n\r\nexample:\r\n```kotlin\r\n@RestController\r\nclass DefaultController {\r\n    @GetMapping(""/defaultValue"")\r\n    fun defaultValue(@RequestParam(required = false) argument: Boolean? = null) = argument\r\n}\r\n```\r\n\r\ntest:\r\n```shell\r\ncurl localhost:8080/defaultValue\r\n{""timestamp"":""2024-08-14T03:59:59.186+00:00"",""status"":500,""error"":""Internal Server Error"",""path"":""/defaultValue""}\r\n```\r\n\r\nstack trace:\r\n```\r\nServlet.service() for servlet [dispatcherServlet] in context with path [] threw exception [Handler dispatch failed: org.graalvm.nativeimage.MissingReflectionRegistrationError: The program tried to reflectively invoke method public static java.lang.Boolean com.example.DefaultController.defaultValue$default(com.example.DefaultController,java.lang.Boolean,int,java.lang.Object) without it being registered for runtime reflection. Add it to the reflection metadata to solve this problem. See https://www.graalvm.org/latest/reference-manual/native-image/metadata/#reflection for help.] with root cause\r\n\r\norg.graalvm.nativeimage.MissingReflectionRegistrationError: The program tried to reflectively invoke method public static java.lang.Boolean com.example.DefaultController.defaultValue$default(com.example.DefaultController,java.lang.Boolean,int,java.lang.Object) without it being registered for runtime reflection. Add it to the reflection metadata to solve this problem. See https://www.graalvm.org/latest/reference-manual/native-image/metadata/#reflection for help.\r\n        at org.graalvm.nativeimage.builder/com.oracle.svm.core.reflect.MissingReflectionRegistrationUtils.forQueriedOnlyExecutable(MissingReflectionRegistrationUtils.java:97) ~[na:na]\r\n        at java.base@17.0.11/java.lang.reflect.Method.acquireMethodAccessor(Method.java:77) ~[com.example.ApplicationKt:na]\r\n        at java.base@17.0.11/java.lang.reflect.Method.invoke(Method.java:566) ~[com.example.ApplicationKt:na]\r\n        at kotlin.reflect.jvm.internal.calls.CallerImpl$Method.callMethod(CallerImpl.kt:97) ~[com.example.ApplicationKt:1.9.24-release-822]\r\n        at kotlin.reflect.jvm.internal.calls.CallerImpl$Method$Static.call(CallerImpl.kt:106) ~[na:na]\r\n        at kotlin.reflect.jvm.internal.KCallableImpl.callDefaultMethod$kotlin_reflection(KCallableImpl.kt:215) ~[com.example.ApplicationKt:1.9.24-release-822]\r\n        at kotlin.reflect.jvm.internal.KCallableImpl.callBy(KCallableImpl.kt:112) ~[com.example.ApplicationKt:1.9.24-release-822]\r\n        at org.springframework.web.method.support.InvocableHandlerMethod$KotlinDelegate.invokeFunction(InvocableHandlerMethod.java:334) ~[na:na]\r\n        at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:252) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:188) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:118) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:926) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:831) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1089) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:979) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1014) ~[com.example.ApplicationKt:6.1.11]\r\n        at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:903) ~[com.example.ApplicationKt:6.1.11]\r\n```\r\n\r\nissue reproduce repository: https://github.com/czp3009/spring-native-not-support-method-handler-with-kotlin-default-value\r\n\r\nPossible causes:\r\ni notice that in [this issue](https://github.com/spring-projects/spring-framework/issues/21139#issuecomment-1602718793) spring finally support kotlin default value in method handler\r\n\r\nbut according to code in [PR](https://github.com/mdeinum/spring-framework/commit/06bc03e7e560ee166e142e070feead3b8c80b8fd), it seems that the native hint for method handlers with method names ending in \'$default\' is missing']",['closed'],[0],[]
d43dfc7bae5aa5e81bc51dfb26c1ae1ff1ecc52e,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"-				int separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR);
+				int separatorIndex = urlFile.indexOf(ResourceUtils.WAR_URL_SEPARATOR);
+				if (separatorIndex == -1) {
+					separatorIndex = urlFile.indexOf(ResourceUtils.JAR_URL_SEPARATOR);
+				}
-					rootEntryPath = urlFile.substring(separatorIndex + ResourceUtils.JAR_URL_SEPARATOR.length());
+					rootEntryPath = urlFile.substring(separatorIndex + 2);  // both separators are 2 chars",7,condition,Properly extract jar file from Tomcat war URL,"Issue: SPR-15485
",,20045,1,['Last modified check of Resource created from Tomcat war:file: URL fails with FileNotFoundException [SPR-15485]'],"['**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15485](https://jira.spring.io/browse/SPR-15485?redirect=false)** and commented\n\nThis is, I believe, a regression due to the changes made in [this commit](https://github.com/spring-projects/spring-framework/commit/899f2359984c4fbf396bfc74a824541b6332eb2f). A side-effect of those changes is that `AbstractFileResolvingResource` now proceeds with file system resolution where as, previously, it would have use the last modified header on the URL connection.\n\nThe file system resolution fails with an exception like this:\n\n```\njava.io.FileNotFoundException: Jar URL cannot be resolved to absolute file path because it does not reside in the file system: war:file:/home/vbao/service/vbao-web.war*/js/bootstrap.min.js\n\tat org.springframework.util.ResourceUtils.getFile(ResourceUtils.java:215)\n\tat org.springframework.core.io.AbstractFileResolvingResource.getFileForLastModifiedCheck(AbstractFileResolvingResource.java:67)\n\tat org.springframework.core.io.AbstractResource.lastModified(AbstractResource.java:153)\n\tat org.springframework.core.io.AbstractFileResolvingResource.lastModified(AbstractFileResolvingResource.java:169)\n\tat org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:345)\n\t…\n```\n\n---\n\n**Affects:** 4.3.8\n\n**Reference URL:** https://github.com/spring-projects/spring-boot/issues/8986\n\n**Issue Links:**\n- #19895 PathMatchingResourcePatternResolver fails to work under Tomcat 8.0.41 with unpackWARs=false\n- #21853 HTTP 404 for static resources with last modified = 0L (breaks Docker images build with Jib)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d43dfc7bae5aa5e81bc51dfb26c1ae1ff1ecc52e, https://github.com/spring-projects/spring-framework/commit/d2985613d1a0a59e275ae09ddd9076bd3a46e03b, https://github.com/spring-projects/spring-framework/commit/3daf626842713178f4f396524865da18850467b0\n']",['closed'],[3],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI'm surprised that the `ResourceUtils.extractArchiveURL` doesn't do the job here: It should return `file:/home/vbao/service/vbao-web.war` in such a scenario, which is then what `getFileForLastModifiedCheck` enters `ResourceUtils.getFile` with...\n\nI guess we should make that check more defensiveness, but nevertheless, it'd be great to find out why specifically the archive check doesn't work.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've added a defensive fallback for `FileNotFoundException`, going with the URL connection check instead. Nevertheless, the archive extraction check should work fine as well here...\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAs per https://jira.spring.io/browse/SPR-15332?focusedCommentId=151543&page=com.atlassian.jira.plugin.system.issuetabpanels:comment-tabpanel#comment-151543, we also have a specific check for Tomcat war URLs in our jar file extraction code now (for 5.0 RC1 and 4.3.9, along with the other changes in this ticket).\n']"
d4495a56542276d6ea9a09d6b61c0e30cb75188c,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java,Condition_Change,"-		if (targetObject == null && this.nullSafe) {
+		if (targetObject == null && isNullSafe()) {
-		if (contextObject.getValue() == null && this.nullSafe) {
+		if (contextObject.getValue() == null && isNullSafe()) {
-		if (this.nullSafe) {
+		if (isNullSafe()) {
-		if (this.nullSafe && CodeFlow.isPrimitive(descriptor)) {
+		if (isNullSafe() && CodeFlow.isPrimitive(descriptor)) {",8,condition,Revise PropertyOrFieldReference since isNullSafe() is not final,,,,0,N/A,N/A,N/A,N/A,N/A
d494621ee3d2e0d6c706f401028b0bbd62491495,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/ApplicationListenerDetector.java,Add_Condition,"-		this.singletonNames.put(beanName, beanDefinition.isSingleton());
+		if (ApplicationListener.class.isAssignableFrom(beanType)) {
+			this.singletonNames.put(beanName, beanDefinition.isSingleton());
+		}",4,condition,avoid store all bean name,,,,0,N/A,N/A,N/A,N/A,N/A
d52f07aa1b83208dd84b65d2a4ba724b3a0227ff,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/simp/stomp/StompBrokerRelayMessageHandler.java,Add_Condition,"+			headerAccessor.setSessionId(this.sessionId);
+
+			else if (logger.isErrorEnabled() && StompCommand.ERROR == headerAccessor.getCommand()) {
+				logger.error(""Received STOMP ERROR: "" + message);
+			}
-			headerAccessor.setSessionId(this.sessionId);
-",7,condition,Log STOMP ERROR frames at error level,"Issue: SPR-11673
",,16296,1,['no msg when cannot authorize against external queue [SPR-11673]'],"['**[Prashant Deva](https://jira.spring.io/secure/ViewProfile.jspa?name=pdeva)** opened **[SPR-11673](https://jira.spring.io/browse/SPR-11673?redirect=false)** and commented\n\nSo i tried putting in the following lines in my code to pass a fake password:\n\n```\n StompBrokerRelayRegistration registration = config.enableStompBrokerRelay(""/topic"");\n        registration.setRelayHost(""xxxx.com"");\n        registration.setSystemPasscode(""hello"");\n        registration.setClientPasscode(""hello"");\n\n```\n\nthe funny thing is the logs still just show this:\n\n```\n16:24:47,103  INFO reactor-tcp-io-2 netty.NettyTcpClient:304 - CONNECT: [id: 0x0db8042b, /192.168.1.15:49980 => xxxx.com/162.242.220.165:61613]\n```\n\nof course there is no data transfer cause the msg queue itself wont allow authentication with a non-existent password, but nothing in the logs by spring shows we had a bad authentication\n\n\n---\n\n**Affects:** 4.0.3\n']",['closed'],[2],"['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI see this for the ""system"" connection at startup (DEBUG level):\n\n```\n10:21:58 [reactor-tcp-io-1] StompDecoder - Decoded [Payload byte[32]][Headers={stompCommand=ERROR, nativeHeaders={content-type=[text/plain], message=[Bad CONNECT], content-length=[32], version=[1.0,1.1,1.2]}, simpMessageType=OTHER, contentType=text/plain, id=31149240-3fb5-63b8-15fd-11166e51e9f2, timestamp=1398867718551}]\n```\n\nAnd then this for client connections later (TRACE level):\n\n```\n10:22:31 [clientInboundChannel-2] StompBrokerRelayMessageHandler - Message broker is not active. Ignoring message id=7ac7d601-e1a9-587b-5dbc-a78dd0ac73dd\n```\n\nI made changes so that:\n\n(a) any STOMP ERROR frame received from the broker is logged at **error** level\n(b) any client CONNECT frame ignored when the broker is inactive is logged at **error** level\n(c) any other client message ignored when the broker is inactive is logged at **debug** level\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI'm marking this resolved. The messages should now appear as expected.\n""]"
d554229981381979d63c3228ae0195a376fa3b18,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/sockjs/transport/TransportHandlingSockJsService.java,Condition_Change,"-			final List<String> removedSessionIds = new ArrayList<String>();
+					List<String> removedIds = new ArrayList<String>();
+								removedIds.add(session.getId());
-					if (logger.isDebugEnabled() && !removedSessionIds.isEmpty()) {
-						logger.debug(""Closed "" + removedSessionIds.size() + "" sessions "" + removedSessionIds);
-						removedSessionIds.clear();
+					if (logger.isDebugEnabled() && !removedIds.isEmpty()) {
+						logger.debug(""Closed "" + removedIds.size() + "" sessions: "" + removedIds);",8,condition,Fix incomplete log message,"Commit 48236b from 2014 introduced a logging improvement to avoid
logging each removed session per line and instead log one line at
the end with all removed sessions ids. However that list of removed
session ids wasn't populated. This commit fixes that.

Issue: SPR-14111
",,18683,1,"[""TransportHandlingSockJsService.scheduleSessionTask() doesn't log removed sessions [SPR-14111]""]","[""**[Andrey Borisov](https://jira.spring.io/secure/ViewProfile.jspa?name=aandreyborisov)** opened **[SPR-14111](https://jira.spring.io/browse/SPR-14111?redirect=false)** and commented\n\n```java\ntry {\n  if (session.getTimeSinceLastActive() > getDisconnectDelay()) {\n  sessions.remove(session.getId());\n  session.close();\n}\n}\n```\n\ncode is not adding expired session to LIST 'removedSessionIds', hence logging is not working as expected\n\n\n---\n\n**Affects:** 4.2.5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/d554229981381979d63c3228ae0195a376fa3b18, https://github.com/spring-projects/spring-framework/commit/01d50e9bde8a1da5e8e869d1287cef6a97907a38\n""]",['closed'],[1],['**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis should be fixed now thanks.\n']
d5ff2322463c021bb252d9b1889f6f67cfed56b5,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/support/JmsAccessor.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2022 the original author or authors.
-		return obtainConnectionFactory().createConnection();
+		ConnectionFactory cf = obtainConnectionFactory();
+		Connection con = cf.createConnection();
+		if (con == null) {
+			throw new jakarta.jms.IllegalStateException(
+					""ConnectionFactory returned null from createConnection(): "" + cf);
+		}
+		return con;",8,condition,Defensive check for null returned from createConnection(),"Closes gh-29706
",,29706,1,['JmsTemplate.convertAndSend throws NullPointerException during shutdown'],"['On a web application using Spring 5.2.x the following is showing up in the log files:\r\n\r\n```\r\n java.lang.NullPointerException\r\n    at org.springframework.jms.support.JmsAccessor.createSession(JmsAccessor.java:208) ~[spring-jms-5.2.20.RELEASE.jar:5.2.20.RELEASE]\r\n    at org.springframework.jms.core.JmsTemplate.execute(JmsTemplate.java:495) ~[spring-jms-5.2.20.RELEASE.jar:5.2.20.RELEASE]\r\n    at org.springframework.jms.core.JmsTemplate.send(JmsTemplate.java:576) ~[spring-jms-5.2.20.RELEASE.jar:5.2.20.RELEASE]\r\n    at org.springframework.jms.core.JmsTemplate.convertAndSend(JmsTemplate.java:680) ~[spring-jms-5.2.20.RELEASE.jar:5.2.20.RELEASE]\r\n    at org.springframework.jms.core.JmsTemplate.convertAndSend(JmsTemplate.java:668) ~[spring-jms-5.2.20.RELEASE.jar:5.2.20.RELEASE]\r\n```\r\n\r\nThe code that explains what is going on at a high level is [JmsTemplate::execute](https://github.com/spring-projects/spring-framework/blob/e163078a56648991789c264c43dcb89f798f46ba/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java#L495).  That code shows that the connection created by the assigned connection factory returned a null connection instead of throwing JMSException. The API contract for JmsTemplate::execute states ""throws JmsException if there is any problem"" but that is not true if the connection factory returned null instead of throwing `JMSException`.\r\n\r\nWhile the root cause is the broken `ConnectionFactory` implementation, I think this code could be improved a bit by:\r\n\r\n1. Patch [JmsAccessor::createConnection](https://github.com/spring-projects/spring-framework/blob/e163078a56648991789c264c43dcb89f798f46ba/spring-jms/src/main/java/org/springframework/jms/support/JmsAccessor.java#L195) to throw JMSException if a connection factory returns a null connection.  The error message should contain the class name of the factory that is not complying with the API spec.\r\n2. Patch [JmsAccessor::createSession](https://github.com/spring-projects/spring-framework/blob/e163078a56648991789c264c43dcb89f798f46ba/spring-jms/src/main/java/org/springframework/jms/support/JmsAccessor.java#L207) throw JMSException if the connection parameter is null.\r\n3. A more conservative alternative to number 1 would be to patch [JmsTemplate.execute](https://github.com/spring-projects/spring-framework/blob/main/spring-jms/src/main/java/org/springframework/jms/core/JmsTemplate.java#L494) to simply check the `conToClose` prior to creating a session.\r\n\r\nThis issue is a low priority as these errors only occur during a shutdown of the application so impact of this issue is trivial.  It just produces a confusing message in the logs.']",['closed'],[3],"['We have such defensive null-checking code for `DataSource.getConnection` access in `spring-jdbc`, so it should be feasible to do the same in `spring-jms`.', 'Coming to 6.0.4 first, to be backported to 5.3.25 in a second step.', 'FYI, here is an example offender that is now correctly handled by this patch:\r\n\r\nhttps://github.com/apache/activemq/blob/30114aa86df726a37f9cf972e07646b11732e3c9/activemq-jms-pool/src/main/java/org/apache/activemq/jms/pool/PooledConnectionFactory.java#L217']"
d62522982f39f2610f0d9d26d9908ccb1ea24222,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/ui/ModelMap.java,Condition_Change,"-			for (String key : attributes.keySet()) {
+			for (Map.Entry<String, ?> entry : attributes.entrySet()) {
+				String key = entry.getKey();
-					put(key, attributes.get(key));
+					put(key, entry.getValue());",5,iteration,Performance improvement,"Use entrySet instead of keySet followed by a lookup per key as the
former is more efficient.

Issue: SPR-12363
",,16968,1,['org.springframework.ui.ModelMap.mergeAttributes(Map) makes inefficient use of keySet iterator [SPR-12363]'],"['**[Sang Gi Ryu](https://jira.spring.io/secure/ViewProfile.jspa?name=jaydon-ryu)** opened **[SPR-12363](https://jira.spring.io/browse/SPR-12363?redirect=false)** and commented\n\norg.springframework.ui.ModelMap.mergeAttributes(Map) makes inefficient use of keySet iterator instead of entrySet iterator.\n\n---\n\n**Affects:** 4.1.1\n\n**Issue Links:**\n- #16961 BeanFactoryAnnotationUtils,qualifiedBeanOfType, Inefficient use of keySet iterator.\n- #17037 MessageHeaderAccessor copyHeaders... tuning\n\n**Referenced from:** pull request https://github.com/spring-projects/spring-framework/pull/672, and commits https://github.com/spring-projects/spring-framework/commit/d62522982f39f2610f0d9d26d9908ccb1ea24222, https://github.com/spring-projects/spring-framework/commit/73e398a1654f570edc7d5e146d5d9fd4adc1592e\n\n2 votes, 2 watchers\n']",['closed'],[1],"['**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nMerged, thanks.\n']"
d6a105c15164083f87cce477379ecd6645a5e7b2,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/condition/ParamsRequestCondition.java,Remove_Condition,"-		if (isEmpty() && other.isEmpty()) {
+		if (other.isEmpty()) {
-		else if (other.isEmpty()) {
-			return this;
-		}
-		else if (isEmpty()) {
+		if (isEmpty()) {",7,condition,Polish Conditional Statements,"See gh-31320
",,31320,1,['Polish Conditional Statements'],"['I found that redundant validations were affecting readability. \r\nTherefore, I refactored the code by removing the redundant validations and improved readability.']",['closed'],[3],"['@chaewon121 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=31320)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=31320) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@chaewon121 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=31320)!', ""Thank you for making your first contribution to Spring Framework. FTR, I've aligned the reactive and mvc versions and added missing tests, see [7a05d23](https://github.com/spring-projects/spring-framework/commit/7a05d23597e765762148aa32ecbec89c7497810e)""]"
d6e167d16eb9dd18349922f12b2898b5f920ac13,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java,Condition_Change,"-				else if (logger.isInfoEnabled() && beanFactory.containsSingleton(beanName)) {
-					logger.info(""Cannot enhance @Configuration bean definition '"" + beanName +
+				else if (logger.isWarnEnabled() && beanFactory.containsSingleton(beanName)) {
+					logger.warn(""Cannot enhance @Configuration bean definition '"" + beanName +
-							""return type: Consider declaring such methods as 'static'."");
+							""return type: Consider declaring such methods as 'static' and/or mark the "" +
+							""containing configuration class as 'proxyBeanMethods=false'."");",7,condition,Raise log level to warn when enhancement cannot apply,"Closes gh-31102
",,31102,1,['Raise log level to warn when configuration class enhancement cannot apply due to circular reference'],"[""Our existing log message for a circular reference to the configuration class is not ideally worded since it suggests that the configuration class cannot be enhanced whereas it actually can be enhanced but effectively won't use the enhanced class. Also, it suggests declaring the affected `@Bean` method as `static` but could also mention that the configuration class should be declared as `proxyBeanMethods=false` if enhancement is not needed anyway.\r\n\r\nMost importantly, that log message can easily be missed at info level, so we should raise it to warn level.\r\n\r\nRelated PRs: #22992, #24356. ""]",['closed'],[0],[]
d781f299c0a38ed9a29001920e811165e2054773,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/event/TransactionalApplicationListenerMethodAdapter.java,Condition_Change,"-	private final TransactionalEventListener annotation;
-
+	private final boolean fallbackExecution;
+
-		this.annotation = eventAnn;
+		this.fallbackExecution = eventAnn.fallbackExecution();
-		else if (this.annotation.fallbackExecution()) {
-			if (this.annotation.phase() == TransactionPhase.AFTER_ROLLBACK && logger.isWarnEnabled()) {
+		else if (this.fallbackExecution) {
+			if (getTransactionPhase() == TransactionPhase.AFTER_ROLLBACK && logger.isWarnEnabled()) {",10,condition,Use extracted attributes instead of annotation access,"See gh-31034
",,31034,1,['`TransactionalApplicationListenerMethodAdapter` should find `@TransactionalEventListener` on target class method'],"['Assume an arrangement like this:\r\n```java\r\ninterface MyInterface {\r\n  void foo();\r\n}\r\n\r\nclass MyClass implements MyInterface {\r\n  @TransactionalEventListener\r\n  void foo() { … }\r\n}\r\n```\r\n\r\nIn this case, `TransactionalApplicationListenerMethodAdapter` is invoked with `MyClass` as target class, but `MyInterface.foo()` as method. The annotation lookup then fails, as only the interface method is inspected, not the one on the target class.']",['closed'],[0],[]
d85c1fbdd5edb6b2ba906f8a20009317ff7faa98,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/resource/ResourceUrlProvider.java,Condition_Change,"-			for (String pattern : hm.getUrlMap().keySet()) {
-				Object handler = hm.getUrlMap().get(pattern);
+			for (String pattern : hm.getHandlerMap().keySet()) {
+				Object handler = hm.getHandlerMap().get(pattern);",4,iteration,Fix initialization issue in ResourceUrlProvider,"Before this change ResourceUrlProvider used getUrlMap to detect
ResourceHttpRequestHandler instances, however the map may contain bean
names as is the case when using <mvc:resources>. Instead it now uses
getHandlerMap.
",,,0,N/A,N/A,N/A,N/A,N/A
d87465f9e9a802b6ad97fcc9a19d6d4e24c58082,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/EvalTag.java,Condition_Change,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
+import jakarta.el.ELContext;
+ * @author Sam Brannen
-		private final jakarta.servlet.jsp.el.VariableResolver variableResolver;
+		private final ELContext elContext;
+
-			this.variableResolver = pageContext.getVariableResolver();
+			this.elContext = pageContext.getELContext();
-			if (this.variableResolver == null) {
+			if (this.elContext == null) {
-				return this.variableResolver.resolveVariable(name);
+				return this.elContext.getELResolver().getValue(this.elContext, name, null);",10,condition,Use ELContext instead of VariableResolver in JspPropertyAccessor,"The JSP VariableResolver API has been deprecated since JSP 2.1 in favor
of the newer ELContext API.

This commit therefore refactors JspPropertyAccessor to use the
ELContext API.

Closes gh-32383
",,32383,1,['Use `ELContext` instead of deprecated `VariableResolver` API in `JspPropertyAccessor`'],['The JSP `VariableResolver` API has been deprecated since JSP 2.1 in favor of the newer `ELContext` API.\r\n\r\nWe should therefore use `ELContext` instead of the deprecated `VariableResolver` API in `JspPropertyAccessor`.'],['closed'],[0],[]
d8f4d37624fc38a8c28d8e427f205b395e290f15,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/buffer/DataBufferUtils.java,Condition_Change,"-				if ((read = channel.read(byteBuffer)) > 0) {
+				if ((read = channel.read(byteBuffer)) >= 0) {",2,condition,Fixed bug in reading Flux from Channel,"Fixed bug where the returned Flux from DataBufferUtils.read() would be
completed prematurely if the channel was not ready to read, but did
not reach the end of the file either.
",,,0,N/A,N/A,N/A,N/A,N/A
d91fc8c672614c6394f3ebc2e86c05c5f32607f8,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/ProxyFactoryBean.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-			if (this.targetName == null && logger.isInfoEnabled()) {
+			if (this.targetName == null) {
-					""; Can only include Advisor or Advice type beans in interceptorNames chain except for last entry, "" +
-					""which may also be target or TargetSource"", ex);
+					""; can only include Advisor or Advice type beans in interceptorNames chain "" +
+					""except for last entry which may also be target instance or TargetSource"", ex);",6,condition,No log level check unless String concatenation is following,,,,0,N/A,N/A,N/A,N/A,N/A
d97eabba2fcb4c69d25befdcd4869ac87ebf9167,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/MimeTypeUtils.java,Add_Condition,"+		// do not cache multipart mime types with random boundaries
+		if (mimeType.startsWith(""multipart"")) {
+			return parseMimeTypeInternal(mimeType);
+		}",3,condition,Do not cache multipart MIME types in cache,"Prior to this commmit, ""mutipart/*"" MIME types would be cached by the
`MimeTypeUtils` LRU cache. Since those MIME types are likely to have
random boundaries in them, they can waste space in the LRU cache.
This is not improving things since we're parsing them anyway.

This commit skips the caching step for all ""multipart"" MIME types.

Fixes gh-24767
",,24767,1,['Do not cache multipart mime types in MimeTypeUtils LRU cache'],"['I\'m sorry, I mentioned it once, but the lasted version still doesn\'t solve the problem. \r\n\r\nI mentioned a  [Pull-Request](https://github.com/spring-projects/spring-framework/pull/24768), hoping for a little use\r\n\r\nDespite this, it doesn\'t solve all the problems. In many case, we write code like this: \r\n`request.getHeaders().getContentType()`\r\n\r\nIn project Spring-Cloud-Gateway. People can attack us like this: \r\n `curl -X GET -H ""Content-Type: [random characters]"" ""http://127.0.0.1:8080/get""`\r\nIn project Spring-MVC. People can attack us like this: \r\n\'curl -X GET -H ""Accept: [random characters]"" ""http://127.0.0.1:8080/get""\'\r\n\r\n Also can fill the LRU cache, resulting in degraded performance.    Maybe giving an api to turn off the LRU cache can solve this problem, or some better way \r\n\r\nIn project Spring-Cloud-Gateway, when the cache is full, performance drops to 10% in half an hour\r\n\r\nWhen MidiaType is Multipart-formdata,  mimeType characters has random characters, causing the LRU cache to be full, then over-occupy the cpu\r\n\r\nAt that time the LRU cache like this: \r\n\r\napplication/stream+x-jackson-smile, application/vnd.spring-boot.actuator.v3+json, application/vnd.spring-boot.actuator.v2+json, application/json, multipart/form-data; boundary=----WebKitFormBoundaryVHfecvFDYeDEjhu4, multipart/form-data; boundary=----WebKitFormBoundarymKzwdDkWNDNzQFP0, multipart/form-data; boundary=----WebKitFormBoundaryiWpMXOUbWwBwq2AX, application/x-www-form-urlencoded, text/html;charset=UTF-8, application/octet-stream, application/vnd.ms-excel;charset=utf8, application/msword, multipart/form-data; boundary=----WebKitFormBoundaryGF2AJ2ZdPqbWOyEO, multipart/form-data; boundary=----WebKitFormBoundaryTZLPpyBs2F0ycmkB, multipart/form-data; boundary=----WebKitFormBoundaryBUClXdZPA3oxpUpx, image/jpeg;charset=UTF-8, multipart/form-data; boundary=----WebKitFormBoundarysODcdeMwzfHwEjtw, multipart/form-data; boundary=----WebKitFormBoundary26i2en6YQUSXUBzs, multipart/form-data; boundary=----WebKitFormBoundaryxUUWAyZnZjwlM1oy, multipart/form-data; boundary=----WebKitFormBoundarysVMYk11tVTTsXuEB, multipart/form-data; boundary=----WebKitFormBoundaryXsI4dpNsVTCWWrRo, multipart/form-data; boundary=----WebKitFormBoundaryiV1owCGwTHyQzja0, multipart/form-data; boundary=----WebKitFormBoundarygf1XpLmgasAQU9fi, multipart/form-data; boundary=----WebKitFormBoundaryBNaQtUvpQ2VV7YYA, multipart/form-data; boundary=----WebKitFormBoundaryW1rdrg4AbJ5Jn3Po, multipart/form-data; boundary=----WebKitFormBoundaryoBwFj2ABM5LflDmW, multipart/form-data; boundary=----WebKitFormBoundary40xI2TxryjbkSCtO, multipart/form-data; boundary=----WebKitFormBoundarytaCC9B6g8u4urnLF, multipart/form-data; boundary=----WebKitFormBoundaryOrhplGKYP9ozLkCs, multipart/form-data; boundary=----WebKitFormBoundaryvEUouFAr3R3YJYBh, multipart/form-data; boundary=----WebKitFormBoundaryuQ9tEKtn59w5hPLY, multipart/form-data; boundary=----WebKitFormBoundaryRGvPXUBAuZ6xJ95u, application/vnd.openxmlformats-officedocument.wordprocessingml.document, multipart/form-data; boundary=----WebKitFormBoundary7jpljZi4k61KhCNN, multipart/form-data; boundary=----WebKitFormBoundary7GVKDTHVuBABvjGB, multipart/form-data; boundary=----WebKitFormBoundaryZbNBPl3T4VZ44q6B, audio/mp3, multipart/form-data; boundary=----WebKitFormBoundaryI6rUM76YvxrIEcqv, multipart/form-data; boundary=----WebKitFormBoundaryag4BDWrzifHRdDiR, multipart/form-data; boundary=----WebKitFormBoundary1YRsWAdVqDin8g8p, multipart/form-data; boundary=----WebKitFormBoundaryDaatlrV3KAyZu7wA, multipart/form-data; boundary=----WebKitFormBoundaryyhvikZJdRGH1AjQq, multipart/form-data; boundary=----WebKitFormBoundary2z4SJhqeEx5XtVj4, multipart/form-data; boundary=----WebKitFormBoundaryeDLd1MTvuhmcmzNe, multipart/form-data; boundary=----WebKitFormBoundarybKizrvRESfhxHAMQ, multipart/form-data; boundary=----WebKitFormBoundary24U8tmsOluZqcRXX, multipart/form-data; boundary=----WebKitFormBoundarye4j6KdQyBjY4FqSk, multipart/form-data; boundary=----WebKitFormBoundaryjPmgLdzMcMYYB3yS, multipart/form-data; boundary=----WebKitFormBoundaryxzBZ9w6Je3IJ53NM, multipart/form-data; boundary=----WebKitFormBoundaryScy0j73cvx3iCFyY, multipart/form-data; boundary=----WebKitFormBoundaryTBoS8s4YWwmBGTDA, image/*, multipart/form-data; boundary=----WebKitFormBoundaryRUutFo3RXlNPgoBS, text/html;charset=utf-8, multipart/form-data; boundary=----WebKitFormBoundarykLObBi1tJMf158kt, multipart/form-data; boundary=----WebKitFormBoundary8M8MfCWBEFcsxnBU']",['closed'],[5],"['How do we prevent attacks. When the cache is full, the element is always refreshed and will not be emptied.  Is it possible to give a way to turn off the LRU cache ?', 'I don\'t think we can call those attacks, as they\'re making the CPU load slightly worse and that the parsing algorithm is taking more CPU time than the cache overhead. With that reasoning, disabling the cache completely would be ""an attack vector"" because we would pay the parsing cost even for types that should be cached.\r\n\r\nI\'ve pushed a change that skips the cache for all ""multipart"" based types, since they can all contain random boundaries.', 'OK, I agree. I should focus on how to make the cache more efficient', ""This fix should be enough for this particular use case. We'll try to improve even more with #24769 but given the possible implications, I've scheduled that for the 5.3.x release."", 'Thanks']"
d9cae339d60cc7f21b6f067fa4d66c5104cdc15c,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/AdvisedSupport.java,Condition_Change,"-		Advisor advisor = this.advisors.get(index);
+		Advisor advisor = this.advisors.remove(index);
-			for (int j = 0; j < ia.getInterfaces().length; j++) {
-				removeInterface(ia.getInterfaces()[j]);
+			Class<?>[] interfaces = ia.getInterfaces();
+			for (Class<?> iface : interfaces) {
+				removeInterface(iface);
-		this.advisors.remove(index);",8,iteration,Simplify AdvisedSupport.removeAdvisor(),Closes gh-24205,,24205,1,['Simplify AdvisedSupport.removeAdvisor()'],"[""1) it's not necessary to call `IntroductionAdvisor.getInterfaces()` twice for each iteration\r\n2) instead of calling `ArrayList.get()` and then `ArrayList.remove()` we can once call `ArrayList.remove()` to get and remove item by its index""]",['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks']
daf9a82e8ce3e6e8e795fcb46309cd8bc4a62e52,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/aspectj/AbstractAspectJAdvice.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-	private boolean isVariableName(String name) {
-		char[] chars = name.toCharArray();
-		if (!Character.isJavaIdentifierStart(chars[0])) {
+	private static boolean isVariableName(String name) {
+		if (!Character.isJavaIdentifierStart(name.charAt(0))) {
-		for (int i = 1; i < chars.length; i++) {
-			if (!Character.isJavaIdentifierPart(chars[i])) {
+		for (char ch: name.toCharArray()) {
+			if (!Character.isJavaIdentifierPart(ch)) {",9,"condition, iteration",Simplify AbstractAspectJAdvice.isVariableName(),,,,0,N/A,N/A,N/A,N/A,N/A
db1010f9c9f0ff665c6657e9ae8205421cc6eb71,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/converter/support/AllEncompassingFormHttpMessageConverter.java,Add_Condition,"+import org.springframework.http.converter.cbor.MappingJackson2CborHttpMessageConverter;
- * adding support for XML and JSON-based parts.
+ * adding support for XML, JSON, Smile, CBOR, Protobuf and Yaml based parts when
+ * related libraries are present in the classpath.
+	private static final boolean jackson2CborPresent;
+
+		jackson2CborPresent = ClassUtils.isPresent(""com.fasterxml.jackson.dataformat.cbor.CBORFactory"", classLoader);
+		if (jackson2CborPresent) {
+			addPartConverter(new MappingJackson2CborHttpMessageConverter());
+		}
+",8,condition,Add CBOR support to AllEncompassingFormHttpMessageConverter,"Closes gh-32428
",,32428,1,['Add CBOR support to `AllEncompassingFormHttpMessageConverter`'],"['It was likely a leftover, `MappingJackson2CborHttpMessageConverter` configuration is present in the classpath and should be likely added for consistency. ']",['closed'],[0],[]
db2601d6e25a427368500ffcb8d274319222ec92,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,Condition_Change,"-			if (logger.isDebugEnabled()) {
-				logger.debug(""Ignoring bean creation exception on FactoryBean type check: "" + ex);
+			if (logger.isWarnEnabled()) {
+				logger.warn(""Bean creation exception on FactoryBean type check: "" + ex);",4,condition,AbstractBeanFactory logs bean creation exception on FactoryBean type check at warn level,"Issue: SPR-12397
",,17005,1,"['Mybatis config error leads to endless loop, and no std error output [SPR-12397]']","[""**[veggie](https://jira.spring.io/secure/ViewProfile.jspa?name=veggie)** opened **[SPR-12397](https://jira.spring.io/browse/SPR-12397?redirect=false)** and commented\n\nI have found an issue which kept spring looping during its initialization wihout any error messge printed on console.\n\nThe version of mybatis-spring I used is 1.2.2 along with spring 4.1.0.RELEASE.\n\nI guess all typo errors in mybatis mapper xml files including mybatis-config.xml may cause this problem.\n\nThe error logs can be displayed only by setting log level to debug in AbstractBeanFactory class, but this is really an undesirable action because the log would be deluged with unwanted debuging logs from startup phase or web requests.\n\nI wonder if there is a better way to solve this problem, or it's just designed this way.\n\nIn the attachment, the breakpoint will be repeatedly hitted as long as the loop exists, but all the exceptions were suppressed.\n\nMy team members and me have encountered this issue many times. Considering this is the time consuming mistake that anyone could easily make, I really want to know how to fix it. many thx\n\n---\n\n**Affects:** 4.1 GA\n\n**Attachments:**\n- [AbstraceBeanFactory.png](https://jira.spring.io/secure/attachment/22351/AbstraceBeanFactory.png) (_46.12 kB_)\n\n**Issue Links:**\n- #18406 Lot of undesired WARN logs after migration from Spring 3 to Spring 4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db2601d6e25a427368500ffcb8d274319222ec92\n""]",['closed'],[1],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAlright, I\'m raising the log level to ""warn"" there.\n\nThat said, please note that this only happens for `FactoryBean` implementations that do not return a non-null type from their `getObjectType()` implementation, which is rare. In the case of the Mybatis `MapperFactoryBean`, the object type is getting determined through a customizable property which simply won\'t be set for early type checks. If the implementation would fall back to some base type, anything non-null, from `getObjectType()` when called early, you wouldn\'t run into this situation to begin with.\n\nJuergen\n']"
db596d23dea7a8f35b52581d92b00a18c3f45335,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/context/request/async/DeferredResult.java,Condition_Change,"-			if (this.resultHandler != null) {
-				this.resultHandler.handleResult(this.result);
-			}
+		}
+		if (this.resultHandler != null) {
+			this.resultHandler.handleResult(this.result);",6,condition,Fix deadlock issue in DeferredResult,"Previously DeferredResult locked around the setting of the result
including handling up to the part of submitting a dispatch. This
can cause a deadlock if a timeout occurs at the same time since
the Tomcat timeout thread has its own locking that permits only
one thread to do timeout or dispatch processing.

The fix reduces the locking to cover only the attempt to set the
DeferredResult but not the dispatching.

Issue: SPR-10485
",,15118,1,['Deadlocks with DeferredResult timeout handling on Tomcat [SPR-10485]'],"['**[Peter De Wachter](https://jira.spring.io/secure/ViewProfile.jspa?name=pdewacht)** opened **[SPR-10485](https://jira.spring.io/browse/SPR-10485?redirect=false)** and commented\n\nI\'m experiencing deadlocks and other bugs when calling DeferredResult#setResult while that deferred result\'s timeout handler is running. This is on Tomcat 7.0.39. I\'m using the following code to reproduce this.\n\n```\n@Controller\npublic class TestController {\n    private DeferredResult<String> deferred;\n\n    static class DoSomethingUseful implements Runnable {\n        public void run() {\n            try { Thread.sleep(2000); } catch (InterruptedException e) { }\n        }\n    }\n\n    @RequestMapping(value=""/test/start"")\n    @ResponseBody\n    public DeferredResult<String> start() {\n        deferred = new DeferredResult<String>(4000L, ""timeout\\n"");\n        deferred.onTimeout(new DoSomethingUseful());\n        return deferred;\n    }\n\n    @RequestMapping(value=""/test/stop"")\n    @ResponseBody\n    public String stop() {\n        deferred.setResult(""result\\n"");\n        return ""ok\\n"";\n    }\n}\n```\n\nThe start method creates a DeferredResult with a 4 second timeout. To make the bug easy to reproduce, it has an onTimeout handler which will sleep for 2 seconds. The stop method will set a value for the DeferredResult. The code seems correct to me: the DeferredResult documentaion states that ""the application can produce the result from a thread of its choice"", and also that setResult can be called on an DeferredResult that\'s already expired.\n\nTo reproduce the bug, try something like this:\n\n```\ncurl http://localhost/test/start & sleep 5; curl http://localhost/test/stop\n```\n\nOn Tomcat using the APR connector, this will deadlock. On Tomcat using the NIO connector, this will sometimes (not consistently) never answer the start request and return the ""timeout\\n"" string as a result of the stop request.\n\n---\n\n**Affects:** 3.2.2\n\n**Reference URL:** https://github.com/SpringSource/spring-framework-issues/pull/48\n\n**Issue Links:**\n- #19544 Concurrency problem in DeferredResult: potential double execution of handleResult\n- #18031 DeferredResult not thread-safe for isSetOrExpired call\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/db596d23dea7a8f35b52581d92b00a18c3f45335, https://github.com/spring-projects/spring-framework/commit/25701ef9843eb44429b740996e80fc3171c7ff7f\n']",['closed'],[2],"['**[Peter De Wachter](https://jira.spring.io/secure/ViewProfile.jspa?name=pdewacht)** commented\n\nAdded link to spring-framework-issues pull request.\n', '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis should now be fixed. Thanks for the very helpful repro project!\n']"
dbbdd044cdd5439e4066b71af34324670a274514,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/CollectionUtils.java,Remove_Condition,"-		for (Object elem : arr) {
-			collection.add((E) elem);
-		}
+		Collections.addAll(collection, (E[])arr);",4,iteration,Use Collections.addAll instead of Collection.addAll,"See gh-24636
",,24636,1,['Polish mergeArrayIntoCollection of CollectionUtils'],['This can simplify the code'],['closed'],[2],"['@NathanQingyangXu Thank you for your pointing.', '@chenqimiao actually, the advice from javadoc is outdated, see https://github.com/openjdk/jdk/pull/1764']"
dc59e50561eeaedbc6f7a50d8703d627be2c6847,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/MethodParameter.java,Add_Condition,"-		paramType = ResolvableType.forMethodParameter(this, null, 1).resolve();
+		if (getContainingClass() != getDeclaringClass()) {
+			paramType = ResolvableType.forMethodParameter(this, null, 1).resolve();
+		}",4,condition,Avoid unnecessary use of ResolvableType within MethodParameter,"Closes gh-23792
",,23792,1,"[""Autowiring performance degradation due to 5.2's MethodParameter.getParameterType() implementation""]","['Our applications makes considerable use of programmatic autowiring of beans via org.springframework.beans.factory.config.AutowireCapableBeanFactory#autowire.\r\n\r\nTherefore we have a couple of performance tests, which directly and indirectly measure the throughput of the underlying Spring implementation.\r\nAll those tests degraded by about 20 to 25 percent, after only updating the Spring dependencies from version 5.1.9 to version 5.2.0.\r\n\r\nWe did a bit of work to pinpoint the changes in Spring, which resulted in this performance drop and thought it would be a good idea to report it here so you can verify, whether you like to accept this or have an idea how to achieve both, improved code robustness while maintaining performance.\r\n\r\nThe root of the actual performance degradation seems to originate from changes to org.springframework.core.MethodParameter#getParameterType to use org.springframework.core.ResolvableType (in our case itself used from org.springframework.beans.factory.support.ConstructorResolver#resolveAutowiredArgument).\r\n\r\nThe relevant issue motivating this change seems to be https://github.com/spring-projects/spring-framework/issues/23385\r\n\r\nI quickly verified that it is enough to use 5.1.9 as base and only change the above mentioned two core classes, to observe the performance drop. I have not yet checked the Spring project for own performance tests.']",['closed'],[9],"['I submit a PR to improve the performance of the method MethodParameter.getParameterType. Hope it could help.', ""I have the same issue. my web application built with both struts2 and spring mvc, after upgrade to spring 5.2.0, throughput of struts2 decrease to about 80%, but throughput of spring mvc is increased. struts2 action is autowired by `AutowireCapableBeanFactory::createBean(clazz, AUTOWIRE_BY_NAME, false)` .\r\n\r\nBTW: @lgxbslgx's PR not helps much."", '@e-hubert can you provide a simple project and try the PR https://github.com/spring-projects/spring-framework/pull/23811 ?', '@quaff I was looking at the PR and verified that it improved performace quite considerable for our use, but was still waiting for @jhoeller or one of the Spring core dev team members to likely come up with a different take on this.\r\nI do not have a simple project at hand, but as the issue seems to be so isolated one might be better off with a parameterized microbenchmark (e.g. using JMH).', ""According to my local benchmarks, it seems sufficient to restore a `containingClass != null` check as we effectively had it in the 5.1.x code path. Refining it with a check for `containingClass != declaringClass` does not hurt but seems like an optimization beyond 5.1.x already, nevertheless worth it. I'll double-check the effect and will proceed with that change for inclusion in 5.2.1."", ""If timing permits, I'm of course also willing to give a snapshot build of spring-core 5.2.1 containing the fix (once available) a try and check out all our performance test suites which showed regressions after our update attempt to 5.2.0, although I'm convinced that Jürgen's local micro benchmark is absolutely sufficient here. Thanks for addressing this!"", ""A variant of this is in master now for inclusion in the upcoming 5.2.1 build snapshot. Please do try it tomorrow if you can since it's your scenario that actually matters, not my local little benchmark ;-)"", 'I confirm commit https://github.com/spring-projects/spring-framework/commit/dc59e50561eeaedbc6f7a50d8703d627be2c6847 works.', 'I can confirm the issue to be fixed as well. I tested with spring-core-5.2.1.BUILD-20191030.000554-48.jar containing this change. Thanks again!']"
dcc8dcdff81dd76cfcb7df8c6f1d61b4a3d4f207,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/ServletServerHttpResponse.java,Add_Condition,"+			long contentLength = getHeaders().getContentLength();
+			if (contentLength != -1) {
+				this.servletResponse.setContentLengthLong(contentLength);
+			}",4,condition,Set content length on ServletHttpResponse,"Prior to this commit, the `ServletServerHttpResponse` would copy headers
from the `HttpHeaders` map and calls methods related to headers exposed
as properties (content-type, character encoding).

Unlike its reactive variant, this would not set the content length.
Depending on the Servlet container implementation, this could cause
duplicate Content-Length response headers in the actual HTTP response.

This commit aligns both implementations and ensures that the
`setContentLengthLong` method is called if necessary so that the Servlet
container can ensure a single header for that.

Fixes gh-26330
",,26330,1,"['The response has a duplicate ""Content-Length"" header when get by range header']","['When I use Undertow as server , and make a range request, the response will have two ""Content-Length"" header.\r\n\r\n## request\r\n\r\n> GET /inspection/api/v1/binary/1568 HTTP/1.1\r\n> Host: inspection.lubansoft.net:58888\r\n> Connection: keep-alive\r\n> Pragma: no-cache\r\n> Cache-Control: no-cache\r\n> User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36\r\n> Accept: */*\r\n> Accept-Encoding: identity\r\n> Accept-Language: zh-CN,zh;q=0.9\r\n> Range: bytes=0-65535\r\n\r\n## response\r\n\r\n> HTTP/1.1 206 Partial Content\r\n> Expires: 0\r\n> Cache-Control: no-cache, no-store, max-age=0, must-revalidate\r\n> X-XSS-Protection: 1; mode=block\r\n> Pragma: no-cache\r\n> Content-Disposition: form-data; name=""attachment""; filename*=UTF-8\'\'%E8%AF%84%E5%AE%9A%E8%A1%A810.3.2%20%E6%98%8E%E6%B4%9E%E6%B5%87%E7%AD%91%E5%88%86%E9%A1%B9%E5%B7%A5%E7%A8%8B%E8%B4%A8%E9%87%8F%E6%A3%80%E9%AA%8C%E8%AF%84%E5%AE%9A%E8%A1%A8%28SG%29.pdf\r\n> Accept-Ranges: bytes\r\n> Date: Mon, 21 Dec 2020 13:02:45 GMT\r\n> Connection: keep-alive\r\n> Content-Language: zh-CN\r\n> X-Frame-Options: SAMEORIGIN\r\n> ETag: ""10""\r\n> Vary: Origin\r\n> Vary: Access-Control-Request-Method\r\n> Vary: Access-Control-Request-Headers\r\n> Last-Modified: Mon, 21 Dec 2020 06:02:31 GMT\r\n> Content-Range: bytes 196608-212611/212612\r\n> X-Content-Type-Options: nosniff\r\n> Content-Length: 212612\r\n> Content-Length: 16004\r\n> Content-Type: application/pdf\r\n\r\n\r\nin response header, Content-Length has two values , and chrome will have net::ERR_RESPONSE_HEADERS_MULTIPLE_CONTENT_LENGTH error\r\n\r\n\r\n\r\n`org.springframework.web.servlet.resource.ResourceHttpRequestHandler` actually writes the content-length twice. Once, with the entire content-length and then later on, if a partial-content response, with the range length.\r\n\r\nTomcat handles this just fine accepting the last content-length set as the authoritative content-length and writes it back to the client.\r\n\r\nUndertow seems to assume all headers are multi-value and writes both content-length headers back to the client.\r\n\r\n']",['closed'],[4],"['https://github.com/paulcwarren/spring-content/issues/449', ""The http spec doesn’t specify how to handle multiple content-length headers with different values.  This [SO post](https://stackoverflow.com/questions/37002982/multiple-content-length-headers-and-multiple-transfer-encoding-headers), commented on by spec author Julian Reschke, confirms that.  But perhaps that is because it is obviously an error?  \u2028\r\n\r\nThe only think I can really determine from the spec is that is it meant to be a single-valued header.  So, probably this can be chased down to the stack to undertow using tomcat's behavior as justification.   They could decide to treat the last set header as the authoritative value (as tomcat does) and everything would be fine, but equally they could decide to treat it as an error I guess?  Either way, maybe this is the best first course of action.\r\n\r\nBut I also wonder if `org.springframework.web.servlet.resource.ResourceHttpRequestHandler.setHeaders` has to write a content-length header at all?  Given, content-length is single-valued and the message converter attempts to write the header anyway.  Perhaps it is too assumptive to knowingly write this “provisionally” instance up-front?  \r\n\r\nWould this be viewed as a backward incompatible change though?  A custom `ResourceHttpMessageConverter` might rely on the original `setHeaders` method.  However, to do so I think it would have to override `getContentLength` to return null which would be weird (why would a resource not want to return a content-length???).  So, perhaps it is ok?\r\n\r\nWhat other considerations would we need to make?"", 'I think it should be fixed in Undertow not Spring.', 'I\'ve reproduced the problem and looked into it.\r\n\r\nHere\'s what\'s happening:\r\n\r\n1. the `ResourceHttpRequestHandler` is setting the content length using `ServletHttpResponse.setContentLength` or `ServletHttpResponse.setContentLengthLong`\r\n2. it\'s then delegating to the message converters. `ResourceHttpMessageConverter` and `ResourceRegionHttpMessageConverter` are setting the content length using `HttpHeaders.setContentLength` (this adds a ""Content-Length"" header to the header map).\r\n3. later, `ServletServerHttpResponse` is writing headers to the Servlet response by calling `ServletResponse.addHeader` for each entry\r\n4. unlike other containers, Undertow doesn\'t seem to enforce a single Content-Length header if we\'re using `ServletHttpResponse.addHeader` to add headers, which is the case in `ServletServerHttpResponse`\r\n\r\nBecause the ""Content-Length"" header can be set in multiple ways through the Servlet API, containers behave differently. It seems that Tomcat is enforcing a single response header no matter what, while Undertow is enforcing that only if it\'s set through the `setContentLength{Long}` methods.\r\n\r\nWe can fix this problem with a couple of changes:\r\n\r\n* first, remove the duplicate code and avoid setting the content length twice\r\n* then, align `org.springframework.http.server.ServletServerHttpResponse` with `org.springframework.http.server.reactive.ServletServerHttpResponse` and call `ServletHttpResponse.setContentLength` after copying the headers from the map.\r\n\r\nNote that those specific Servlet containers behavior are hard to test without complete integration tests or replicating their headers implementation. Our own `org.springframework.mock.web.MockHttpServletResponse` is enforcing a single Content-Length header no matter what.']"
ddb41172331ef015e67826a5a1cece1c44d4153f,spring-projects/spring-framework,spring-orm/src/main/java/org/springframework/orm/hibernate5/HibernateExceptionTranslator.java,Add_Condition,"+import javax.persistence.PersistenceException;
+
+import org.springframework.orm.jpa.EntityManagerFactoryUtils;
- * instances to Spring's {@link DataAccessException} hierarchy.
+ * instances to Spring's {@link DataAccessException} hierarchy. As of Spring 4.3.2 and
+ * Hibernate 5.2, it also converts standard JPA {@link PersistenceException} instances.
+ * @see EntityManagerFactoryUtils#convertJpaAccessExceptionIfPossible(RuntimeException)
-		return null;
+		if (ex instanceof PersistenceException && ex.getCause() instanceof HibernateException) {
+			return convertHibernateAccessException((HibernateException) ex.getCause());
+		}
+		return EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible(ex);",8,condition,HibernateExceptionTranslator converts JPA exceptions as well (for Hibernate 5.2),"Issue: SPR-14455
",,19024,1,['Hibernate5 LocalSessionFactoryBean does not translate javax.persistence exceptions [SPR-14455]'],"['**[Will Darby](https://jira.spring.io/secure/ViewProfile.jspa?name=wbdarby)** opened **[SPR-14455](https://jira.spring.io/browse/SPR-14455?redirect=false)** and commented\n\nHibernate 5.0 deprecated the Criteria API resulting in a migration to the JPA CriteriaQuery API directly supported by the Hibernate Session. Exceptions thrown using the CriteriaQuery API derive from package javax.persistence rather than org.hibernate.exception. The Hibernate5 LocalSessionFactoryBean.translateExceptionIfPossible does not convert these exceptions automatically, requiring the addition of a new PersistentExceptionTranslator. The HibernateJpaDialect does translate javax.persistence exceptions correctly but is not used when a LocalSessionFactoryBean is used.\n\nI believe Hibernate5 LocalSessionFactoryBean.translateExceptionIfPossible should match the implementation of HibernateJpaDialect for translating exceptions since JPA is natively integrated with Hibernate 5.\n\n---\n\n**Affects:** 4.3 GA, 4.3.1\n\n**Issue Links:**\n- #18899 Support for Hibernate ORM 5.2\n- #19026 Flush exception translation not working anymore with Hibernate 5.2\n- #19245 HibernateExceptionTranslator translating to InvalidDataAccessApiUsageException when using vanilla Hibernate\n- #21540 LocalSessionFactoryBean and HibernateTransactionManager for JPA EntityManagerFactory setup\n- #19613 Remove outdated JpaExceptionTranslatorAspect\n\n']",['closed'],[1],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAnalogous to `HibernateJpaDialect`, our Hibernate 5 `HibernateExceptionTranslator` detects a `HibernateException` root cause of a `PersistenceException` now, and delegates to `EntityManagerFactoryUtils.convertJpaAccessExceptionIfPossible` for plain `PersistenceException` handling.\n']"
de069d06d852e6fa2e8e4ca9d442168729af6588,spring-projects/spring-framework,spring-oxm/src/main/java/org/springframework/oxm/jaxb/Jaxb2Marshaller.java,Remove_Condition,"-	protected JAXBContext getJaxbContext() {
+	/**
+	 * Return the JAXBContext used by this marshaller, lazily building it if necessary.
+	 */
+	public JAXBContext getJaxbContext() {
-		if (this.supportJaxbElementClass && JAXBElement.class.isAssignableFrom(clazz)) {
-			return true;
-		}
-		return supportsInternal(clazz, this.checkForXmlRootElement);
+		return ((this.supportJaxbElementClass && JAXBElement.class.isAssignableFrom(clazz)) ||
+				supportsInternal(clazz, this.checkForXmlRootElement));",9,condition,"Made ""getJaxbContext()"" method public","Issue: SPR-10282
",,14916,1,['OXM Jaxb2Unmarshaller to support non-root elements [SPR-10282]'],"['**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** opened **[SPR-10282](https://jira.spring.io/browse/SPR-10282?redirect=false)** and commented\n\nThe JAXB2Unmarshaller should support JaxbElement/partial unmarshalling (e.g. classes not having a `@RootElement`).\n#12586/SPR-9742 are analogue cases but for marshalling.\nMy usecase is using org.springframework.batch.item.xml.StaxEventItemReader in Spring Batch where I want to delegate unmarshalling of each event to the OXM unmarshaller.\nThis will fail if I cannot call the more specific unmarshalling method where the expected JAXB class can be provided.\n\nThis hack would make this possible by setting the expected class to return as a parameter to the Spring unmarshaller class:\n\n```\npublic class ImprovedJaxb2Marshaller\n    extends Jaxb2Marshaller\n{\n    private Class<?> partClass;\n\n    public void setPartClass( Class<?> partClass )\n    {\n        this.partClass = partClass;\n    }\n\n    @Override\n    public Object unmarshal( Source source, MimeContainer mimeContainer )\n        throws XmlMappingException\n    {\n        if ( partClass == null )\n        {\n            return super.unmarshal( source, mimeContainer );\n        }\n        else\n        {\n            try\n            {\n                Unmarshaller jaxbUnmarshaller = createUnmarshaller();\n                return source instanceof StAXSource ?\n                                unmarshalStaxSource( jaxbUnmarshaller, source ) :\n                                    jaxbUnmarshaller.unmarshal( source, partClass );\n            }\n            catch ( JAXBException e )\n            {\n                throw super.convertJaxbException( e );\n            }\n        }\n    }\n\n    private Object unmarshalStaxSource( Unmarshaller jaxbUnmarshaller, Source staxSource )\n        throws JAXBException\n    {\n        XMLStreamReader streamReader = StaxUtils.getXMLStreamReader( staxSource );\n        if ( streamReader != null )\n        {\n            return jaxbUnmarshaller.unmarshal( streamReader, partClass ).getValue();\n        }\n        else\n        {\n            XMLEventReader eventReader = StaxUtils.getXMLEventReader( staxSource );\n            if ( eventReader != null )\n            {\n                return jaxbUnmarshaller.unmarshal( eventReader, partClass ).getValue();\n            }\n            else\n            {\n                throw new IllegalArgumentException( ""StaxSource contains neither XMLStreamReader nor XMLEventReader"" );\n            }\n        }\n    }\n\n```\n\n---\n\n**Affects:** 3.1.4\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/283b3ee44be2fe89e7a944a10a69a72eb28d1662, https://github.com/spring-projects/spring-framework/commit/de069d06d852e6fa2e8e4ca9d442168729af6588, https://github.com/spring-projects/spring-framework/commit/23925edc95655d5d6ff664aa28e2fe9f27cad38c\n']",['closed'],[15],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nSince you're calling the above a hack: Would you prefer to have a different signature for passing in the part class? Possibly a JAXB-specific unmarshal operation that accepts the part class as a parameter?\n\nIf we can agree on a good way to handle this API-wise, I'm happy to roll it into the upcoming 3.2.2 release.\n\nJuergen\n"", ""**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** commented\n\nIt's more of a hack because I subclass the class but duplicate code for the one method (due to the method being private and not protected/default scope in the superclass).\n\nSetting an optional partClass as a parameter looks ok to me.\n\nThe return class should either be the jaxbElement wrapped class (which can provide more information than the JaxbElement.getValue() can, e.g. it may support elements being set to xsi:nil=true), or the actual value as I do now.\n\n"", ""**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** commented\n\nCould it also make it's way into the 3.1.x branch as it would be backwards compatible when the parameter is not set?\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI'm afraid we have no plans for further 3.1.x releases at this point. 3.2.x is really planned as a direct follow-up to 3.1.x, with no change in system requirements and no major changes in bootstrap and configuration, so I'd definitely recommend a straight update to 3.2.2 then.\n\nJuergen\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nHow did you arrive at ""partClass"", actually? The JAXB API calls it ""declaredType"", and in its javadoc the ""appropriate JAXB mapped class"". So should we use ""mappedClass"" maybe?\n\nJuergen\n', '**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** commented\n\npartClass is Apache Camel JAXB Dataformat lingo: http://camel.apache.org/jaxb.html which I use quite a lot.\nmappedclass is probaby closed to JAXB lingo.\nelementClass could also be an option to be consistent with: or elementClass http://static.springsource.org/spring/docs/3.2.x/javadoc-api/org/springframework/oxm/jaxb/Jaxb2Marshaller.html#setSupportJaxbElementClass(boolean)\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI went with ""mappedClass"", also adding a javadoc reference to that JAXB unmarshal variant. Should be available in the next 3.2.2 snapshot.\n\nJuergen\n', '**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** commented\n\nWish `getJaxbContext` method of `Jaxb2Marshaller` was made public instead, or as addition.\n\nThat would allow single Spring bean unmarshaller definition/configuration to be used for (constructing JAXB `Unmarshaller` instances and) unmarshalling multiple mapped classes e.g. when two child types of same parent are mapped to same named root XML element (see [this example](http://java.dzone.com/articles/jaxb-and-root-elements))\n\nThis would also allow additional native JAXB features like being able to influence unmarshalling with custom `StreamReaderDelegate` to make unmarshalling case insensitive like in [this example](http://blog.bdoughan.com/2010/12/case-insensitive-unmarshalling.html).\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAlright, made getJaxbContext() public as well.\n\nJuergen\n', '**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** commented\n\nYou missed the stax part.\nDefault imp should be:\n\n```\n @Override\n    protected Object unmarshalStaxSource(Unmarshaller jaxbUnmarshaller, Source staxSource) throws JAXBException\n    {\n        XMLStreamReader streamReader = StaxUtils.getXMLStreamReader( staxSource );\n        if ( streamReader != null )\n        {\n            return jaxbUnmarshaller.unmarshal( streamReader, mappedCalss ).getValue();\n        }\n        else\n        {\n            XMLEventReader eventReader = StaxUtils.getXMLEventReader( staxSource );\n            if ( eventReader != null )\n            {\n                return jaxbUnmarshaller.unmarshal( eventReader, mappedClass ).getValue();\n            }\n            else\n            {\n                throw new IllegalArgumentException( ""StaxSource contains neither XMLStreamReader nor XMLEventReader"" );\n            }\n        }\n    }\n\n\n```\n\nIt would also be good if the mappedClass variable could be exposed in a getter() or made protected so subclasses can utilize it.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood catch, fixed for 3.2.3 now, to be available in the next snapshot. Note that I added explicit checks for mappedClass being set there (just like for the regular unmarshal implementation), calling JAXB's unmarshal variant without the mappedClass argument if not set.\n\nWhat exactly would you use mappedClass for in a subclass? We got quite a few properties without getters, so I'm just wondering what raises it above the others...\n\nJuergen\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nActually, shouldn't the unmarshal call for the non-Stax case end with a getValue() call as well? Otherwise we'd return the JAXBElement wrapper...\n\ni.e. return unmarshaller.unmarshal(source, this.mappedClass).getValue();\n"", '**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** commented\n\nYes, they should be consistent. Either return jaxbelement in both cases, or the value.\n\nExposing the property to support extensibility (just like the case for exposing the jaxbContext).\nRight now I still subclass this to implement the fix myself (cannot depend on snapshots in my mainbranch) - and then i need access to the class set in configuration.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIndeed, you'll need it for implementing the fix... I do wonder what it'd be good for after the fix has been properly implemented though.\n\nI guess we should return the value consistently; I consider it an oversight that we didn't do that in 3.2.2. A caller wouldn't expect a JAXBElement returned from Spring's unmarshal method.\n\nJuergen\n"", '**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=davidkarlsen)** commented\n\nNext time it could be something else - but generally opening it more up would allow for extensibility (in this class or others). But I do not have anything specific in mind for the marshaller class atm.\n']"
defc1d31574ea6b3faa5ed84c4aa23c808b0c7cf,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/CachedIntrospectionResults.java,Remove_Condition,"-			// Only bother with flushFromCaches if the Introspector actually cached...
-			if (!shouldIntrospectorIgnoreBeaninfoClasses) {
-				// Immediately remove class from Introspector cache, to allow for proper
-				// garbage collection on class loader shutdown - we cache it here anyway,
-				// in a GC-friendly manner. In contrast to CachedIntrospectionResults,
-				// Introspector does not use WeakReferences as values of its WeakHashMap!
-				Class<?> classToFlush = beanClass;
-				do {
-					Introspector.flushFromCaches(classToFlush);
-					classToFlush = classToFlush.getSuperclass();
-				}
-				while (classToFlush != null);
-			}
-",9,"condition, iteration",Drop Introspector.flushFromCaches calls completely,"According to the JDK's documentation and changelog, the Introspector itself safely handles weak references as of JDK 6 update 21 (which is what we require for Spring 4.0).

Issue: SPR-11356
",,15981,1,['Revisit need for Introspector.flushFromCaches call in CachedIntrospectionResults [SPR-11356]'],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-11356](https://jira.spring.io/browse/SPR-11356?redirect=false)** and commented\n\nAs of JDK 7 and apparently also recent JDK 6 versions, java.beans.Introspector has a proper weak cache for BeanInfo objects. As a consequence, we can probably drop our immediate Introspector.flushFromCaches call in the CachedIntrospectionResults constructor - at least on recent JDKs -, not least of it all to avoid the locking implied by that call.\n\n---\n\n**Affects:** 4.0 GA\n\n**Issue Links:**\n- #13653 Improve the performance of BeanInfo lookups in CachedIntrospectionResults\n- #16438 CachedIntrospectionResults caching jar entries and creating big pressure on GC\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/87179b075be80a454f89d8bb78c962c118efd310, https://github.com/spring-projects/spring-framework/commit/defc1d31574ea6b3faa5ed84c4aa23c808b0c7cf\n']",['closed'],[1],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThe underlying problem has been addressed in the JDK itself as of JDK 6 update 21, which is right in the ballpark that we require as a minimum for Spring 4.0: As a consequence, we can unconditionally drop the flushFromCaches call there.\n\nHowever, for 3.2.x, the situation is more delicate since the support range goes back to older JDK 6 versions and even JDK 5. For that reason, we can\'t easily backport this; there is arguably too much risk associated with it at this late stage of the branch.\n\nAn option available in 3.2.7 is to set the ""spring.beaninfo.ignore"" property to ""true"", either as a system property or in a ""spring.properties"" file in the root of the classpath - provided that the application does not rely on separate *BeanInfo classes next to its actual bean classes. This mode bypasses the JDK\'s Introspector cache in a backwards-compatible manner and therefore also skips the flushFromCaches call. This is also avoiding repeated ClassLoader access for non-existing *BeanInfo classes, so it\'s a worthwhile optimization in its own right. See #13653 for a discussion.\n\nJuergen\n']"
df51ff03862c6a299f2ff243828ec23608899311,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,Add_Condition,"-		primitiveWrapperTypeMap.forEach((key, value) -> {
-			primitiveTypeToWrapperMap.put(value, key);
-			registerCommonClasses(key);
-		});
+		// Map entry iteration is less expensive to initialize than forEach with lambdas
+		for (Map.Entry<Class<?>, Class<?>> entry : primitiveWrapperTypeMap.entrySet()) {
+			primitiveTypeToWrapperMap.put(entry.getValue(), entry.getKey());
+			registerCommonClasses(entry.getKey());
+		}",8,iteration,Revert to Map entry iteration for less expensive static initialization,"Issue: SPR-17169
",,21705,1,['ClassUtils optimization for less expensive static initialization [SPR-17169]'],"['**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** opened **[SPR-17169](https://jira.spring.io/browse/SPR-17169?redirect=false)** and commented\n\nSpring core `ClassUtils` is always an annoying blip on the flame\ngraphs of startup benchmarks. It pops up because it indirectly calls\n`java.lang.invoke.MethodHandleNatives.linkCallSite()` which is\nexpensive it seems, or at least when called in a static\ninitializer. You can avoid the cost completely if you switch from\niterating over a map using a lambda to explicit old-style iteration:\n\n```java\nfor (Map.Entry<Class<?>, Class<?>> entry : primitiveWrapperTypeMap.entrySet()) {\n     Class<?> key = entry.getKey();\n     Class<?> value = entry.getValue();\n     primitiveTypeToWrapperMap.put(value, key);\n     registerCommonClasses(key);\n}\n```\n\ninstead of\n\n```java\nprimitiveWrapperTypeMap.forEach((key, value) -> {\n     primitiveTypeToWrapperMap.put(value, key);\n     registerCommonClasses(key);\n});\n```\n\nThe improvement in micro apps startup is dramatic: about 3.5%.\n\n\n---\n\n**Affects:** 5.0.8\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/df51ff03862c6a299f2ff243828ec23608899311, https://github.com/spring-projects/spring-framework/commit/1d8e5f4d853a51834710536efec72e6819ca9970\n']",['closed'],[4],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nIf that makes a significant difference, the JVM has some room to improve...\n\nAnyway, I've adapted the static initializer along those lines, effectively downgrading the code to its 4.3.x version again.\n"", '**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** commented\n\nAgree the JVM probably has a problem. Unfortunately it doesn’t look like it’s one that we can work around simply. My benchmarks don’t show a commensurate improvement in startup time after this change - there is some improvement but not as dramatic as I had hoped. But, the flame graph no longer highlights `ClassUtils` as a hot spot. So we have achieved something, and this change didn’t cost much, so it’s worth keeping. We probably just pushed the actual issue into another place, so I’ll keep digging.\n', ""**[Dave Syer](https://jira.spring.io/secure/ViewProfile.jspa?name=david_syer)** commented\n\nI looked at the flame graphs again, before and after. As feared, this change seems to just shuffle the problem around. The same work ends up being done in the JVM somewhere else - e.g. in one app I saw the same ~3.5% penalty for `MethodHandleNatives.linkCallSite()` but coming from `LoggingSystem.get()` in Spring Boot, whereas before this change that flame wasn't visible.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nNo worries. Since this is just a syntactic change with hardly a drawback, I'll keep it that way in `ClassUtils`, not triggering any particular initialization impact on our end (and preserving the initialization behavior that we had in 4.3.x already).\n""]"
df8412bded77faadd60d62dc5c78ca8b2b44a481,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-		if (logger.isDebugEnabled()) {
-			logger.debug(""Closing due to exception for "" + session, exception);
+		if (logger.isErrorEnabled()) {
+			logger.error(""Closing session due to exception for "" + session, exception);",4,condition,ExceptoinWebSocketHandlerDecorator uses ERROR level,"Issue: SPR-15537
",,20096,1,['Increase log level in ExceptionWebSocketHandlerDecorator [SPR-15537]'],"['**[Ayushya Devmurari](https://jira.spring.io/secure/ViewProfile.jspa?name=pathfinder2104)** opened **[SPR-15537](https://jira.spring.io/browse/SPR-15537?redirect=false)** and commented\n\nWhile working on an app which includes a module of spring-websocket. I did some changes in the code and I was having some hibernate exception in the back, but the exception is not getting printed/logged. I found out this while debugging the code. In this class ""ExceptionWebSocketHandlerDecorator"" in this public static method ""tryCloseWithError"", exception handling is there but logging is missing.\n\nI have created a PR for this, please do the needful. Below is the link for PR.\nhttps://github.com/spring-projects/spring-framework/pull/1424\n\n\n---\n\n**Affects:** 4.3.3\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/99236759ec0f8863914de596566d27d9f36293af, https://github.com/spring-projects/spring-framework/commit/df8412bded77faadd60d62dc5c78ca8b2b44a481\n']",['closed'],[4],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThat `catch` block only really suppresses exceptions during the actual `close` attempt. Did you indeed get a Hibernate exception right there? Could you please share the stacktrace for it?\n', ""**[Ayushya Devmurari](https://jira.spring.io/secure/ViewProfile.jspa?name=pathfinder2104)** commented\n\nI agree with you, I should have give it a closer look, about catch block.\n\nHowever I found this exception in ExceptionWebSocketHandlerDecorator, Below is the stack trace which was generated but couldn't find it in logs. Logs are set to debug mode.\n\n[org.springframework.orm.hibernate5.SessionFactoryUtils.convertHibernateAccessException(SessionFactoryUtils.java:296), \norg.springframework.orm.hibernate5.HibernateExceptionTranslator.convertHibernateAccessException(HibernateExceptionTranslator.java:68), \norg.springframework.orm.hibernate5.HibernateExceptionTranslator.translateExceptionIfPossible(HibernateExceptionTranslator.java:49), \norg.springframework.dao.support.ChainedPersistenceExceptionTranslator.translateExceptionIfPossible(ChainedPersistenceExceptionTranslator.java:59), \norg.springframework.dao.support.DataAccessUtils.translateIfNecessary(DataAccessUtils.java:213), \norg.springframework.dao.support.PersistenceExceptionTranslationInterceptor.invoke(PersistenceExceptionTranslationInterceptor.java:147), \norg.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179), \norg.springframework.aop.framework.JdkDynamicAopProxy.invoke(JdkDynamicAopProxy.java:213), \ncom.sun.proxy.$Proxy57.getCandidateByEmail(Unknown Source), \norg.opensource.myapp.communication.CallHandler.register(CallHandler.java:148), \norg.opensource.myapp.communication.CallHandler.handleTextMessage(CallHandler.java:94), \norg.springframework.web.socket.handler.AbstractWebSocketHandler.handleMessage(AbstractWebSocketHandler.java:43), \norg.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75), \norg.springframework.web.socket.handler.LoggingWebSocketHandlerDecorator.handleMessage(LoggingWebSocketHandlerDecorator.java:56), \norg.springframework.web.socket.handler.ExceptionWebSocketHandlerDecorator.handleMessage(ExceptionWebSocketHandlerDecorator.java:58), \norg.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.handleTextMessage(StandardWebSocketHandlerAdapter.java:110), \norg.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter.access$000(StandardWebSocketHandlerAdapter.java:42), \norg.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:81), \norg.springframework.web.socket.adapter.standard.StandardWebSocketHandlerAdapter$3.onMessage(StandardWebSocketHandlerAdapter.java:78), \norg.apache.tomcat.websocket.WsFrameBase.sendMessageText(WsFrameBase.java:399), \norg.apache.tomcat.websocket.WsFrameBase.processDataText(WsFrameBase.java:500), \norg.apache.tomcat.websocket.WsFrameBase.processData(WsFrameBase.java:295), \norg.apache.tomcat.websocket.WsFrameBase.processInputBuffer(WsFrameBase.java:131), \norg.apache.tomcat.websocket.server.WsFrameServer.onDataAvailable(WsFrameServer.java:71), \norg.apache.tomcat.websocket.server.WsHttpUpgradeHandler$WsReadListener.onDataAvailable(WsHttpUpgradeHandler.java:185), \norg.apache.coyote.http11.upgrade.AbstractServletInputStream.onDataAvailable(AbstractServletInputStream.java:198), \norg.apache.coyote.http11.upgrade.AbstractProcessor.upgradeDispatch(AbstractProcessor.java:96), \norg.apache.coyote.AbstractProtocol$AbstractConnectionHandler.process(AbstractProtocol.java:661), \norg.apache.tomcat.util.net.NioEndpoint$SocketProcessor.doRun(NioEndpoint.java:1519), \norg.apache.tomcat.util.net.NioEndpoint$SocketProcessor.run(NioEndpoint.java:1475), \njava.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142), \njava.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617), \norg.apache.tomcat.util.threads.TaskThread$WrappingRunnable.run(TaskThread.java:61), \njava.lang.Thread.run(Thread.java:745)]\n"", '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\n> in this public static method ""tryCloseWithError"", exception handling is there but logging is missing.\n\nI\'m not sure what you mean. The first thing this method does is [log the error](https://github.com/spring-projects/spring-framework/blob/11075f12bc2ac27b47d9362751a2a44f808828b9/spring-websocket/src/main/java/org/springframework/web/socket/handler/ExceptionWebSocketHandlerDecorator.java#L89-L91).\n\n> However I found this exception in ExceptionWebSocketHandlerDecorator\n\nAgain not clear what you mean by ""found"". Did you put a break somewhere, where? Did you step through and how could it not log where the source link above shows clearly it is logging.\n', '**[Ayushya Devmurari](https://jira.spring.io/secure/ViewProfile.jspa?name=pathfinder2104)** commented\n\nThanks,\nI agree with you that the first thing the method does is logging the error but if you see it I have to put my logger mode in debug mode, I think error should be printed irrespective of debug mode on or off.\n\nSecond thing, yes I did put a break point in my class from there I navigated to class ""ExceptionWebSocketHandlerDecorator"" and in this method ""tryCloseWithError"" I found that there is some exception,  I ""watch"" the variable ""exception"" and while doing exception.printStackTrace() I found above stacktrace.\n']"
dfc370c368cd45863c41ab65ca09a87f6b4a1250,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Condition_Change,"-			if (isJarResource(rootDirResource)) {
-				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern));
-			}
-			else if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {
+			if (rootDirResource.getURL().getProtocol().startsWith(ResourceUtils.URL_PROTOCOL_VFS)) {
+			else if (isJarResource(rootDirResource)) {
+				result.addAll(doFindPathMatchingJarResources(rootDirResource, subPattern));
+			}",8,condition,PathMatchingResourcePatternResolver's findPathMatchingResources needs to check for VFS before checking isJarResource,"Issue: SPR-11887
",,16506,1,['Spring 3.2.9 breaks JBoss EAP 5.1.1 VFS compatibility [SPR-11887]'],"['**[Patrick Decat](https://jira.spring.io/secure/ViewProfile.jspa?name=pdecat)** opened **[SPR-11887](https://jira.spring.io/browse/SPR-11887?redirect=false)** and commented\n\nHi,\n\nwe just upgraded from Spring 3.2.8 to 3.2.9, and it breaks all of our webapps with JBoss EAP 5.1.1.\n\nIt seems to be related to treating VFS URLs as JARs.\n\n```\n14:38:14,214 ERROR [[/webapp]] Exception lors de l\'envoi de l\'évènement contexte initialisé (context initialized) à l\'instance de classe d\'écoute (listener) org.springframework.web.context.ContextLoaderListener\norg.springframework.beans.factory.BeanDefinitionStoreException: I/O failure during classpath scanning; nested exception is java.util.zip.ZipException: error in opening zip file\n\tat org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:302)\n\tat org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:242)\n\tat org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(ComponentScanBeanDefinitionParser.java:84)\n\tat org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73)\n\tat org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1438)\n\tat org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1428)\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:195)\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:139)\n\tat org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:108)\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493)\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390)\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334)\n\tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302)\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174)\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209)\n\tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)\n\tat org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125)\n\tat org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94)\n\tat org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130)\n\tat org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:537)\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451)\n\tat org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:410)\n\tat org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306)\n\tat org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112)\n\tat org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3910)\n\tat org.apache.catalina.core.StandardContext.start(StandardContext.java:4389)\n\tat org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeployInternal(TomcatDeployment.java:321)\n\tat org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeploy(TomcatDeployment.java:145)\n\tat org.jboss.web.deployers.AbstractWarDeployment.start(AbstractWarDeployment.java:461)\n\tat org.jboss.web.deployers.WebModule.startModule(WebModule.java:122)\n\tat org.jboss.web.deployers.WebModule.start(WebModule.java:97)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:597)\n\tat org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:157)\n\tat org.jboss.mx.server.Invocation.dispatch(Invocation.java:96)\n\tat org.jboss.mx.server.Invocation.invoke(Invocation.java:88)\n\tat org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264)\n\tat org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:668)\n\tat org.jboss.system.microcontainer.ServiceProxy.invoke(ServiceProxy.java:206)\n\tat com.sun.proxy.$Proxy38.start(Unknown Source)\n\tat org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:42)\n\tat org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:37)\n\tat org.jboss.dependency.plugins.action.SimpleControllerContextAction.simpleInstallAction(SimpleControllerContextAction.java:62)\n\tat org.jboss.dependency.plugins.action.AccessControllerContextAction.install(AccessControllerContextAction.java:71)\n\tat org.jboss.dependency.plugins.AbstractControllerContextActions.install(AbstractControllerContextActions.java:51)\n\tat org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348)\n\tat org.jboss.system.microcontainer.ServiceControllerContext.install(ServiceControllerContext.java:297)\n\tat org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652)\n\tat org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938)\n\tat org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082)\n\tat org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988)\n\tat org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:826)\n\tat org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:556)\n\tat org.jboss.system.ServiceController.doChange(ServiceController.java:688)\n\tat org.jboss.system.ServiceController.start(ServiceController.java:460)\n\tat org.jboss.system.deployers.ServiceDeployer.start(ServiceDeployer.java:163)\n\tat org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:99)\n\tat org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:46)\n\tat org.jboss.deployers.spi.deployer.helpers.AbstractSimpleRealDeployer.internalDeploy(AbstractSimpleRealDeployer.java:62)\n\tat org.jboss.deployers.spi.deployer.helpers.AbstractRealDeployer.deploy(AbstractRealDeployer.java:55)\n\tat org.jboss.deployers.plugins.deployers.DeployerWrapper.deploy(DeployerWrapper.java:179)\n\tat org.jboss.deployers.plugins.deployers.DeployersImpl.doDeploy(DeployersImpl.java:1454)\n\tat org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1172)\n\tat org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1193)\n\tat org.jboss.deployers.plugins.deployers.DeployersImpl.install(DeployersImpl.java:1113)\n\tat org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348)\n\tat org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652)\n\tat org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938)\n\tat org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082)\n\tat org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988)\n\tat org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:826)\n\tat org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:556)\n\tat org.jboss.deployers.plugins.deployers.DeployersImpl.process(DeployersImpl.java:789)\n\tat org.jboss.deployers.plugins.main.MainDeployerImpl.process(MainDeployerImpl.java:699)\n\tat org.jboss.system.server.profileservice.repository.MainDeployerAdapter.process(MainDeployerAdapter.java:117)\n\tat org.jboss.system.server.profileservice.repository.ProfileDeployAction.install(ProfileDeployAction.java:70)\n\tat org.jboss.system.server.profileservice.repository.AbstractProfileAction.install(AbstractProfileAction.java:53)\n\tat org.jboss.system.server.profileservice.repository.AbstractProfileService.install(AbstractProfileService.java:403)\n\tat org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348)\n\tat org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652)\n\tat org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938)\n\tat org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082)\n\tat org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988)\n\tat org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:778)\n\tat org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:543)\n\tat org.jboss.system.server.profileservice.repository.AbstractProfileService.registerProfile(AbstractProfileService.java:308)\n\tat org.jboss.system.server.profileservice.ProfileServiceBootstrap.start(ProfileServiceBootstrap.java:256)\n\tat org.jboss.bootstrap.AbstractServerImpl.start(AbstractServerImpl.java:461)\n\tat org.jboss.Main.boot(Main.java:221)\n\tat org.jboss.Main$1.run(Main.java:556)\n\tat java.lang.Thread.run(Thread.java:662)\nCaused by: java.util.zip.ZipException: error in opening zip file\n\tat java.util.zip.ZipFile.open(Native Method)\n\tat java.util.zip.ZipFile.<init>(ZipFile.java:127)\n\tat java.util.jar.JarFile.<init>(JarFile.java:136)\n\tat java.util.jar.JarFile.<init>(JarFile.java:73)\n\tat org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(PathMatchingResourcePatternResolver.java:458)\n\tat org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:344)\n\tat org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:268)\n\tat org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:1269)\n\tat org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:257)\n\t... 92 more\n```\n\nThe culprit seems to be this change:\n\n```\n@@ -255,23 +255,22 @@ public abstract class ResourceUtils {                                                                                                                                                                                                      \n         */\n        public static boolean isFileURL(URL url) {\n                String protocol = url.getProtocol();\n-               return (URL_PROTOCOL_FILE.equals(protocol) || protocol.startsWith(URL_PROTOCOL_VFS));                                                                                                                                                            \n+               return (URL_PROTOCOL_FILE.equals(protocol) || URL_PROTOCOL_VFS.equals(protocol));                                                                                                                                                                \n        }\n\n        /**\n         * Determine whether the given URL points to a resource in a jar file,\n         * that is, has protocol ""jar"", ""zip"", ""wsjar"" or ""code-source"".\n-        * <p>""zip"" and ""wsjar"" are used by BEA WebLogic Server and IBM WebSphere, respectively,                                                                                                                                                                 \n-        * but can be treated like jar files. The same applies to ""code-source"" URLs on Oracle                                                                                                                                                                   \n+        * <p>""zip"" and ""wsjar"" are used by WebLogic Server and WebSphere, respectively,                                                                                                                                                                         \n+        * but can be treated like jar files. The same applies to ""code-source"" URLs on                                                                                                                                                                          \n         * OC4J, provided that the path contains a jar separator.\n         * @param url the URL to check\n         * @return whether the URL has been identified as a JAR URL\n         */\n        public static boolean isJarURL(URL url) {\n                String protocol = url.getProtocol();\n-               return (URL_PROTOCOL_JAR.equals(protocol) ||                                                                                                                                                                                                     \n-                               URL_PROTOCOL_ZIP.equals(protocol) ||                                                                                                                                                                                             \n-                               URL_PROTOCOL_WSJAR.equals(protocol) ||                                                                                                                                                                                           \n+               return (URL_PROTOCOL_JAR.equals(protocol) || URL_PROTOCOL_ZIP.equals(protocol) ||                                                                                                                                                                \n+                               URL_PROTOCOL_WSJAR.equals(protocol) || URL_PROTOCOL_VFSZIP.equals(protocol) ||                                                                                                                                                   \n                                (URL_PROTOCOL_CODE_SOURCE.equals(protocol) && url.getPath().contains(JAR_URL_SEPARATOR)));\n        }\n```\n\n---\n\n**Affects:** 3.2.9\n\n**Reference URL:** https://github.com/spring-projects/spring-framework/commit/be6b54fe8ba27b80f8d3b32a4d9957a808279c22\n\n**Issue Links:**\n- #16299 UrlResource.exists() does not properly detect JBoss vfszip resources\n\n**Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)\n']",['closed'],[11],"['**[Patrick Decat](https://jira.spring.io/secure/ViewProfile.jspa?name=pdecat)** commented\n\nCaused by #16299.\n', ""**[Patrick Decat](https://jira.spring.io/secure/ViewProfile.jspa?name=pdecat)** commented\n\nOn Windows, the error is a bit different:\n\n```\n13:12:37.995 [main] ERROR o.s.web.context.ContextLoader - Context initialization failed\norg.springframework.beans.factory.BeanDefinitionStoreException: I/O failure during classpath scanning; nested exception is java.io.FileNotFoundException: D:\\jtb\\servers\\jboss-eap-5.1\\jboss-as\\ser\nver\\default\\deploy\\front.war\\WEB-INF\\lib\\somepackage-impl-2.2.0-SNAPSHOT.jar\\fr\\somepackage\\impl (Le chemin d'accès spécifié est introuvable)\n            at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:302) ~[spring-context-3.2.9.RELEASE\n.jar!/:3.2.9.RELEASE]\n            at org.springframework.context.annotation.ClassPathBeanDefinitionScanner.doScan(ClassPathBeanDefinitionScanner.java:242) ~[spring-context-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.context.annotation.ComponentScanBeanDefinitionParser.parse(ComponentScanBeanDefinitionParser.java:84) ~[spring-context-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.beans.factory.xml.NamespaceHandlerSupport.parse(NamespaceHandlerSupport.java:73) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1438) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.beans.factory.xml.BeanDefinitionParserDelegate.parseCustomElement(BeanDefinitionParserDelegate.java:1428) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.parseBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:195) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.doRegisterBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:139) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELE\nASE]\n            at org.springframework.beans.factory.xml.DefaultBeanDefinitionDocumentReader.registerBeanDefinitions(DefaultBeanDefinitionDocumentReader.java:108) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEAS\nE]\n            at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.registerBeanDefinitions(XmlBeanDefinitionReader.java:493) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.doLoadBeanDefinitions(XmlBeanDefinitionReader.java:390) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:334) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:302) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:174) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:209) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180) ~[spring-beans-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:125) ~[spring-web-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.web.context.support.XmlWebApplicationContext.loadBeanDefinitions(XmlWebApplicationContext.java:94) ~[spring-web-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:130) ~[spring-context-3.2.9.RELEASE.jar!/:3.2.9.RELEASE\n]\n            at org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:537) ~[spring-context-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:451) ~[spring-context-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.web.context.ContextLoader.configureAndRefreshWebApplicationContext(ContextLoader.java:410) ~[spring-web-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.web.context.ContextLoader.initWebApplicationContext(ContextLoader.java:306) ~[spring-web-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.web.context.ContextLoaderListener.contextInitialized(ContextLoaderListener.java:112) ~[spring-web-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.apache.catalina.core.StandardContext.listenerStart(StandardContext.java:3910) ~[jbossweb.jar!/:na]\n            at org.apache.catalina.core.StandardContext.start(StandardContext.java:4389) ~[jbossweb.jar!/:na]\n            at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeployInternal(TomcatDeployment.java:321) [jboss-web-service.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.web.tomcat.service.deployers.TomcatDeployment.performDeploy(TomcatDeployment.java:145) [jboss-web-service.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.web.deployers.AbstractWarDeployment.start(AbstractWarDeployment.java:461) [jboss.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.web.deployers.WebModule.startModule(WebModule.java:122) [jboss.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.web.deployers.WebModule.start(WebModule.java:97) [jboss.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.6.0_39]\n            at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:39) ~[na:1.6.0_39]\n            at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25) ~[na:1.6.0_39]\n            at java.lang.reflect.Method.invoke(Method.java:597) ~[na:1.6.0_39]\n            at org.jboss.mx.interceptor.ReflectedDispatcher.invoke(ReflectedDispatcher.java:157) [jboss-mbeans.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.mx.server.Invocation.dispatch(Invocation.java:96) [jboss-mbeans.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.mx.server.Invocation.invoke(Invocation.java:88) [jboss-mbeans.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.mx.server.AbstractMBeanInvoker.invoke(AbstractMBeanInvoker.java:264) [jboss-mbeans.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.mx.server.MBeanServerImpl.invoke(MBeanServerImpl.java:668) [jboss-jmx.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.system.microcontainer.ServiceProxy.invoke(ServiceProxy.java:206) [jboss-system-jmx.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at sun.proxy.$Proxy38.start(Unknown Source) [na:na]\n            at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:42) [jboss-system-jmx.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.system.microcontainer.StartStopLifecycleAction.installAction(StartStopLifecycleAction.java:37) [jboss-system-jmx.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.dependency.plugins.action.SimpleControllerContextAction.simpleInstallAction(SimpleControllerContextAction.java:62) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.action.AccessControllerContextAction.install(AccessControllerContextAction.java:71) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractControllerContextActions.install(AbstractControllerContextActions.java:51) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.system.microcontainer.ServiceControllerContext.install(ServiceControllerContext.java:297) [jboss-system-jmx.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:826) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:556) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.system.ServiceController.doChange(ServiceController.java:688) [jboss-system-jmx.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.system.ServiceController.start(ServiceController.java:460) [jboss-system-jmx.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.system.deployers.ServiceDeployer.start(ServiceDeployer.java:163) [jboss-system-jmx.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:99) [jboss-system-jmx.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.system.deployers.ServiceDeployer.deploy(ServiceDeployer.java:46) [jboss-system-jmx.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.deployers.spi.deployer.helpers.AbstractSimpleRealDeployer.internalDeploy(AbstractSimpleRealDeployer.java:62) [jboss-deployers-spi.jar!/:2.0.10.GA]\n            at org.jboss.deployers.spi.deployer.helpers.AbstractRealDeployer.deploy(AbstractRealDeployer.java:55) [jboss-deployers-spi.jar!/:2.0.10.GA]\n            at org.jboss.deployers.plugins.deployers.DeployerWrapper.deploy(DeployerWrapper.java:179) [jboss-deployers-impl.jar!/:2.0.10.GA]\n            at org.jboss.deployers.plugins.deployers.DeployersImpl.doDeploy(DeployersImpl.java:1454) [jboss-deployers-impl.jar!/:2.0.10.GA]\n            at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1172) [jboss-deployers-impl.jar!/:2.0.10.GA]\n            at org.jboss.deployers.plugins.deployers.DeployersImpl.doInstallParentFirst(DeployersImpl.java:1193) [jboss-deployers-impl.jar!/:2.0.10.GA]\n            at org.jboss.deployers.plugins.deployers.DeployersImpl.install(DeployersImpl.java:1113) [jboss-deployers-impl.jar!/:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:826) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.change(AbstractController.java:556) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.deployers.plugins.deployers.DeployersImpl.process(DeployersImpl.java:789) [jboss-deployers-impl.jar!/:2.0.10.GA]\n            at org.jboss.deployers.plugins.main.MainDeployerImpl.process(MainDeployerImpl.java:699) [jboss-deployers-impl.jar!/:2.0.10.GA]\n            at org.jboss.system.server.profileservice.repository.MainDeployerAdapter.process(MainDeployerAdapter.java:117) [jboss-system.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.system.server.profileservice.repository.ProfileDeployAction.install(ProfileDeployAction.java:70) [jboss-system.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.system.server.profileservice.repository.AbstractProfileAction.install(AbstractProfileAction.java:53) [jboss-system.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.system.server.profileservice.repository.AbstractProfileService.install(AbstractProfileService.java:403) [jboss-system.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.dependency.plugins.AbstractControllerContext.install(AbstractControllerContext.java:348) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:1652) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.incrementState(AbstractController.java:938) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:1082) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.resolveContexts(AbstractController.java:988) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:778) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.dependency.plugins.AbstractController.install(AbstractController.java:543) [jboss-dependency.jar:2.0.10.GA]\n            at org.jboss.system.server.profileservice.repository.AbstractProfileService.registerProfile(AbstractProfileService.java:308) [jboss-system.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=2011051716\n07)]\n            at org.jboss.system.server.profileservice.ProfileServiceBootstrap.start(ProfileServiceBootstrap.java:256) [jboss-system.jar!/:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.bootstrap.AbstractServerImpl.start(AbstractServerImpl.java:461) [jboss-bootstrap.jar:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.Main.boot(Main.java:221) [run.jar:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at org.jboss.Main$1.run(Main.java:556) [run.jar:5.1.1 (build: SVNTag=JBPAPP_5_1_1 date=201105171607)]\n            at java.lang.Thread.run(Thread.java:662) [na:1.6.0_39]\nCaused by: java.io.FileNotFoundException: D:\\jtb\\servers\\jboss-eap-5.1\\jboss-as\\server\\default\\deploy\\front.war\\WEB-INF\\lib\\somepackage-2.2.0-SNAPSHOT.jar\\fr\\somepackage\\impl (Le chemin d'accès spécifié est introuvable)\n            at java.util.zip.ZipFile.open(Native Method) ~[na:1.6.0_39]\n            at java.util.zip.ZipFile.<init>(ZipFile.java:127) ~[na:1.6.0_39]\n            at java.util.jar.JarFile.<init>(JarFile.java:136) ~[na:1.6.0_39]\n            at java.util.jar.JarFile.<init>(JarFile.java:73) ~[na:1.6.0_39]\n            at org.springframework.core.io.support.PathMatchingResourcePatternResolver.doFindPathMatchingJarResources(PathMatchingResourcePatternResolver.java:458) ~[spring-core-3.2.9.RELEASE.jar!/:3.2.9.RE\nLEASE]\n            at org.springframework.core.io.support.PathMatchingResourcePatternResolver.findPathMatchingResources(PathMatchingResourcePatternResolver.java:344) ~[spring-core-3.2.9.RELEASE.jar!/:3.2.9.RELEASE\n]\n            at org.springframework.core.io.support.PathMatchingResourcePatternResolver.getResources(PathMatchingResourcePatternResolver.java:268) ~[spring-core-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.context.support.AbstractApplicationContext.getResources(AbstractApplicationContext.java:1269) ~[spring-context-3.2.9.RELEASE.jar!/:3.2.9.RELEASE]\n            at org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider.findCandidateComponents(ClassPathScanningCandidateComponentProvider.java:257) ~[spring-context-3.2.9.RELEASE\n.jar!/:3.2.9.RELEASE]\n            ... 92 common frames omitted\n```\n\n"", '**[Patrick Decat](https://jira.spring.io/secure/ViewProfile.jspa?name=pdecat)** commented\n\n1. git clone https://github.com/spring-projects/spring-framework.git\n2. cd spring-framework\n3. git checkout v3.2.9.RELEASE\n4. git revert be6b54fe8ba27b80f8d3b32a4d9957a808279c22\n5. ./gradlew build\n\n=> issue fixed\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nKeeping the fix for #16299 applied, the best possible solution seems to be a simple switch of checks: PathMatchingResourcePatternResolver's findPathMatchingResources needs to check for VFS before checking isJarResource. I've addressed this in master, to be available in the next 4.1 snapshot. I'll also backport it to 4.0.6 and 3.2.9 SR1.\n\nJuergen\n"", ""**[Patrick Decat](https://jira.spring.io/secure/ViewProfile.jspa?name=pdecat)** commented\n\nThanks, I'll test this tomorrow morning (GMT+2).\nRegards,\nPatrick.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nMight be easiest if you locally patch 3.2.9 based on my commit in our master branch (https://github.com/spring-projects/spring-framework/commit/dfc370c368cd45863c41ab65ca09a87f6b4a1250)... or you'll try the latest 4.1 snapshot.\n\nI'm afraid that 4.0.6 and 3.2.9 SR1 snapshots won't be available before next week since we haven't done any backporting yet.\n\nJuergen\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nNote that this is only an issue on JBoss 5 in the first place. VFS 3, as used in JBoss 6 and 7, seems to work fine in any case. From that perspective, Spring Framework 4.x doesn\'t seem to be affected but I\'ll keep the fix there for defensive consistency.\n\nIn the course of a further review of our ResourceUtils code, I\'ve also restored detection of ""vfsfile"" as a file system protocol. This got lost through #16299 as well but didn\'t make as much of a difference since it just caused less efficient resolution.\n\nJuergen\n', '**[Patrick Decat](https://jira.spring.io/secure/ViewProfile.jspa?name=pdecat)** commented\n\nThank you Juergen, you fixed it.\n\n1. git clone https://github.com/spring-projects/spring-framework.git\n2. cd spring-framework\n3. git checkout v3.2.9.RELEASE\n4. git cherry-pick dfc370c368cd45863c41ab65ca09a87f6b4a1250\n5. ./gradlew build\n\n-Any ETA for Spring 3.2.9.SR1? This is a blocker for us.- ([just seen the 15/Jul/14 Due date](https://jira.spring.io/browse/SPR/fixforversion/14641))\n\nBest regards,\nPatrick.\n', '**[Patrick Decat](https://jira.spring.io/secure/ViewProfile.jspa?name=pdecat)** commented\n\nFix confirmed in 3.2.10.BUILD-SNAPSHOT.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThanks, Patrick, that's good to know.\n\nFYI, 3.2.10 is basically in release candidate mode now, with 18 issues fixed - many of them verified by the original reporters already - and not much more expected. At this stage, it's arguably worth releasing not too long after 4.0.6 which will go out on Monday now. So I can't promise an earlier date for 3.2.10 yet but it might end up being ahead of July 28th.\n\nJuergen\n"", '**[Patrick Decat](https://jira.spring.io/secure/ViewProfile.jspa?name=pdecat)** commented\n\nFix confirmed with Spring 3.2.10.RELEASE, thanks Juergen!\n']"
e00a882333ed06c682a59f92aa45657434b03df1,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/adapter/jetty/JettyWebSocketHandlerAdapter.java,Add_Condition,"+		else {
+			callback.succeed();
+		}",3,condition,Complete Jetty frame callback when opcode is not PONG,"The onWebSocketFrame method should complete callback.
For more details, see https://github.com/jetty/jetty.project/issues/11088.

Closes gh-31869
",,31869,1,['Complete frame callback when opcode is not PONG'],['onWebSocketFrame method should complete callback. more details see issue [JETTY 11088](https://github.com/jetty/jetty.project/issues/11088)'],['closed'],[4],"['@leonchen83 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=31869)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=31869) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@leonchen83 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=31869)!', '@sbordet From your perspective, should we apply this fix to the Jetty 11 support we have in Spring Framework 6.0.x as well?', '@sdeleuze Jetty 11 does not need this fix because it does not use `Callback`.\r\n\r\nThe corresponding signature in Jetty 11 would be:\r\n\r\n```java\r\n@OnWebSocketFrame\r\npublic void onWebSocketFrame(Frame frame)\r\n```\r\n\r\nso no `Callback`.\r\nIn Jetty 11 there is the requirement that the frame payload must be consumed synchronously in the method invocation, or copied to be consumed asynchronously, because when returning from the `onWebSocketFrame()` method the frame payload buffer is recycled.']"
e0734aede82efc80c5ab334d5559abcc5787957b,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/PostProcessorRegistrationDelegate.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-	 * BeanPostProcessor that detects beans which implement the ApplicationListener interface.
-	 * This catches beans that can't reliably be detected by getBeanNamesForType.
+	 * {@code BeanPostProcessor} that detects beans which implement the {@code ApplicationListener}
+	 * interface. This catches beans that can't reliably be detected by {@code getBeanNamesForType}
+	 * and related operations which only work against top-level beans.
+	 *
+	 * <p>With standard Java serialization, this post-processor won't get serialized as part of
+	 * {@code DisposableBeanAdapter} to begin with. However, with alternative serialization
+	 * mechanisms, {@code DisposableBeanAdapter.writeReplace} might not get used at all, so we
+	 * defensively mark this post-processor's field state as {@code transient}.
-		private final AbstractApplicationContext applicationContext;
+		private transient final AbstractApplicationContext applicationContext;
-		private final Map<String, Boolean> singletonNames = new ConcurrentHashMap<String, Boolean>(256);
+		private transient final Map<String, Boolean> singletonNames = new ConcurrentHashMap<String, Boolean>(256);
-			if (beanDefinition.isSingleton()) {
+			if (this.applicationContext != null && beanDefinition.isSingleton()) {
-			if (bean instanceof ApplicationListener) {
+			if (this.applicationContext != null && bean instanceof ApplicationListener) {",8,condition,ApplicationListenerDetector explicitly prevents serialization of its ApplicationContext reference,"Issue: SPR-14214
",,18788,1,['ApplicationListenerDetector should prevent serialization of its ApplicationContext reference [SPR-14214]'],"['**[Ricardo Fanjul Fandiño](https://jira.spring.io/secure/ViewProfile.jspa?name=fanjulito)** opened **[SPR-14214](https://jira.spring.io/browse/SPR-14214?redirect=false)** and commented\n\nI\'m trying to migrate Spring Web Application from 3.x version to 4.2 version of Spring.\n\nMy application is deployed in a cluster of Tomcat 7 using for serialize the session: memcached-session-manager: https://github.com/magro/memcached-session-manager and serializing the objects with Kryo.\n\nWhen serialize the session I found a mistake that made me suspect that I\'m trying to serialize the Spring ApplicationContext.\n\nDebugging my application I found this:\n!imagen1.png|thumbnail!\n\nInside the session exist a key “org.springframework.web.context.request.ServletRequestAttributes.DESTRUCTION_CALLBACK.scopedTarget.restSessionDataHolder” whose value reference the ApplicationContext.\n\nI find that, for each bean declared in Session Scope. For example:\n\n```java\n@Component\n@Scope(proxyMode=ScopedProxyMode.TARGET_CLASS,value=""session"")\npublic class RestSessionDataHolder implements Serializable{\n...\n```\n\nSpring in the method “org.springframework.web.context.request.ServletRequestAttributes.registerSessionDestructionCallback\n(String name, Runnable callback)”, store in the session a key named “org.springframework.web.context.request.ServletRequestAttributes.DESTRUCTION_CALLBACK.scopedTarget.[BEAN_NAME]” with a value that indirectly reference the ApplicatonContext.\n\n!imagen2.png|thumbnail!\n\n!imagen3.png|thumbnail!\n\nInside this atribute exist two “DestructionAwareBeanPostProcessor”: “CommonAnnotationBeanPostProcessor” and “org.springframework.context.support.PostProcessorRegistrationDelegate$ApplicationListenerDetector”.\n\n“PostProcessorRegistrationDelegate$ApplicationListenerDetector” exist since Spring 4.0 and maybe have a bug:\n\n```java\nprivate static class ApplicationListenerDetector implements MergedBeanDefinitionPostProcessor, DestructionAwareBeanPostProcessor {\n...\n\t\tprivate final AbstractApplicationContext applicationContext;\n\n```\n\nI think that attribute “private final AbstractApplicationContext applicationContext” should be “**transient**”.\n\nFor example the similar attributes of “CommonAnnotationBeanPostProcessor” are transient:\n\n```java\npublic class CommonAnnotationBeanPostProcessor extends InitDestroyAnnotationBeanPostProcessor\n\t\timplements InstantiationAwareBeanPostProcessor, BeanFactoryAware, Serializable {\n\n...\n\n\tprivate transient BeanFactory jndiFactory = new SimpleJndiBeanFactory();\n\n\tprivate transient BeanFactory resourceFactory;\n\n\tprivate transient BeanFactory beanFactory;\n\n\tprivate transient final Map<String, InjectionMetadata> injectionMetadataCache =\n\t\t\tnew ConcurrentHashMap<String, InjectionMetadata>(256);\n```\n\n---\n\n**Affects:** 4.1.7, 4.1.8, 4.1.9, 4.2 GA, 4.2.1, 4.2.2, 4.2.3, 4.2.4, 4.2.5\n\n**Attachments:**\n- [imagen1.png](https://jira.spring.io/secure/attachment/23382/imagen1.png) (_56.23 kB_)\n- [imagen2.png](https://jira.spring.io/secure/attachment/23381/imagen2.png) (_81.84 kB_)\n- [imagen3.png](https://jira.spring.io/secure/attachment/23380/imagen3.png) (_116.81 kB_)\n\n**Issue Links:**\n- #18317 Avoid scoped destruction callbacks in case of no post-processor actually applying\n- #19349 Inner bean behind BeanFactoryPostProcessor should be able to receive application events\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/75a8f5b3cacdc89d0ac0e60335274988dd36ea0d, https://github.com/spring-projects/spring-framework/commit/e0734aede82efc80c5ab334d5559abcc5787957b\n']",['closed'],[3],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nSpring's `DisposableBeanAdapter` has a `writeReplace` implementation which filters for serializable post-processors... Since `ApplicationListenerDetector` isn't marked as serializable, it won't be included to begin with. However, that's only for standard Java serialization which actually respects `writeReplace`... Could this have to do with your specific arrangement, trying to serialize the original `DisposableBeanAdapter` instance and not its replacement object?\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nNote that, as of Spring Framework 4.3, we do not create scoped destruction callbacks at all anymore if none of them has anything to do. So `ApplicationListenerDetector` won't be included for non-listener beans anymore.\n\nThat said, it nevertheless doesn't hurt to mark `ApplicationListenerDetector`'s field state as `transient`, even if this might only really help with alternative serialization mechanisms. We can also easily backport that part to 4.2.6, whereas the above mechanism is 4.3 only.\n"", '**[Ricardo Fanjul Fandiño](https://jira.spring.io/secure/ViewProfile.jspa?name=fanjulito)** commented\n\nThanks for change, solves my problem.\n\nThen, I tried the ""writeReplace()"" and I found that Kryo don\'t invoke the method ""writeReplace()"".\n\n""memcached-session-manager"" have many serialization strategies:\nhttps://github.com/magro/memcached-session-manager/wiki/SerializationStrategies.\n\nI tried (Java serialization):\n""de.javakaffee.web.msm.JavaSerializationTranscoderFactory"".\n\nAnd ""DisposableBeanAdapter.writeReplace()"" is invoked and ""ApplicationListenerDetector"" not included.\n\nThe problema is with ""Kryo"" serialization:\n""de.javakaffee.web.msm.serializer.kryo.KryoTranscoderFactory""\n\n""DisposableBeanAdapter.writeReplace()"" is not invoked so, the ""ApplicationListenerDetector"" is included.\n']"
e21d94f91bfdfe8e3d7df43c2823425d096e0770,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/AbstractServerHttpResponse.java,Condition_Change,"-		for (Supplier<? extends Mono<Void>> actions : this.commitActions) {
-			commit = commit.concatWith(actions.get());
+		for (Supplier<? extends Mono<Void>> action : this.commitActions) {
+			commit = commit.concatWith(action.get());",4,iteration,Polish,"Closes gh-22472
",,22472,1,['Polish'],['This PR simply changes plural to singular.'],['closed'],[0],[]
e2b1dcbaca1cc618281d1308a5c24c28d4a04020,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/ast/PropertyOrFieldReference.java,Condition_Change,"-			TypedValue value = this.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences);
-			if (this.ref.cachedReadAccessor instanceof CompilablePropertyAccessor) {
-				CompilablePropertyAccessor accessor = (CompilablePropertyAccessor) this.ref.cachedReadAccessor;
-				this.ref.exitTypeDescriptor = CodeFlow.toDescriptor(accessor.getPropertyType());
+			TypedValue value =
+					this.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences);
+			PropertyAccessor accessorToUse = this.ref.cachedReadAccessor;
+			if (accessorToUse instanceof CompilablePropertyAccessor) {
+				this.ref.exitTypeDescriptor =
+						CodeFlow.toDescriptor(((CompilablePropertyAccessor) accessorToUse).getPropertyType());",10,condition,AccessorLValue reliably downcasts to CompilablePropertyAccessor in concurrent scenarios,"Issue: SPR-14850
",,19416,1,['NPE PropertyOrFieldReference$AccessorLValue due to concurrency issue [SPR-14850]'],"['**[Thijs Vonk](https://jira.spring.io/secure/ViewProfile.jspa?name=thyzz)** opened **[SPR-14850](https://jira.spring.io/browse/SPR-14850?redirect=false)** and commented\n\nWe\'re seeing \'strange\' NullpointerExceptions while using ThymeLeaf and having heavy load on the machine.\n\n```\n2016-10-26 15:17:23,200 [trace=7cd2c0bf5bcb66db,span=7cd2c0bf5bcb66db] ERROR       TemplateEngine:1085 - [THYMELEAF][http-nio-8080-exec-12] Exception processing template ""sections/default"": Exception evaluating SpringEL expression: ""article.detailUrl"" (includes/ankeilers/standard:5)\n2016-10-26 15:17:23,229 [trace=,span=] ERROR  [dispatcherServlet]:182  - Servlet.service() for servlet dispatcherServlet threw exception\njava.lang.NullPointerException: null\n\tat org.springframework.expression.spel.ast.PropertyOrFieldReference$AccessorLValue.getValue(PropertyOrFieldReference.java:377)\n\tat org.springframework.expression.spel.ast.CompoundExpression.getValueInternal(CompoundExpression.java:88)\n\tat org.springframework.expression.spel.ast.SpelNodeImpl.getValue(SpelNodeImpl.java:120)\n\tat org.springframework.expression.spel.standard.SpelExpression.getValue(SpelExpression.java:267)\n\tat org.thymeleaf.spring4.expression.SpelVariableExpressionEvaluator.evaluate(SpelVariableExpressionEvaluator.java:139)\n\tat org.thymeleaf.standard.expression.VariableExpression.executeVariable(VariableExpression.java:154)\n\tat org.thymeleaf.standard.expression.SimpleExpression.executeSimple(SimpleExpression.java:59)\n\tat org.thymeleaf.standard.expression.Expression.execute(Expression.java:103)\n\tat org.thymeleaf.standard.expression.Expression.execute(Expression.java:133)\n\tat org.thymeleaf.standard.expression.Expression.execute(Expression.java:120)\n\tat org.thymeleaf.standard.processor.attr.AbstractStandardSingleAttributeModifierAttrProcessor.getTargetAttributeValue(AbstractStandardSingleAttributeModifierAttrProcessor.java:67)\n\tat org.thymeleaf.spring4.processor.attr.SpringHrefAttrProcessor.getTargetAttributeValue(SpringHrefAttrProcessor.java:68)\n\tat org.thymeleaf.processor.attr.AbstractSingleAttributeModifierAttrProcessor.getModifiedAttributeValues(AbstractSingleAttributeModifierAttrProcessor.java:59)\n\tat org.thymeleaf.processor.attr.AbstractAttributeModifierAttrProcessor.processAttribute(AbstractAttributeModifierAttrProcessor.java:62)\n\tat org.thymeleaf.processor.attr.AbstractAttrProcessor.doProcess(AbstractAttrProcessor.java:87)\n\tat org.thymeleaf.processor.AbstractProcessor.process(AbstractProcessor.java:212)\n\tat org.thymeleaf.dom.Node.applyNextProcessor(Node.java:1017)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:972)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.NestableNode.computeNextChild(NestableNode.java:695)\n\tat org.thymeleaf.dom.NestableNode.doAdditionalProcess(NestableNode.java:668)\n\tat org.thymeleaf.dom.Node.processNode(Node.java:990)\n\tat org.thymeleaf.dom.Document.process(Document.java:93)\n\tat org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1155)\n\tat org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1060)\n\tat org.thymeleaf.TemplateEngine.process(TemplateEngine.java:1011)\n\tat org.thymeleaf.spring4.view.ThymeleafView.renderFragment(ThymeleafView.java:335)\n\tat org.thymeleaf.spring4.view.ThymeleafView.render(ThymeleafView.java:190)\n\tat org.springframework.web.servlet.DispatcherServlet.render(DispatcherServlet.java:1246)\n\tat org.springframework.web.servlet.DispatcherServlet.processDispatchResult(DispatcherServlet.java:1029)\n\tat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:973)\n\tat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:895)\n\tat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:967)\n\tat org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:858)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:622)\n\tat org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:843)\n\tat javax.servlet.http.HttpServlet.service(HttpServlet.java:729)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:292)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n\tat org.apache.tomcat.websocket.server.WsFilter.doFilter(WsFilter.java:52)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n\tat org.springframework.boot.actuate.autoconfigure.EndpointWebMvcAutoConfiguration$ApplicationContextHeaderFilter.doFilterInternal(EndpointWebMvcAutoConfiguration.java:281)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n\tat org.springframework.web.filter.ShallowEtagHeaderFilter.doFilterInternal(ShallowEtagHeaderFilter.java:87)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n\tat org.springframework.boot.actuate.trace.WebRequestTraceFilter.doFilterInternal(WebRequestTraceFilter.java:115)\n\tat org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)\n\tat org.apache.catalina.core.ApplicationFilterChain.internalDoFilter(ApplicationFilterChain.java:240)\n\tat org.apache.catalina.core.ApplicationFilterChain.doFilter(ApplicationFilterChain.java:207)\n```\n\nLooking at similar NPE issues #17614 and how this was fixed\nI fixed this locally by doing the following in spring-expression v4.2.7\nreplace\n\n```\nline:372\n@Override\npublic TypedValue getValue() {\n\tTypedValue value = this.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences);\n\tif (this.ref.cachedReadAccessor instanceof CompilablePropertyAccessor) {\n\t\tCompilablePropertyAccessor accessor = (CompilablePropertyAccessor) this.ref.cachedReadAccessor;\n\t\t\t\tthis.ref.exitTypeDescriptor = CodeFlow.toDescriptor(accessor.getPropertyType());\n\t}\n\treturn value;\n}\n```\n\nwith\n\n```\n@Override\npublic TypedValue getValue() {\n\tTypedValue value = this.ref.getValueInternal(this.contextObject, this.evalContext, this.autoGrowNullReferences);\n\tPropertyAccessor accessorToUse = this.ref.cachedReadAccessor;\n\tif (accessorToUse instanceof CompilablePropertyAccessor) {\n\t\tCompilablePropertyAccessor accessor = (CompilablePropertyAccessor) accessorToUse;\n\t\t\t\tthis.ref.exitTypeDescriptor = CodeFlow.toDescriptor(accessor.getPropertyType());\n\t}\n\treturn value;\n}\n```\n\n---\n\n**Affects:** 4.2.7, 4.2.8\n\n**Issue Links:**\n- #17614 NPE in PropertyOrFieldReference due to concurrency issue when caching SpelExpression objects\n\n**Backported to:** [4.2.9](https://github.com/spring-projects/spring-framework/milestone/146?closed=1)\n']",['closed'],[3],"['**[Thijs Vonk](https://jira.spring.io/secure/ViewProfile.jspa?name=thyzz)** commented\n\nLooking at the code for 4.3.x and master I suspect this problem may also still occur there. No hard evidence though\n', ""**[Thijs Vonk](https://jira.spring.io/secure/ViewProfile.jspa?name=thyzz)** commented\n\nJuergen, how was this fixed? I'm looking for the commit's but can't find any.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n[Thijs Vonk](https://jira.spring.io/secure/ViewProfile.jspa?name=thyzz) sorry, not pushed/backported yet... coming later tonight or tomorrow, along with a bunch of other commits.\n\nThe fix itself looks just like in your patch, analogous to the older fixes in other locations.\n']"
e2ccd55d146c245ee3e6d46783e3c288999894ff,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java,Remove_Condition,"-		Method[] methods = this.sortedMethodsCache.get(clazz);
-		if (methods == null) {
-			methods = clazz.getMethods();
+		return this.sortedMethodsCache.computeIfAbsent(clazz, key -> {
+			Method[] methods = key.getMethods();
-			this.sortedMethodsCache.put(clazz, methods);
-		}
-		return methods;
+			return methods;
+		});",10,condition,ReflectivePropertyAccessor uses computeIfAbsent for cache computation,"Issue: SPR-16882
",,21421,1,['ReflectivePropertyAccessor should cache sorted methods [SPR-16882]'],"['**[Pavel Khokhlov](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel_hp)** opened **[SPR-16882](https://jira.spring.io/browse/SPR-16882?redirect=false)** and commented\n\nAfter migration from SPEL\xa04.3.9.RELEASE ->\xa04.3.10.RELEASE we noticed performance degradation with SPEL Expression (at least 2.5x times).\n\nIn attachment you can find [^benchmark.zip]\n\nYou can see JMH report (I used\xa0jdk1.8.0_151)\n\nThis is\xa04.3.10.RELEASE\n\n```\n/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/bin/java -Dfile.encoding=UTF-8 -classpath /Users/pkhokhlov/JProjects/benchmark/target/test-classes:/Users/pkhokhlov/.m2/repository/org/openjdk/jmh/jmh-core/1.21/jmh-core-1.21.jar:/Users/pkhokhlov/.m2/repository/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.jar:/Users/pkhokhlov/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/Users/pkhokhlov/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.21/jmh-generator-annprocess-1.21.jar:/Users/pkhokhlov/.m2/repository/org/springframework/spring-expression/4.3.10.RELEASE/spring-expression-4.3.10.RELEASE.jar:/Users/pkhokhlov/.m2/repository/org/springframework/spring-core/4.3.10.RELEASE/spring-core-4.3.10.RELEASE.jar:/Users/pkhokhlov/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar org.openjdk.jmh.Main org.spel.bug.SpelBenchmark.*\n1. JMH version: 1.21\n1. VM version: JDK 1.8.0_151, Java HotSpot(TM) 64-Bit Server VM, 25.151-b12\n1. VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/bin/java\n1. VM options: -Dfile.encoding=UTF-8\n1. Warmup: 2 iterations, 10 s each\n1. Measurement: 2 iterations, 10 s each\n1. Timeout: 10 min per iteration\n1. Threads: 1 thread, will synchronize iterations\n1. Benchmark mode: Throughput, ops/time\n1. Benchmark: org.spel.bug.SpelBenchmark.spel# Run progress: 0.00% complete, ETA 00:00:40\n1. Fork: 1 of 1\n1. Warmup Iteration   1: 197599.695 ops/s\n1. Warmup Iteration   2: 225828.094 ops/s\nIteration   1: 225044.963 ops/s\nIteration   2: 228451.901 ops/s\nResult ""org.spel.bug.SpelBenchmark.spel"":\n  226748.432 ops/s\n1. Run complete. Total time: 00:00:40REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\nexperiments, perform baseline and negative tests that provide experimental control, make sure\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\nDo not assume the numbers tell you what you want them to tell.Benchmark            Mode  Cnt       Score   Error  Units\nSpelBenchmark.spel  thrpt    2  226748.432          ops/s\n```\n\nThis is\xa04.3.9.RELEASE\n\n```\n/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/bin/java -Dfile.encoding=UTF-8 -classpath /Users/pkhokhlov/JProjects/benchmark/target/test-classes:/Users/pkhokhlov/.m2/repository/org/openjdk/jmh/jmh-core/1.21/jmh-core-1.21.jar:/Users/pkhokhlov/.m2/repository/net/sf/jopt-simple/jopt-simple/4.6/jopt-simple-4.6.jar:/Users/pkhokhlov/.m2/repository/org/apache/commons/commons-math3/3.2/commons-math3-3.2.jar:/Users/pkhokhlov/.m2/repository/org/openjdk/jmh/jmh-generator-annprocess/1.21/jmh-generator-annprocess-1.21.jar:/Users/pkhokhlov/.m2/repository/org/springframework/spring-expression/4.3.9.RELEASE/spring-expression-4.3.9.RELEASE.jar:/Users/pkhokhlov/.m2/repository/org/springframework/spring-core/4.3.9.RELEASE/spring-core-4.3.9.RELEASE.jar:/Users/pkhokhlov/.m2/repository/commons-logging/commons-logging/1.2/commons-logging-1.2.jar org.openjdk.jmh.Main org.spel.bug.SpelBenchmark.*\n1. JMH version: 1.21\n1. VM version: JDK 1.8.0_151, Java HotSpot(TM) 64-Bit Server VM, 25.151-b12\n1. VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Home/jre/bin/java\n1. VM options: -Dfile.encoding=UTF-8\n1. Warmup: 2 iterations, 10 s each\n1. Measurement: 2 iterations, 10 s each\n1. Timeout: 10 min per iteration\n1. Threads: 1 thread, will synchronize iterations\n1. Benchmark mode: Throughput, ops/time\n1. Benchmark: org.spel.bug.SpelBenchmark.spel# Run progress: 0.00% complete, ETA 00:00:40\n1. Fork: 1 of 1\n1. Warmup Iteration   1: 511243.723 ops/s\n1. Warmup Iteration   2: 564409.791 ops/s\nIteration   1: 579457.251 ops/s\nIteration   2: 582177.903 ops/s\nResult ""org.spel.bug.SpelBenchmark.spel"":\n  580817.577 ops/s\n1. Run complete. Total time: 00:00:40REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on\nwhy the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial\nexperiments, perform baseline and negative tests that provide experimental control, make sure\nthe benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.\nDo not assume the numbers tell you what you want them to tell.Benchmark            Mode  Cnt       Score   Error  Units\nSpelBenchmark.spel  thrpt    2  580817.577          ops/s\n```\n\n\xa0\n\n---\n\n**Affects:** 4.3.10\n\n**Attachments:**\n- [benchmark.zip](https://jira.spring.io/secure/attachment/25738/benchmark.zip) (_2.76 kB_)\n\n**Issue Links:**\n- #20324 PropertyOrFieldReference invalidly reuses cached PropertyAccessor\n- #21481 Performance degradation in SPEL expression evaluation\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/4a6e9a55572ae57c0f7eea40ef530855b9ab339d, https://github.com/spring-projects/spring-framework/commit/bfcc1a1f6ae58d3a62765ddd21f6bd5b5182463d, https://github.com/spring-projects/spring-framework/commit/da049f480b2c6543dd8e77821c60197e86d4fcdb, https://github.com/spring-projects/spring-framework/commit/e2ccd55d146c245ee3e6d46783e3c288999894ff\n\n**Backported to:** [4.3.18](https://github.com/spring-projects/spring-framework/milestone/167?closed=1)\n\n0 votes, 5 watchers\n']",['closed'],[6],"['**[Pavel Khokhlov](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel_hp)** commented\n\nProbably problem in method\xa0getSortedClassMethods\n\nhttps://github.com/spring-projects/spring-framework/blob/c44de3c5df5fb57630727d9491dd6ea5ab47563f/spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java#L433\n\nit calls too often and should be cached.\n', '**[Pavel Khokhlov](https://jira.spring.io/secure/ViewProfile.jspa?name=pavel_hp)** commented\n\n`@Juergen` Hoeller\xa0\n\nI have a question. I\'ve checked release version\xa0[4.3.18](https://jira.spring.io/issues/?jql=project+%3D+SPR+AND+fixVersion+%3D+4.3.18)\xa0and I didn\'t find significant difference, look:\n\n**4.3.18.RELEASE**\n\n```\n1. JMH version: 1.21\n1. VM version: JDK 1.8.0_172, Java HotSpot(TM) 64-Bit Server VM, 25.172-b11\n1. VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/jre/bin/java\n1. VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=61697:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8\n1. Warmup: 2 iterations, 10 s each\n1. Measurement: 2 iterations, 10 s each\n1. Timeout: 10 min per iteration\n1. Threads: 1 thread, will synchronize iterations\n1. Benchmark mode: Throughput, ops/time\n1. Benchmark: org.benchmark.dbg.spel.SpelBenchmark.spel# Run progress: 0.00% complete, ETA 00:00:40\n1. Fork: 1 of 1\n1. Warmup Iteration   1: 227388.780 ops/s\n1. Warmup Iteration   2: 256747.696 ops/s\nIteration   1: 257249.790 ops/s\nIteration   2: 256228.128 ops/s\nResult ""org.benchmark.dbg.spel.SpelBenchmark.spel"":\n  256738.959 ops/s\n```\n\n256738.959 ops/s\n\n\xa0\n\n4.3.9.RELEASE\n\n```\n1. JMH version: 1.21\n1. VM version: JDK 1.8.0_172, Java HotSpot(TM) 64-Bit Server VM, 25.172-b11\n1. VM invoker: /Library/Java/JavaVirtualMachines/jdk1.8.0_172.jdk/Contents/Home/jre/bin/java\n1. VM options: -javaagent:/Applications/IntelliJ IDEA.app/Contents/lib/idea_rt.jar=61682:/Applications/IntelliJ IDEA.app/Contents/bin -Dfile.encoding=UTF-8\n1. Warmup: 2 iterations, 10 s each\n1. Measurement: 2 iterations, 10 s each\n1. Timeout: 10 min per iteration\n1. Threads: 1 thread, will synchronize iterations\n1. Benchmark mode: Throughput, ops/time\n1. Benchmark: org.benchmark.dbg.spel.SpelBenchmark.spel# Run progress: 0.00% complete, ETA 00:00:40\n1. Fork: 1 of 1\n1. Warmup Iteration   1: 533753.413 ops/s\n1. Warmup Iteration   2: 589956.066 ops/s\nIteration   1: 585124.048 ops/s\nIteration   2: 583993.328 ops/s\nResult ""org.benchmark.dbg.spel.SpelBenchmark.spel"":\n  584558.688 ops/s\n```\n\n584558.688 ops/s\n\nSo what was fixed? Could you explain it please?\n\n\xa0\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThe change was in the sorted method handling that you pointed out above... we're caching the sorted method array now.\n\nI suppose there is some other hotspot involved too then?\n"", ""**[Kanthi Vaidya](https://jira.spring.io/secure/ViewProfile.jspa?name=kvaidya)** commented\n\nHi Juergen, I saw your code changes for caching the SortedMethods. We don't benefit much if you don't make your ConcurrentHashMap of sorted methods\xa0 a static variable.\n\nEven after making the ConcurrentHashMap a static variable, we still don't get back the original performance of the prior spring versions. It definitely helps of course.\n\nThis is just one hotspot. More benchmarking and profiling is needed to identify other hot spots. And it probably makes sense to add a test case to the CI infrastructure to catch any such degradations.\n\nThis performance degradation, is preventing us from migration to Spring 5.\n"", '**[Kanthi Vaidya](https://jira.spring.io/secure/ViewProfile.jspa?name=kvaidya)** commented\n\n`@juergen`.hoeller can you please reopen this issue?\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nPlease create a new issue as a follow-up to this one. I'll schedule that new issue for 5.1 RC1 then.\n\nBeing at it, I'll rename this issue here to specifically cover the sorted methods cache that has been introduced in 4.3.18.\n""]"
e38c020535dc5d6b326d5e22f8a59dc35ba7361a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/convert/TypeDescriptor.java,Condition_Change,"-				if (anns[i] != otherAnns[i]) {
+				if (!annotationEquals(anns[i], otherAnns[i])) {
+	private boolean annotationEquals(Annotation ann, Annotation otherAnn) {
+		// Annotation.equals is reflective and pretty slow, so let's check identity and proxy type first.
+		return (ann == otherAnn || (ann.getClass() == otherAnn.getClass() && ann.equals(otherAnn)));
+	}
+",6,condition,TypeDescriptor efficiently matches equal annotations as well,"Issue: SPR-15060
",,19626,1,['Annotated method argument matching performance issue [SPR-15060]'],"['**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** opened **[SPR-15060](https://jira.spring.io/browse/SPR-15060?redirect=false)** and commented\n\nPossibly related to #19496\n\n```\n@SpringBootApplication\npublic class So41346616Application {\n\n\tpublic static void main(String[] args) {\n\t\tConfigurableApplicationContext context = SpringApplication.run(So41346616Application.class, args);\n\t\tMessageChannel annotated = context.getBean(""annotated"", MessageChannel.class);\n\t\tMessageChannel notAnnotated = context.getBean(""notAnnotated"", MessageChannel.class);\n\t\tMessage<?> foo = new GenericMessage<>(""foo"");\n\t\tStopWatch watch = new StopWatch();\n\t\twatch.start();\n\t\tfor (int i = 0; i < 10000; i++) {\n\t\t\tannotated.send(foo);\n\t\t}\n\t\twatch.stop();\n\t\twatch.start();\n\t\tfor (int i = 0; i < 10000; i++) {\n\t\t\tnotAnnotated.send(foo);\n\t\t}\n\t\twatch.stop();\n\t\twatch.start();\n\t\tfor (int i = 0; i < 10000; i++) {\n\t\t\tannotated.send(foo);\n\t\t}\n\t\twatch.stop();\n\t\tSystem.out.println(""Annotated: "" + watch.getTaskInfo()[0].getTimeMillis() +\n\t\t\t\t"" not: "" + watch.getTaskInfo()[1].getTimeMillis() +\n\t\t\t\t"" second annotated: "" + watch.getTaskInfo()[2].getTimeMillis());\n\t\tcontext.close();\n\t}\n\n\t@ServiceActivator(inputChannel = ""annotated"")\n\tpublic void with(@Payload String payload) {\n\t}\n\n\t@ServiceActivator(inputChannel = ""notAnnotated"")\n\tpublic void without(String payload) {\n\t}\n\n}\n```\n\n`Annotated: 3521 not: 36 second annotated: 11202`\n\nYourkit pointed me to `ConcurrentReferenceHashMap` and we\'re getting cache misses and adding new entries for each invocation.\n\n---\n\n**Affects:** 4.3.5\n\n**Reference URL:** http://stackoverflow.com/questions/41346616/spring-boot-starter-integration-1-4-3-performance-degradation\n\n**Attachments:**\n- [Screen Shot 2016-12-27 at 10.36.03 AM.png](https://jira.spring.io/secure/attachment/23669/Screen+Shot+2016-12-27+at+10.36.03+AM.png) (_247.62 kB_)\n- [Screen Shot 2016-12-27 at 12.13.01 PM.png](https://jira.spring.io/secure/attachment/23670/Screen+Shot+2016-12-27+at+12.13.01+PM.png) (_187.09 kB_)\n\n**Issue Links:**\n- #19762 Performance Issue with `@ModelAttribute` (_**""is duplicated by""**_)\n- #19496 ConversionService performance regression\n- #19410 AnnotationFormatterFactory should support `@AliasFor`\n- #19493 Improve performance for conversions using a method parameter based type descriptor with annotations\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e38c020535dc5d6b326d5e22f8a59dc35ba7361a, https://github.com/spring-projects/spring-framework/commit/794580ffcdcce68bba114bd639cba60658a9da63\n\n3 votes, 9 watchers\n']",['closed'],[12],"['**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** commented\n\nAfter further debugging, the issue is we never get a hit on the cache because `TypeDescriptor.annotationsMatch()` returns false, even though both descriptors have the ""same"" annotation (but different instances).\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell), could it be that you're not caching the `MethodParameter` instances that you're repeatedly building a `TypeDescriptor` for there? We currently assume cached `MethodParameter` instances for repeated invocations there, since we're actively caching them in all affected places in the core framework.\n\nOf course, we shouldn't have such a regression just because of new `MethodParameter` instances, and I'm going to look at what we can do there. Apparently `Method.getParameterAnnotations()` returns fresh annotation instances every time (not caching them like other annotation lookups in the core reflection APIs), failing our identity check.\n\nThat said, I nevertheless highly recommend `MethodParameter` caching in Spring Integration, in particular if `Method.getParameterAnnotations()` indeed creates fresh annotation instances every time! The annotation creation overhead is worth avoiding there in its own right.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAdding a full `Annotation.equals` check after the identity check in `TypeDescriptor.annotationsMatch` solves the problem. However, this comes at the price of reflective attribute comparisons even in unique cases if there are several methods with the same number of annotations, so I'm still trying to optimize this.\n\nAs per my comment above, all those problems disappear - even cutting down the invocation overhead by a factor of six - when cached `MethodParameter` objects are passed in.\n"", ""**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** commented\n\nJuergen,\n\nThank you for digging this and for the update.\nGary is on PTO this week, although he is on-line from time to time. So, he may provide some feedback eventually.\n\nBut let me share my current concerns if that helps.\n\nWe don't create `MethodParameter` instances all the time. We do that only once during initialization to build a SpEL expression based on the method signature. Everything rest is done via SpEL engine at runtime: https://github.com/spring-projects/spring-integration/blob/master/spring-integration-core/src/main/java/org/springframework/integration/util/MessagingMethodInvokerHelper.java#L692\n\nSo, I'm not sure that our problem is around `MethodParameter`...\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI'm pretty sure that the problem is different `Annotation` instances for the same method parameters, and that can only really come from repeated `Method.getParameterAnnotations()` calls, e.g. through repeated `MethodParameter` creation. In other words, if a shared `MethodParameter` instance came in for each unique declared parameter, you wouldn't see the cache misses in `TypeDescriptor` indicated by Gary above.\n\nIt's worth debugging this in Spring Integration, finding out about potential repeated `MethodParameter` instantiation and repeated `Method.getParameterAnnotations()` calls for repeated invocations of the same handler method. If nothing turns up there, we might indeed have a different problem.\n"", '**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** commented\n\nJuergen,\n\ndoes it say anything to you?\n\n```\nstatic boolean convertArguments(TypeConverter converter, Object[] arguments, Object methodOrCtor,\n\t\t\tInteger varargsPosition) throws EvaluationException {\n\n\tboolean conversionOccurred = false;\n\tif (varargsPosition == null) {\n\t\tfor (int i = 0; i < arguments.length; i++) {\n\t\t\tTypeDescriptor targetType = new TypeDescriptor(MethodParameter.forMethodOrConstructor(methodOrCtor, i));\n\t\t\tObject argument = arguments[i];\n\t\t\targuments[i] = converter.convertValue(argument, TypeDescriptor.forObject(argument), targetType);\n\t\t\tconversionOccurred |= (argument != arguments[i]);\n\t\t}\n      }\n...\n```\n\nThat is where I see `new MethodParameter` in my call stack on each `expression.getValue()`.\n', ""**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** commented\n\n[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) thanks for looking at this. FYI We have a planned activity to move from SpEL to `InvocableHandlerMethod` s for this functionality (at least as an - preferred - option), but that is currently planned for 5.0 only because it's a pretty big change.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nOk, that clarifies it indeed: You're going through SpEL's generic resolution algorithm there which indeed recreates `MethodParameter` instances every time... I'll sort this out through an `Annotation.equals` fallback in `TypeDescriptor`. So your present approach will work properly again as of Spring Framework 4.3.6.\n\nAs a side note, I have no idea why `Method.getParameterAnnotations()` creates fresh `Annotation` instances on every call. Annotations on a `Method` and `Constructor` itself and also on a `Field` are cached by the JVM and therefore prepared for identity comparisons. Just parameter-level annotations aren't :-(\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe check for annotation identity, then same annotation proxy class, then reflective `Annotation.equals` now. This is efficient enough for shared annotations and covers non-identical but equal parameter annotations as well.\n', '**[Gary Russell](https://jira.spring.io/secure/ViewProfile.jspa?name=grussell)** commented\n\nThanks [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) I have confirmed that we are back to 4.3.3 level performance.\n', '**[Mike Noordermeer](https://jira.spring.io/secure/ViewProfile.jspa?name=miken)** commented\n\nIt seems that this bug causes a massive memory leak for us, with 4.3.5. The convertercache contains millions of elements, taking up 500+MB heap space. Not 100% sure it is this bug, but I will try with 4.3.6 to see if that fixes the issue.\n', '**[Mike Noordermeer](https://jira.spring.io/secure/ViewProfile.jspa?name=miken)** commented\n\nI can confirm upgrading to Spring 4.3.6 fixes the problem. For us the problem was not in Spring Integration, but in a `@ModelAttribute` method using `@RequestParam` parameters, like this:\n\n```\n    @ModelAttribute\n    private void populateModel(@RequestParam(required = false) boolean note1Enabled,\n                               @RequestParam(required = false) boolean note2Enabled,\n                               @RequestParam(required = false) boolean note3Enabled,\n...\n```\n\nThis causes a new cache entry for each method execution / parameter. Maybe this is something that needs to be looked into, if the parameter annotations are expected to be cached.\n']"
e3bb06c8783ca45633ee361bb637cc3236471479,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/event/ApplicationListenerMethodAdapter.java,Condition_Change,"-		if (this.method.getParameters().length == 0) {
+		if (this.method.getParameterTypes().length == 0) {",2,condition,Avoid Java8 API,,,,0,N/A,N/A,N/A,N/A,N/A
e4539d9f4003bee0f3cd31dd70b87a32ffb95884,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/RequestResponseBodyMethodProcessor.java,Condition_Change,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-			if (methodParam.getParameterAnnotation(RequestBody.class).required()) {
+			if (checkRequired(methodParam)) {
+	protected boolean checkRequired(MethodParameter methodParam) {
+		return methodParam.getParameterAnnotation(RequestBody.class).required();
+	}
+",6,condition,Add protected method for required RequestBody,,,,0,N/A,N/A,N/A,N/A,N/A
e45d33f9de595d7348f3b4695960cb26bd9255c0,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/DefaultMessageListenerContainer.java,Add_Condition,"+			if (!isRunning() || this.stopCallback != null) {
+				// Not started, already stopped, or previous stop attempt in progress
+				// -> return immediately, no stop process to control anymore.
+				callback.run();
+				return;
+			}",4,condition,DefaultMessageListenerContainer immediately invokes stop callback when not running,"Issue: SPR-14233
",,18807,1,['DefaultLifecycleProcessor hangs on shutdown when stopping with internalJmsListenerEndpointRegistry [SPR-14233]'],"['**[Dirk](https://jira.spring.io/secure/ViewProfile.jspa?name=h3rmanns)** opened **[SPR-14233](https://jira.spring.io/browse/SPR-14233?redirect=false)** and commented\n\nWe are having the following configuration:\n\n- 2 JMSListener\n- XA Transactions with Atomikos or Bitronix\n- Spring Boot 1.3.3\n\nThe application runs fine but after shutdown, the DefaultLifecycleProcessor is waiting 30 seconds and then prints:\n\n```java\n43621 [Thread-7] WARN  org.springframework.context.support.DefaultLifecycleProcessor  - Failed to shut down 1 bean with phase value 2147483647 within timeout of 30000: [org.springframework.jms.config.internalJmsListenerEndpointRegistry]\n```\n\nThis happens only, if one of the JMSListener gets stopped before by doing:\n\n```java\nJmsListenerEndpointRegistry registry = context.getBean(JmsListenerEndpointRegistry.class);\nregistry.getListenerContainer(""MyListener1"").stop();\n```\n\nIf I comment one listener out, or keep both JMSListener running - the timeout does not happen and the application shuts down immediately.\n\nThe app hangs even if no work has been processed. I reduced the JMSListener\nto contain no own business logic at all:\n\n```java\npublic class MyListener {\n\n\t// Die ID wird benoetigt, damit der Listener programmatisch gestoppt werden kann\n\tprotected static final String ID = ""MyListener1"";\n\n\t@JmsListener(id = ID, destination=""MYQUEUE"")\n\tpublic void receiveMessage(Message msg) {\n\t\tSystem.out.println(""Hello!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!"");\n\t}\n}\n```\n\nThe problem arises both with Atomikos and Bitronix.\n\nSo to me, it looks like you need to have 2 JMSListeners and need to stop one of them to reproduce this problem.\n\nAny help would be appreciated.\n\n\n---\n\n**Affects:** 4.2.5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/85675fbe2e8c3418d3f8eb6124a13fbdfb9553a2, https://github.com/spring-projects/spring-framework/commit/85faeef8168baa62beb471be8add5ec539de22f5, https://github.com/spring-projects/spring-framework/commit/09b45d2c0feee9ebdc7c03e3768cf834bf81a195, https://github.com/spring-projects/spring-framework/commit/e45d33f9de595d7348f3b4695960cb26bd9255c0, https://github.com/spring-projects/spring-framework/commit/f83cbff543b3519c9288c1eee0ed3ae7e4c749d2\n']",['closed'],[10],"['**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nThanks for the report, I was able to reproduce the issue. Investigating...\n', '**[Dirk](https://jira.spring.io/secure/ViewProfile.jspa?name=h3rmanns)** commented\n\nGreat - first step to find a solution ;-)\n', ""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nAlright, the issue is fixed on master. [Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller) can you please backport that to `4.2.x`?\n\nIt turns out that `DefaultMessageListenerContainer` was not honouring the stop callback in a particular scenario that was revealed by your use case. Could you please try again in a couple of hours once `4.3.0.BUILD-SNAPSHOT` is available? Or you could wait for the backport and test with `4.2.6.BUILD-SNAPSHOT`. We're releasing these this week so a confirmation would be much appreciated.\n"", ""**[Dirk](https://jira.spring.io/secure/ViewProfile.jspa?name=h3rmanns)** commented\n\nWow - that was really fast! Thanks! I will test it on 4.2.6.BUILD-SNAPSHOT. I will let you know if that's working now for us!\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nA `4.2.6.BUILD-SNAPSHOT` including this fix will be available in about half an hour.... Indeed, please give it a try once available!\n', '**[Dirk](https://jira.spring.io/secure/ViewProfile.jspa?name=h3rmanns)** commented\n\nI would expect that this not completely fixes my issues, since the hang-up happens even if I restart the MessageListenerContainer again. But I will give it a try ;-) .\n', ""**[Dirk](https://jira.spring.io/secure/ViewProfile.jspa?name=h3rmanns)** commented\n\nAm I looking in the wrong place, or is the build still from yesterday 13:20 o'clock?\n\nhttp://repo.spring.io/snapshot/org/springframework/spring-core/4.3.0.BUILD-SNAPSHOT/spring-core-4.3.0.BUILD-20160502.132016-367.jar\nand\nhttp://repo.spring.io/snapshot/org/springframework/spring-core/4.2.6.BUILD-SNAPSHOT/spring-core-4.2.6.BUILD-20160502.132143-47.jar\n\nBut comparing the time,  that could nevertheless contain your changes, does it?\n"", ""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nBoth builds have completed successfully within 24h so they will contain the fix. Have you tried and it didn't work so you're asking if the fix is in? That's quite confusing...\n"", '**[Dirk](https://jira.spring.io/secure/ViewProfile.jspa?name=h3rmanns)** commented\n\nSorry for the confusion and yes, I tried this version already yesterday and still had problems.\nBut it must have been my fault - today the error messages are completely vanished. I can stop/start MessageListenerContainer like a charme and stopping\nthe Spring-Boot Application does not lead to hangs anymore.\n\nThanks for this quick fix and your great work! I know why we are planning to switch from JEE/Appservers to Spring/Spring-Boot wherever possible ;-)\n', ""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nAlright, that's great to hear. Thanks for testing!\n""]"
e48ec4fcd333a3f2149f8966b367e51322d9ff90,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,Condition_Change,"-					if (checkGetParameterType) {
+					if (checkGetParameterType &&
+							!(jdbcDriverName.startsWith(""Oracle"") && dbmd.getDriverMajorVersion() >= 12)) {
+						// Register JDBC driver with no support for getParameterType, except for the
+						// Oracle 12c driver where getParameterType fails for specific statements only
+						// (so an exception thrown above does not indicate general lack of support).",3,condition,StatementCreatorUtils always tries getParameterType on Oracle 12c driver,"Issue: SPR-13825
",,18398,1,['Oracle 12c JDBC driver throws inconsistent exception from getParameterType (affecting setNull calls) [SPR-13825]'],"[""**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tom.jahncke@gfs.com)** opened **[SPR-13825](https://jira.spring.io/browse/SPR-13825?redirect=false)** and commented\n\nThis relates to: #15726\n\nUsing the oracle driver (ojdbc7 version 12.1.0.2.0) I ran across the following issue (I opened a support case with Oracle on the root cause of the issue.  SR 3-11927085951)\n\nNormally the Oracle driver works fine with following code:\n\n```\nsqlTypeToUse = ps.getParameterMetaData().getParameterType(paramIndex); (from setNull in StatementCreatorUtils line 262)  \n```\n\nHowever, it is possible for a statement to cause Oracle to throw an exception than then all statements going forward no longer use the JDBC 3.0 features to resolve the sql data type for null values.\n\nI understand why driversWithNoSupportForGetParameterType exists and how it helps performance.  However, since it is black or white once an exception is thrown the setNull never tries to use the JDBC 3.0 features again (until the app is restarted).\n\nI can think of a few hackish ways to address this, but I am hoping you can come with a solid solution that is solid  (My hackish ideas are along the lines or allowing a driver name to be injected that doesn't get added to the global set of drivers not supported.)\n\nFYI, just by having an insert statement with a qualified table name causes the following exception with the oracle JDBC driver.  (Without qualification no exception.):\n\n```\njava.sql.SQLFeatureNotSupportedException: Unsupported feature\n\tat oracle.jdbc.driver.OracleParameterMetaData.checkValidIndex(OracleParameterMetaData.java:176)\n\tat oracle.jdbc.driver.OracleParameterMetaData.getParameterType(OracleParameterMetaData.java:327)\n\tat org.springframework.jdbc.core.StatementCreatorUtils.setNull(StatementCreatorUtils.java:262)\n```\n\n---\n\n**Affects:** 4.2.4\n\n**Attachments:**\n- [Oralce-JDBC-Bug 22983939.pdf](https://jira.spring.io/secure/attachment/23517/Oralce-JDBC-Bug+22983939.pdf) (_186.38 kB_)\n\n**Issue Links:**\n- #16013 PreparedStatement#getParameterMetaData() calls may trigger unwanted side effects\n- #17488 Regression in handling of String passed as Types.OTHER to JdbcTemplate\n- #15726 performancedrop due to repeated JDBC 3.0 getParameterType calls in setNull in StatementCreatorUtils\n- #16854 INSERT SELECT of large CLOB causes ORA-01461 on setString\n- #18688 Java boolean is not handled correctly when used with Oracle JDBC driver\n- #18764 Regression: Insert statement fails with inconsistent datatypes on Oracle 12c driver\n- #19143 Avoid repeated getParameterType calls for setNull with Oracle 12c driver\n- #19196 Protect against getParameterType cursor leak with Oracle 12c JDBC driver\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e48ec4fcd333a3f2149f8966b367e51322d9ff90, https://github.com/spring-projects/spring-framework/commit/e1bdf5577e94616786e07d6bcf7d424399dd2704\n\n0 votes, 6 watchers\n""]",['closed'],[29],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI suppose we will go with explicit detection of compliant Oracle JDBC driver versions where we can reliably assume that they do support `getParameterType`, so a `SQLFeatureNotSupportedException` can be considered as a temporary exception that does not indicate general lack of support.\n\nThat said, the Oracle driver\'s choice of exception is really misleading there. It means to say ""not supported for this particular statement"" but chooses to throw an exception that indicates general lack of a particular JDBC feature... Anyway, even if that exception remains, we can certainly work around it.\n\nJuergen\n', '**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tom.jahncke@gfs.com)** commented\n\nI agree that Oracle choice is very misleading and that getParameterType should work even when the table name is qualified.  Thank you for looking into this so quickly!\n\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAddressed through a `getDriverMajorVersion` check for 12 and above on the Oracle JDBC driver. I'll backport this to 4.2.x right away; please give the upcoming `4.2.5.BUILD-SNAPSHOT` a try and let me know whether it works for you in your actual Oracle scenario!\n\nJuergen\n"", '**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tom.jahncke@gfs.com)** commented\n\nI tested the fix with 4.2.5.BUILD-SNAPSHOT and it worked well.  Thank you again for the quick turn around on this fix!!\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAlright, thanks for the immediate feedback!\n\nJuergen\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWhile this has been backported to 4.2.x, we won't backport it to the 3.2.x line since many other recent JDBC refinements haven't been backported there either. Generally, please upgrade to 4.2+ for proper Oracle 12 support.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n[Tom.Jahncke@gfs.com](https://jira.spring.io/secure/ViewProfile.jspa?name=Tom.Jahncke@gfs.com), since we have a side effect of this reported in #18764, could you please clarify whether you are using the Oracle 12 JDBC driver against an actual Oracle 12 database there?\n', ""**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tjahncke)** commented\n\nThis was against a 11.2.0.4 Oralce database with the Oracle 12 JDBC driver.  FYI, Oracle did eventually acknowledge this bug and created a patch for the underlying bug, however, that won't be part of their standard JDBC driver until the next official release of their driver.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAlright, thanks for the clarification... It looks like the Oracle 12 driver not only sometimes throws exceptions against the Oracle 11 database but even sometimes returns invalid values (according to #18764). We'll see what we can do to workaround that part.\n"", '**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tjahncke)** commented\n\nOracle JDBC has yet another bug :(  This results in a cursor leak when the getParameterMetaData method throws an exception.  The cursor leak in my situation was noticed when the program was getting java.sql.SQLException: ORA-01000: maximum open cursors exceeded.\n\nOracle does have a patch for this as for April 2016.  You can look up oracle doc: ""Cursor Leak / ORA-1000 From PreparedStatement.getMetaData() Method On Malformed Statements (Doc ID 2124104.1)"" at support.oracle.com for more information.\n\nI am commenting here for visibility sake, as the Oracle docs don\'t show up in a Google search and I spend an entire day dealing with this.  Hopefully, this saves someone else time.\n', '**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tjahncke)** commented\n\n`@Juergen` Hoeller, based on what I found and represented in the previous comment I am wondering if this feature needs to rolled back (or replace with a property that can be turned on to always attempt to use the meta data from the prepared statement.)  I am concerned when users of Spring upgrade to 4.2.5+ they will have the potential for a cursor leak which could be a ticking time bomb for the database session.\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe have ""spring.jdbc.getParameterType.ignore"" already... Do you see a need for something beyond that?\n\nThe behavior was a bit weird before when we would only stop trying `getParameterType` once one of Oracle 12c\'s exceptions gets thrown from it... so we might use it for hours and then suddenly stop using it. The revised behavior that we currently have is more predictable from that perspective.\n', '**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tjahncke)** commented\n\nI agree with what you stated.  The risk / challenge is that every time getParameterMetaData throws an exception Oracle is leaving an open cursor behind, shame Oracle. Oracle has been aware of this bug since 2014 and they have a one off patch you can apply, but you have to seek this out.  This will not be transparent to users and may not even be noticed until application gets to production.  What makes this even worse is Oracle seems to have lots of situations where the SQL runs fine, but the getParameterMetaData throws an exception :(\n\nI am aware of spring.jdbc.getParameterType.ignore, what i was suggesting was a parameter like spring.jdbc.getParameterType.always (default to false) and then remove the Oracle driver / version check in StatementCreatorUtils and instead check to see if this variable is set.\n\nBy the way, I am content leaving the code the way it is as it is working for me because I have applied the patch from Oracle.  I am just attempting to consider the larger community.  I leave the decision in your very capable hands.\n\n', ""**[Felix Barnsteiner](https://jira.spring.io/secure/ViewProfile.jspa?name=axe-felix)** commented\n\nAfter upgrading to the latest spring version I also ran into the ticking time bomb of `java.sql.SQLException: ORA-01000` where after a while my application would not be able to respond to requests anymore. Setting `spring.jdbc.getParameterType.ignore` helped, but it took me a while to figure out what was going on. I'd suggest to revert or rethink this change. Just for the record, I'm using oracle driver 12.1.0.2 with Oracle 11.2.0.4.0.\n"", '**[Gopi Popuri](https://jira.spring.io/secure/ViewProfile.jspa?name=gpopuri81@gmail.com)** commented\n\nWe are also facing java.sql.SQLException: ORA-01000  after upgrading the latest version.. Our configuration also same as Felix..\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've created #19196 as a follow-up to this issue, considering more defensive - but still consistent - default behavior when running against Oracle 12c. It seems the only way out is to deactivate all `getParameterType` access by default against that driver version, opting in through explicitly setting `spring.jdbc.getParameterType.ignore` to `false` instead (which would then consistently use `getParameterType` even if sometimes an exception gets thrown, as per the intent of the original issue here).\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nFrom all reports above and in #18764, it seems that this only occurs with the Oracle 12.x JDBC driver against an Oracle 11.x database system. Has anybody got insight into whether this happens against an Oracle 12.x database as well? [Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tjahncke), does the Oracle support ticket for the patch mention affected database versions?\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nA similar kind of leak for `getTables` seems to happen against both database versions: https://community.oracle.com/thread/3774048\n', '**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tom.jahncke@gfs.com)** commented\n\nThe Oracle docs on the bug are related to the JDBC driver affects RDMBS version 12.1.0.2 (in addition to the issues we are seeing with 11.2.0.4 RDMBS versions.)\n\n', '**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tom.jahncke@gfs.com)** commented\n\nHere is the Oracle write up on the bug.  They do have a patch for this, but you have to contact Oracle directly :(  They only make new version of the JDBC driver in conjunction with a new version of the database.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nSo they're only going to ship that fix once an Oracle 13 JDBC driver gets released? Which might take a further year or two? **sigh**\n\nWith the recent reports here and considering that #18764 is still open, it looks like we have no other choice than to ignore `getParameterType` on Oracle 12c by default. I intend to do that consistently though, not even trying `getParameterType` unless we get an explicit opt-in.\n\nIt's a shame that such an old JDBC feature - dating back to JDBC 3.0 in JDK 1.4, making it 14 years old (!) - still does not work properly today :-(\n"", '**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tom.jahncke@gfs.com)** commented\n\nI think they would release the patch when the release 12.2 (which was suppose to be this summer, but I believe is delayed.)\n\nI fully agree it is such a shame and makes me even more disappointed in Oracle.\n\nI agree with your proposed approach.\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nRevised for 4.3.3 and 4.2.8 now: `StatementCreatorUtils` does not use `getParameterType` on any Oracle driver by default now. If you're on 12c (possibly 12.2 or a custom patch) and would like it to be used, specify `spring.jdbc.getParameterType.ignore=false`. Since those calls seem to be expensive as well, it is arguably better to only use them when actually needed anyway.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tjahncke), all, this is available in the latest `4.3.3.BUILD-SNAPSHOT` and `4.2.8.BUILD-SNAPSHOT` now. Please give it a try, both with no custom setting at all (which should restore pre-4.2.5 behavior in a more consistent form through never attempting a getParameterType call on Oracle by default) and with a `spring.jdbc.getParameterType.ignore=false` override (which should reveal the leak again - or work fine if you got a patched driver).\n', ""**[Kuassi Mensah](https://jira.spring.io/secure/ViewProfile.jspa?name=kmensah)** commented\n\nFull disclosure: I work for Oracle.\n\nRegarding the following comment\nThey only make new version of the JDBC driver in conjunction with a new version of the database.`@Mention` someone by typing their name...\nI'd like to say that this is untrue, we furnish patches for bugs all the time for customers with a support contract however, if the expectation is to make these patches available on OTN, that's not the purpose of OTN (iow, it is not the place to get bug fixes).\n"", '**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tjahncke)** commented\n\n`@Kuassi` Mensah, what I was trying to indicate that when a bug is fixed the standard oracle JDBC driver jar does get the patch until the next major release (such as 12.2).  So, customers of Oracle have to encounter the bug first hand and they look for a patch if one exists for their issue.\n', '**[Kuassi Mensah](https://jira.spring.io/secure/ViewProfile.jspa?name=kmensah)** commented\n\nBug fixes are also picked up by intermediate patchsets (4th digit) e.g., 12.1.0.2.\n', '**[Tom Jahncke](https://jira.spring.io/secure/ViewProfile.jspa?name=tjahncke)** commented\n\n`@Kuassi`, are bugs release for the JDBC Oracle driver independently of the patchset for the Oracle database?  My disappointment with Oracle is that I encounter this issue which they had a patch for that was was released months before I encounter the issue.  So, I had to encounter the pain just to find out there was a patch I could request and apply.  This took several hours (probably days worth of wasted time.)  There are obviously others encountering the same Oracle JDBC driver bug and wasting time when there is a known fix.\n\n`@Jurergen`, if this is way off topic feel free to tell us to take up this discussion off line.\n', '**[Kuassi Mensah](https://jira.spring.io/secure/ViewProfile.jspa?name=kmensah)** commented\n\nYes, bug fixes are posted indepedently of patch sets and available in a repository for supported customers.\n\nI understand your frustration; your experience is not the way things work. When you submit a technical assistance request (a.k.a. TAR), the support engineer should, after investigation, tell you whether this is a bug or not; if so, whether ther already is a fix or not; if so, point you to the fix. THis should only take the time o investigate the TAR and the time to pull the  fix and apply.\n\nBest, Kuassi\n']"
e53c2c6331be891b19bf90fc8cc0d2c194d88615,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ClassUtils.java,Condition_Change,"-			if (lastDotIndex != -1) {
+			int previousDotIndex = name.lastIndexOf(PACKAGE_SEPARATOR, lastDotIndex -1);
+			if (lastDotIndex != -1 && previousDotIndex != 1 && Character.isUpperCase(name.charAt(previousDotIndex + 1))) {",3,condition,Reduce nested class lookups in ClassUtils,"Prior to this commit, `ClassUtils#forName` would always attempt to
resolve the given class name as a nested type. For example, searching
for `org.example.Spring` would try to resolve:

* `org.example.Spring`
* if not available, try `org.example$Spring` as well

Java classes usually start with uppercase letters, so this additional
lookup can be costly and not very useful.

This commit only attempts nested class lookups when the previous segment
starts with an uppercase. So `org.example.Spring.Issue` will look for
`org.example.Spring$Issue`, but `org.example.Spring` will not.

Closes gh-31258
",,31258,1,['Reduce nested class lookups in ClassUtils'],"[""While working on #31213, I have noticed that Framework performs more class lookups than we thought.\r\n\r\nFor example, we need to register reflection on `jakarta.inject.Inject` types; even if the type is not present on the classpath at build time, the application might try to load it at runtime anyway. If the class is not present at runtime, `ClassUtils#forName` will try to load both `jakarta.inject.Inject` and `jakarta.inject$Inject`.\r\n\r\nWhile I understand the rationale for nested classes, I think we need to consider the following proposals:\r\n\r\n1. This is the expected behavior, so we'll need to amend our reflection hints engine to automatically register nested class variants no matter what. This could be the best solution for our 6.0.x branch.\r\n2. As part of 6.1, we could consider toning things down and only attempting to resolve nested classes if the previous segment starts with a capital letter (which is more typical for a class name), like `org.example.Spring.Issue` -> `org.example.Spring$Issue`. This could also benefit most JVM applications by reducing the amount of unnecessary lookups.\r\n3. Eliminate nested classes entirely; I'm not sure this is the right approach as we're likely to break existing apps for no added benefit.\r\n\r\nAny opinion @jhoeller @snicoll ?""]",['closed'],[2],"['Only trying the nested class syntax in case of an upper-case segment before looks like a good way out, covering the common cases that we are trying to optimize for.', ""Thanks Juergen, I'll use this issue to apply that change in 6.1.""]"
e5475d698a8a861a03a18c24de16e3e4f0d22f72,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/PropertyEditorRegistrySupport.java,"Add_Condition, Condition_Change","- * Copyright 2002-2020 the original author or authors.
+ * Copyright 2002-2021 the original author or authors.
-				for (Iterator<Class<?>> it = this.customEditors.keySet().iterator(); it.hasNext() && editor == null;) {
-					Class<?> key = it.next();
+				for (Map.Entry<Class<?>, PropertyEditor> entry : this.customEditors.entrySet()) {
+					if (editor != null) {
+						break;
+					}
+					Class<?> key = entry.getKey();
-						editor = this.customEditors.get(key);
+						editor = entry.getValue();",9,"condition, iteration",Iterate over Map's entrySet() instead of keySet() in PropertyEditorRegistrySupport,"Closes gh-27591
",,27591,1,['Iterate over Map.entrySet() instead of Map.keySet() in PropertyEditorRegistrySupport'],['Tiny optimization is possible using `Map.entrySet()` instead of `Map.keySet()`'],['closed'],[1],['This has been merged into `5.3.x` and `main`.\r\n\r\nThanks']
e565d2cabb01539933195b0d1bc3b55992fb9c84,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/support/PropertySourcesPlaceholderConfigurer.java,Condition_Change,"-				if (this.ignoreUnresolvablePlaceholders && (this.environment instanceof ConfigurableEnvironment)) {
-					ConfigurableEnvironment configurableEnvironment = (ConfigurableEnvironment) this.environment;
+				if (this.ignoreUnresolvablePlaceholders &&
+						(this.environment instanceof ConfigurableEnvironment configurableEnvironment)) {",4,condition,"Apply ""instanceof pattern matching"" in PropertySourcesPlaceholderConfigurer","See gh-27947
",,27947,1,['PropertySourcesPlaceholderConfigurer ignores ignoreUnresolvablePlaceholders flag'],"['## Overview\r\n\r\nIf a `PropertySourcesPlaceholderConfigurer` bean has its `ignoreUnresolvablePlaceholders` flag set to `true`, that flag is not always honored when asking the `Environment` to resolve a property containing placeholders.\r\n\r\nAs a consequence, given a property declared as `my.app.var = ${var}` _without_ a corresponding `var` property declared, an attempt to resolve `@Value(""${my.app.var}"")` will result in the following exception.\r\n\r\n```\r\njava.lang.IllegalArgumentException: Could not resolve placeholder \'var\' in value ""${var}""\r\n```\r\n\r\n## Related Issues\r\n\r\n- #9628\r\n\r\n## Deliverables\r\n\r\n- [x] Ensure that unresolvable placeholders are always ignored if the `ignoreUnresolvablePlaceholders` flag in `PropertySourcesPlaceholderConfigurer` is set to `true`.\r\n\r\n']",['closed'],[0],[]
e7f89f87c14bb65a83518508a791dc68e681ddd4,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/StringUtils.java,Condition_Change,"-		if (parts.length >= 2) {
+		if (parts.length > 2) {",2,condition,Fix off-by-one error in parseLocaleString,"Fix off-by-one error in StringUtils.parseLocaleString()

Issue: SPR-10364
",,14996,1,['Off by one error in StringUtils.parseLocaleString [SPR-10364]'],"['**[Zhihong Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=zhihong)** opened **[SPR-10364](https://jira.spring.io/browse/SPR-10364?redirect=false)** and commented\n\nIf you have locale ""`fr_fr`"", Spring will change it into ""`fr_fr_fr`"". The bug is in this method in `StringUtils.java`,\n\n```java\npublic static Locale parseLocaleString(String localeString) {\n        String[] parts = tokenizeToStringArray(localeString, ""_ "", false, false);\n        String language = (parts.length > 0 ? parts[0] : """");\n        String country = (parts.length > 1 ? parts[1] : """");\n        validateLocalePart(language);\n        validateLocalePart(country);\n        String variant = """";\n        if (parts.length >= 2) {\n                // There is definitely a variant, and it is everything after the country\n                // code sans the separator between the country code and the variant.\n                int endIndexOfCountryCode = localeString.indexOf(country) + country.length();\n                // Strip off any leading \'_\' and whitespace, what\'s left is the variant.\n                variant = trimLeadingWhitespace(localeString.substring(endIndexOfCountryCode));\n                if (variant.startsWith(""_"")) {\n                        variant = trimLeadingCharacter(variant, \'_\');\n                }\n        }\n        return (language.length() > 0 ? new Locale(language, country, variant) : null);\n}\n```\n\nIt assumes that language and country are never the same but in case of ""fr_fr"", they are the same.\n\n\n---\n\n**Affects:** 3.1 GA\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e7f89f87c14bb65a83518508a791dc68e681ddd4\n\n1 votes, 3 watchers\n']",['closed'],[3],"['**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\nHave you tried the latest Spring 3.2 release? It looks like this bug might be a duplicate of #14056.\n', '**[Zhihong Zhang](https://jira.spring.io/secure/ViewProfile.jspa?name=zhihong)** commented\n\nJust checked lastest release v3.2.1.RELEASE and the bug is fixed.\n\nHowever, the code still has a logic bug. This condition is wrong,\n\n    if (parts.length >= 2) {\n\nIt should be\n\n    if (parts.length > 2) {\n\nWhen there are only 2 parts, there is no variant. You can mark it as fixed.\n', ""**[Stevo Slavić](https://jira.spring.io/secure/ViewProfile.jspa?name=sslavic)** commented\n\nBetter change issue type from bug to improvement.\nI've created [a pull request](https://github.com/SpringSource/spring-framework/pull/255) which optimizes parsing locale string, to skip variant processing when it's clear that locale string doesn't contain variant part.\n""]"
e83d495cbba0796b1f2269b9ad7a02ffac1ca5a8,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/SimpleAliasRegistry.java,Condition_Change,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2015 the original author or authors.
-				if (resolvedAlias.equals(resolvedName)) {
+				if (resolvedAlias == null || resolvedName == null || resolvedAlias.equals(resolvedName)) {",2,condition,SimpleAliasRegistry prevents NPE for alias resolved to null,"Issue: SPR-13016
",,17607,1,['NPE for alias resolved to null in SimpleAliasRegistry [SPR-13016]'],"['**[David J. M. Karlsen](https://jira.spring.io/secure/ViewProfile.jspa?name=david@davidkarlsen.com)** opened **[SPR-13016](https://jira.spring.io/browse/SPR-13016?redirect=false)** and commented\n\nUseCase:\nI have to override a property (during integration-testing) to be null instead of another value defined in a propertyfile for use with the propertyplaceholderconfigurer.\nWhen doing so this will result in a NPE at SimpleAliasRegistry in line 125 here:\n\n```\nif (resolvedAlias.equals(resolvedName)) {\n\t\t\t\t\tthis.aliasMap.remove(alias);\n\t\t\t\t}\n```\n\nbecause resolvedAlias is null\n\n\n---\n\n**Affects:** 3.2.13, 4.1.6\n\n**Backported to:** [3.2.14](https://github.com/spring-projects/spring-framework/milestone/102?closed=1)\n']",['closed'],[0],[]
e8486e2afe6e49f5597313da8a4e4f37e2029bc2,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/asm/TypePath.java,Add_Condition,"+                if (i < n && typePath.charAt(i) == ';') {
+                    i += 1;
+                }
-     * argument index in decimal form.
+     * argument index in decimal form followed by ';'.
-                result.append(getStepArgument(i));
+                result.append(getStepArgument(i)).append(';');",5,condition,Tracking ASM 5.0.4 development: Fix for ASM issue 317539,"Issue: SPR-12255
",,16869,1,['Tracking ASM 5.0.4 development [SPR-12255]'],['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-12255](https://jira.spring.io/browse/SPR-12255?redirect=false)** and commented\n\n* Fix for ASM issue 317539 (http://forge.ow2.org/tracker/?func=detail&aid=317539&group_id=23&atid=100023)\n\n---\n\n**Issue Links:**\n- #17076 Tracking ASM 5.0.4 development (continued)\n\n**Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1)\n'],['closed'],[0],[]
e870c9a39251898f0747f9a591595134bbd16278,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/HandlerExecutionChain.java,Add_Condition,"- * Copyright 2002-2010 the original author or authors.
+ * Copyright 2002-2012 the original author or authors.
+import org.springframework.web.context.request.async.AbstractDelegatingCallable;
-					chain.addDelegatingCallable(asyncInterceptor.getAsyncCallable(request, response, this.handler));
+					AbstractDelegatingCallable callable = asyncInterceptor.getAsyncCallable(request, response, this.handler);
+					if (callable != null) {
+						chain.addDelegatingCallable(callable);
+					}",6,condition,Reduce logging in HandlerExecutionChain,"Before this change the HandlerExecitionChain logged errors each time a
an AsyncHandlerInterceptor returned a null async Callable, a condition
which is acceptable.

SPR-9524
",,14158,1,['Excessive logging if AsyncHandlerInterceptor#getAsyncCallable returns null [SPR-9524]'],"[""**[Peter De Wachter](https://jira.spring.io/secure/ViewProfile.jspa?name=pdewacht)** opened **[SPR-9524](https://jira.spring.io/browse/SPR-9524?redirect=false)** and commented\n\nI'm experimenting with the new async servlet support and created an AsyncHandlerInterceptor with a getAsyncCallable method that always returns null. Returning null is allowed according to the JavaDoc.\n\nNow with every request Spring logs the following exception with severity error. The interceptor and the website seem to function normally, but the logging is quite annoying.\n\n2012-06-20 17:52:15,154 ERROR [http-bio-443-exec-22] o.s.w.s.HandlerExecutionChain [HandlerExecutionChain.java:176] HandlerInterceptor.addAsyncCallables threw exception\njava.lang.IllegalArgumentException: Callable required\nat org.springframework.util.Assert.notNull(Assert.java:112) ~[spring-core-3.2.0.M1.jar:3.2.0.M1]\nat org.springframework.web.context.request.async.AsyncExecutionChain.addDelegatingCallable(AsyncExecutionChain.java:130) ~[spring-web-3.2.0.M1.jar:3.2.0.M1]\nat org.springframework.web.servlet.HandlerExecutionChain.addDelegatingCallables(HandlerExecutionChain.java:173) ~[spring-webmvc-3.2.0.M1.jar:3.2.0.M1]\nat org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:944) [spring-webmvc-3.2.0.M1.jar:3.2.0.M1]\nat org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:859) [spring-webmvc-3.2.0.M1.jar:3.2.0.M1]\nat org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:883) [spring-webmvc-3.2.0.M1.jar:3.2.0.M1]\nat org.springframework.web.servlet.FrameworkServlet.doPost(FrameworkServlet.java:792) [spring-webmvc-3.2.0.M1.jar:3.2.0.M1]\n[...]\n\n\n---\n\n**Affects:** 3.2 M1\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/e870c9a39251898f0747f9a591595134bbd16278\n""]",['closed'],[0],[]
e87e03c539b13a709a4019369a396949db3ac4e8,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/context/annotation/ConfigurationClassPostProcessor.java,Remove_Condition,"-		if (configBeanDefs.isEmpty()) {
+		if (configBeanDefs.isEmpty() || IN_NATIVE_IMAGE) {
-		if (IN_NATIVE_IMAGE) {
-			throw new BeanDefinitionStoreException(""@Configuration classes need to be marked as "" +
-					""proxyBeanMethods=false. Found: "" + configBeanDefs.keySet());
-		}",6,condition,Refine ConfigurationClassPostProcessor behavior in native images,"This commit refines ConfigurationClassPostProcessor behavior in
native images by skipping configuration classes enhancement
instead of raising an error.

See spring-projects-experimental/spring-graalvm-native#248 for
more details.

Closes gh-26236
",,"26236, 248",2,"['Refine ConfigurationClassPostProcessor behavior in native images', 'Fix scope of model attributes when including JSP']","['This issue intends to refine `ConfigurationClassPostProcessor` behavior in native images by skipping configuration classes enhancement instead of raising an error. See spring-projects-experimental/spring-graalvm-native#248 for more details.', 'Prior to this commit, setting model attribute in controller of\nincluded JSP would result in overwriting the value in parent model if\nthe set value was null.\n\nThis is because the method\nDispatcherServlet.restoreAttributesAfterInclude restores after include\nonly those attributes that are currently present in request, but\nsetting the value to null in child controller leads to removing of the\nattribute from request.\n\nNow the removed attributes are added back after include.\n\nIssue: SPR-10360\n\nI have signed and agree to the terms of the SpringSource Individual\nContributor License Agreement.\n']","['closed', 'closed']","[0, 1]","[""I've resolved this in a slightly different way. Thanks for the fix!\n""]"
e9413b93c6d24a250cc3d67c94f9cd87aef2836a,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/autoproxy/BeanFactoryAdvisorRetrievalHelper.java,Condition_Change,"-						if (rootCause instanceof BeanCurrentlyInCreationException) {
-							BeanCreationException bce = (BeanCreationException) rootCause;
+						if (rootCause instanceof BeanCurrentlyInCreationException bce) {",3,condition,"Apply ""instanceof pattern matching"" in BeanFactoryAdvisorRetrievalHelper",,,,0,N/A,N/A,N/A,N/A,N/A
e9819b7535841a27586edfcbe83c5ab1adf47339,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/method/annotation/AbstractMessageReaderArgumentResolver.java,Add_Condition,"- * Copyright 2002-2018 the original author or authors.
+ * Copyright 2002-2019 the original author or authors.
+		if (mediaType.isCompatibleWith(MediaType.APPLICATION_FORM_URLENCODED)) {
+			return Mono.error(new IllegalStateException(
+					""In a WebFlux application, form data is accessed via ServerWebExchange.getFormData().""));
+		}
+",5,condition,Raise ISE if @RequestBody is used for form data,"Closes gh-22486
",,22486,1,['@RequestBody raises IllegalStateException for form data'],"['**Affects:** Spring Boot 2.1.3.RELEASE\r\n\r\n---\r\nHello!\r\n\r\nI noticed something interesting. When you make a mistake in WebFlux application, you don\'t see real exception, instead you see the same exception every-time:\r\n\r\n```\r\n2019-02-27 16:41:41.686 ERROR 28059 --- [or-http-epoll-1] a.w.r.e.AbstractErrorWebExceptionHandler : [2af64f7c] 500 Server Error for HTTP POST ""/hello""\r\n\r\njava.lang.IllegalStateException: Only one connection receive subscriber allowed.\r\n        at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:271) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.netty.channel.FluxReceive.subscribe(FluxReceive.java:121) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:132) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.netty.ByteBufFlux.subscribe(ByteBufFlux.java:294) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:132) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.netty.ByteBufFlux.subscribe(ByteBufFlux.java:294) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:132) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:56) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:44) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:56) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:56) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:56) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n...\r\n```\r\n\r\n\r\nExample controller:\r\n\r\n```java\r\npackage app.controllers;\r\n\r\nimport org.springframework.web.bind.annotation.PostMapping;\r\nimport org.springframework.web.bind.annotation.RequestBody;\r\nimport org.springframework.web.bind.annotation.RestController;\r\n\r\n@RestController\r\npublic class HelloWorld {\r\n\r\n    @PostMapping(""/hello"")\r\n    public String handle(@RequestBody String body)  {\r\n        System.out.printf(""\\n\\n\\nbody: %s\\n\\n\\n\\n"", body);\r\n        return ""Hello WebFlux"";\r\n    }\r\n}\r\n```\r\n\r\nIf you make correct request you will see correct response:\r\n\r\n```\r\n$ curl -i -w ""\\n\\n"" -XPOST -d ""asd"" -H ""Content-Type: application/json"" http://localhost:8080/hello\r\nHTTP/1.1 200 OK\r\nContent-Type: text/plain;charset=UTF-8\r\nContent-Length: 13\r\n\r\nHello WebFlux\r\n```\r\n\r\nIf you make a mistake you will receive 500 and lot\'s of logs that don\'t tell you what has happened:\r\n\r\n```\r\ncurl -i -w ""\\n\\n"" -XPOST -d ""asd"" http://localhost:8080/hello\r\nHTTP/1.1 500 Internal Server Error\r\nContent-Type: application/json;charset=UTF-8\r\nContent-Length: 16111\r\n\r\n{""timestamp"":""2019-02-27T16:12:13.095+0000"",""path"":""/hello"",""status"":500,""error"":""Internal Server Error"",""message"":""Only one connection receive subscriber allowed."",""trace"":""java.lang.IllegalStateException: Only one connection receive subscriber allowed.\\n\\tat reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:271)\\n\\tat reactor.netty.channel.FluxReceive.subscribe(FluxReceive.java:121)\\n\\tat reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62)\\n\\tat reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:132)\\n\\tat reactor.netty.ByteBufFlux.subscribe(ByteBufFlux.java:294)\\n\\tat \r\n\r\n...\r\n```\r\n\r\nYou can see the same exception in application logs:\r\n\r\n<details>\r\n\r\n```\r\n2019-02-27 17:12:13.109 ERROR 32312 --- [or-http-epoll-3] a.w.r.e.AbstractErrorWebExceptionHandler : [8aba656e] 500 Server Error for HTTP POST ""/hello""\r\n\r\njava.lang.IllegalStateException: Only one connection receive subscriber allowed.\r\n        at reactor.netty.channel.FluxReceive.startReceiver(FluxReceive.java:271) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.netty.channel.FluxReceive.subscribe(FluxReceive.java:121) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:132) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.netty.ByteBufFlux.subscribe(ByteBufFlux.java:294) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.core.publisher.FluxPeek.subscribe(FluxPeek.java:83) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:132) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.netty.ByteBufFlux.subscribe(ByteBufFlux.java:294) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.core.publisher.FluxMap.subscribe(FluxMap.java:62) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:132) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoCollectList.subscribe(MonoCollectList.java:59) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:56) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoFilterFuseable.subscribe(MonoFilterFuseable.java:44) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:56) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:56) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:56) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoSubscriberContext.subscribe(MonoSubscriberContext.java:47) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoMapFuseable.subscribe(MonoMapFuseable.java:59) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoDefaultIfEmpty.subscribe(MonoDefaultIfEmpty.java:37) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.Mono.subscribe(Mono.java:3694) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoZip.subscribe(MonoZip.java:128) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoIgnoreThen$ThenIgnoreMain.drain(MonoIgnoreThen.java:153) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoIgnoreThen.subscribe(MonoIgnoreThen.java:56) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoPeekFuseable.subscribe(MonoPeekFuseable.java:74) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnErrorResume.subscribe(MonoOnErrorResume.java:44) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoNext$NextSubscriber.onNext(MonoNext.java:76) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.innerNext(FluxConcatMap.java:275) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxConcatMap$ConcatMapInner.onNext(FluxConcatMap.java:849) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxMap$MapSubscriber.onNext(FluxMap.java:114) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.Operators$ScalarSubscription.request(Operators.java:2070) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:438) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxMap$MapSubscriber.request(FluxMap.java:155) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.request(FluxOnAssembly.java:438) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.set(Operators.java:1878) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.Operators$MultiSubscriptionSubscriber.onSubscribe(Operators.java:1752) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:422) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxMap$MapSubscriber.onSubscribe(FluxMap.java:86) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:422) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoJust.subscribe(MonoJust.java:54) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoCallableOnAssembly.subscribe(MonoCallableOnAssembly.java:82) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoMap.subscribe(MonoMap.java:55) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.Mono.subscribe(Mono.java:3694) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.drain(FluxConcatMap.java:442) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxConcatMap$ConcatMapImmediate.onSubscribe(FluxConcatMap.java:212) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onSubscribe(FluxOnAssembly.java:422) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:139) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxIterable.subscribe(FluxIterable.java:63) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:132) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxConcatMap.subscribe(FluxConcatMap.java:121) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly.subscribe(FluxOnAssembly.java:132) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoNext.subscribe(MonoNext.java:40) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoSwitchIfEmpty.subscribe(MonoSwitchIfEmpty.java:44) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:60) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoDefer.subscribe(MonoDefer.java:52) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoOnAssembly.subscribe(MonoOnAssembly.java:61) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoFlatMap$FlatMapMain.onNext(MonoFlatMap.java:150) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoProcessor.onNext(MonoProcessor.java:389) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxSwitchIfEmpty$SwitchIfEmptySubscriber.onNext(FluxSwitchIfEmpty.java:67) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxMapFuseable$MapFuseableSubscriber.onNext(FluxMapFuseable.java:121) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxContextStart$ContextStartSubscriber.onNext(FluxContextStart.java:103) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxMapFuseable$MapFuseableConditionalSubscriber.onNext(FluxMapFuseable.java:287) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxFilterFuseable$FilterFuseableConditionalSubscriber.onNext(FluxFilterFuseable.java:331) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onNext(FluxOnAssembly.java:353) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.Operators$MonoSubscriber.complete(Operators.java:1505) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.MonoCollectList$MonoBufferAllSubscriber.onComplete(MonoCollectList.java:118) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:363) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:363) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxPeek$PeekSubscriber.onComplete(FluxPeek.java:252) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxOnAssembly$OnAssemblySubscriber.onComplete(FluxOnAssembly.java:363) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.core.publisher.FluxMap$MapSubscriber.onComplete(FluxMap.java:136) ~[reactor-core-3.2.6.RELEASE.jar:3.2.6.RELEASE]\r\n        at reactor.netty.channel.FluxReceive.terminateReceiver(FluxReceive.java:372) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.netty.channel.FluxReceive.drainReceiver(FluxReceive.java:196) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.netty.channel.FluxReceive.onInboundComplete(FluxReceive.java:337) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.netty.channel.ChannelOperations.onInboundComplete(ChannelOperations.java:334) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.netty.http.server.HttpServerOperations.onInboundNext(HttpServerOperations.java:453) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at reactor.netty.channel.ChannelOperationsHandler.channelRead(ChannelOperationsHandler.java:141) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at reactor.netty.http.server.HttpTrafficHandler.channelRead(HttpTrafficHandler.java:191) ~[reactor-netty-0.8.5.RELEASE.jar:0.8.5.RELEASE]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.CombinedChannelDuplexHandler$DelegatingChannelHandlerContext.fireChannelRead(CombinedChannelDuplexHandler.java:438) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.fireChannelRead(ByteToMessageDecoder.java:323) ~[netty-codec-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.handler.codec.ByteToMessageDecoder.channelRead(ByteToMessageDecoder.java:297) ~[netty-codec-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.CombinedChannelDuplexHandler.channelRead(CombinedChannelDuplexHandler.java:253) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.fireChannelRead(AbstractChannelHandlerContext.java:340) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.DefaultChannelPipeline$HeadContext.channelRead(DefaultChannelPipeline.java:1408) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:362) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.AbstractChannelHandlerContext.invokeChannelRead(AbstractChannelHandlerContext.java:348) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.DefaultChannelPipeline.fireChannelRead(DefaultChannelPipeline.java:930) ~[netty-transport-4.1.33.Final.jar:4.1.33.Final]\r\n        at io.netty.channel.epoll.AbstractEpollStreamChannel$EpollStreamUnsafe.epollInReady(AbstractEpollStreamChannel.java:799) ~[netty-transport-native-epoll-4.1.33.Final-linux-x86_64.jar:4.1.33.Final]\r\n        at io.netty.channel.epoll.EpollEventLoop.processReady(EpollEventLoop.java:427) ~[netty-transport-native-epoll-4.1.33.Final-linux-x86_64.jar:4.1.33.Final]\r\n        at io.netty.channel.epoll.EpollEventLoop.run(EpollEventLoop.java:328) ~[netty-transport-native-epoll-4.1.33.Final-linux-x86_64.jar:4.1.33.Final]\r\n        at io.netty.util.concurrent.SingleThreadEventExecutor$5.run(SingleThreadEventExecutor.java:905) ~[netty-common-4.1.33.Final.jar:4.1.33.Final]\r\n        at java.lang.Thread.run(Thread.java:748) ~[na:1.8.0_201]\r\n        Suppressed: reactor.core.publisher.FluxOnAssembly$OnAssemblyException: \r\nAssembly trace from producer [reactor.core.publisher.FluxMap] :\r\n        reactor.core.publisher.Flux.map(Flux.java:5689)\r\n        reactor.netty.ByteBufFlux.fromInbound(ByteBufFlux.java:70)\r\nError has been observed by the following operator(s):\r\n        |_      Flux.map ⇢ reactor.netty.ByteBufFlux.fromInbound(ByteBufFlux.java:70)\r\n        |_      Flux.doOnNext ⇢ reactor.netty.ByteBufFlux.retain(ByteBufFlux.java:282)\r\n        |_      Flux.map ⇢ org.springframework.http.server.reactive.ReactorServerHttpRequest.getBody(ReactorServerHttpRequest.java:166)\r\n        |_      Flux.collectList ⇢ org.springframework.core.io.buffer.DataBufferUtils.join(DataBufferUtils.java:438)\r\n        |_      Mono.filter ⇢ org.springframework.core.io.buffer.DataBufferUtils.join(DataBufferUtils.java:439)\r\n        |_      Mono.map ⇢ org.springframework.core.io.buffer.DataBufferUtils.join(DataBufferUtils.java:440)\r\n        |_      Mono.map ⇢ org.springframework.core.codec.AbstractDataBufferDecoder.decodeToMono(AbstractDataBufferDecoder.java:68)\r\n        |_      Mono.error ⇢ org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.lambda$readBody$4(AbstractMessageReaderArgumentResolver.java:186)\r\n        |_      Mono.onErrorResume ⇢ org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.readBody(AbstractMessageReaderArgumentResolver.java:186)\r\n        |_      Mono.switchIfEmpty ⇢ org.springframework.web.reactive.result.method.annotation.AbstractMessageReaderArgumentResolver.readBody(AbstractMessageReaderArgumentResolver.java:188)\r\n        |_      Mono.defaultIfEmpty ⇢ org.springframework.web.reactive.result.method.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:192)\r\n        |_      Mono.doOnError ⇢ org.springframework.web.reactive.result.method.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:193)\r\n        |_      Mono.zip ⇢ org.springframework.web.reactive.result.method.InvocableHandlerMethod.getMethodArgumentValues(InvocableHandlerMethod.java:200)\r\n        |_      Mono.flatMap ⇢ org.springframework.web.reactive.result.method.InvocableHandlerMethod.invoke(InvocableHandlerMethod.java:135)\r\n        |_      Mono.defer ⇢ org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.handle(RequestMappingHandlerAdapter.java:199)\r\n        |_      Mono.then ⇢ org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.handle(RequestMappingHandlerAdapter.java:199)\r\n        |_      Mono.doOnNext ⇢ org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.handle(RequestMappingHandlerAdapter.java:200)\r\n        |_      Mono.doOnNext ⇢ org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.handle(RequestMappingHandlerAdapter.java:201)\r\n        |_      Mono.error ⇢ org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.handleException(RequestMappingHandlerAdapter.java:234)\r\n        |_      Mono.onErrorResume ⇢ org.springframework.web.reactive.result.method.annotation.RequestMappingHandlerAdapter.handle(RequestMappingHandlerAdapter.java:202)\r\n        |_      Mono.flatMap ⇢ org.springframework.web.reactive.DispatcherHandler.handle(DispatcherHandler.java:151)\r\n        |_      Mono.flatMap ⇢ org.springframework.web.reactive.DispatcherHandler.handle(DispatcherHandler.java:152)\r\n        |_      Mono.defer ⇢ org.springframework.web.server.handler.DefaultWebFilterChain.filter(DefaultWebFilterChain.java:119)\r\n        |_      Mono.flatMap ⇢ org.springframework.web.filter.reactive.HiddenHttpMethodFilter.filter(HiddenHttpMethodFilter.java:90)\r\n        |_      Mono.defer ⇢ org.springframework.web.server.handler.DefaultWebFilterChain.filter(DefaultWebFilterChain.java:119)\r\n\r\n```\r\n\r\n</details>\r\n\r\n---\r\n\r\nThis exception is masking real problem and causing a lot of confusion. I noticed that there is a lot issues that mention this exception, so this seems like a widespread problem: https://github.com/spring-projects/spring-framework/issues?q=is%3Aissue+Only+one+connection+receive\r\n\r\nWould it be possible to present real exception in logs to make debugging easier?\r\n\r\nThanks!']",['closed'],[2],"[""This exception happens when your application is trying to read twice the request body, and this is forbidden as this would work against backpressure support. Many things can lead to this particular symptom, so this is why you're seeing this error multiple times in our tracker. This doesn't mean the same problem is widespread.\r\n\r\nIn your case, your `curl` request is sending the request body with `Content-Type: application/x-www-form-urlencoded`; Spring Boot has an auto-configured `WebFilter` that parses the form request and makes it available for binding. Then the request is mapped to a controller handler that asks for the full request body with `@RequestBody`. This is where the problem comes from.\r\n\r\nI'll leave this issue opened for now, in case we can get a clearer message for this particular case.\r\n\r\n"", 'I think we could get a better message. \r\n\r\nThis is happening in `AbstractMessageReaderArgumentResolver`, so one option would be to anticipate the issue for `@RequestBody` arguments , in `handleReadError` we could check if the content-type is `application/x-www-form-urlencoded` and if the error message contains ""only one connection"", and if so extend the error message to also say ""This could be because ..."".\r\n\r\nAlternatively, we could make the same check from `HiddenHttpMethodFilter` itself on the way out and enhance the error message.\r\n\r\n']"
ec4e6e0b0e84d11f9e5abaf092d5bcb7410d8a52,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java,Condition_Change,"-		else if (sqlType == Types.VARCHAR || sqlType == Types.LONGVARCHAR ||
-				(sqlType == Types.CLOB && isStringValue(inValue.getClass()))) {
+		else if (sqlType == Types.VARCHAR || sqlType == Types.NVARCHAR ||
+				sqlType == Types.LONGVARCHAR || sqlType == Types.LONGNVARCHAR ||
+				((sqlType == Types.CLOB || sqlType == Types.NCLOB) && isStringValue(inValue.getClass()))) {",5,condition,"StatementCreatorUtils populates NVARCHAR, LONGNVARCHAR, NCLOB via setString as well","Issue: SPR-11938
",,16555,1,['Support for Types.NCLOB in SqlLobValue to simplify use with NamedParameterJdbcTemplate. [SPR-11938]'],"['**[Oleksandr Gavenko](https://jira.spring.io/secure/ViewProfile.jspa?name=gavenkoa)** opened **[SPR-11938](https://jira.spring.io/browse/SPR-11938?redirect=false)** and commented\n\nThe only way to avoid LobHandler in DAO code for insert/update:\n\n```java\nMapSqlParameterSource paramSource = new MapSqlParameterSource();\nparamSource.addValue(""clob"", ""a long long text"", Types.CLOB);\nnamedTemplate.update(INSERT_STMT, paramSource);\n```\n\nSee:\n\n* http://stackoverflow.com/questions/5791662/inserting-clob-with-namedparameterjdbctemplate\n* http://codeblow.com/questions/placing-clob-with-namedparameterjdbctemplate/\n\nanother way (only for JdbcTemplate, not for NamedParameterJdbcTemplate):\n\n* http://docs.spring.io/spring/docs/3.0.x/reference/jdbc.html#jdbc-lob\n* http://www.java2s.com/Code/Java/Spring/InsertClobData.htm\n\njava.sql.Types has NCLOB constans for Java 6/7/8:\n\n* http://docs.oracle.com/javase/6/docs/api/java/sql/Types.html#NCLOB\n* http://docs.oracle.com/javase/7/docs/api/java/sql/Types.html#NCLOB\n\nIf I do:\n\n`paramSource.addValue(""clob"", ""a long long text"", Types.CLOB);`\n\nall work fine, but with:\n\n`paramSource.addValue(""clob"", ""a long long text"", Types.NCLOB);`\n\nI get:\n\n```java\n=> Fail to add incidentjava.lang.ClassCastException: java.lang.String cannot be cast to oracle.sql.CLOB\n   at oracle.jdbc.driver.OraclePreparedStatement.setObjectCritical(OraclePreparedStatement.java:8762) ~[ojdbc6.jar:11.2.0.3.0]\n   at oracle.jdbc.driver.OraclePreparedStatement.setObjectInternal(OraclePreparedStatement.java:8286) ~[ojdbc6.jar:11.2.0.3.0]\n   at oracle.jdbc.driver.OraclePreparedStatement.setObject(OraclePreparedStatement.java:8868) ~[ojdbc6.jar:11.2.0.3.0]\n   at oracle.jdbc.driver.OraclePreparedStatementWrapper.setObject(OraclePreparedStatementWrapper.java:240) ~[ojdbc6.jar:11.2.0.3.0]\n   at org.springframework.jdbc.core.StatementCreatorUtils.setValue(StatementCreatorUtils.java:406) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n   at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValueInternal(StatementCreatorUtils.java:234) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n   at org.springframework.jdbc.core.StatementCreatorUtils.setParameterValue(StatementCreatorUtils.java:149) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n   at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.setValues(PreparedStatementCreatorFactory.java:298) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n   at org.springframework.jdbc.core.PreparedStatementCreatorFactory$PreparedStatementCreatorImpl.createPreparedStatement(PreparedStatementCreatorFactory.java:251) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n   at org.springframework.jdbc.core.JdbcTemplate.execute(JdbcTemplate.java:583) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n   at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:818) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n   at org.springframework.jdbc.core.JdbcTemplate.update(JdbcTemplate.java:840) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n   at org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate.update(NamedParameterJdbcTemplate.java:281) ~[spring-jdbc-3.2.8.RELEASE.jar:3.2.8.RELEASE]\n```\n\nActual type of table column is NCLOB, and with Type.CLOB code work fine.\n\nMy suggestion just add NCLOB to `src/main/java/org/springframework/jdbc/core/StatementCreatorUtils.java` with same role as CLOB!\n\n---\n\n**Affects:** 3.2.9, 4.0.5\n\n**Issue Links:**\n- #20702 When using NamedParameterJdbcTemplate, NVARCHAR or NCLOB(4000 characters or less) columns are not properly populated since StatementCreatorUtils does setString for these types instead of setNString.\n- #13215 Can\'t insert into nvarchar2 using SimpleJdbcInsert whereas it works with SimpleJdbcTemplate\n- #16854 INSERT SELECT of large CLOB causes ORA-01461 on setString\n\n']",['closed'],[2],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point! StatementCreatorUtils populates NVARCHAR, LONGNVARCHAR, NCLOB via setString as well now.\n\nJuergen\n', '**[Oleksandr Gavenko](https://jira.spring.io/secure/ViewProfile.jspa?name=gavenkoa)** commented\n\nHi! I apply your changes on top of 3.x series:\n\n```\ngit diff  ec4e6e0^! >.diff\ngit reset --hard origin/3.2.x \npatch -p1 <.diff\ngradle\n```\n\nand test my application with Type.NCLOB. All fine, thanks!\n']"
eca87b87de8445feab00dd4e98a634ece6c80e20,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/BridgeMethodResolver.java,Condition_Change,"-			if (!candidateParameter.equals(genericParameter.toClass())) {
+			if (!ClassUtils.resolvePrimitiveIfNecessary(candidateParameter).equals(ClassUtils.resolvePrimitiveIfNecessary(genericParameter.toClass()))) {",2,condition,Improve Kotlin support in BridgeMethodResolver#findBridgedMethod,"This commit adds support for Kotlin non-nullable type which resolves
to primitive Java types in BridgeMethodResolver#findBridgedMethod.

Closes gh-26585
",,26585,1,['BridgeMethodResolver#isBridgeMethodFor return incorrect result for kotlin code in certain circumstance'],"['<!--\r\n!!! For Security Vulnerabilities, please go to https://spring.io/security-policy !!!\r\n-->\r\n**Affects:** v5.3.4\r\n---\r\n<!--\r\nThanks for taking the time to create an issue. Please read the following:\r\n\r\n- Questions should be asked on Stack Overflow.\r\n- For bugs, specify affected versions and explain what you are trying to do.\r\n- For enhancements, provide context and describe the problem.\r\n\r\nIssue or Pull Request? Create only one, not both. GitHub treats them as the same.\r\nIf unsure, start with an issue, and if you submit a pull request later, the\r\nissue will be closed as superseded.\r\n-->\r\n\r\nIn kotlin, non-nullable Int is compiled to java primitive type int, this cause the condition `candidateParameter.equals(genericParameter.toClass()` always evaluates to `false`. so `org.springframework.core.BridgeMethodResolver#findBridgedMethod` fails to find the correct bridge method.\r\n\r\n![screenshot1](https://user-images.githubusercontent.com/16322831/108648713-e2c0e000-74f6-11eb-9e64-7aba5467c832.png)\r\n\r\n```kotlin\r\nimport org.springframework.stereotype.Repository\r\nimport org.springframework.transaction.annotation.Transactional\r\n\r\ninterface GenericInterface<ID> {\r\n    fun delete(id: ID)\r\n}\r\n\r\nabstract class AbstractGenericClass<ID> : GenericInterface<ID> {\r\n    override fun delete(id: ID) {\r\n    }\r\n}\r\n\r\n@Repository\r\nclass GenericRepository : AbstractGenericClass<Int>() {\r\n    @Transactional\r\n    override fun delete(\r\n            id: Int\r\n    ) {\r\n        error(""gotcha"")\r\n    }\r\n}\r\n```\r\n\r\nthe above ""GenericRepository"" is compiled to \r\n```java\r\n@Repository\r\n@Metadata(\r\n   mv = {1, 4, 0},\r\n   bv = {1, 0, 3},\r\n   k = 1,\r\n   d1 = {""\\u0000\\u0018\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0018\\u0002\\n\\u0002\\u0010\\b\\n\\u0002\\b\\u0002\\n\\u0002\\u0010\\u0002\\n\\u0002\\b\\u0002\\b\\u0017\\u0018\\u00002\\b\\u0012\\u0004\\u0012\\u00020\\u00020\\u0001B\\u0005¢\\u0006\\u0002\\u0010\\u0003J\\u0010\\u0010\\u0004\\u001a\\u00020\\u00052\\u0006\\u0010\\u0006\\u001a\\u00020\\u0002H\\u0017¨\\u0006\\u0007""},\r\n   d2 = {""Lcom/cpvsn/crud/demo/feat/generic/GenericRepository;"", ""Lcom/cpvsn/crud/demo/feat/generic/AbstractGenericClass;"", """", ""()V"", ""delete"", """", ""id"", ""crud-kit.crud-kit-demo.main""}\r\n)\r\npublic class GenericRepository extends AbstractGenericClass {\r\n   @Transactional\r\n   public void delete(int id) {\r\n      String var2 = ""gotcha"";\r\n      boolean var3 = false;\r\n      throw (Throwable)(new IllegalStateException(var2.toString()));\r\n   }\r\n\r\n   // $FF: synthetic method\r\n   // $FF: bridge method\r\n   public void delete(Object var1) {\r\n      this.delete(((Number)var1).intValue());\r\n   }\r\n}\r\n\r\n```\r\n\r\nDue to this issue, the `@Transactional` on `delete(id: Int)` method have no effects at all.\r\nI\'m not sure if this project is expected to be compatible with Kotlin code. If it is, then this is a bug, I think I can try to submit a PR to fix it.']",['closed'],[2],"[""@jhoeller I have little experience with bridge methods, but based on my initial findings with [this test](https://github.com/sdeleuze/spring-framework/commit/kotlin-bridge-method-fix), my current thinking is that we could add Kotlin specific code path in `BridgeMethodResolver#isResolvedTypeMatch`.\r\n\r\nInstead of just doing `Type[] genericParameters = genericMethod.getGenericParameterTypes()`, we should maybe use `KClass<T>.javaObjectType` in order to get a type that will be compatible with the rest f the logic. In the use case we have here, `java.lang.Integer` would be returned for both Kotlin `Int` and `Int?` types. But I am not sure `KClass<T>.javaObjectType` is exposed in Java, to be checked with Kotlin team.\r\n\r\nI think you mentioned another potential way to fix that, but I can't remember the details. Any thoughts?\r\n\r\n@noob9527 Since you mentioned a PR, any thoughts on what could look like the fix?"", '@sdeleuze \r\nI think `ResolvableType.forMethodParameter(genericMethod, i, declaringClass);` will always return a wrapper type.\r\nso we can just wrap `candidateParameter` to its wrapper type before comparing.']"
ecce7520fb2cb56494d78dcc6adadb446d51ace7,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/config/AnnotationDrivenBeanDefinitionParser.java,Condition_Change,"-			for (Element converter : DomUtils.getChildElementsByTagName(convertersElement, ""bean"")) {
-				BeanDefinitionHolder beanDef = parserContext.getDelegate().parseBeanDefinitionElement(converter);
-				beanDef = parserContext.getDelegate().decorateBeanDefinitionIfRequired(converter, beanDef);
-				messageConverters.add(beanDef);
+			for (Element beanElement : DomUtils.getChildElementsByTagName(convertersElement, new String[] { ""bean"", ""ref"" })) {
+				Object object = parserContext.getDelegate().parsePropertySubElement(beanElement, null);
+				messageConverters.add(object);",7,iteration,Support HttpMessageConverter refs in mvc namespace,"Issue: SPR-9469
",,14104,1,['Add support for <ref> in addition to <bean> for <mvc:message-converters>  [SPR-9469]'],"['**[Jon Kranes](https://jira.spring.io/secure/ViewProfile.jspa?name=jkranes)** opened **[SPR-9469](https://jira.spring.io/browse/SPR-9469?redirect=false)** and commented\n\nAllow <ref==> as well as \\<bean/> for <mvc:message-converters>, in order to allow configuration using existing beans.  This capability already exists for <mvc:interceptors>.\n\n\n---\n\n**Affects:** 3.1 GA\n']",['closed'],[0],[]
ececf32c052082724ab86b5d2b567ffc7c137b67,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/annotation/AnnotationUtils.java,Condition_Change,"-		}
-		if (result != null) {
-			findAnnotationCache.put(cacheKey, result);
+			if (result != null) {
+				findAnnotationCache.put(cacheKey, result);
+			}
+",7,condition,Revert unintentional change in AnnotationUtils,,,,0,N/A,N/A,N/A,N/A,N/A
edbc1e92129f659b9c59722611065befa705e2fe,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/AbstractPollingMessageListenerContainer.java,Remove_Condition,"- * Copyright 2002-2015 the original author or authors.
+ * Copyright 2002-2016 the original author or authors.
-	private volatile Boolean commitAfterNoMessageReceived;
-
-				// However, don't do this on Tibco since this may lead to a deadlock there.
-	 * This is a good idea on any JMS provider other than Tibco, which is what
-	 * this default implementation checks for.
+	 * This is a good idea on any modern-day JMS provider.
-		if (this.commitAfterNoMessageReceived == null) {
-			Session target = ConnectionFactoryUtils.getTargetSession(session);
-			this.commitAfterNoMessageReceived = !target.getClass().getName().startsWith(""com.tibco.tibjms."");
-		}
-		return this.commitAfterNoMessageReceived;
+		return true;",8,condition,Avoid outdated Tibco workaround in shouldCommitAfterNoMessageReceived,"Issue: SPR-14697
",,19261,1,"[""AbstractPollingMessageListenerContainer's workaround for Tibco causes performance delays during ems failover [SPR-14697]""]","[""**[Aihua Zhou](https://jira.spring.io/secure/ViewProfile.jspa?name=aihuazhou)** opened **[SPR-14697](https://jira.spring.io/browse/SPR-14697?redirect=false)** and commented\n\nWe're using DefaultMessageListenerContainer with tibco EMS and transaction enabled,\n\nwhen ems fails over, and there is no messages on ems, then we observer the following behavior:\n\n1. If there are no messages on EMS during failover, and we publish a message well after all clients have reconnected, then the client will still throws TransactionRolledbackException, due to the fact that the polling container does not commit the transaction if it receives no message if it's using Tibco EMS.\n\n2. This is a problem for high concurrency systesm, where we're running over 100 clients.  In this case each client is holding on to a transaction which will be rolled back.  With queue redelivery set to mas of 255 and delivery delay set to 15, it takes over 1 hour for the messages to get reprocessed.\n\nThe issue is caused by the work around that was put in place for a tibco deadlock issue See spring jira below.\n\n#12215\n\nTibco has confirmed that the deadlock issue was fixed in ems 4.4.2, and is no longer present in any supported versions of ems.  Please roll back the special check that was added.\n\n---\n\n**Affects:** 4.1.9, 4.2.4, 4.3.2\n\n**Issue Links:**\n- #12215 JMS integration with Tibco causes deadlock due to commitIfNecessary in AbstractPollingMessageListenerContainer\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/edbc1e92129f659b9c59722611065befa705e2fe, https://github.com/spring-projects/spring-framework/commit/4396b211ce06237a7408a2f5be0177e3e81258c0, https://github.com/spring-projects/spring-framework/commit/53fc1e96c68a7b2469f19f187afe617803218c6e\n\n**Backported to:** [4.2.8](https://github.com/spring-projects/spring-framework/milestone/145?closed=1)\n""]",['closed'],[1],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nFixed in master, and to be backported to our 4.3.3 and 4.2.8 releases next week.\n']"
eef9bc899f859445bbcf93980c7df2df02ed97b3,spring-projects/spring-framework,spring-webflux/src/main/java/org/springframework/web/reactive/result/view/freemarker/FreeMarkerView.java,Condition_Change,"-	protected Mono<Map<String, Object>> getModelAttributes(Map<String, ?> model,
-			ServerWebExchange exchange) {
+	protected Mono<Map<String, Object>> getModelAttributes(
+			@Nullable Map<String, ?> model, ServerWebExchange exchange) {
-			if (model.containsKey(SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE)) {
+			if (model != null && model.containsKey(SPRING_MACRO_REQUEST_CONTEXT_ATTRIBUTE)) {
-			Map<String, Object> attributes = new HashMap<>(model);
+			Map<String, Object> attributes = (model != null ? new HashMap<>(model) : new HashMap<>());",8,condition,Avoid NPE in FreeMarkerView.getModelAttributes() in spring-webflux,"This commit declares the model method parameter as @Nullable and adds
defensive guards against a null model argument.

Closes gh-23105
",,23105,1,['Improve FreeMarker macro support in spring-webflux'],"['## Overview\r\n\r\nThis issue is a followup to gh-23002.\r\n\r\nThe documentation for `spring.ftl` in `spring-webflux` states the following.\r\n\r\n> To take advantage of these macros, the ""requestContextAttribute"" property of the FreeMarkerView class must be set to ""springMacroRequestContext"". This will expose a RequestContext under the name ""springMacroRequestContext"", as needed by the macros in this library.\r\n\r\nAlthough this technically works, it is not as user-friendly as the analogous support in `spring-webmvc`. Specifically, `AbstractTemplateView` (in `spring-webmvc`) provides a dedicated `exposeSpringMacroHelpers` flag for automatically exposing the `RequestContext` as a model attribute for consumption in FreeMarker templates. Since this boolean flag defaults to `true`, users do not have to configure anything special in `FreeMarkerView` to use all supported macros.\r\n\r\nIn contrast, users of `FreeMarkerView` in `spring-webflux` cannot use all supported macros unless they explicitly set the `requestContextAttribute` property of the `FreeMarkerView` to `""springMacroRequestContext""`.\r\n\r\nI think this is cumbersome and should be improved.\r\n\r\n## Deliverables\r\n\r\n- [ ] Consider introducing a dedicated `exposeSpringMacroHelpers` flag in template-based views in `spring-webflux` analogous to the support in `spring-webmvc`.\r\n']",['closed'],[5],"['@rstoyanchev, I would appreciate your input on this issue before I begin working on it.', 'Sounds reasonable.', 'Unfortunately this has broken a test in Spring Boot:\r\n\r\n```\r\njava.lang.NullPointerException\r\n\tat org.springframework.web.reactive.result.view.freemarker.FreeMarkerView.getModelAttributes(FreeMarkerView.java:226)\r\n\tat org.springframework.web.reactive.result.view.AbstractView.render(AbstractView.java:203)\r\n\tat org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfigurationReactiveIntegrationTests.lambda$7(FreeMarkerAutoConfigurationReactiveIntegrationTests.java:120)\r\n\tat reactor.core.publisher.FluxFlatMap.trySubscribeScalarMap(FluxFlatMap.java:141)\r\n\tat reactor.core.publisher.MonoFlatMap.subscribe(MonoFlatMap.java:53)\r\n\tat reactor.core.publisher.Mono.block(Mono.java:1519)\r\n\tat org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfigurationReactiveIntegrationTests.render(FreeMarkerAutoConfigurationReactiveIntegrationTests.java:120)\r\n\tat org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfigurationReactiveIntegrationTests.lambda$1(FreeMarkerAutoConfigurationReactiveIntegrationTests.java:62)\r\n\tat org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.accept(AbstractApplicationContextRunner.java:424)\r\n\tat org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.lambda$1(AbstractApplicationContextRunner.java:359)\r\n\tat org.springframework.boot.test.util.TestPropertyValues.applyToSystemProperties(TestPropertyValues.java:129)\r\n\tat org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.lambda$0(AbstractApplicationContextRunner.java:357)\r\n\tat org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.withContextClassLoader(AbstractApplicationContextRunner.java:369)\r\n\tat org.springframework.boot.test.context.runner.AbstractApplicationContextRunner.run(AbstractApplicationContextRunner.java:356)\r\n\tat org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfigurationReactiveIntegrationTests.defaultViewResolution(FreeMarkerAutoConfigurationReactiveIntegrationTests.java:61)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.junit.platform.commons.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:628)\r\n\tat org.junit.jupiter.engine.execution.ExecutableInvoker.invoke(ExecutableInvoker.java:117)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.lambda$invokeTestMethod$7(TestMethodTestDescriptor.java:184)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.invokeTestMethod(TestMethodTestDescriptor.java:180)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:127)\r\n\tat org.junit.jupiter.engine.descriptor.TestMethodTestDescriptor.execute(TestMethodTestDescriptor.java:68)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.util.ArrayList.forEach(ArrayList.java:1249)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat java.util.ArrayList.forEach(ArrayList.java:1249)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.invokeAll(SameThreadHierarchicalTestExecutorService.java:38)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$5(NodeTestTask.java:139)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$7(NodeTestTask.java:125)\r\n\tat org.junit.platform.engine.support.hierarchical.Node.around(Node.java:135)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.lambda$executeRecursively$8(NodeTestTask.java:123)\r\n\tat org.junit.platform.engine.support.hierarchical.ThrowableCollector.execute(ThrowableCollector.java:73)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.executeRecursively(NodeTestTask.java:122)\r\n\tat org.junit.platform.engine.support.hierarchical.NodeTestTask.execute(NodeTestTask.java:80)\r\n\tat org.junit.platform.engine.support.hierarchical.SameThreadHierarchicalTestExecutorService.submit(SameThreadHierarchicalTestExecutorService.java:32)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestExecutor.execute(HierarchicalTestExecutor.java:57)\r\n\tat org.junit.platform.engine.support.hierarchical.HierarchicalTestEngine.execute(HierarchicalTestEngine.java:51)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:229)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.lambda$execute$6(DefaultLauncher.java:197)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.withInterceptedStreams(DefaultLauncher.java:211)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:191)\r\n\tat org.junit.platform.launcher.core.DefaultLauncher.execute(DefaultLauncher.java:137)\r\n\tat org.eclipse.jdt.internal.junit5.runner.JUnit5TestReference.run(JUnit5TestReference.java:89)\r\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:541)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:763)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:463)\r\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:209)\r\n\tSuppressed: java.lang.Exception: #block terminated with an error\r\n\t\tat reactor.core.publisher.BlockingSingleSubscriber.blockingGet(BlockingSingleSubscriber.java:133)\r\n\t\tat reactor.core.publisher.Mono.block(Mono.java:1520)\r\n\t\t... 62 more\r\n```\r\n\r\nI think the `model` attribute should be `@Nullable` and an additional guard is needed.', 'Thanks for bringing this to our attention, @philwebb!\r\n\r\nPlease let me know if the fix in eef9bc899f859445bbcf93980c7df2df02ed97b3 solves the problem.', ""Looks good from a glance, I'm just trying to rerun the tests. I'll report back if there's still any problems.""]"
ef6aef91077901a5ed532ec3e7a55f5e0e554080,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/tags/form/SelectedValueComparator.java,Condition_Change,"- * Copyright 2002-2016 the original author or authors.
+ * Copyright 2002-2017 the original author or authors.
-		else if (editor != null && candidate instanceof String) {
+
+		if (editor != null && candidate instanceof String) {",3,condition,Allow PropertyEditor conversion as fallback for enums,"Issue: SPR-16082
",,20631,1,['Checkbox/RadioButton incorrectly converts collections of enums with a custom converter [SPR-16082]'],"['**[Seth A Wilcox](https://jira.spring.io/secure/ViewProfile.jspa?name=laoseth)** opened **[SPR-16082](https://jira.spring.io/browse/SPR-16082?redirect=false)** and commented\n\nIf you have an a collection of enums, for which you have implemented a custom org.springframework.core.convert.converter.Converter, the values are mapped from the form differently then they are mapped back to it.  When spring reads the values from a submitted form, it runs the value supplied to the tag through the conversionService, so it expects the values to be in the checkbox/radiobox value field that the converter recognizes.  However, when checking if the checkbox/radio button should be checked, it requires the value of the box to match the name() method of the enum, and does not run through the converter when checking for ""equality\' to mark the correct boxes checked.  The issue seems to lie in org.springframework.web.servlet.tags.form.SelectedValueComparator.exhaustiveCompare(Object, Object, PropertyEditor, Map<PropertyEditor, Object>)\n\nThe logic first checks if the class we are binding to is an enum, and if it does, it checks against the toString of the enum.  If that doesn\'t match, it then returns, skipping the PE compare later on, which would use the conversion service to properly convert the string to the appropriate type.\n\nBasically, the else before the PE-Based comparison should be removed, to the conversion service always gets a chance to convert before the comparison\n\n\n---\n\n**Affects:** 4.3.11\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/97c63857c4562e252943c55dbc9a1cb652f98381, https://github.com/spring-projects/spring-framework/commit/ef6aef91077901a5ed532ec3e7a55f5e0e554080\n\n**Backported to:** [4.3.13](https://github.com/spring-projects/spring-framework/milestone/162?closed=1)\n']",['closed'],[2],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've revised that algorithm accordingly. Could you please give it a try against this afternoon's  `4.3.13.BUILD-SNAPSHOT`?\n"", '**[Seth A Wilcox](https://jira.spring.io/secure/ViewProfile.jspa?name=laoseth)** commented\n\nI was able to double check today, and the change in the nightly build fixes the issue.  Thank you\n']"
f07fc76cf30cbfb6ae71134b653f26af9649ea1b,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/web/util/UriComponentsBuilder.java,Condition_Change,"-				if (StringUtils.hasLength(scheme) && !StringUtils.hasLength(host)) {
-					throw new IllegalArgumentException(""["" + uri + ""] is not a valid URI"");
+				if (StringUtils.hasLength(scheme) && scheme.startsWith(""http"") && !StringUtils.hasLength(host)) {
+					throw new IllegalArgumentException(""["" + uri + ""] is not a valid HTTP URL"");",4,condition,Limit scheme/host check in fromUriString to HTTP URLs,"Closes gh-26258
",,26258,1,['UriComponentsBuilder fromUriString cannot parse File URI'],"['Hi!\r\n\r\nI thinl I found a exception after update to spring-boot 2.4.0, 2.4.1.\r\n\r\nA cannot parse a file uri using UriTemplateHandler. Before, in 2.3.x, I could do it.\r\n\r\nA test example is:\r\n\r\n```\r\n @Test\r\n    public void verify() throws MalformedURLException {\r\n        final UriTemplateHandler uriTemplateHandler;\r\n\r\n        DefaultUriBuilderFactory uriFactory = new DefaultUriBuilderFactory();\r\n        uriFactory.setEncodingMode(DefaultUriBuilderFactory.EncodingMode.URI_COMPONENT);  // for backwards compatibility..\r\n        uriTemplateHandler = uriFactory;\r\n\r\n        URL url = uriTemplateHandler.expand(file.toURI().toString(), Collections.emptyMap()).toURL();\r\n\r\n        assertThat(url.toString()).isEqualTo(file.toURI().toString());\r\n    }\r\n```\r\n\r\nfile  is a File object with value (toString()): /tmp/junit5116856254058695014/arquivo.txt\r\nSorry If I made some mistake.\r\n\r\nThanks']",['closed'],[2],"[""Hi,\r\ncaused by a new validation intended for ipv6, I've raised the PR fixing that"", 'Yes it looks like this dates back to a change for 5.3 under #25334 that adds a similar check to `fromUriString` as in `fromHttpUrl`. However according to RFC 8320, section 2.2, the semantics of URI authority is defined by the scheme. So while for ""http/https"" a host is expected, for other schemes it might not be.']"
f1345aadf5879659c186a1dac7915f47d6c1cd14,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Condition_Change,"-			BeanDefinition beanDefinition = this.beanDefinitionMap.get(beanName);
-			if (!beanDefinition.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) {
+			BeanDefinition bd = this.beanDefinitionMap.get(beanName);
+			if (bd != null && !bd.isAbstract() && findAnnotationOnBean(beanName, annotationType) != null) {
-				// Ensure bd is non-null due to potential concurrent modification
-				// of the beanDefinitionMap.
+				// Ensure bd is non-null due to potential concurrent modification of beanDefinitionMap.",4,condition,Defensively access existing beanDefinitionMap entries,"See gh-22263
",,22263,1,['DefaultListableBeanFactory.getBean(Class) may throw NoSuchBeanDefinitionException when removeBeanDefinition is being called simultaneously to remove an unrelated bean'],"['We\'re seeing sporadic NoSuchBeanDefinitionException exceptions out of ApplicationContext\'s getBean(Class<T>) when in another thread DefaultListableBeanFactory.removeBeanDefinition(String) is being called, for unrelated/different beans. It appears to be a synchronization issue in DefaultListableBeanFactory\'s implementation (across use of fields beanDefinitionMap and beanDefinitionNames.) I have included a Spring Boot application that reproduces the issue. Having more beans seems to exacerbate the issue, I presume because it increases time to copy beanDefinitionNames in removeBeanDefinition. \r\n\r\nWe\'re seeing this with spring-beans-5.1.4 and 5.1.3, unknown about older versions than that.\r\n\r\nHere\'s an unrealistic application that reproduces the condition, which we ran with spring-boot-starter-parent 2.1.2.RELEASE (spring-beans-5.1.4):\r\n\r\n```\r\npackage com.example.demo;\r\n\r\nimport org.springframework.beans.factory.NoSuchBeanDefinitionException;\r\nimport org.springframework.beans.factory.support.BeanDefinitionBuilder;\r\nimport org.springframework.beans.factory.support.BeanDefinitionRegistry;\r\nimport org.springframework.boot.SpringApplication;\r\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\r\nimport org.springframework.context.ApplicationContext;\r\nimport org.springframework.context.ApplicationContextAware;\r\nimport org.springframework.context.annotation.Bean;\r\nimport org.springframework.context.annotation.Configuration;\r\nimport org.springframework.scheduling.annotation.EnableScheduling;\r\nimport org.springframework.scheduling.annotation.Scheduled;\r\nimport org.springframework.scheduling.annotation.SchedulingConfigurer;\r\nimport org.springframework.scheduling.concurrent.ThreadPoolTaskScheduler;\r\nimport org.springframework.scheduling.config.ScheduledTaskRegistrar;\r\n\r\n@Configuration\r\n@EnableScheduling\r\n@SpringBootApplication\r\npublic class DemoApplication implements ApplicationContextAware, SchedulingConfigurer {\r\n\r\n    public static void main(String[] args) {\r\n        SpringApplication.run(DemoApplication.class, args);\r\n    }\r\n\r\n    private ApplicationContext context;\r\n\r\n    public static class Volatile { }\r\n\r\n    @Scheduled(fixedRate = 400)\r\n    public void addAndRemove() {\r\n\r\n        BeanDefinitionRegistry factory = (BeanDefinitionRegistry)context.getAutowireCapableBeanFactory();\r\n\r\n        // Simulate add/remove of some beans in one background thread.\r\n        // Using larger numbers here makes the exception increasingly easier to hit in get().\r\n        for (int i = 0; i < 1000; i++) {\r\n            String beanName = ""volatile"" + i;\r\n            if (factory.containsBeanDefinition(beanName)) {\r\n                factory.removeBeanDefinition(beanName);\r\n            }\r\n            factory.registerBeanDefinition(beanName, BeanDefinitionBuilder.genericBeanDefinition(Volatile.class).getBeanDefinition());\r\n        }\r\n    }\r\n\r\n    public static class Stable { }\r\n\r\n    @Bean\r\n    public Stable stable()\r\n    {\r\n        return new Stable();\r\n    }\r\n\r\n    @Scheduled(fixedRate = 1)\r\n    public void get() {\r\n        try {\r\n            // Here get a bean that is not the one(s) being added/removed. Expect to be able to get\r\n            // it every time.\r\n            context.getBean(Stable.class);\r\n\r\n        } catch (NoSuchBeanDefinitionException e) {\r\n\r\n            // Eventually NoSuchBeanDefinitionException occurs (the missing bean being one of the Volatile ones!)\r\n            // In DefaultListableBeanFactory.removeBeanDefinition the map is modified, then it starts replacing\r\n            // the list w/ new copy. Meanwhile in getBean it iterates across that list in doGetBeanNamesForType,\r\n            // but then gets from the map. They\'re not in the map anymore.\r\n\r\n            throw new RuntimeException(""This is the problem"", e);\r\n        }\r\n    }\r\n\r\n    @Override\r\n    public void setApplicationContext(ApplicationContext applicationContext) {\r\n        context = applicationContext;\r\n    }\r\n\r\n    @Override\r\n    public void configureTasks(ScheduledTaskRegistrar scheduledTaskRegistrar) {\r\n        ThreadPoolTaskScheduler threadPoolTaskScheduler = new ThreadPoolTaskScheduler();\r\n\r\n        // It\'s necessary to have get() and addAndRemove running on separate threads\r\n        threadPoolTaskScheduler.setPoolSize(2);\r\n        threadPoolTaskScheduler.initialize();\r\n        scheduledTaskRegistrar.setTaskScheduler(threadPoolTaskScheduler);\r\n    }\r\n}\r\n```\r\n\r\n\r\n\r\n']",['closed'],[2],"['For real-world context, in our actual application (not the sample I provided here) the number of beans being added/removed is rather small compared to the total number in the application. They are being added/removed in a task scheduler thread, as here. The other threads in the actual application are HTTP request-handling threads that are using ApplicationContext.getBean for service location. There, we are seeing the NoSuchBeanDefinitionException exception occur sporadically when the HTTP request occurs during remove in the background. As in the sample, the bean(s) being located are not those that are being added/removed.', 'Is there anything new about this one?\r\nWe are facing the same issue.\r\nIt looks like the doGetBeanNamesForType which loops on the beanDefinitionNames and the removeBeanDefinition are not sychronized well, so removing the definition from one thread may cause another to fail on get.']"
f1cbbd2aa80476dc570d3bdf23d589a9a2544a37,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/annotation/TransactionBeanRegistrationAotProcessor.java,Remove_Condition,"-			if (proxyInterfaces.length == 0) {
-				return;
-			}",3,condition,Remove redundant array length check,"Closes gh-33655
",,33655,1,['Remove unnecessary array length check'],"['This is why I opened PR.\r\n\r\n1. ClassUtils.getAllInterfacesForClass does not return null.\r\n2. Even if the length of proxyInterfaces is 0, no error occurs in the loop.\r\nSo I think that conditional statement is unnecessary.']",['closed'],[0],[]
f27304d785b47f5390230e7ccde028a37989d5ee,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/GenericTypeAwareAutowireCandidateResolver.java,Remove_Condition,"-		if (targetType == null) {
+		if (targetType == null || (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics())) {
-		if (descriptor.fallbackMatchAllowed() && targetType.hasUnresolvableGenerics()) {
-			return descriptor.getDependencyType().isAssignableFrom(targetType.getRawClass());
-		}
+		// Full check for complex generic type match...",5,condition,"Avoid repeated assignability check for raw class on fallback match, since AutowireCandidateResolver is only being called for basic type matches to begin with","Issue: SPR-9965
",,14599,1,['Autowiring of generic types [SPR-9965]'],"['**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** opened **[SPR-9965](https://jira.spring.io/browse/SPR-9965?redirect=false)** and commented\n\nCurrently the container considers `List` and `Map` types being injected as special injection points and uses generics inspection to inject the appropriate Spring beans. However, there\'s no general support for injecting generic types in a type safe way.\n\nAssuming we have a generic interface:\n\n```\ninterface MyGenericType<T> { ... }\n```\n\nand two Spring beans:\n\n```\nclass IntegerType extends MyGenericType<Integer> { ... }\n\nclass StringType extends MyGenericType<String> { ... }\n```\n\nA client trying to get a special instance of the generic type looking like this:\n\n```\nclass MyClient {\n\n  @Autowired\n  private List<MyGenericType<Integer>> dependencies;\n}\n```\n\ncurrently not only gets injected the `IntegerType` bean but the `StringType` as well which will cause exceptions at runtime. The core reason this is the case is that the `BeanFactory` currently uses `Class<?>` based type information that does not carry the generics information on injection time and selectvely inspects the generics for injection of special types like `List` and `Map`.\n\nThe Spring Data Commons project has a `TypeInformation` abstraction that allows to lazily resolve generics information as it keeps the generics information around when traversing types, property, method parameter and method return types. It could serve as foundation for an improvement of the `BeanFactory`.\n\n---\n\n**Issue Links:**\n- #15601 Introduce ResolvableType Class (_**""depends on""**_)\n- #15621 Generic autowiring should support wiring of components with unresolved type variables\n- #10217 autowiring doesn\'t match generics\n- #16761 Add generics / parameterized type support to ListableBeanFactory getBeanNamesForType/getBeansOfType methods\n\n5 votes, 13 watchers\n']",['closed'],[10],"[""**[Eugene Petrenko](https://jira.spring.io/secure/ViewProfile.jspa?name=jonnyzzz)** commented\n\nI have a similar issue in my project.\nWe used to use EventDispatcher\\<ListenerClass> for type-autowiring.\nUnfortunately it's not possible to have more than one bean of that time at once.\n\nOnce you declare a non-generic class (i.e. ListenerDispatcher implements EventDispatcher\\<ListenerClass>) all generic\ntype information gets available via Java 1.5+ reflections API.\nThis could be used to make Spring to filter out extra beans.\n\nI implemented this logic via SimpleAutowireCandidateResolver. So I replaced autowire candidates resolver of my BeanFactory with a custom resolver that implemented in the following way:\n\nIt returns null for `getSuggestedValue`, still for `isAutowireCandidate` it checks for generic dependency type and decide which if available candidates is suitable.\n"", '**[Oliver Drotbohm](https://jira.spring.io/secure/ViewProfile.jspa?name=olivergierke)** commented\n\nSubmitted pull request at https://github.com/SpringSource/spring-framework/pull/186. Have a look at `GenericTypeWiringTests` for a sample of what the newly introduced functionality allows to do.\n', '**[Piotr Findeisen](https://jira.spring.io/secure/ViewProfile.jspa?name=pofin)** commented\n\nLooks quite similar to #10217\n', ""**[Didier Villevalois](https://jira.spring.io/secure/ViewProfile.jspa?name=ptitjes)** commented\n\nFantastic! Could we have Olivier's commit soon in a release ?\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis has been rolled into a master now, in a fresh implementation with minimal impact onto the framework's SPIs. To be released in 4.0 RC1 soon!\n\nJuergen\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nQuick note:\n\nIt's not actually pushed yet since I had a last-minute test failure in a different corner of the framework that I'm still researching. To be pushed as soon as this is sorted out.\n"", ""**[Richard Kawala](https://jira.spring.io/secure/ViewProfile.jspa?name=rkawala)** commented\n\nWe'd also love a method with a signature like getBean(TypeInformation typeInformation) on ApplicationContext so that I can ask for an object of type Provider\\<SomeClass>.\n"", ""**[Phil Webb](https://jira.spring.io/secure/ViewProfile.jspa?name=pwebb)** commented\n\n[Richard Kawala](https://jira.spring.io/secure/ViewProfile.jspa?name=rkawala) This particular issue has been closed, if you're still interested in `getBean(TypeInformation ...)` support could you please raise a new issue.\n"", '**[Vladislav Rassokhin](https://jira.spring.io/secure/ViewProfile.jspa?name=vladislav.rassokhin)** commented\n\nLooks like this feature works only for `@annotation-based` configurations.\nCan it be somehow enabled for xml-based configurations?\n', '**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** commented\n\nI created a feature request for adding methods to ListableBeanFactory interface that support generics / parameterized types: #16761\n']"
f29ffb37f71e09bc1ec98633a87b49875b611f8b,spring-projects/spring-framework,spring-webmvc/src/main/java/org/springframework/web/servlet/mvc/method/annotation/ServletRequestMethodArgumentResolver.java,Condition_Change,"-	private static final Method getPushBuilderMethod =
-			ClassUtils.getMethodIfAvailable(HttpServletRequest.class, ""getPushBuilder"");
+	private static final Method newPushBuilderMethod =
+			ClassUtils.getMethodIfAvailable(HttpServletRequest.class, ""newPushBuilder"");
-				(getPushBuilderMethod != null && getPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) ||
+				(newPushBuilderMethod != null && newPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) ||
-		else if (getPushBuilderMethod != null && getPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) {
-			Object pushBuilder = ReflectionUtils.invokeMethod(getPushBuilderMethod, request);
+		else if (newPushBuilderMethod != null && newPushBuilderMethod.getReturnType().isAssignableFrom(paramType)) {
+			Object pushBuilder = ReflectionUtils.invokeMethod(newPushBuilderMethod, request);",10,condition,Compatibility with Servlet 4.0 b05,"Issue: SPR-15379
",,19942,1,['Compatibility with Servlet 4.0 final draft [SPR-15379]'],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** opened **[SPR-15379](https://jira.spring.io/browse/SPR-15379?redirect=false)** and commented\n\nFollowing up on #17273, aside from a few new `MockServletContext` accessors which we're supporting already, there's also a planned renaming from `HttpServletRequest.getPushBuilder` to `newPushBuilder`. For our 5.0 RC1, we need to make sure to comply with the latest API draft there, hopefully the final draft by then.\n\n---\n\n**Affects:** 5.0 M5\n\n**Issue Links:**\n- #17273 Support for Servlet 4.0 API\n- #19883 Make use of Servlet 4.0 mapping introspection when available\n- #20434 Upgrade to Servlet API 4.0 for MVC (PushBuilder and Servlet mocks)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f29ffb37f71e09bc1ec98633a87b49875b611f8b\n""]",['closed'],[1],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe're up to date with Servlet 4.0 b05 in the meantime, including the `newPushBuilder` renaming.\n\nThere are no further changes planned which would affect us, so we're probably good for our 5.0 RC1 now.\n""]"
f2e898d35de7d6bd8c24100d631dad9148edb2e8,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ObjectUtils.java,Condition_Change,"-	 * exception types, as declared in a throws clause.
+	 * exception types, as declared in a {@code throws} clause.
-			return !optional.isPresent();
+			return optional.isEmpty();
-			if (!optional.isPresent()) {
+			if (optional.isEmpty()) {
-	 * <li>{@code""Optional.empty""} if {@code obj} is an empty {@link Optional}</li>
-	 * <li>{@code""Optional[<concise-string>]""} if {@code obj} is a non-empty {@code Optional},
-	 * where {@code <concise-string>} is the result of invoking {@link #nullSafeConciseToString}
-	 * on the object contained in the {@code Optional}</li>
+	 * <li>{@code ""Optional.empty""} if {@code obj} is an empty {@link Optional}</li>
+	 * <li>{@code ""Optional[<concise-string>]""} if {@code obj} is a non-empty {@code Optional},
+	 * where {@code <concise-string>} is the result of invoking this method on the object
+	 * contained in the {@code Optional}</li>",4,condition,Polish,,,,0,N/A,N/A,N/A,N/A,N/A
f31eb2dcf9f03148907ea49c209144753c96573a,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/support/PathMatchingResourcePatternResolver.java,Add_Condition,"+
+		// Skip scanning the module path when running in a native image.
+		if (NativeDetector.inNativeImage()) {
+			return result;
+		}
+",5,condition,Skip scanning the module path when running in a native image,"Prior to this commit, the following exception was thrown when using the
PathMatchingResourcePatternResolver to scan for class path resources
using the `classpath*:` prefix within a native image.

com.oracle.svm.core.jdk.UnsupportedFeatureError: JRT file system is disabled
com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89)
jdk.internal.module.SystemModuleFinders$SystemImage.reader(SystemModuleFinders.java:139)
jdk.internal.module.SystemModuleFinders$ModuleContentSpliterator.<init>(SystemModuleFinders.java:527)
jdk.internal.module.SystemModuleFinders$SystemModuleReader.list(SystemModuleFinders.java:502)
org.springframework.core.io.support.PathMatchingResourcePatternResolver.lambda$findAllModulePathResources$6(PathMatchingResourcePatternResolver.java:819)

This commit addresses this by not attempting to scan the module path
when running in a GraalVM native image.

Closes gh-29183
",,29183,1,['Optimize native footprint by avoiding using `ModuleFinder.ofSystem()` at runtime'],"['#28506 introduced JPMS support in `PathMatchingResourcePatternResolver` by using `ModuleFinder.ofSystem()`, but it has introduced a significant footprint increase on native (close to 2M RSS) due to the transitive usage of `JarVerifier` and related crypto classes.\r\n\r\nThis commit skip `ModuleFinder.ofSystem()` usage on native since JPMS usage is pretty niche, so it is probably ok to skip it on native. We may be able to re-introduce JPMS on native support there if we achieve to support this use case via #29081.']",['closed'],[1],"[""While working on #29163, I have encountered the following error.\r\n\r\n```\r\n    => com.oracle.svm.core.jdk.UnsupportedFeatureError: JRT file system is disabled\r\n       com.oracle.svm.core.util.VMError.unsupportedFeature(VMError.java:89)\r\n       jdk.internal.module.SystemModuleFinders$SystemImage.reader(SystemModuleFinders.java:139)\r\n       jdk.internal.module.SystemModuleFinders$ModuleContentSpliterator.<init>(SystemModuleFinders.java:527)\r\n       jdk.internal.module.SystemModuleFinders$SystemModuleReader.list(SystemModuleFinders.java:502)\r\n       org.springframework.core.io.support.PathMatchingResourcePatternResolver.lambda$findAllModulePathResources$6(PathMatchingResourcePatternResolver.java:819)\r\n```\r\n\r\nIn light of that, I am reopening this issue and co-assigning it to me since I'll work on a fix.""]"
f3884084f27d9058d6a56cf27d695b373e203e7c,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/io/DefaultResourceLoader.java,Add_Condition,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-		if (location.startsWith(CLASSPATH_URL_PREFIX)) {
+		if (location.startsWith(""/"")) {
+			return getResourceByPath(location);
+		}
+		else if (location.startsWith(CLASSPATH_URL_PREFIX)) {",5,condition,"Optimized DefaultResourceLoader's getResource implementation for ""/..."" paths, not relying on URL parsing exceptions for such a common case anymore","Issue: SPR-8283
",,12931,1,"['ServletContextResourceLoader performance problem: creates a lot of MalformedURLExceptions (""no protocol"") in normal operation [SPR-8283]']","[""**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** opened **[SPR-8283](https://jira.spring.io/browse/SPR-8283?redirect=false)** and commented\n\nThe performance of ServletContextResourceLoader.getResource is very bad because it creates a MalformedURLException in normal operation.\nI've noticed this problem in Grails webapplications.\n\nCreating exceptions are costly because filling the stack trace of the exception takes relatively a lot of cpu.\n\nThere should be a better way to check url validity (without exceptions). In commons-validator there is org.apache.commons.validator.routines.UrlValidator , but I guess a simple check in ServletContextResourceLoader.getResource should be ok. (if path starts with '/' , prefer getResourceByPath)\n\n\n---\n\n**Affects:** 3.0.5\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f3884084f27d9058d6a56cf27d695b373e203e7c\n""]",['closed'],[2],"[""**[Lari Hotari](https://jira.spring.io/secure/ViewProfile.jspa?name=lhotari)** commented\n\npinging this issue. It's still a minor performance problem. http://shipilev.net/blog/2014/exceptional-performance/ tells why.\n"", '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nGood point. I\'ve added a\n\n    if (location.startsWith(""/"")) {\n        return getResourceByPath(location);\n    }\n\nblock to the very beginning of DefaultResourceLoader\'s getResource implementation, optimizing for such non-URL paths. We still fall back to getResourceByPath after a URL parsing failure as well, but that\'s an exceptional case then and not used for regular ""/..."" paths anymore.\n\nJuergen\n']"
f3cb331e4efde2a36f0dfe4be94105f55db2c29b,spring-projects/spring-framework,spring-expression/src/main/java/org/springframework/expression/spel/support/ReflectivePropertyAccessor.java,Remove_Condition,"- * Copyright 2002-2022 the original author or authors.
+ * Copyright 2002-2023 the original author or authors.
-		Method method = findGetterForProperty(propertyName, clazz, target instanceof Class);
-		if (method == null && target instanceof Class) {
-			method = findGetterForProperty(propertyName, target.getClass(), false);
+		boolean targetIsaClass = (target instanceof Class);
+		Method method = findGetterForProperty(propertyName, clazz, targetIsaClass);
+		if (method == null && targetIsaClass) {
+			// Fallback for getter instance methods in java.lang.Class.
+			method = findGetterForProperty(propertyName, Class.class, false);
-		if (method == null && target instanceof Class) {
-			method = findSetterForProperty(propertyName, target.getClass(), false);
-		}
+		// In contrast to findGetterForProperty(), we do not look for setters in
+		// java.lang.Class as a fallback, since Class doesn't have any public setters.",10,condition,Optimize find[Getter|Setter]ForProperty() in ReflectivePropertyAccessor,,,,0,N/A,N/A,N/A,N/A,N/A
f3dce4bb9ab84beaad5345a3690dbdaffc8009f9,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/AutowiredAnnotationBeanPostProcessor.java,Add_Condition,"-					if (!method.getDeclaringClass().isRecord() && method.getParameterCount() == 0) {
+					if (method.getParameterCount() == 0) {
+						if (method.getDeclaringClass().isRecord()) {
+							// Annotations on the compact constructor arguments made available on accessors, ignoring.
+							return;
+						}",5,condition,"Polish ""Ignore @Value on record property""","See gh-31433
",,31433,1,['Use of @Value in compact constructor of a record should not register method injection'],"['When I try to use `@Value` annotation a record property, I get a warning in the logs that autowiring should only be used on methods with parameters. What that seems to imply is that attaching `@Value` on the property is actually attaching it on the generated method `property()`, which has no parameters.\r\n\r\nExample:\r\n```java\r\n@Component\r\npublic record MyRecord(@Value(""${myProp}"") String prop) {}\r\n```\r\n\r\nOutput:\r\n```\r\n02:21:15.043 [main] INFO  o.s.b.f.a.AutowiredAnnotationBeanPostProcessor - Autowired annotation should only be used on methods with parameters: public java.lang.String com.example.MyRecord.prop()\r\n```\r\n\r\nMy fix is to just check first, if the bean is a record or not.']",['closed'],[6],"[""Thanks for the PR but are you sure that the code you've shared above currently triggers the warning? Does it work at all? \r\n\r\nIt fails for me as follows:\r\n\r\n```\r\norg.springframework.beans.factory.BeanCreationException: Error creating bean with name 'myComponent': Injection of autowired dependencies failed; nested exception is java.lang.IllegalAccessException: Can not set final java.lang.String field com.example.demo.MyComponent.prop to java.lang.String\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:405) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.populateBean(AbstractAutowireCapableBeanFactory.java:1431) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:619) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:542) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:335) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:234) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:333) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:208) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.support.DefaultListableBeanFactory.preInstantiateSingletons(DefaultListableBeanFactory.java:955) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:921) ~[spring-context-5.3.29.jar:5.3.29]\r\n\tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:583) ~[spring-context-5.3.29.jar:5.3.29]\r\n\tat org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:147) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat org.springframework.boot.SpringApplication.refresh(SpringApplication.java:731) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:408) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:307) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1303) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1292) ~[spring-boot-2.7.14.jar:2.7.14]\r\n\tat com.example.demo.DemoApplication.main(DemoApplication.java:12) ~[classes/:na]\r\nCaused by: java.lang.IllegalAccessException: Can not set final java.lang.String field com.example.demo.MyComponent.prop to java.lang.String\r\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:76) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwFinalFieldIllegalAccessException(UnsafeFieldAccessorImpl.java:80) ~[na:na]\r\n\tat java.base/jdk.internal.reflect.UnsafeQualifiedObjectFieldAccessorImpl.set(UnsafeQualifiedObjectFieldAccessorImpl.java:79) ~[na:na]\r\n\tat java.base/java.lang.reflect.Field.set(Field.java:799) ~[na:na]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor$AutowiredFieldElement.inject(AutowiredAnnotationBeanPostProcessor.java:646) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.annotation.InjectionMetadata.inject(InjectionMetadata.java:119) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\tat org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor.postProcessProperties(AutowiredAnnotationBeanPostProcessor.java:399) ~[spring-beans-5.3.29.jar:5.3.29]\r\n\t... 17 common frames omitted\r\n```\r\n\r\nTurning a `record` into a bean is a bit odd. In any case, please clarify your assumptions as we can't really process this until we understand it."", '@snicoll I confirm that log is triggered.\r\n```\r\n o.s.b.f.a.AutowiredAnnotationBeanPostProcessor INFO Autowired annotation should only be used on methods with parameters: public java.lang.String io.example.showcase.MyRecord.prop()\r\n\r\n```', 'Thanks. ""logging a warning"" broke my brain, I was looking for a warning, not an info message. The bits on testing and use of record remains though.', '@snicoll Sorry for the misunderstanding, it is an INFO log, but communicating a sort of warning, didn\'t know how to call it. \r\n\r\nIt works well for me with the code I provided (+ basic Spring Boot project, latest, JDK 21 or 17).\r\n\r\nAs for `record` being odd when used as a bean. I was just experimenting with records + Spring. Using records as a bean seems mostly equivalent to e.g.:\r\n```java\r\n@Component\r\npublic class MyClass {\r\n  private String prop;\r\n  public MyClass(@Value(""${myProp}"") String prop) {\r\n    this.prop = prop;\r\n  }\r\n  // getter\r\n}\r\n```\r\n\r\nBut you\'re kinda right. Now that I think about the use cases, it might not be that needed. If I have some service that needs a property value, and I use a record for it, I\'d get an unwanted property accessor automatically, which is not great. I was thinking more like loading properties into a ""configuration"" carrying bean, but that\'s also possible with e.g.:\r\n```java\r\n@ConfigurationProperties(prefix = ""config"")\r\npublic record Config(String first, String second) {}\r\n```\r\nwhich works well.', '>  I was thinking more like loading properties into a ""configuration"" carrying bean,\r\n\r\nYeah, sorry. You\'re totally right. The `@Value` with a record makes sense indeed.', '@martin-lukas thanks very much for making your first contribution to Spring Framework.']"
f425a993e7be82ffdbdda24370925a34c42925f2,spring-projects/spring-framework,spring-websocket/src/main/java/org/springframework/web/socket/messaging/StompSubProtocolHandler.java,Add_Condition,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
+				if (!session.isOpen()) {
+					logger.trace(""Dropped inbound WebSocket message due to closed session"");
+					return;
+				}",4,condition,Ignore missing STOMP decoder if session closed,"Closes gh-24842
",,24842,1,['Avoid “No decoder for session id” Exception if session is closed'],"['Hello, We using spring websocket in stomp for chatting in service. ( android, ios app connect to server with stomp, and then send/receive stomp messages. ) when we deploy stomp web server, throws exception when server reloading. ( intermittently occurs after server reloading. )\r\n\r\n```\r\n""java.lang.IllegalStateException: No decoder for session id \'e3d585e7-f176-362b-2b7a-9dbf8630cc82\'\r\n at org.springframework.web.socket.messaging.StompSubProtocolHandler.handleMessageFromClient(StompSubProtocolHandler.java:231)\r\n at org.springframework.web.socket.messaging.SubProtocolWebSocketHandler.handleMessage(SubProtocolWebSocketHandler.java:312)\r\n at org.springframework.web.socket.handler.WebSocketHandlerDecorator.handleMessage(WebSocketHandlerDecorator.java:75)\r\n```\r\n\r\nI heard that this exception occurs the connection is closed by the server and spring drops the session and everything(decoder) associated with it. This exception occurs in spring library. so we can\'t anything to prevent this exception occurs.\r\n\r\nI want know about how can we prevent to occur this exception when server deployed.\r\n\r\nI thought some cases about send to ""DISCONNET"" message client.\r\n\r\n1. server send ""DISCONNECT"" message to client with regiseterd session id when server drops.\r\nBut in now, we don\'t know how can get connected session id in server. If we can get session id for all client connected in server, then we can do it. or if we can extend StompSubProtocolHandler and register custom StompSubProtocolHandler, then it can be done.\r\n\r\n2. catch IllegalStateException and send to ""DISCONNET"" message client.\r\nThis error occurs in library. If we register exception handler, then we seems to control it, but we can\'t know about session id in clent. ']",['closed'],[1],"[""This is most likely a race condition where the `WebSocketSession` has closed at the same time. We can check and if that's the case, only log a warning about the dropped incoming message.""]"
f4a73b79b844486da5d39f4c0b7b997c72eb56ca,spring-projects/spring-framework,spring-context/src/main/java/org/springframework/cache/interceptor/CacheAspectSupport.java,Add_Condition,"+				else {
+					continue;
+				}",3,condition,Avoid CacheAspectSupport#findInCaches fall through to reactive handler,"Prior to this commit if the return type is a CompletableFuture but a
cache get returns null, the execution falls through to the
reactiveCachingHandler.

This commit ensures that evaluation instead continues onto the next
cache (if any).

Closes gh-33371
",,33371,1,['Avoid CacheAspectSupport#findInCaches falling through to the reactiveCachingHandler'],"['In `findInCaches`, if the return type is a `CompletableFuture` but a cache get returns `null`, the execution falls through to the `reactiveCachingHandler`.\r\n\r\nIt should instead `continue` onto the next cache in the context (if any).']",['closed'],[0],[]
f4e23fe204588a744b111b8c7f6bbd1dbeda97b0,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/core/DefaultParameterNameDiscoverer.java,Add_Condition,"+import org.springframework.aot.AotDetector;
+
- * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} for checking
- * debug information in the class file.
+ * to the ASM-based {@link LocalVariableTableParameterNameDiscoverer} (when not using
+ * AOT-processed optimizations) for checking debug information in the class file.
-		addDiscoverer(new LocalVariableTableParameterNameDiscoverer());
+		if (!AotDetector.useGeneratedArtifacts()) {
+			addDiscoverer(new LocalVariableTableParameterNameDiscoverer());
+		}",6,condition,Do not use LocalVariableTableParameterNameDiscoverer in AOT mode,"Closes gh-29531
",,29531,1,['Deprecate `LocalVariableTableParameterNameDiscoverer` completely (avoiding its exposure in native images)'],['`DefaultParameterNameDiscoverer` should be updated to not use `LocalVariableTableParameterNameDiscoverer` when running as a native image.'],['closed'],[7],"['I think this should behave the same way on the JVM. the check should be on AOT not native. ', ""Could be great for consistency indeed even if technically on JVM + AOT we have to the capability to use it. Let's validate the choice in today's Framework meeting."", 'I updated the PR accordingly.', ""An interesting case in terms of automatic exclusion indeed.\r\n\r\nWe certainly don't want to support that parameter name discovery strategy in a native image (where the underlying class files are generally not available), and it's not recommended in any other scenario either... since you can always compile with `-parameters` instead, with no need to parse class files then. In such a recommended setup, `StandardReflectionParameterNameDiscoverer` will always be able to resolve the parameter names first, so `LocalVariableTableParameterNameDiscoverer` will never actually be reached.\r\n\r\nFrom that perspective, for a setup following Java 8+ recommendations, `LocalVariableTableParameterNameDiscoverer` could even be removed completely. It's only really there for backwards compatibility with older setups that got migrated without `-parameters`. Baking that assumption into our AOT arrangement - namely that you need to compile with `-parameters` when you are optimizing for AOT, completely avoiding unnecessary class file parsing - seems sensible."", ""I'm afraid we'll have to return to a `NativeDetector` check here since `AotDetector` is in the higher-level `aot` package whereas `DefaultParameterNameDiscoverer` is a very low-level `core` component. Since there is no significant difference to be expected in practice, I don't think the cycle-free narrower check matters. After all, `LocalVariableTableParameterNameDiscoverer` is effectively not applicable in a native image due to its class file parsing approach, so it arguably does make sense to exclude it on that basis and rely on `-parameters` usage by convention."", ""Reopening this one after a team discussion: It is ultimately preferable to deprecate `LocalVariableTableParameterNameDiscoverer` completely, not using it by default in any setup anymore, since that class file parsing strategy has been long superseded by the Java 8 `-parameters` flag on `javac` already.\r\n\r\nWe have considered doing this before and meant to address the native image impact of it in 6.0 but somehow missed this last week. So let's fix this glitch now, in time for the Boot 3.0 GA release, with a note in the upgrade wiki page."", ""As a lenient measure for the transition period, we'll keep `LocalVariableTableParameterNameDiscoverer` active on the JVM but log a warning for each successful parameter name resolution. This will only be logged when parameter names actually need to be inspected, and only when `StandardReflectionParameterNameDiscoverer` did not return anything, suggesting that compilation with `-parameters` has been missed somewhere.""]"
f781c459b43eeac60188cf6a71508ff0cc8c9229,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/AbstractBeanFactory.java,Condition_Change,"-		PropertyEditorRegistrySupport registrySupport =
-				(registry instanceof PropertyEditorRegistrySupport ? (PropertyEditorRegistrySupport) registry : null);
-		if (registrySupport != null) {
-			registrySupport.useConfigValueEditors();
+		if (registry instanceof PropertyEditorRegistrySupport) {
+			((PropertyEditorRegistrySupport) registry).useConfigValueEditors();",6,condition,Simplify AbstractBeanFactory.registerCustomEditors(),"This commit avoids an unnecessary non-null check in
registerCustomEditors().

Closes gh-26022
",,26022,1,['Simplify AbstractBeanFactory.registerCustomEditors()'],['Remove unnecessary non-null check'],['closed'],[1],['This has been merged into `master`.\r\n\r\nThanks']
f8b611444072bea0a2755ba73b4dd15fe33098e5,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/annotation/BeanFactoryAnnotationUtils.java,Add_Condition,"- * Copyright 2002-2012 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
+ * @author Juergen Hoeller
+		else if (bf.containsBean(qualifier)) {
+			// Fallback: target bean at least found by bean name.
+			return bf.getBean(qualifier, beanType);
+		}",3,condition,BeanFactoryAnnotationUtils consistently applies bean name fallback when no BeanDefinition present,"Issue: SPR-11915
",,16534,1,['Manually registered transaction manager are not recognized by qualifiedBeanOfType [SPR-11915]'],"[""**[Michael McCarthy](https://jira.spring.io/secure/ViewProfile.jspa?name=mikeycmccarthy)** opened **[SPR-11915](https://jira.spring.io/browse/SPR-11915?redirect=false)** and commented\n\nAs per the StackOverflow question above, I've been trying to use an `@Transactional` annotation with a qualifier, and was hoping that my manually registered singleton bean would get picked up but sadly it doesn't.\n\nIf I debug the method public static \\<T> T qualifiedBeanOfType(BeanFactory beanFactory, Class\\<T> beanType, String qualifier) and evaluate beanFactory.containsBean(qualifier) in my IDE before the method executes, the result of that evaluation is 'true'.\n\nUnfortunately, qualifiedBeanOfType throws a NoSuchBeanDefinitionException before that fallback method gets a chance to run.\n\nIs it just me or will the fallback never get invoked?\n\n\n---\n\n**Affects:** 3.2.9, 4.0.5\n\n**Reference URL:** http://stackoverflow.com/questions/24385151/can-i-programatically-add-a-qualifier-to-a-bean?noredirect=1#comment37747172_24385151\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/67ebef6b3241723a9a1a653d23811838cafd1afa, https://github.com/spring-projects/spring-framework/commit/b9935e9fe31888cecc06ec04174e87edee3da7f0, https://github.com/spring-projects/spring-framework/commit/5ed20d21b1e301280b525cdc0c602f09e4ccff83, https://github.com/spring-projects/spring-framework/commit/f8b611444072bea0a2755ba73b4dd15fe33098e5\n\n**Backported to:** [3.2.10](https://github.com/spring-projects/spring-framework/milestone/98?closed=1)\n""]",['closed'],[8],"[""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nIt looks like that particular use case relies on bean definitions and that's not strictly necessary on a first look because it's not invoked as part of the application context initialization.\n\nSome proxy setup routine actually can't look at anything else than the bean definition as some of the beans are not fully initialized yet.\n\nCould you please setup a small example that demonstrates this issue (check the [spring-framework-issues repo](https://github.com/spring-projects/spring-framework-issues#readme)).\n\nThanks!\n"", ""**[Michael McCarthy](https://jira.spring.io/secure/ViewProfile.jspa?name=mikeycmccarthy)** commented\n\nThanks for looking! I'll see if I can knock up a test this weekend and put it on GitHub.\n"", ""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nno worries. The reason I am asking is that I would see when/how those beans are registered. Besides, having a simple test would really speed the resolution of this one if necessary (4.1 RC1 is around the corner).\n\nYou can look [at this project](https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-11107) that already uses transaction-related stuff if you want to get started more easily. I don't need anything fancy for the test, if it just blows up because it can't find the transaction manager, that's enough.\n"", '**[Michael McCarthy](https://jira.spring.io/secure/ViewProfile.jspa?name=mikeycmccarthy)** commented\n\nDone, have a look at https://github.com/spring-projects/spring-framework-issues/pull/81. It is probably looks a bit contrived but hopefully shows what is happening here. Thanks\n', '**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nrepro project available here: https://github.com/spring-projects/spring-framework-issues/tree/master/SPR-11915\n\nThanks.\n', ""**[Michael McCarthy](https://jira.spring.io/secure/ViewProfile.jspa?name=mikeycmccarthy)** commented\n\nIf you need any background on why someone might be registering Spring beans in this way, check out https://github.com/nhuray/dropwizard-spring, and in particular https://github.com/nhuray/dropwizard-spring/blob/master/src/main/java/com/github/nhuray/dropwizard/spring/SpringBundle.java.\n\nNot my project BTW but we're using it.\n\nThanks\nMichael\n"", ""**[Stéphane Nicoll](https://jira.spring.io/secure/ViewProfile.jspa?name=snicoll)** commented\n\nThis is now fixed in master and will be soon backported to 3.2.x and 4.0.x\n\nYou have a very good point: that fallback method should run no matter what. That's what we've done and your test project runs fine now against a local build of `4.1.0.BUILD-SNAPSHOT`.\n\nThanks for the report!\n"", ""**[Michael McCarthy](https://jira.spring.io/secure/ViewProfile.jspa?name=mikeycmccarthy)** commented\n\nThat's brilliant, thanks for the quick turnaround! I'll take a look at fisheye to see the change just out of curiosity.\n""]"
f9aae8dd5a9a325fa9cb3f1a3b5e9081bbe91e65,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/ConstructorResolver.java,Condition_Change,"- * Copyright 2002-2019 the original author or authors.
+ * Copyright 2002-2020 the original author or authors.
-
-
+
-			if (index > minNrOfArgs) {
+			if (index + 1 > minNrOfArgs) {",5,condition,Consistently determine minimum number of arguments from specified index,"Closes gh-25130
",,25130,1,[' ConstructorResolver.resolveConstructorArguments() return value issue'],"['In `ConstructorResolver`:\r\n\r\n```java\r\nprivate int resolveConstructorArguments(String beanName, RootBeanDefinition mbd, BeanWrapper bw,\r\n\t\t\tConstructorArgumentValues cargs, ConstructorArgumentValues resolvedValues) {\r\n\t\tTypeConverter customConverter = this.beanFactory.getCustomTypeConverter();\r\n\t\t// ...\r\n\r\n\t\tfor (Map.Entry<Integer, ConstructorArgumentValues.ValueHolder> entry : cargs.getIndexedArgumentValues().entrySet()) {\r\n\t\t\tint index = entry.getKey();\r\n\t\t\tif (index < 0) {\r\n\t\t\t\tthrow new BeanCreationException(mbd.getResourceDescription(), beanName,\r\n\t\t\t\t\t\t""Invalid constructor argument index: "" + index);\r\n\t\t\t}\r\n\t\t\tif (index > minNrOfArgs) {\r\n\t\t\t\tminNrOfArgs = index + 1;\r\n\t\t\t}\r\n\t\t\t// ....\r\n\t\t}\r\n// ....\r\n    return minNrOfArgs;\r\n}\r\n```\r\n\r\nI assume that method  `resolveConstructorArguments` is to resolve contructor arguments in the XML file and return the minimum number of parameters required by contructor 。but if the first parameter is autowired , the second parameter  is config by XML file，the method will not work well。\r\n\r\n**example**:\r\n\r\n```java\r\npublic class FactoryObject {\r\n\t\r\n    public DmzService getDmz(String name, int age, Date birthDay, OrderService orderService) {\r\n\r\n\tpublic DmzService getDmz(OrderService orderService,String name) {\r\n\t\t\r\n\t\treturn new DmzService(orderService,name);\r\n\t}\r\n\r\n}\r\n```\r\n\r\n```xml\r\n<?xml version=""1.0"" encoding=""UTF-8""?>\r\n<beans xmlns=""http://www.springframework.org/schema/beans""\r\n\t   xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""\r\n\t   xsi:schemaLocation=""http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd""\r\n\t   default-autowire=""constructor"">\r\n\t<bean id=""factoryObject"" class=""com.dmz.spring.first.instantiation.service.FactoryObject""/>\r\n\r\n\t<bean class=""com.dmz.spring.first.instantiation.service.OrderService"" id=""orderService""/>\r\n\r\n\t<bean id=""dmzService"" factory-bean=""factoryObject"" factory-method=""getDmz"">\r\n\t\t<constructor-arg index=""1""  value=""dmz""/>\r\n\t</bean>\r\n\r\n</beans>\r\n```\r\n\r\nthe `resolveConstructorArguments` method will return 1,but correct answer is 2。\r\n\r\nI think the problem arises because of this judgment:\r\n\r\n```java\r\nif (index > minNrOfArgs) {\r\n    minNrOfArgs = index + 1;\r\n}\r\n```\r\n\r\nIt might be better to change it to look like this\r\n\r\n```\r\nif (index + 1 > minNrOfArgs) {\r\n    minNrOfArgs = index + 1;\r\n}\r\n```\r\n\r\n\r\n\r\n\r\n']",['closed'],[0],[]
f9b319d3ba9d3141fd5edc4fde558daebd2c596f,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/core/GenericMessagingTemplate.java,Condition_Change,"-		if (replyMessage != null && (originalReplyChannelHeader!= null || originalErrorChannelHeader != null)) {
+		if (replyMessage != null) {",2,condition,Revert Incorrect MessagingTemplate Change,"The change to ""optimize"" the template by not rebuilding the reply
message when the original header channels was null was incorrect.

We need to null out those headers if they were originally null.

Issue: SPR-15991
",,20541,1,['DispatcherHandler no longer orders HandlerMapping beans [SPR-15991]'],"['**[Andy Wilkinson](https://jira.spring.io/secure/ViewProfile.jspa?name=awilkinson)** opened **[SPR-15991](https://jira.spring.io/browse/SPR-15991?redirect=false)** and commented\n\n[This change](https://github.com/spring-projects/spring-framework/commit/819ca0dbd40cccd4eae0353ff0b9aeaf248d3ab6) has introduced a regression which means that `HandlerMapping` beans are no longer ordered. Currently, `this.handlerMappings` is being sorted:\n\n```java\nArrayList<HandlerMapping> mappings = new ArrayList<>(mappingBeans.values());\nAnnotationAwareOrderComparator.sort(this.handlerMappings);\nthis.handlerMappings = Collections.unmodifiableList(mappings);\n```\n\nI believe it should be `mappings` that is sorted:\n\n```java\nArrayList<HandlerMapping> mappings = new ArrayList<>(mappingBeans.values());\nAnnotationAwareOrderComparator.sort(mappings);\nthis.handlerMappings = Collections.unmodifiableList(mappings);\n```\n\n---\n\n**Affects:** 5.0 GA\n\n**Issue Links:**\n- #20488 Provide an API for introspection of handler mappings\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/816a58fcf91b7cdb27b430ae6b96c9143a67d124, https://github.com/spring-projects/spring-framework/commit/31619b3ffbf4e36bf9c3974d07115a8e3417ba03, https://github.com/spring-projects/spring-framework/commit/f9b319d3ba9d3141fd5edc4fde558daebd2c596f\n']",['closed'],[1],"[""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nShould be fixed now, I've also added a test ;).\n""]"
f9cffcce0544b648e002251518e319dbdcfaec41,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/core/JdbcTemplate.java,Add_Condition,"+		int batchSize = pss.getBatchSize();
+		if (batchSize == 0) {
+			return new int[0];
+		}
-				int batchSize = pss.getBatchSize();
-					return batchSize > 0 ? ps.executeBatch() : new int[] {};
+					return ps.executeBatch();",7,condition,"Polish ""Avoid calling executeBatch() with an empty batch""","See gh-27154
",,27154,1,['Avoid calling executeBatch() with 0 batch size'],"['Now usign  `org.springframework.jdbc.core.JdbcTemplate#batchUpdate(java.lang.String, org.springframework.jdbc.core.BatchPreparedStatementSetter)` with empty data array may produce exception with some DBs. E. g. with HSQLDB it produce `java.sql.SQLException: statement is not in batch mode`. Suggest avoid it by batchSize checking.']",['closed'],[2],"['@Li0n13 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27154)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27154) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@Li0n13 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=27154)!']"
f9d2641fd59a39b149277c707dd277922c3aa5d7,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultListableBeanFactory.java,Condition_Change,"- * Copyright 2002-2023 the original author or authors.
+ * Copyright 2002-2024 the original author or authors.
-	private static Class<?> javaxInjectProviderClass;
+	private static Class<?> jakartaInjectProviderClass;
-			javaxInjectProviderClass =
+			jakartaInjectProviderClass =
-			javaxInjectProviderClass = null;
+			jakartaInjectProviderClass = null;
-		else if (javaxInjectProviderClass == descriptor.getDependencyType()) {
+		else if (jakartaInjectProviderClass == descriptor.getDependencyType()) {",8,condition,Update field name to reflect switch to Jakarta,,,,0,N/A,N/A,N/A,N/A,N/A
f9df8c738a4eb9fff292f58a82be7ba09e1c3097,spring-projects/spring-framework,spring-web/src/main/java/org/springframework/http/server/reactive/AbstractListenerReadPublisher.java,Add_Condition,"- * Copyright 2002-2017 the original author or authors.
+ * Copyright 2002-2018 the original author or authors.
-			checkOnDataAvailable();
+			// Protect from infinite recursion in Undertow, where we can't check if data
+			// is available, so all we can do is to try to read.
+			// Generally, no need to check if we just came out of readAndPublish()...
+			if (!oldState.equals(State.READING)) {
+				checkOnDataAvailable();
+			}",4,condition,Avoid inifinite recursion in UndertowServerHttpRequest,"Undertow does not provide a way to check if data is available to read
but instead we have to try to read and see if any data is returned.
This makes it impossible to implement checkOnDataAvailable without
trying to read and that can lead to infinite recursion like this:

...
UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156)
AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:177)
AbstractListenerReadPublisher.access$900(AbstractListenerReadPublisher.java:47)
AbstractListenerReadPublisher$State$4.onDataAvailable(AbstractListenerReadPublisher.java:319)
AbstractListenerReadPublisher.onDataAvailable(AbstractListenerReadPublisher.java:85)
UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156)

This commit prevent the call to checkOnDataAvailable() when switching
states from READING->DEMAND which implies we exited the readAndPublish
loop because there was no more data to read.

Issue: SPR-16545
",,21088,1,['StackOverflowError when using WebFlux multipart file data handler with Undertow [SPR-16545]'],"['**[Tamas Eppel](https://jira.spring.io/secure/ViewProfile.jspa?name=teppel)** opened **[SPR-16545](https://jira.spring.io/browse/SPR-16545?redirect=false)** and commented\n\nI am using Spring Boot 2 RC2 - Spring 5.0.3 with WebFlux and the Router abstraction. The server is Undertow.\n\nI have created the handler according to: https://github.com/sdeleuze/webflux-multipart/blob/master/src/main/java/com/example/MultipartRoute.java\n\nI have a router handler like this:\n\n```kotlin\n@Component\nclass MultimediaHandler {\n    fun upload(request: ServerRequest): Mono<ServerResponse> {\n        return request.body(BodyExtractors.toMultipartData()).flatMap{ parts ->\n            val map = parts.toSingleValueMap()\n            ServerResponse.ok().build()\n        }\n    }\n}\n```\n\nI am getting a StackOverflowError:\n\n```\njava.lang.StackOverflowError: null\n\tat io.undertow.conduits.FixedLengthStreamSourceConduit.read(FixedLengthStreamSourceConduit.java:249) ~[undertow-core-1.4.22.Final.jar:1.4.22.Final]\n\tat org.xnio.conduits.ConduitStreamSourceChannel.read(ConduitStreamSourceChannel.java:127) ~[xnio-api-3.3.8.Final.jar:3.3.8.Final]\n\tat io.undertow.channels.DetachableStreamSourceChannel.read(DetachableStreamSourceChannel.java:209) ~[undertow-core-1.4.22.Final.jar:1.4.22.Final]\n\tat io.undertow.server.HttpServerExchange$ReadDispatchChannel.read(HttpServerExchange.java:2332) ~[undertow-core-1.4.22.Final.jar:1.4.22.Final]\n\tat org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.read(UndertowServerHttpRequest.java:171) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE]\n\tat org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.read(UndertowServerHttpRequest.java:127) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE]\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher.readAndPublish(AbstractListenerReadPublisher.java:145) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE]\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher.access$1000(AbstractListenerReadPublisher.java:47) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE]\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher$State$4.onDataAvailable(AbstractListenerReadPublisher.java:317) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE]\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher.onDataAvailable(AbstractListenerReadPublisher.java:85) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE]\n\tat org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:155) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE]\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:177) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE]\n\tat org.springframework.http.server.reactive.AbstractListenerReadPublisher.access$900(AbstractListenerReadPublisher.java:47) ~[spring-web-5.0.3.RELEASE.jar:5.0.3.RELEASE]\n\t...\n```\n\n---\n\n**Affects:** 5.0.3\n\n**Attachments:**\n- [foo-small.txt](https://jira.spring.io/secure/attachment/25415/foo-small.txt) (_2.44 kB_)\n- [upload-error-sample.zip](https://jira.spring.io/secure/attachment/25416/upload-error-sample.zip) (_182.67 kB_)\n- [upload-error-sample-wo-kafka.zip](https://jira.spring.io/secure/attachment/25417/upload-error-sample-wo-kafka.zip) (_181.18 kB_)\n\n**Issue Links:**\n- #21173 Spring WebFlux + Undertow + HTTP/2 is not working with a POST request (_**""is duplicated by""**_)\n- #21121 spring webflux ServerRequest.bodyToMono().block will freeze for HTTP post request whose header size + body size > 1024\n- #21089 FilePart transferTo fails with java.nio.file.NoSuchFileException\n- #21243 StackOverFlowError and memory leaking when sending large files slowly with Webflux + Undertow\n- #21090 [docs] Restructure chapter Functional Endpoints chpater\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/f9df8c738a4eb9fff292f58a82be7ba09e1c3097\n']",['closed'],[14],"['**[Tamas Eppel](https://jira.spring.io/secure/ViewProfile.jspa?name=teppel)** commented\n\nWith Netty as server it seems to be working.\n', '**[Tamas Eppel](https://jira.spring.io/secure/ViewProfile.jspa?name=teppel)** commented\n\nAdditionally it seems that the example: https://github.com/sdeleuze/webflux-multipart/ Does not compile anymore. Errors in: https://github.com/sdeleuze/webflux-multipart/blob/master/src/main/java/com/example/MultipartController.java\n\nIt would be good to have this documented as well. The official docs only mention the Controller based approach and not the Router-Handler approach: https://docs.spring.io/spring/docs/5.0.4.RELEASE/spring-framework-reference/web-reactive.html#webflux-multipart-forms\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI've [created a PR](https://github.com/sdeleuze/webflux-multipart/pull/1) to update the sample.\n\nIn the process of upgrading the sample, I did find and address one other issue, see #21089. After that, with the latest (Boot 2.0 GA, Spring Framework 5.0.5 snapshot) I am unable to reproduce the Undertow issue. Note that in the sample I removed the explicit (outdated 1.0.2) version of `nio-multipart-parser` and relied to the Boot auto configured version (1.1.0).\n\nWould you mind retrying with the updates to confirm?\n"", ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nAlso for the documentation updates I've created a separate ticket #21090 since it requires some restructuring.\n"", '**[Tamas Eppel](https://jira.spring.io/secure/ViewProfile.jspa?name=teppel)** commented\n\nI have used the updated sample. With Undertow I get the same StackOverflow. With Netty it works.\n', '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nHm, it works fine for me:\n\n```\n2018-03-02 11:53:44.137  INFO 21105 --- [           main] com.example.WebfluxMultipartApplication  : Starting WebfluxMultipartApplication on rossen-X1 with PID 21105 (/home/rossen/dev/github/sdeleuze/webflux-multipart/target/classes started by rossen in /home/rossen/dev/github/sdeleuze/webflux-multipart)\n2018-03-02 11:53:44.141 DEBUG 21105 --- [           main] com.example.WebfluxMultipartApplication  : Running with Spring Boot v2.0.0.RELEASE, Spring v5.0.5.BUILD-SNAPSHOT\n2018-03-02 11:53:44.143  INFO 21105 --- [           main] com.example.WebfluxMultipartApplication  : No active profile set, falling back to default profiles: default\n2018-03-02 11:53:44.283  INFO 21105 --- [           main] onfigReactiveWebServerApplicationContext : Refreshing org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4c1d9d4b: startup date [Fri Mar 02 11:53:44 EST 2018]; root of context hierarchy\n2018-03-02 11:53:45.838 DEBUG 21105 --- [           main] s.w.r.r.m.a.RequestMappingHandlerMapping : Looking for request mappings in application context: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4c1d9d4b: startup date [Fri Mar 02 11:53:44 EST 2018]; root of context hierarchy\n2018-03-02 11:53:45.925 DEBUG 21105 --- [           main] o.s.w.r.f.s.s.RouterFunctionMapping      : Looking for router functions in application context: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4c1d9d4b: startup date [Fri Mar 02 11:53:44 EST 2018]; root of context hierarchy\n2018-03-02 11:53:46.029  INFO 21105 --- [           main] o.s.w.r.f.s.s.RouterFunctionMapping      : Mapped (POST && /upload) -> com.example.MultipartRoute$$Lambda$242/1624817884@464649c\n/** -> class path resource [static/]\n2018-03-02 11:53:46.052  INFO 21105 --- [           main] o.s.w.r.handler.SimpleUrlHandlerMapping  : Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]\n2018-03-02 11:53:46.053  INFO 21105 --- [           main] o.s.w.r.handler.SimpleUrlHandlerMapping  : Mapped URL path [/**] onto handler of type [class org.springframework.web.reactive.resource.ResourceWebHandler]\n2018-03-02 11:53:46.172  INFO 21105 --- [           main] o.s.w.r.r.m.a.ControllerMethodResolver   : Looking for @ControllerAdvice: org.springframework.boot.web.reactive.context.AnnotationConfigReactiveWebServerApplicationContext@4c1d9d4b: startup date [Fri Mar 02 11:53:44 EST 2018]; root of context hierarchy\n2018-03-02 11:53:46.549  INFO 21105 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup\n2018-03-02 11:53:46.577  INFO 21105 --- [           main] org.xnio                                 : XNIO version 3.3.8.Final\n2018-03-02 11:53:46.592  INFO 21105 --- [           main] org.xnio.nio                             : XNIO NIO Implementation Version 3.3.8.Final\n2018-03-02 11:53:46.683  INFO 21105 --- [           main] o.s.b.w.e.u.UndertowServletWebServer     : Undertow started on port(s) 8080 (http)\n2018-03-02 11:53:46.686  INFO 21105 --- [           main] com.example.WebfluxMultipartApplication  : Started WebfluxMultipartApplication in 3.544 seconds (JVM running for 4.211)\n2018-03-02 11:53:59.000 DEBUG 21105 --- [   XNIO-1 I/O-1] o.s.web.reactive.DispatcherHandler       : Processing GET request for [http://localhost:8080/index.html]\n2018-03-02 11:54:29.455 DEBUG 21105 --- [   XNIO-1 I/O-1] o.s.web.reactive.DispatcherHandler       : Processing POST request for [http://localhost:8080/upload]\n2018-03-02 11:54:29.456 DEBUG 21105 --- [   XNIO-1 I/O-1] o.s.w.r.function.server.RouterFunctions  : Predicate ""(POST && /upload)"" matches against ""POST /upload""\n2018-03-02 11:54:29.464 DEBUG 21105 --- [   XNIO-1 I/O-1] o.s.w.c.reactive.DefaultCorsProcessor    : Skip CORS: request is from same origin\n```\n\n', '**[Tamas Eppel](https://jira.spring.io/secure/ViewProfile.jspa?name=teppel)** commented\n\nI am sorry for the late reply, was on holiday.\n\nI have prepared a sample project. (zip, and input files attached)\n\nSteps to reproduce:\n* unpack the zip file\n* start kafka with: docker-compose up\n* compile the spring project: `./gradlew build`\n* start the app: `java -jar ./build/libs/upload-error-sample-0.0.1-SNAPSHOT.jar`\n* upload the files: `curl -v -F import=\\@/tmp/dc/foo-small.txt  http://localhost:8090/api/imports # Note: change actual path`\n\nTo switch to netty uncomment the netty line in build.gradle and comment out undertow.\n', '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nI spend some time trying to get the docker-compose command to run but but failed (and I\'m not familiar enough). Is it possible to provide something that doesn\'t require Docker and Kafka to demonstrate the issue? For example can you make it fail in the webflux-multipart sample?\n\nLooking at your MultimediaHandler, this code looks problematic:\n\n```java\nval filePart = parts.getFirst(""import"") as FilePart\nfilePart.transferTo(tmpFile.toFile())\n        .then(Mono.just(Files.newBufferedReader(tmpFile).lines().use { it.forEach { importProcessor.importLine().send(GenericMessage<String>(it)) } }))\n        .then(ServerResponse.ok().body(BodyInserters.fromObject(importId.toString())))\n```\n\nYou want `Files.newBufferedReader(tmpFile)` to be deferred so it\'s executed **after** transferTo completes. Something like:\n\n```java\nval filePart = parts.getFirst(""import"") as FilePart\nfilePart.transferTo(tmpFile.toFile())\n        .then(Mono.defer(() -> {\n            // read file .. \n            return ServerResponse.ok().body(BodyInserters.fromObject(importId.toString()));\n        });\n```\n\nEven then the file reading and calls to importLine are synchronously executed and potentially blocking but they shouldn\'t block the event loop thread? I\'m not sure if the send is blocking or not given it\'s Kafka. I presume it might in which case you might have to use publishOn.\n\nAll of those things aren\'t the original issue, but again I need a sample I can execute to be more specific or a full stack trace at least.\n', '**[Tamas Eppel](https://jira.spring.io/secure/ViewProfile.jspa?name=teppel)** commented\n\nI have uploaded one without kafka/docker. Thanks for the suggestions.\n\nMy original intention was to send each line on the file as it arrives, but then I realized I would need to parse the characters for new line (because a line can be in more parts) so I just do with the tempfile approach.\n', ""**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nOkay I'll take a look at this sample.\n\nAs for your intent, it sounds like you might want to feed the raw `part.content()` into `StringDecoder` which can split the incoming stream along newline delimiters. You shouldn't need to write to a file.\n"", '**[Tamas Eppel](https://jira.spring.io/secure/ViewProfile.jspa?name=teppel)** commented\n\nThanks for the suggestion I have rewritten it like this:\n\n```java\npackage de.techmatrix.dc.matcher.handler\n\nimport de.techmatrix.dc.matcher.component.UploadService\nimport org.springframework.core.ResolvableType\nimport org.springframework.core.codec.StringDecoder\nimport org.springframework.core.io.buffer.DataBuffer\nimport org.springframework.stereotype.Component\nimport org.springframework.util.MimeTypeUtils\nimport org.springframework.web.reactive.function.BodyExtractors\nimport org.springframework.web.reactive.function.BodyInserters\nimport org.springframework.web.reactive.function.server.ServerRequest\nimport org.springframework.web.reactive.function.server.ServerResponse\nimport reactor.core.publisher.Flux\nimport reactor.core.publisher.Mono\nimport reactor.core.publisher.toFlux\nimport reactor.core.scheduler.Schedulers\nimport java.util.*\n\nfun dataBuffers(request: ServerRequest): Flux<DataBuffer> =\n        request.body(BodyExtractors.toMultipartData())\n                .toFlux()\n                .publishOn(Schedulers.parallel())\n                .flatMap { parts -> parts.flatMap { it.value }.toFlux() }.flatMap { it.content() }\n\n@Component\nclass MultimediaHandler(val uploadService: UploadService) {\n    \n    fun upload(request: ServerRequest): Mono<ServerResponse> {\n        val importId = UUID.randomUUID()\n\n        return StringDecoder.allMimeTypes().decode(\n                dataBuffers(request), ResolvableType.forClass(String::class.java), MimeTypeUtils.TEXT_PLAIN, emptyMap())\n                .index()\n                .publishOn(Schedulers.parallel())\n                .doOnNext { uploadService.importLine(importId, it.t2, it.t1.toInt()) }\n                .map { 1 }\n                .reduce { a, b -> a + b }\n                .doOnSuccess { uploadService.importFinished(importId, it) }\n                .then(ServerResponse.ok().body(BodyInserters.fromObject(importId.toString())))\n    }\n}\n```\n\nIt would be quite good to describe this, I did not find anything in the WebFlux documentation, or by searching.\n', '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nOkay, thanks for that. I\'ve been able to confirm the recursion issue:\n\n```\n...\nat org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE]\nat org.springframework.http.server.reactive.AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:177) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE]\nat org.springframework.http.server.reactive.AbstractListenerReadPublisher.access$900(AbstractListenerReadPublisher.java:47) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE]\nat org.springframework.http.server.reactive.AbstractListenerReadPublisher$State$4.onDataAvailable(AbstractListenerReadPublisher.java:319) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE]\nat org.springframework.http.server.reactive.AbstractListenerReadPublisher.onDataAvailable(AbstractListenerReadPublisher.java:85) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE]\nat org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE]\nat org.springframework.http.server.reactive.AbstractListenerReadPublisher.changeToDemandState(AbstractListenerReadPublisher.java:177) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE]\nat org.springframework.http.server.reactive.AbstractListenerReadPublisher.access$900(AbstractListenerReadPublisher.java:47) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE]\nat org.springframework.http.server.reactive.AbstractListenerReadPublisher$State$4.onDataAvailable(AbstractListenerReadPublisher.java:319) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE]\nat org.springframework.http.server.reactive.AbstractListenerReadPublisher.onDataAvailable(AbstractListenerReadPublisher.java:85) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE]\nat org.springframework.http.server.reactive.UndertowServerHttpRequest$RequestBodyPublisher.checkOnDataAvailable(UndertowServerHttpRequest.java:156) ~[spring-web-5.0.4.RELEASE.jar:5.0.4.RELEASE]\n...\n```\n\nThis is triggered by the `Expect: 100-continue` header that curl sends in this case. However it would happen any time there is back pressure on the input side (i.e. demand present but waiting for data). It works with the ""Expect"" header forced to be empty:\n\n```\n$ curl -v -F --header ""Expect:"" import=@/home/rossen/Downloads/foo-small.txt  http://localhost:8090/api/imports\n```\n\n> I did not find anything in the WebFlux documentation, or by searching.\n\nThe codecs are [documented here](https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-codecs). We have planned #21081. Any clues what you searched on, or what you expected to find?\n', '**[Rossen Stoyanchev](https://jira.spring.io/secure/ViewProfile.jspa?name=rstoya05-aop)** commented\n\nThis should be fixed now with [f9df8c](https://github.com/spring-projects/spring-framework/commit/f9df8c738a4eb9fff292f58a82be7ba09e1c3097).\n\n[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg) if you could, please take a look to see if this fix raises any concerns.\n', '**[Violeta Georgieva](https://jira.spring.io/secure/ViewProfile.jspa?name=violetagg)** commented\n\nLGTM\n']"
fb4ad2f3ba0bf0d968a49a05efd8fd41f3e2509d,spring-projects/spring-framework,spring-beans/src/main/java/org/springframework/beans/factory/support/DefaultSingletonBeanRegistry.java,Condition_Change,"+		if (alreadySeen == null) {
+			alreadySeen = new HashSet<>();
+		}
+		alreadySeen.add(beanName);
-			if (alreadySeen == null) {
-				alreadySeen = new HashSet<>();
-			}
-			alreadySeen.add(beanName);",8,condition,Simplify DefaultSingletonBeanRegistry.isDependent(),"Move `alreadySeen` handling out of for-loop.

Closes gh-30839
",,30839,1,['Simplify `DefaultSingletonBeanRegistry.isDependent()`'],['Move `alreadySeen` out of for-loop.'],['closed'],[3],"['@bnbakp0582 Please sign the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30839)!\n\n[Click here](https://cla.pivotal.io/sync/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30839) to manually synchronize the status of this Pull Request.\n\nSee the [FAQ](https://cla.pivotal.io/about) for frequently asked questions.', '@bnbakp0582 Thank you for signing the [Contributor License Agreement](https://cla.pivotal.io/sign/spring?repositoryId=spring-projects/spring-framework&pullRequestId=30839)!', 'Hi @bnbakp0582,\r\n\r\nThis has been merged into `6.0.x` and `main` in fb4ad2f3ba0bf0d968a49a05efd8fd41f3e2509d and revised in 502997d8e986dcfde1f49b2b2f443a32b5488b13.\r\n\r\nThanks']"
fc8bd64f34d7e34d25144051b1161363a2d31477,spring-projects/spring-framework,spring-core/src/main/java/org/springframework/util/ObjectUtils.java,Remove_Condition,"-			if (optional.isEmpty()) {
-				return null;
-			}
-			Object result = optional.get();
+			Object result = optional.orElse(null);",5,condition,Simplify ObjectUtils#unwrapOptional,"This commit replaces optional.isEmpty() and optional.get() with
optional.orElse(null) for better efficiency and readability.

Closes gh-33612
",,33612,1,['Refactor unwrapOptional method to improve readability and performance'],"['### Summary:\r\nThis PR refactors the `unwrapOptional()` method in `ObjectUtils` to enhance code readability and slightly improve performance. The changes focus on simplifying the Optional handling logic.\r\n\r\n### Changes:\r\n- Replaced the combination of `Optional.isEmpty()` and `Optional.get()` with a single call to `Optional.orElse(null)`, improving both readability and code clarity.\r\n- Removed unnecessary conditional checks and made the method more concise.\r\n- Maintained the existing functionality, ensuring that multi-level Optional usage is still not supported.\r\n\r\n### Impact:\r\nThis change will not affect the existing functionality of the system, but it simplifies the code and reduces the potential for errors when working with Optional objects. The performance improvement is marginal but contributes to better maintainability.\r\n\r\nPlease review and provide feedback!']",['closed'],[4],"['@sdeleuze \r\nCould it be that my PR was reflected? Am I a contributor?', 'Not sure what you mean by ""reflected"", but yes your PR has been merged, thanks for your contribution.', ""@sdeleuze Thank you for doing the PR merge. I will try to contribute more. If I'm a little disappointed in this PR, it's that I wasn't able to add my name to the class comment @author! Thanks again!"", ""@SungbinYang Your name can be added to a class if you add significant changes to it. I can see you've commented on the other PR asking if it was merged or not. It was. Please refrain from posting further comments like this as each triggers a notification to the thousands watching this repository.""]"
fcbe5fa73fd473827f73e516f9819510260d1116,spring-projects/spring-framework,spring-aop/src/main/java/org/springframework/aop/framework/CglibAopProxy.java,Condition_Change,"-						if (logger.isInfoEnabled() && implementsInterface(method, ifcs)) {
-							logger.info(""Unable to proxy interface-implementing method ["" + method + ""] because "" +
+						if (logger.isWarnEnabled() && implementsInterface(method, ifcs)) {
+							logger.warn(""Unable to proxy interface-implementing method ["" + method + ""] because "" +",4,condition,Log attempt at proxying final methods to WARN instead of INFO,"See gh-29773
",,29773,1,['Log `CglibAopProxy` errors as `WARN` instead of `INFO`'],['Closes gh-29453'],['closed'],[1],['@qpakzk thank you for making your first contribution to Spring Framework.']
fd18c00e50a048c5d357033e61d402f0b01002e8,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/support/TransactionSynchronizationManager.java,Add_Condition,"+		else if (synchs.size() == 1) {
+			return Collections.singletonList(synchs.iterator().next());
+		}",3,condition,Optimize for single TransactionSynchronization,"Optimize TransactionSynchronizationManager.getSynchronizations() to
avoid sorting and ArrayList creation in case of a single
TransactionSynchronization.

See gh-27335
",,27335,1,['Optimize for single TransactionSynchronization'],['Optimize TransactionSynchronizationManager.getSynchronizations() to\r\navoid sorting and ArrayList creation in case of a single\r\nTransactionSynchronization.'],['closed'],[2],"['Spring Batch registers a single `TransactionSynchronization` in `TaskletStep#doExecute(StepExecution)`. In certain extreme cases the `ArrayList` and `Object[]` creation can become noticeable. This PR optimizes the case of a single `TransactionSynchronization`, avoids the sorting and instead calls `Collections#singletonList(Object)`.\r\n\r\nBefore:\r\n\r\n![TransactionSynchronizationManager_getSynchronizations](https://user-images.githubusercontent.com/471021/131330452-bd8c9a7e-5f3a-430d-9c2b-a3d1ebdd54c5.png)\r\n\r\nAfter:\r\n\r\n![after-patch](https://user-images.githubusercontent.com/471021/131330537-ce1d3c6a-985f-46ea-9728-eafad358adb4.png)', 'Thank you for merging']"
fd69ee541e288687f04adb6446ac1b41a9bf415b,spring-projects/spring-framework,spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java,Add_Condition,"-			(ConnectionHolder) TransactionSynchronizationManager.getResource(this.dataSource);
+				(ConnectionHolder) TransactionSynchronizationManager.getResource(this.dataSource);
-			DataSourceUtils.releaseConnection(con, this.dataSource);
+			if (txObject.isNewConnectionHolder()) {
+				DataSourceUtils.releaseConnection(con, this.dataSource);
+				txObject.setConnectionHolder(null, false);
+			}",7,condition,DataSourceTransactionManager resets ConnectionHolder on doBegin failure,"Issue: SPR-12280
",,16885,1,['DataSourceTransactionManager closes JDBC connection on doBegin failure but leaves it attached to transaction object [SPR-12280]'],"['**[Simon Kitching](https://jira.spring.io/secure/ViewProfile.jspa?name=skitching)** opened **[SPR-12280](https://jira.spring.io/browse/SPR-12280?redirect=false)** and commented\n\nDataSourceTransactionManager.doBegin first allocates a connection from the datasource and stores it in the DataSourceTransactionObject. It then does some other work; if any of this other work throws an exception then that connection is released but is not removed from the DataSourceTransactionObject. The result is a misleading ""java.sql.SQLException: Connection is closed"" exception later.\n\nThis problem is present in current trunk code, and at least as far back as 3.0.7 (the version I\'m using):\n* https://github.com/spring-projects/spring-framework/blob/master/spring-jdbc/src/main/java/org/springframework/jdbc/datasource/DataSourceTransactionManager.java\n\nIn my particular case, this line in DataSourceTransactionManager.doBegin is throwing an exception:\nInteger previousIsolationLevel = DataSourceUtils.prepareConnectionForTransaction(con, definition);\nwhich causes the catch clause in the same method to run.\n\nOf course if I resolve the initial problem that causes prepareConnectionForTransaction to fail (""SET TRANSACTION must be first statement of transaction"" on oracle), then this issue will no longer occur. However the presence of misleading ""connection closed"" errors makes diagnosis of the real problem more difficult..\n\nThis problem seems similar to/related to the following existing issues:\n* #15381\n* #6783\n* [LDAP-179](https://jira.spring.io/browse/LDAP-179)\n\n---\n\n**Affects:** 3.2.11, 4.0.7, 4.1 GA\n\n**Issue Links:**\n- #15381 JDBC Connection is not released due to incorrectly defined catch\n\n**Backported to:** [4.0.8](https://github.com/spring-projects/spring-framework/milestone/120?closed=1), [3.2.12](https://github.com/spring-projects/spring-framework/milestone/100?closed=1)\n']",['closed'],[4],"['**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWhere do you get the ""java.sql.SQLException: Connection is closed"" exception from later on? The current code assumes that the newly built ConnectionHolder won\'t be used anymore after a doBegin failure, and I suppose that assumption is flawed... I\'m just wondering where exactly the ConnectionHolder is showing up again.\n\nJuergen\n', '**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nDataSourceTransactionManager resets the ConnectionHolder on doBegin failure now. This will be available in the upcoming 4.1.2 snapshot; please give it a try! This is also scheduled for a backport to 4.0.8 and 3.2.12.\n\nJuergen\n', '**[Simon Kitching](https://jira.spring.io/secure/ViewProfile.jspa?name=skitching)** commented\n\nThanks very much.\n\nThe case in which I encounter this is unusual: using a TransactionSynchronization.afterCompletion() callback to try to execute some SQL. If within this callback I don\'t call PlatformTransactionManager.getTransaction with a PROPAGATION_NEW, then the ""Connection is closed"" occurs. If I do try PROPAGATION_NEW, then a java.lang.IllegalStateException: No value for key [org.apache.ibatis.session.defaults.DefaultSqlSessionFactory@2b3efe3e] bound to thread occurs as the AbstractPlatformTransactionManager tries to suspend the current transaction.\n\nI know this is a weird case : trying to perform SQL from an ""afterCompletion"" callback at which point the current transaction context is partially but not completely destructed. However I have the requirement that if a particular transaction rolls back then some other rows must be inserted into the database (error status). Still working on how to get this functioning somehow :-(\n\nHowever it looks to me like the following would also have triggered this problem before your patch (not actually tried..):\n* start a NEW transaction\n* call a method which starts a SUPPORTS transaction (ie create a new transaction object that shares the existing SQL connection) which then fails somewhere in the middle of doBegin thus causing the SQL connection to be released.\n* in the caller, try to perform some SQL - isn\'t there then a valid transaction-object whose ConnectionHolder holds a closed connection?\n\n', ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nAligned with DataSourceTransactionManager, I've revised all of our transaction manager implementations for consistent cleanup after doBegin failure. Also, JmsTransactionManager explicitly closes the JMS Session in that case now, right before closing the JMS Connection.\n\nJuergen\n""]"
fdf88c9795269c3e551bc3202e6eaead8cfa3752,spring-projects/spring-framework,spring-messaging/src/main/java/org/springframework/messaging/tcp/reactor/ReactorNettyTcpConnection.java,Add_Condition,"+import io.netty.channel.ChannelPipeline;
+import reactor.ipc.netty.NettyPipeline;
+
+		// TODO: workaround for https://github.com/reactor/reactor-netty/issues/22
+		ChannelPipeline pipeline = this.inbound.context().channel().pipeline();
+		String name = NettyPipeline.OnChannelReadIdle;
+		if (pipeline.context(name) != null) {
+			pipeline.remove(name);
+		}
+",9,condition,Workaround for onReadIdle issue in Reactor TcpClient,"https://github.com/reactor/reactor-netty/issues/22
",,,0,N/A,N/A,N/A,N/A,N/A
fee63fdfb854c072ebfe23db1d7e949647320fd4,spring-projects/spring-framework,spring-jms/src/main/java/org/springframework/jms/listener/AbstractMessageListenerContainer.java,Condition_Change,"- * no redelivery in case of exception thrown.
+ * best-effort redelivery in case of exception thrown.
+
+
-		else {
+		else if (isClientAcknowledge(session)) {
-			else {
+			else if (isClientAcknowledge(session)) {",6,condition,Message listener containers only call Session.recover() in client acknowledge mode,"Issue: SPR-13056
",,17648,1,['ByteBuffer corrupted by ByteBufferConverter when passed through Spring [SPR-13056]'],"['**[Nathan Hull](https://jira.spring.io/secure/ViewProfile.jspa?name=lilnate)** opened **[SPR-13056](https://jira.spring.io/browse/SPR-13056?redirect=false)** and commented\n\nIt looks like spring-core 4.x has a bug in how it handles a ByteBuffer being sent on a Spring channel. It converts the ByteBuffer to a byte array, then takes the first element of that array, converts that to a byte array, and then wraps that byte array in a new ByteBuffer. As a result, when I pass a ByteBuffer on a Spring channel, I get a different ByteBuffer out and it only contains the first element, if the ByteBuffer had one or more elements remaining. Most of this happens in ByteBufferConverter.\n\n\n---\n\n**Attachments:**\n- [springBug-sources.jar](https://jira.spring.io/secure/attachment/22816/springBug-sources.jar) (_2.16 kB_)\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/792b7b9d114b4075c3bbe111ffdf056261c60562, https://github.com/spring-projects/spring-framework/commit/1177f5c0a30b94b42b3aed38eb9d2dcf380c0119, https://github.com/spring-projects/spring-framework/commit/008c9a3b459a5dfd14ae334f03099cbff848d7d9, https://github.com/spring-projects/spring-framework/commit/fee63fdfb854c072ebfe23db1d7e949647320fd4\n']",['closed'],[11],"[""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis doesn't seem to be a bug in `ByteBufferConverter` itself since a regular conversion attempt from `ByteBuffer` to `ByteBuffer` works fine, delivering a fresh copy of that buffer.\n\nI assume you're experiencing this issue through Spring Integration? If so, I'd suggest raising it with those guys on their JIRA, since the extraction of a single element probably happens somewhere in the specific conversion handling. If the root of the problem turns out to be in the core `ConversionService`, let me know and I'll revisit it here. However, please provide a test case for it at that point.\n\nJuergen\n"", ""**[Nathan Hull](https://jira.spring.io/secure/ViewProfile.jspa?name=lilnate)** commented\n\nI just attached sources for a dummy project that demonstrates the bug. All it does is send a ByteBuffer via a gateway to a service activator. I don't know how to tell if it's a problem in core or integration.\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've moved this over to Spring Integration since that's the better starting point for an analysis here...\n\nJuergen\n"", ""**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** commented\n\n[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller), I've just done this test:\n\n```java\npublic class Int3720Tests {\n\n\t@Test\n\tpublic void testIt() {\n\t\tTypeDescriptor typeDescriptor = TypeDescriptor.valueOf(ByteBuffer.class);\n\n\t\tByteBuffer byteBuffer = ByteBuffer.allocate(2);\n\t\tbyteBuffer.put((byte) 1);\n\t\tbyteBuffer.put((byte) 2);\n\n\t\tbyteBuffer.rewind();\n\n\t\tConfigurableApplicationContext context = new AnnotationConfigApplicationContext(Context.class);\n\t\tConversionService conversionService = context.getBean(ConversionService.class);\n\t\tObject result = conversionService.convert(byteBuffer, typeDescriptor, typeDescriptor);\n\n\t\tassertEquals(byteBuffer, result);\n\n\t\tbyteBuffer.rewind();\n\n\t\tConfigurableApplicationContext intContext = new AnnotationConfigApplicationContext(IntegrationContext.class);\n\t\tConversionService intConversionService = intContext.getBean(ConversionService.class);\n\t\tresult = intConversionService.convert(byteBuffer, typeDescriptor, typeDescriptor);\n\n\t\tassertEquals(byteBuffer, result);\n\n\t\tcontext.close();\n\t\tintContext.close();\n\t}\n\n\t@Configuration\n\t@EnableIntegration\n\tpublic static class IntegrationContext {\n\n\t}\n\n\t@Configuration\n\tpublic static class Context {\n\n\t\t@Bean\n\t\tpublic FactoryBean<ConversionService> conversionService() {\n\t\t\treturn new ConversionServiceFactoryBean();\n\t\t}\n\n\t}\n\n}\n```\n\nAnd it really shows me that `ByteBufferConverter` doesn't convert properly `ByteBuffer` to `ByteBuffer`.\nWe fail here on the raw `@Configuration` without Spring Integration.\n\nFrom my perspective we must not even try to convert if the `target` is `ByteBuffer`.\n\nWould you mind sharing your test-case to take a look ?\n\nThanks!\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\n[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan), I was just using this one:\n\n```\n@Test\npublic void byteBufferToByteBuffer() throws Exception {\n     byte[] bytes = new byte[] { 1, 2, 3 };\n     ByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n     ByteBuffer convert = this.conversionService.convert(byteBuffer, ByteBuffer.class);\n     assertThat(convert, not(sameInstance(byteBuffer.rewind())));\n     assertThat(convert, equalTo(byteBuffer.rewind()));\n}\n```\n\nLooking at your test case, you seem to reuse the original `ByteBuffer` instance? That might be the root of the problem here: It's a stateful buffer object after all, with all that `rewind()` business, it's even somewhat odd to write a test case for it. So if there is an easy improvement that we can make to `ByteBufferConverter` itself for such scenarios, I'm up for that. However, generally speaking, you shouldn't pass a previously consumed buffer/stream/etc to the `ConversionService` again. I'd suggest to either create fresh a `ByteBuffer` instance every time or to specifically skip the `ConversionService` invocation for such reuse scenarios.\n"", ""**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** commented\n\nThank you, Juergen, but doesn't work even like this:\n\n```java\n\tbyte[] bytes = new byte[] { 1, 2, 3 };\n\n\tByteBuffer byteBuffer = ByteBuffer.wrap(bytes);\n\n\tConfigurableApplicationContext context = new AnnotationConfigApplicationContext(Context.class);\n\tConversionService conversionService = context.getBean(ConversionService.class);\n\tByteBuffer result = conversionService.convert(byteBuffer, ByteBuffer.class);\n\n\tassertThat(result, equalTo(ByteBuffer.wrap(bytes)));\n```\n\n```\njava.lang.AssertionError: \nExpected: <java.nio.HeapByteBuffer[pos=0 lim=3 cap=3]>\n     but: was <java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]>\n```\n\nWe can't bypass `ConversionService`, becuase SI POJO method invocation is based on SpEL, which uses `ConversionService` for method arguments from `Message` and its `payload`.\nIn this case our `Message` has `payload` as a `ByteBuffer` and the method param is `ByteBuffer`, too. So, or we should bypass conversion `ByteBuffer -> ByteBuffer`, or should copy it to a new one, as you said that we shouldn't reuse a consumed already.\nBut I don't see that it works properly in the `ByteBufferConverter`...\n\nI am on the SF-4.2.0.BULD-SNAPSHOT.\n\nCome back to you later, when I fix some my own issue and prepare a raw test-case just for `ByteBufferConverter`.\n\nThank you for your time anyway!\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nI've found the key difference in the tests: Our `ByteBufferConverterTests` use a `GenericConversionService` with just `ByteBufferConverter` registered. When running them against a full `DefaultConversionService`, two of the existing tests fail, so it's probably some other default converter (the array converter possibly?) interfering.\n\nI'll have a look at the `DefaultConversionService` scenario ASAP. Moving this issue back to the Spring Framework project for that reason.\n\nJuergen\n"", ""**[Nathan Hull](https://jira.spring.io/secure/ViewProfile.jspa?name=lilnate)** commented\n\nThe logic around the call to `ByteBufferConverter#convertFromByteBuffer()` looks suspect: the preceding logic (`ByteBufferConverter#convert()`) determines that a HeapByteBuffer is assignable to a ByteBuffer, but then it calls `ByteBufferConverter#convertFromByteBuffer()`, which creates a new ByteBuffer. Why not return the original HeapByteBuffer since it's assignable to ByteBuffer?\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nWe intentionally create an independent copy of the `ByteBuffer` there, since each buffer can have its own position state then. But point taken, an explicit code path that duplicates the `ByteBuffer` doesn't hurt, so I've added that now.\n\nGenerally speaking, the root of the problem was that `ByteBufferConverter` didn't explicitly declare `ByteBuffer`->`byte[]` and vice versa as convertible pairs. This allows for other converters, such as the array-to-element converter, to kick in. I've added explicit declarations for `byte[]` next to the general `Object` convertible declarations now, which is sufficient to solve this problem. The explicit duplication code path above is just an optimization.\n\nJuergen\n"", ""**[Juergen Hoeller](https://jira.spring.io/secure/ViewProfile.jspa?name=juergen.hoeller)** commented\n\nThis is now in master and will be available in the upcoming `4.2.0.BUILD-SNAPSHOT`. I'll backport it to 4.1.7 later today.\n\nJuergen\n"", '**[Artem Bilan](https://jira.spring.io/secure/ViewProfile.jspa?name=abilan)** commented\n\nThanks, Juergen!\n\nWorks well now.\n']"
ff8655846d9c6903f16730efc1650a4ae55866b9,spring-projects/spring-framework,spring-tx/src/main/java/org/springframework/transaction/interceptor/TransactionAspectSupport.java,Condition_Change,"- * Copyright 2002-2013 the original author or authors.
+ * Copyright 2002-2014 the original author or authors.
-		if (info == null) {
+		if (info == null || info.transactionStatus == null) {
-		return currentTransactionInfo().transactionStatus;
+		return info.transactionStatus;",4,condition,TransactionAspectSupport.currentTransactionStatus() reliably throws NoTransactionException,"Issue: SPR-9144
",,13783,1,"[""TransactionAspectSupport.currentTransactionStatus() can return null when from the exception signature we'd expect a NoTransactionException [SPR-9144]""]","[""**[David Boden](https://jira.spring.io/secure/ViewProfile.jspa?name=daveboden)** opened **[SPR-9144](https://jira.spring.io/browse/SPR-9144?redirect=false)** and commented\n\nAffects version 3.1.0.RELEASE. I haven't tested 3.1.1.RELEASE but assume it still exists there.\n\nThe behaviour I'm seeing is that TransactionStatus.currentTransactionStatus() calls currentTransactionInfo() and gets a valid object.\n\nHowever, it then returns the .transactionStatus attributes from that object. In this case the attribute is null. This null is returned and opens up the potential for an unexpected NullPointerException.\n\n\n---\n\n**Affects:** 3.1 GA\n\n**Referenced from:** commits https://github.com/spring-projects/spring-framework/commit/ff8655846d9c6903f16730efc1650a4ae55866b9\n""]",['closed'],[0],[]
